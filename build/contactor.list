
contactor.elf:     file format elf32-littlearm


Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009b8 	.word	0x200009b8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e420 	.word	0x0800e420

08000134 <frame_dummy>:
 8000134:	4b08      	ldr	r3, [pc, #32]	; (8000158 <frame_dummy+0x24>)
 8000136:	b510      	push	{r4, lr}
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4908      	ldr	r1, [pc, #32]	; (800015c <frame_dummy+0x28>)
 800013c:	4808      	ldr	r0, [pc, #32]	; (8000160 <frame_dummy+0x2c>)
 800013e:	f3af 8000 	nop.w
 8000142:	4808      	ldr	r0, [pc, #32]	; (8000164 <frame_dummy+0x30>)
 8000144:	6803      	ldr	r3, [r0, #0]
 8000146:	b903      	cbnz	r3, 800014a <frame_dummy+0x16>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	4b07      	ldr	r3, [pc, #28]	; (8000168 <frame_dummy+0x34>)
 800014c:	2b00      	cmp	r3, #0
 800014e:	d0fb      	beq.n	8000148 <frame_dummy+0x14>
 8000150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000154:	4718      	bx	r3
 8000156:	bf00      	nop
 8000158:	00000000 	.word	0x00000000
 800015c:	200009bc 	.word	0x200009bc
 8000160:	0800e420 	.word	0x0800e420
 8000164:	200009b8 	.word	0x200009b8
 8000168:	00000000 	.word	0x00000000

0800016c <memcpy>:
 800016c:	4684      	mov	ip, r0
 800016e:	ea41 0300 	orr.w	r3, r1, r0
 8000172:	f013 0303 	ands.w	r3, r3, #3
 8000176:	d149      	bne.n	800020c <memcpy+0xa0>
 8000178:	3a40      	subs	r2, #64	; 0x40
 800017a:	d323      	bcc.n	80001c4 <memcpy+0x58>
 800017c:	680b      	ldr	r3, [r1, #0]
 800017e:	6003      	str	r3, [r0, #0]
 8000180:	684b      	ldr	r3, [r1, #4]
 8000182:	6043      	str	r3, [r0, #4]
 8000184:	688b      	ldr	r3, [r1, #8]
 8000186:	6083      	str	r3, [r0, #8]
 8000188:	68cb      	ldr	r3, [r1, #12]
 800018a:	60c3      	str	r3, [r0, #12]
 800018c:	690b      	ldr	r3, [r1, #16]
 800018e:	6103      	str	r3, [r0, #16]
 8000190:	694b      	ldr	r3, [r1, #20]
 8000192:	6143      	str	r3, [r0, #20]
 8000194:	698b      	ldr	r3, [r1, #24]
 8000196:	6183      	str	r3, [r0, #24]
 8000198:	69cb      	ldr	r3, [r1, #28]
 800019a:	61c3      	str	r3, [r0, #28]
 800019c:	6a0b      	ldr	r3, [r1, #32]
 800019e:	6203      	str	r3, [r0, #32]
 80001a0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80001a2:	6243      	str	r3, [r0, #36]	; 0x24
 80001a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80001a6:	6283      	str	r3, [r0, #40]	; 0x28
 80001a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80001aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80001ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80001ae:	6303      	str	r3, [r0, #48]	; 0x30
 80001b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80001b2:	6343      	str	r3, [r0, #52]	; 0x34
 80001b4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80001b6:	6383      	str	r3, [r0, #56]	; 0x38
 80001b8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80001ba:	63c3      	str	r3, [r0, #60]	; 0x3c
 80001bc:	3040      	adds	r0, #64	; 0x40
 80001be:	3140      	adds	r1, #64	; 0x40
 80001c0:	3a40      	subs	r2, #64	; 0x40
 80001c2:	d2db      	bcs.n	800017c <memcpy+0x10>
 80001c4:	3230      	adds	r2, #48	; 0x30
 80001c6:	d30b      	bcc.n	80001e0 <memcpy+0x74>
 80001c8:	680b      	ldr	r3, [r1, #0]
 80001ca:	6003      	str	r3, [r0, #0]
 80001cc:	684b      	ldr	r3, [r1, #4]
 80001ce:	6043      	str	r3, [r0, #4]
 80001d0:	688b      	ldr	r3, [r1, #8]
 80001d2:	6083      	str	r3, [r0, #8]
 80001d4:	68cb      	ldr	r3, [r1, #12]
 80001d6:	60c3      	str	r3, [r0, #12]
 80001d8:	3010      	adds	r0, #16
 80001da:	3110      	adds	r1, #16
 80001dc:	3a10      	subs	r2, #16
 80001de:	d2f3      	bcs.n	80001c8 <memcpy+0x5c>
 80001e0:	320c      	adds	r2, #12
 80001e2:	d305      	bcc.n	80001f0 <memcpy+0x84>
 80001e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e8:	f840 3b04 	str.w	r3, [r0], #4
 80001ec:	3a04      	subs	r2, #4
 80001ee:	d2f9      	bcs.n	80001e4 <memcpy+0x78>
 80001f0:	3204      	adds	r2, #4
 80001f2:	d008      	beq.n	8000206 <memcpy+0x9a>
 80001f4:	07d2      	lsls	r2, r2, #31
 80001f6:	bf1c      	itt	ne
 80001f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80001fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000200:	d301      	bcc.n	8000206 <memcpy+0x9a>
 8000202:	880b      	ldrh	r3, [r1, #0]
 8000204:	8003      	strh	r3, [r0, #0]
 8000206:	4660      	mov	r0, ip
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2a08      	cmp	r2, #8
 800020e:	d313      	bcc.n	8000238 <memcpy+0xcc>
 8000210:	078b      	lsls	r3, r1, #30
 8000212:	d0b1      	beq.n	8000178 <memcpy+0xc>
 8000214:	f010 0303 	ands.w	r3, r0, #3
 8000218:	d0ae      	beq.n	8000178 <memcpy+0xc>
 800021a:	f1c3 0304 	rsb	r3, r3, #4
 800021e:	1ad2      	subs	r2, r2, r3
 8000220:	07db      	lsls	r3, r3, #31
 8000222:	bf1c      	itt	ne
 8000224:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000228:	f800 3b01 	strbne.w	r3, [r0], #1
 800022c:	d3a4      	bcc.n	8000178 <memcpy+0xc>
 800022e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000232:	f820 3b02 	strh.w	r3, [r0], #2
 8000236:	e79f      	b.n	8000178 <memcpy+0xc>
 8000238:	3a04      	subs	r2, #4
 800023a:	d3d9      	bcc.n	80001f0 <memcpy+0x84>
 800023c:	3a01      	subs	r2, #1
 800023e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000242:	f800 3b01 	strb.w	r3, [r0], #1
 8000246:	d2f9      	bcs.n	800023c <memcpy+0xd0>
 8000248:	780b      	ldrb	r3, [r1, #0]
 800024a:	7003      	strb	r3, [r0, #0]
 800024c:	784b      	ldrb	r3, [r1, #1]
 800024e:	7043      	strb	r3, [r0, #1]
 8000250:	788b      	ldrb	r3, [r1, #2]
 8000252:	7083      	strb	r3, [r0, #2]
 8000254:	4660      	mov	r0, ip
 8000256:	4770      	bx	lr

08000258 <__aeabi_drsub>:
 8000258:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800025c:	e002      	b.n	8000264 <__adddf3>
 800025e:	bf00      	nop

08000260 <__aeabi_dsub>:
 8000260:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000264 <__adddf3>:
 8000264:	b530      	push	{r4, r5, lr}
 8000266:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800026a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026e:	ea94 0f05 	teq	r4, r5
 8000272:	bf08      	it	eq
 8000274:	ea90 0f02 	teqeq	r0, r2
 8000278:	bf1f      	itttt	ne
 800027a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000282:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000286:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800028a:	f000 80e2 	beq.w	8000452 <__adddf3+0x1ee>
 800028e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000292:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000296:	bfb8      	it	lt
 8000298:	426d      	neglt	r5, r5
 800029a:	dd0c      	ble.n	80002b6 <__adddf3+0x52>
 800029c:	442c      	add	r4, r5
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	ea82 0000 	eor.w	r0, r2, r0
 80002aa:	ea83 0101 	eor.w	r1, r3, r1
 80002ae:	ea80 0202 	eor.w	r2, r0, r2
 80002b2:	ea81 0303 	eor.w	r3, r1, r3
 80002b6:	2d36      	cmp	r5, #54	; 0x36
 80002b8:	bf88      	it	hi
 80002ba:	bd30      	pophi	{r4, r5, pc}
 80002bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x70>
 80002ce:	4240      	negs	r0, r0
 80002d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e0:	d002      	beq.n	80002e8 <__adddf3+0x84>
 80002e2:	4252      	negs	r2, r2
 80002e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e8:	ea94 0f05 	teq	r4, r5
 80002ec:	f000 80a7 	beq.w	800043e <__adddf3+0x1da>
 80002f0:	f1a4 0401 	sub.w	r4, r4, #1
 80002f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f8:	db0d      	blt.n	8000316 <__adddf3+0xb2>
 80002fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000302:	1880      	adds	r0, r0, r2
 8000304:	f141 0100 	adc.w	r1, r1, #0
 8000308:	fa03 f20e 	lsl.w	r2, r3, lr
 800030c:	1880      	adds	r0, r0, r2
 800030e:	fa43 f305 	asr.w	r3, r3, r5
 8000312:	4159      	adcs	r1, r3
 8000314:	e00e      	b.n	8000334 <__adddf3+0xd0>
 8000316:	f1a5 0520 	sub.w	r5, r5, #32
 800031a:	f10e 0e20 	add.w	lr, lr, #32
 800031e:	2a01      	cmp	r2, #1
 8000320:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000324:	bf28      	it	cs
 8000326:	f04c 0c02 	orrcs.w	ip, ip, #2
 800032a:	fa43 f305 	asr.w	r3, r3, r5
 800032e:	18c0      	adds	r0, r0, r3
 8000330:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000338:	d507      	bpl.n	800034a <__adddf3+0xe6>
 800033a:	f04f 0e00 	mov.w	lr, #0
 800033e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000342:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000346:	eb6e 0101 	sbc.w	r1, lr, r1
 800034a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034e:	d31b      	bcc.n	8000388 <__adddf3+0x124>
 8000350:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000354:	d30c      	bcc.n	8000370 <__adddf3+0x10c>
 8000356:	0849      	lsrs	r1, r1, #1
 8000358:	ea5f 0030 	movs.w	r0, r0, rrx
 800035c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000360:	f104 0401 	add.w	r4, r4, #1
 8000364:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000368:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800036c:	f080 809a 	bcs.w	80004a4 <__adddf3+0x240>
 8000370:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	ea41 0105 	orr.w	r1, r1, r5
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800038c:	4140      	adcs	r0, r0
 800038e:	eb41 0101 	adc.w	r1, r1, r1
 8000392:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000396:	f1a4 0401 	sub.w	r4, r4, #1
 800039a:	d1e9      	bne.n	8000370 <__adddf3+0x10c>
 800039c:	f091 0f00 	teq	r1, #0
 80003a0:	bf04      	itt	eq
 80003a2:	4601      	moveq	r1, r0
 80003a4:	2000      	moveq	r0, #0
 80003a6:	fab1 f381 	clz	r3, r1
 80003aa:	bf08      	it	eq
 80003ac:	3320      	addeq	r3, #32
 80003ae:	f1a3 030b 	sub.w	r3, r3, #11
 80003b2:	f1b3 0220 	subs.w	r2, r3, #32
 80003b6:	da0c      	bge.n	80003d2 <__adddf3+0x16e>
 80003b8:	320c      	adds	r2, #12
 80003ba:	dd08      	ble.n	80003ce <__adddf3+0x16a>
 80003bc:	f102 0c14 	add.w	ip, r2, #20
 80003c0:	f1c2 020c 	rsb	r2, r2, #12
 80003c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c8:	fa21 f102 	lsr.w	r1, r1, r2
 80003cc:	e00c      	b.n	80003e8 <__adddf3+0x184>
 80003ce:	f102 0214 	add.w	r2, r2, #20
 80003d2:	bfd8      	it	le
 80003d4:	f1c2 0c20 	rsble	ip, r2, #32
 80003d8:	fa01 f102 	lsl.w	r1, r1, r2
 80003dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e0:	bfdc      	itt	le
 80003e2:	ea41 010c 	orrle.w	r1, r1, ip
 80003e6:	4090      	lslle	r0, r2
 80003e8:	1ae4      	subs	r4, r4, r3
 80003ea:	bfa2      	ittt	ge
 80003ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f0:	4329      	orrge	r1, r5
 80003f2:	bd30      	popge	{r4, r5, pc}
 80003f4:	ea6f 0404 	mvn.w	r4, r4
 80003f8:	3c1f      	subs	r4, #31
 80003fa:	da1c      	bge.n	8000436 <__adddf3+0x1d2>
 80003fc:	340c      	adds	r4, #12
 80003fe:	dc0e      	bgt.n	800041e <__adddf3+0x1ba>
 8000400:	f104 0414 	add.w	r4, r4, #20
 8000404:	f1c4 0220 	rsb	r2, r4, #32
 8000408:	fa20 f004 	lsr.w	r0, r0, r4
 800040c:	fa01 f302 	lsl.w	r3, r1, r2
 8000410:	ea40 0003 	orr.w	r0, r0, r3
 8000414:	fa21 f304 	lsr.w	r3, r1, r4
 8000418:	ea45 0103 	orr.w	r1, r5, r3
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f1c4 040c 	rsb	r4, r4, #12
 8000422:	f1c4 0220 	rsb	r2, r4, #32
 8000426:	fa20 f002 	lsr.w	r0, r0, r2
 800042a:	fa01 f304 	lsl.w	r3, r1, r4
 800042e:	ea40 0003 	orr.w	r0, r0, r3
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	fa21 f004 	lsr.w	r0, r1, r4
 800043a:	4629      	mov	r1, r5
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f094 0f00 	teq	r4, #0
 8000442:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000446:	bf06      	itte	eq
 8000448:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800044c:	3401      	addeq	r4, #1
 800044e:	3d01      	subne	r5, #1
 8000450:	e74e      	b.n	80002f0 <__adddf3+0x8c>
 8000452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000456:	bf18      	it	ne
 8000458:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045c:	d029      	beq.n	80004b2 <__adddf3+0x24e>
 800045e:	ea94 0f05 	teq	r4, r5
 8000462:	bf08      	it	eq
 8000464:	ea90 0f02 	teqeq	r0, r2
 8000468:	d005      	beq.n	8000476 <__adddf3+0x212>
 800046a:	ea54 0c00 	orrs.w	ip, r4, r0
 800046e:	bf04      	itt	eq
 8000470:	4619      	moveq	r1, r3
 8000472:	4610      	moveq	r0, r2
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	ea91 0f03 	teq	r1, r3
 800047a:	bf1e      	ittt	ne
 800047c:	2100      	movne	r1, #0
 800047e:	2000      	movne	r0, #0
 8000480:	bd30      	popne	{r4, r5, pc}
 8000482:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000486:	d105      	bne.n	8000494 <__adddf3+0x230>
 8000488:	0040      	lsls	r0, r0, #1
 800048a:	4149      	adcs	r1, r1
 800048c:	bf28      	it	cs
 800048e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000492:	bd30      	pop	{r4, r5, pc}
 8000494:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000498:	bf3c      	itt	cc
 800049a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049e:	bd30      	popcc	{r4, r5, pc}
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004ac:	f04f 0000 	mov.w	r0, #0
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf1a      	itte	ne
 80004b8:	4619      	movne	r1, r3
 80004ba:	4610      	movne	r0, r2
 80004bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c0:	bf1c      	itt	ne
 80004c2:	460b      	movne	r3, r1
 80004c4:	4602      	movne	r2, r0
 80004c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ca:	bf06      	itte	eq
 80004cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d0:	ea91 0f03 	teqeq	r1, r3
 80004d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	bf00      	nop

080004dc <__aeabi_ui2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f04f 0500 	mov.w	r5, #0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e750      	b.n	800039c <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_i2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000514:	bf48      	it	mi
 8000516:	4240      	negmi	r0, r0
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	e73e      	b.n	800039c <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_f2d>:
 8000520:	0042      	lsls	r2, r0, #1
 8000522:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000526:	ea4f 0131 	mov.w	r1, r1, rrx
 800052a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052e:	bf1f      	itttt	ne
 8000530:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000534:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000538:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800053c:	4770      	bxne	lr
 800053e:	f092 0f00 	teq	r2, #0
 8000542:	bf14      	ite	ne
 8000544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e720      	b.n	800039c <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aedc 	beq.w	800034a <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6c1      	b.n	800034a <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	; 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d14:	f1a2 0201 	sub.w	r2, r2, #1
 8000d18:	d1ed      	bne.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b982 	b.w	8001190 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ea8:	468c      	mov	ip, r1
 8000eaa:	460c      	mov	r4, r1
 8000eac:	4605      	mov	r5, r0
 8000eae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d14f      	bne.n	8000f54 <__udivmoddi4+0xb0>
 8000eb4:	428a      	cmp	r2, r1
 8000eb6:	4617      	mov	r7, r2
 8000eb8:	d96b      	bls.n	8000f92 <__udivmoddi4+0xee>
 8000eba:	fab2 fe82 	clz	lr, r2
 8000ebe:	f1be 0f00 	cmp.w	lr, #0
 8000ec2:	d00b      	beq.n	8000edc <__udivmoddi4+0x38>
 8000ec4:	f1ce 0520 	rsb	r5, lr, #32
 8000ec8:	fa20 f505 	lsr.w	r5, r0, r5
 8000ecc:	fa01 f30e 	lsl.w	r3, r1, lr
 8000ed0:	ea45 0c03 	orr.w	ip, r5, r3
 8000ed4:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ed8:	fa00 f50e 	lsl.w	r5, r0, lr
 8000edc:	0c39      	lsrs	r1, r7, #16
 8000ede:	fbbc f0f1 	udiv	r0, ip, r1
 8000ee2:	b2ba      	uxth	r2, r7
 8000ee4:	fb01 c310 	mls	r3, r1, r0, ip
 8000ee8:	fb00 f802 	mul.w	r8, r0, r2
 8000eec:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000ef0:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8000ef4:	45a0      	cmp	r8, r4
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x68>
 8000ef8:	19e4      	adds	r4, r4, r7
 8000efa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000efe:	f080 8128 	bcs.w	8001152 <__udivmoddi4+0x2ae>
 8000f02:	45a0      	cmp	r8, r4
 8000f04:	f240 8125 	bls.w	8001152 <__udivmoddi4+0x2ae>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	ebc8 0404 	rsb	r4, r8, r4
 8000f10:	fbb4 f3f1 	udiv	r3, r4, r1
 8000f14:	fb01 4c13 	mls	ip, r1, r3, r4
 8000f18:	fb03 f202 	mul.w	r2, r3, r2
 8000f1c:	b2ac      	uxth	r4, r5
 8000f1e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8000f22:	428a      	cmp	r2, r1
 8000f24:	d909      	bls.n	8000f3a <__udivmoddi4+0x96>
 8000f26:	19c9      	adds	r1, r1, r7
 8000f28:	f103 34ff 	add.w	r4, r3, #4294967295
 8000f2c:	f080 810f 	bcs.w	800114e <__udivmoddi4+0x2aa>
 8000f30:	428a      	cmp	r2, r1
 8000f32:	f240 810c 	bls.w	800114e <__udivmoddi4+0x2aa>
 8000f36:	3b02      	subs	r3, #2
 8000f38:	4439      	add	r1, r7
 8000f3a:	1a8a      	subs	r2, r1, r2
 8000f3c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f40:	2100      	movs	r1, #0
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	d063      	beq.n	800100e <__udivmoddi4+0x16a>
 8000f46:	fa22 f20e 	lsr.w	r2, r2, lr
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e886 000c 	stmia.w	r6, {r2, r3}
 8000f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f54:	428b      	cmp	r3, r1
 8000f56:	d907      	bls.n	8000f68 <__udivmoddi4+0xc4>
 8000f58:	2e00      	cmp	r6, #0
 8000f5a:	d056      	beq.n	800100a <__udivmoddi4+0x166>
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e886 0011 	stmia.w	r6, {r0, r4}
 8000f62:	4608      	mov	r0, r1
 8000f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f68:	fab3 f183 	clz	r1, r3
 8000f6c:	2900      	cmp	r1, #0
 8000f6e:	f040 8093 	bne.w	8001098 <__udivmoddi4+0x1f4>
 8000f72:	42a3      	cmp	r3, r4
 8000f74:	d302      	bcc.n	8000f7c <__udivmoddi4+0xd8>
 8000f76:	4282      	cmp	r2, r0
 8000f78:	f200 80fe 	bhi.w	8001178 <__udivmoddi4+0x2d4>
 8000f7c:	1a85      	subs	r5, r0, r2
 8000f7e:	eb64 0303 	sbc.w	r3, r4, r3
 8000f82:	469c      	mov	ip, r3
 8000f84:	2001      	movs	r0, #1
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	d041      	beq.n	800100e <__udivmoddi4+0x16a>
 8000f8a:	e886 1020 	stmia.w	r6, {r5, ip}
 8000f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f92:	b912      	cbnz	r2, 8000f9a <__udivmoddi4+0xf6>
 8000f94:	2701      	movs	r7, #1
 8000f96:	fbb7 f7f2 	udiv	r7, r7, r2
 8000f9a:	fab7 fe87 	clz	lr, r7
 8000f9e:	f1be 0f00 	cmp.w	lr, #0
 8000fa2:	d136      	bne.n	8001012 <__udivmoddi4+0x16e>
 8000fa4:	1be4      	subs	r4, r4, r7
 8000fa6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000faa:	fa1f f987 	uxth.w	r9, r7
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fbb4 f3f8 	udiv	r3, r4, r8
 8000fb4:	fb08 4413 	mls	r4, r8, r3, r4
 8000fb8:	fb09 f203 	mul.w	r2, r9, r3
 8000fbc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000fc0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8000fc4:	42a2      	cmp	r2, r4
 8000fc6:	d907      	bls.n	8000fd8 <__udivmoddi4+0x134>
 8000fc8:	19e4      	adds	r4, r4, r7
 8000fca:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fce:	d202      	bcs.n	8000fd6 <__udivmoddi4+0x132>
 8000fd0:	42a2      	cmp	r2, r4
 8000fd2:	f200 80d3 	bhi.w	800117c <__udivmoddi4+0x2d8>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	1aa4      	subs	r4, r4, r2
 8000fda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000fde:	fb08 4810 	mls	r8, r8, r0, r4
 8000fe2:	fb09 f900 	mul.w	r9, r9, r0
 8000fe6:	b2ac      	uxth	r4, r5
 8000fe8:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8000fec:	4591      	cmp	r9, r2
 8000fee:	d907      	bls.n	8001000 <__udivmoddi4+0x15c>
 8000ff0:	19d2      	adds	r2, r2, r7
 8000ff2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ff6:	d202      	bcs.n	8000ffe <__udivmoddi4+0x15a>
 8000ff8:	4591      	cmp	r9, r2
 8000ffa:	f200 80ba 	bhi.w	8001172 <__udivmoddi4+0x2ce>
 8000ffe:	4620      	mov	r0, r4
 8001000:	ebc9 0202 	rsb	r2, r9, r2
 8001004:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001008:	e79b      	b.n	8000f42 <__udivmoddi4+0x9e>
 800100a:	4631      	mov	r1, r6
 800100c:	4630      	mov	r0, r6
 800100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001012:	fa07 f70e 	lsl.w	r7, r7, lr
 8001016:	f1ce 0c20 	rsb	ip, lr, #32
 800101a:	fa24 f30c 	lsr.w	r3, r4, ip
 800101e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001022:	fbb3 faf8 	udiv	sl, r3, r8
 8001026:	fa1f f987 	uxth.w	r9, r7
 800102a:	fb08 351a 	mls	r5, r8, sl, r3
 800102e:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001032:	fa04 f40e 	lsl.w	r4, r4, lr
 8001036:	fb0a fb09 	mul.w	fp, sl, r9
 800103a:	ea4c 0c04 	orr.w	ip, ip, r4
 800103e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8001042:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8001046:	459b      	cmp	fp, r3
 8001048:	fa00 f50e 	lsl.w	r5, r0, lr
 800104c:	d90a      	bls.n	8001064 <__udivmoddi4+0x1c0>
 800104e:	19db      	adds	r3, r3, r7
 8001050:	f10a 32ff 	add.w	r2, sl, #4294967295
 8001054:	f080 808b 	bcs.w	800116e <__udivmoddi4+0x2ca>
 8001058:	459b      	cmp	fp, r3
 800105a:	f240 8088 	bls.w	800116e <__udivmoddi4+0x2ca>
 800105e:	f1aa 0a02 	sub.w	sl, sl, #2
 8001062:	443b      	add	r3, r7
 8001064:	ebcb 0303 	rsb	r3, fp, r3
 8001068:	fbb3 f0f8 	udiv	r0, r3, r8
 800106c:	fb08 3310 	mls	r3, r8, r0, r3
 8001070:	fb00 f409 	mul.w	r4, r0, r9
 8001074:	fa1f fc8c 	uxth.w	ip, ip
 8001078:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 800107c:	429c      	cmp	r4, r3
 800107e:	d907      	bls.n	8001090 <__udivmoddi4+0x1ec>
 8001080:	19db      	adds	r3, r3, r7
 8001082:	f100 32ff 	add.w	r2, r0, #4294967295
 8001086:	d26e      	bcs.n	8001166 <__udivmoddi4+0x2c2>
 8001088:	429c      	cmp	r4, r3
 800108a:	d96c      	bls.n	8001166 <__udivmoddi4+0x2c2>
 800108c:	3802      	subs	r0, #2
 800108e:	443b      	add	r3, r7
 8001090:	1b1c      	subs	r4, r3, r4
 8001092:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8001096:	e78b      	b.n	8000fb0 <__udivmoddi4+0x10c>
 8001098:	f1c1 0e20 	rsb	lr, r1, #32
 800109c:	408b      	lsls	r3, r1
 800109e:	fa22 fc0e 	lsr.w	ip, r2, lr
 80010a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80010a6:	fa24 f70e 	lsr.w	r7, r4, lr
 80010aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010ae:	fbb7 faf9 	udiv	sl, r7, r9
 80010b2:	fa1f f38c 	uxth.w	r3, ip
 80010b6:	fb09 771a 	mls	r7, r9, sl, r7
 80010ba:	fa20 f80e 	lsr.w	r8, r0, lr
 80010be:	408c      	lsls	r4, r1
 80010c0:	fb0a f503 	mul.w	r5, sl, r3
 80010c4:	ea48 0404 	orr.w	r4, r8, r4
 80010c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80010cc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80010d0:	42bd      	cmp	r5, r7
 80010d2:	fa02 f201 	lsl.w	r2, r2, r1
 80010d6:	fa00 fb01 	lsl.w	fp, r0, r1
 80010da:	d909      	bls.n	80010f0 <__udivmoddi4+0x24c>
 80010dc:	eb17 070c 	adds.w	r7, r7, ip
 80010e0:	f10a 30ff 	add.w	r0, sl, #4294967295
 80010e4:	d241      	bcs.n	800116a <__udivmoddi4+0x2c6>
 80010e6:	42bd      	cmp	r5, r7
 80010e8:	d93f      	bls.n	800116a <__udivmoddi4+0x2c6>
 80010ea:	f1aa 0a02 	sub.w	sl, sl, #2
 80010ee:	4467      	add	r7, ip
 80010f0:	1b7f      	subs	r7, r7, r5
 80010f2:	fbb7 f5f9 	udiv	r5, r7, r9
 80010f6:	fb09 7715 	mls	r7, r9, r5, r7
 80010fa:	fb05 f303 	mul.w	r3, r5, r3
 80010fe:	b2a4      	uxth	r4, r4
 8001100:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8001104:	42bb      	cmp	r3, r7
 8001106:	d908      	bls.n	800111a <__udivmoddi4+0x276>
 8001108:	eb17 070c 	adds.w	r7, r7, ip
 800110c:	f105 30ff 	add.w	r0, r5, #4294967295
 8001110:	d227      	bcs.n	8001162 <__udivmoddi4+0x2be>
 8001112:	42bb      	cmp	r3, r7
 8001114:	d925      	bls.n	8001162 <__udivmoddi4+0x2be>
 8001116:	3d02      	subs	r5, #2
 8001118:	4467      	add	r7, ip
 800111a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 800111e:	fba0 8902 	umull	r8, r9, r0, r2
 8001122:	1aff      	subs	r7, r7, r3
 8001124:	454f      	cmp	r7, r9
 8001126:	4645      	mov	r5, r8
 8001128:	464c      	mov	r4, r9
 800112a:	d314      	bcc.n	8001156 <__udivmoddi4+0x2b2>
 800112c:	d029      	beq.n	8001182 <__udivmoddi4+0x2de>
 800112e:	b366      	cbz	r6, 800118a <__udivmoddi4+0x2e6>
 8001130:	ebbb 0305 	subs.w	r3, fp, r5
 8001134:	eb67 0704 	sbc.w	r7, r7, r4
 8001138:	fa07 fe0e 	lsl.w	lr, r7, lr
 800113c:	40cb      	lsrs	r3, r1
 800113e:	40cf      	lsrs	r7, r1
 8001140:	ea4e 0303 	orr.w	r3, lr, r3
 8001144:	e886 0088 	stmia.w	r6, {r3, r7}
 8001148:	2100      	movs	r1, #0
 800114a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800114e:	4623      	mov	r3, r4
 8001150:	e6f3      	b.n	8000f3a <__udivmoddi4+0x96>
 8001152:	4618      	mov	r0, r3
 8001154:	e6da      	b.n	8000f0c <__udivmoddi4+0x68>
 8001156:	ebb8 0502 	subs.w	r5, r8, r2
 800115a:	eb69 040c 	sbc.w	r4, r9, ip
 800115e:	3801      	subs	r0, #1
 8001160:	e7e5      	b.n	800112e <__udivmoddi4+0x28a>
 8001162:	4605      	mov	r5, r0
 8001164:	e7d9      	b.n	800111a <__udivmoddi4+0x276>
 8001166:	4610      	mov	r0, r2
 8001168:	e792      	b.n	8001090 <__udivmoddi4+0x1ec>
 800116a:	4682      	mov	sl, r0
 800116c:	e7c0      	b.n	80010f0 <__udivmoddi4+0x24c>
 800116e:	4692      	mov	sl, r2
 8001170:	e778      	b.n	8001064 <__udivmoddi4+0x1c0>
 8001172:	3802      	subs	r0, #2
 8001174:	443a      	add	r2, r7
 8001176:	e743      	b.n	8001000 <__udivmoddi4+0x15c>
 8001178:	4608      	mov	r0, r1
 800117a:	e704      	b.n	8000f86 <__udivmoddi4+0xe2>
 800117c:	3b02      	subs	r3, #2
 800117e:	443c      	add	r4, r7
 8001180:	e72a      	b.n	8000fd8 <__udivmoddi4+0x134>
 8001182:	45c3      	cmp	fp, r8
 8001184:	d3e7      	bcc.n	8001156 <__udivmoddi4+0x2b2>
 8001186:	463c      	mov	r4, r7
 8001188:	e7d1      	b.n	800112e <__udivmoddi4+0x28a>
 800118a:	4631      	mov	r1, r6
 800118c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001190 <__aeabi_idiv0>:
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001198:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	2400      	movs	r4, #0
 800119c:	9404      	str	r4, [sp, #16]
 800119e:	9405      	str	r4, [sp, #20]
 80011a0:	9406      	str	r4, [sp, #24]
 80011a2:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_GPIO_Init+0xbc>)
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	f042 0210 	orr.w	r2, r2, #16
 80011ac:	619a      	str	r2, [r3, #24]
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	f002 0210 	and.w	r2, r2, #16
 80011b4:	9200      	str	r2, [sp, #0]
 80011b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b8:	699a      	ldr	r2, [r3, #24]
 80011ba:	f042 0220 	orr.w	r2, r2, #32
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	f002 0220 	and.w	r2, r2, #32
 80011c6:	9201      	str	r2, [sp, #4]
 80011c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	699a      	ldr	r2, [r3, #24]
 80011cc:	f042 0204 	orr.w	r2, r2, #4
 80011d0:	619a      	str	r2, [r3, #24]
 80011d2:	699a      	ldr	r2, [r3, #24]
 80011d4:	f002 0204 	and.w	r2, r2, #4
 80011d8:	9202      	str	r2, [sp, #8]
 80011da:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	699a      	ldr	r2, [r3, #24]
 80011de:	f042 0208 	orr.w	r2, r2, #8
 80011e2:	619a      	str	r2, [r3, #24]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	9303      	str	r3, [sp, #12]
 80011ec:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BP_green_LED_Pin|DMOC_FET_gate_driver_Pin, GPIO_PIN_RESET);
 80011ee:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800125c <MX_GPIO_Init+0xc8>
 80011f2:	4622      	mov	r2, r4
 80011f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011f8:	4640      	mov	r0, r8
 80011fa:	f002 fa2b 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(test_pin_GPIO_Port, test_pin_Pin, GPIO_PIN_RESET);
 80011fe:	4e15      	ldr	r6, [pc, #84]	; (8001254 <MX_GPIO_Init+0xc0>)
 8001200:	4622      	mov	r2, r4
 8001202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001206:	4630      	mov	r0, r6
 8001208:	f002 fa24 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BP_green_LED_Pin DMOC_FET_gate_driver_Pin */
  GPIO_InitStruct.Pin = BP_green_LED_Pin|DMOC_FET_gate_driver_Pin;
 800120c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001210:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2501      	movs	r5, #1
 8001214:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2702      	movs	r7, #2
 800121a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	a904      	add	r1, sp, #16
 800121e:	4640      	mov	r0, r8
 8001220:	f002 f924 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : aux__1_Pin hv_by_pass_Pin aux__2_Pin */
  GPIO_InitStruct.Pin = aux__1_Pin|hv_by_pass_Pin|aux__2_Pin;
 8001224:	232a      	movs	r3, #42	; 0x2a
 8001226:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	a904      	add	r1, sp, #16
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <MX_GPIO_Init+0xc4>)
 8001230:	f002 f91c 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : test_pin_Pin */
  GPIO_InitStruct.Pin = test_pin_Pin;
 8001234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001238:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(test_pin_GPIO_Port, &GPIO_InitStruct);
 8001240:	a904      	add	r1, sp, #16
 8001242:	4630      	mov	r0, r6
 8001244:	f002 f912 	bl	800346c <HAL_GPIO_Init>

}
 8001248:	b008      	add	sp, #32
 800124a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	40010c00 	.word	0x40010c00
 8001258:	40010800 	.word	0x40010800
 800125c:	40011000 	.word	0x40011000

08001260 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001260:	b500      	push	{lr}
 8001262:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_DMA_Init+0x50>)
 8001266:	695a      	ldr	r2, [r3, #20]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2105      	movs	r1, #5
 800127c:	200b      	movs	r0, #11
 800127e:	f002 fb7b 	bl	8003978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001282:	200b      	movs	r0, #11
 8001284:	f002 fbaa 	bl	80039dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2105      	movs	r1, #5
 800128c:	200e      	movs	r0, #14
 800128e:	f002 fb73 	bl	8003978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001292:	200e      	movs	r0, #14
 8001294:	f002 fba2 	bl	80039dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2105      	movs	r1, #5
 800129c:	200f      	movs	r0, #15
 800129e:	f002 fb6b 	bl	8003978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012a2:	200f      	movs	r0, #15
 80012a4:	f002 fb9a 	bl	80039dc <HAL_NVIC_EnableIRQ>

}
 80012a8:	b003      	add	sp, #12
 80012aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	00000000 	.word	0x00000000

080012b8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012bc:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN 5 */
	struct SERIALSENDTASKBCB* pbuf1 = getserialbuf(&huart1,96);
 80012be:	2160      	movs	r1, #96	; 0x60
 80012c0:	4897      	ldr	r0, [pc, #604]	; (8001520 <StartDefaultTask+0x268>)
 80012c2:	f006 fc2b 	bl	8007b1c <getserialbuf>
 80012c6:	9009      	str	r0, [sp, #36]	; 0x24
	if (pbuf1 == NULL) morse_trap(11);
 80012c8:	b910      	cbnz	r0, 80012d0 <StartDefaultTask+0x18>
 80012ca:	200b      	movs	r0, #11
 80012cc:	f006 feaa 	bl	8008024 <morse_trap>
double dt1;

extern struct CONTACTORFUNCTION contactorfunction;
struct CONTACTORFUNCTION* pcf = &contactorfunction;

osDelay(50); // Allow ADC task to get these initialized
 80012d0:	2032      	movs	r0, #50	; 0x32
 80012d2:	f005 fd1f 	bl	8006d14 <osDelay>

// Temperature precomputed ratio check
if (pcf->padc->intern.dx25 < 0.1) morse_trap(48);
 80012d6:	4b93      	ldr	r3, [pc, #588]	; (8001524 <StartDefaultTask+0x26c>)
 80012d8:	f8d3 10e8 	ldr.w	r1, [r3, #232]	; 0xe8
 80012dc:	f501 7194 	add.w	r1, r1, #296	; 0x128
 80012e0:	a38b      	add	r3, pc, #556	; (adr r3, 8001510 <StartDefaultTask+0x258>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ea:	f7ff fbdf 	bl	8000aac <__aeabi_dcmplt>
 80012ee:	b110      	cbz	r0, 80012f6 <StartDefaultTask+0x3e>
 80012f0:	2030      	movs	r0, #48	; 0x30
 80012f2:	f006 fe97 	bl	8008024 <morse_trap>

//double dxdvref = pcf->padc->intern.dvref * (1.0/4.3E-3);
if (pcf->padc->intern.dxdvref < 0.1) morse_trap(49);
 80012f6:	4b8b      	ldr	r3, [pc, #556]	; (8001524 <StartDefaultTask+0x26c>)
 80012f8:	f8d3 10e8 	ldr.w	r1, [r3, #232]	; 0xe8
 80012fc:	f501 7198 	add.w	r1, r1, #304	; 0x130
 8001300:	a383      	add	r3, pc, #524	; (adr r3, 8001510 <StartDefaultTask+0x258>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800130a:	f7ff fbcf 	bl	8000aac <__aeabi_dcmplt>
 800130e:	b110      	cbz	r0, 8001316 <StartDefaultTask+0x5e>
 8001310:	2031      	movs	r0, #49	; 0x31
 8001312:	f006 fe87 	bl	8008024 <morse_trap>

// DTW time duration checks
extern uint32_t adcdbg2;

extern uint32_t dbgCE1;
uint32_t dbgCE1_prev = dbgCE1;
 8001316:	4b84      	ldr	r3, [pc, #528]	; (8001528 <StartDefaultTask+0x270>)
 8001318:	f8d3 a000 	ldr.w	sl, [r3]

  /* USER CODE BEGIN 5 */
	struct SERIALSENDTASKBCB* pbuf1 = getserialbuf(&huart1,96);
	if (pbuf1 == NULL) morse_trap(11);

	int ctr = 0; // Running count
 800131c:	2400      	movs	r4, #0
#define LOOPDELAY 1000

  /* Infinite loop */
  for(;;)
  {
	osDelay(LOOPDELAY);
 800131e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001322:	f005 fcf7 	bl	8006d14 <osDelay>
//while( (dbggpsflag-dbggpsflag_prev) == 0);
//dbggpsflag_prev = dbggpsflag;

	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13); // LED Green
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4880      	ldr	r0, [pc, #512]	; (800152c <StartDefaultTask+0x274>)
 800132c:	f002 f998 	bl	8003660 <HAL_GPIO_TogglePin>

#define SHOWSTACKWATERMARK
#ifdef SHOWSTACKWATERMARK
			// Following takes 1370791 sysclock ticks 19.0 ms (includes serial port wait)
			/* Display the amount of unused stack space for tasks. */
			yprintf(&pbuf1,"\n\n\r#%4i Unused Task stack space--", ctr++);
 8001330:	f104 0b01 	add.w	fp, r4, #1
 8001334:	4622      	mov	r2, r4
 8001336:	497e      	ldr	r1, [pc, #504]	; (8001530 <StartDefaultTask+0x278>)
 8001338:	a809      	add	r0, sp, #36	; 0x24
 800133a:	f006 fc3f 	bl	8007bbc <yprintf>
			stackwatermark_show(defaultTaskHandle,&pbuf1,"defaultTask---");
 800133e:	4a7d      	ldr	r2, [pc, #500]	; (8001534 <StartDefaultTask+0x27c>)
 8001340:	a909      	add	r1, sp, #36	; 0x24
 8001342:	4b7d      	ldr	r3, [pc, #500]	; (8001538 <StartDefaultTask+0x280>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	f007 f9eb 	bl	8008720 <stackwatermark_show>
			stackwatermark_show(SerialTaskHandle ,&pbuf1,"SerialTaskSend");
 800134a:	4a7c      	ldr	r2, [pc, #496]	; (800153c <StartDefaultTask+0x284>)
 800134c:	a909      	add	r1, sp, #36	; 0x24
 800134e:	4b7c      	ldr	r3, [pc, #496]	; (8001540 <StartDefaultTask+0x288>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	f007 f9e5 	bl	8008720 <stackwatermark_show>
			stackwatermark_show(CanTxTaskHandle  ,&pbuf1,"CanTxTask-----");
 8001356:	4a7b      	ldr	r2, [pc, #492]	; (8001544 <StartDefaultTask+0x28c>)
 8001358:	a909      	add	r1, sp, #36	; 0x24
 800135a:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <StartDefaultTask+0x290>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	f007 f9df 	bl	8008720 <stackwatermark_show>
	//		stackwatermark_show(CanRxTaskHandle  ,&pbuf1,"CanRxTask-----");
			stackwatermark_show(MailboxTaskHandle,&pbuf1,"MailboxTask---");
 8001362:	4a7a      	ldr	r2, [pc, #488]	; (800154c <StartDefaultTask+0x294>)
 8001364:	a909      	add	r1, sp, #36	; 0x24
 8001366:	4b7a      	ldr	r3, [pc, #488]	; (8001550 <StartDefaultTask+0x298>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f007 f9d9 	bl	8008720 <stackwatermark_show>
			stackwatermark_show(ADCTaskHandle    ,&pbuf1,"ADCTask-------");
 800136e:	4a79      	ldr	r2, [pc, #484]	; (8001554 <StartDefaultTask+0x29c>)
 8001370:	a909      	add	r1, sp, #36	; 0x24
 8001372:	4b79      	ldr	r3, [pc, #484]	; (8001558 <StartDefaultTask+0x2a0>)
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	f007 f9d3 	bl	8008720 <stackwatermark_show>
 		 stackwatermark_show(ContactorTaskHandle,&pbuf1,"ContactorTask-");
 800137a:	4a78      	ldr	r2, [pc, #480]	; (800155c <StartDefaultTask+0x2a4>)
 800137c:	a909      	add	r1, sp, #36	; 0x24
 800137e:	4b78      	ldr	r3, [pc, #480]	; (8001560 <StartDefaultTask+0x2a8>)
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	f007 f9cd 	bl	8008720 <stackwatermark_show>
	stackwatermark_show(SerialTaskReceiveHandle,&pbuf1,"SerialReceiveTask");
 8001386:	4a77      	ldr	r2, [pc, #476]	; (8001564 <StartDefaultTask+0x2ac>)
 8001388:	a909      	add	r1, sp, #36	; 0x24
 800138a:	4b77      	ldr	r3, [pc, #476]	; (8001568 <StartDefaultTask+0x2b0>)
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	f007 f9c7 	bl	8008720 <stackwatermark_show>

			/* Heap usage (and test fp woking. */
  #define HEAPSIZELIST 
  #ifdef  HEAPSIZELIST
			heapsize = xPortGetFreeHeapSize();
 8001392:	f005 fe05 	bl	8006fa0 <xPortGetFreeHeapSize>
 8001396:	4604      	mov	r4, r0
			yprintf(&pbuf1,"\n\r#GetFreeHeapSize: total: %i free %i %3.1f%% used: %i\n\n\r",configTOTAL_HEAP_SIZE, heapsize,\
				100.0*(float)heapsize/configTOTAL_HEAP_SIZE,(configTOTAL_HEAP_SIZE-heapsize));
 8001398:	f7ff fd14 	bl	8000dc4 <__aeabi_ui2f>
 800139c:	f7ff f8c0 	bl	8000520 <__aeabi_f2d>
 80013a0:	2200      	movs	r2, #0
 80013a2:	4b72      	ldr	r3, [pc, #456]	; (800156c <StartDefaultTask+0x2b4>)
 80013a4:	f7ff f910 	bl	80005c8 <__aeabi_dmul>

			/* Heap usage (and test fp woking. */
  #define HEAPSIZELIST 
  #ifdef  HEAPSIZELIST
			heapsize = xPortGetFreeHeapSize();
			yprintf(&pbuf1,"\n\r#GetFreeHeapSize: total: %i free %i %3.1f%% used: %i\n\n\r",configTOTAL_HEAP_SIZE, heapsize,\
 80013a8:	f5c4 53e1 	rsb	r3, r4, #7200	; 0x1c20
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	a35a      	add	r3, pc, #360	; (adr r3, 8001518 <StartDefaultTask+0x260>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fa32 	bl	800081c <__aeabi_ddiv>
 80013b8:	e9cd 0100 	strd	r0, r1, [sp]
 80013bc:	4623      	mov	r3, r4
 80013be:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80013c2:	496b      	ldr	r1, [pc, #428]	; (8001570 <StartDefaultTask+0x2b8>)
 80013c4:	a809      	add	r0, sp, #36	; 0x24
 80013c6:	f006 fbf9 	bl	8007bbc <yprintf>

#endif

#define SHOWSUMMEDADCCHANNELS
#ifdef  SHOWSUMMEDADCCHANNELS
		for (i = 0; i < 6; i++)
 80013ca:	2400      	movs	r4, #0
 80013cc:	e007      	b.n	80013de <StartDefaultTask+0x126>
		{	
			yprintf(&pbuf1,"%7i ",adcsumdb[i]); // This is what routines work with
 80013ce:	4b69      	ldr	r3, [pc, #420]	; (8001574 <StartDefaultTask+0x2bc>)
 80013d0:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80013d4:	4968      	ldr	r1, [pc, #416]	; (8001578 <StartDefaultTask+0x2c0>)
 80013d6:	a809      	add	r0, sp, #36	; 0x24
 80013d8:	f006 fbf0 	bl	8007bbc <yprintf>

#endif

#define SHOWSUMMEDADCCHANNELS
#ifdef  SHOWSUMMEDADCCHANNELS
		for (i = 0; i < 6; i++)
 80013dc:	3401      	adds	r4, #1
 80013de:	2c05      	cmp	r4, #5
 80013e0:	ddf5      	ble.n	80013ce <StartDefaultTask+0x116>
		{	
			yprintf(&pbuf1,"%7i ",adcsumdb[i]); // This is what routines work with
		}
		yprintf(&pbuf1, " :%7i %8.1f\n\r ", pcf->padc->intern.adcfiltemp, (double)(pcf->padc->intern.adcfilvref)/pcf->padc->intern.iiradcvref.pprm->scale);
 80013e2:	4b50      	ldr	r3, [pc, #320]	; (8001524 <StartDefaultTask+0x26c>)
 80013e4:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80013e8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80013ec:	f7ff f876 	bl	80004dc <__aeabi_ui2d>
 80013f0:	4606      	mov	r6, r0
 80013f2:	460f      	mov	r7, r1
 80013f4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80013f8:	f8d4 4104 	ldr.w	r4, [r4, #260]	; 0x104
 80013fc:	6858      	ldr	r0, [r3, #4]
 80013fe:	f7ff f87d 	bl	80004fc <__aeabi_i2d>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4630      	mov	r0, r6
 8001408:	4639      	mov	r1, r7
 800140a:	f7ff fa07 	bl	800081c <__aeabi_ddiv>
 800140e:	e9cd 0100 	strd	r0, r1, [sp]
 8001412:	4622      	mov	r2, r4
 8001414:	4959      	ldr	r1, [pc, #356]	; (800157c <StartDefaultTask+0x2c4>)
 8001416:	a809      	add	r0, sp, #36	; 0x24
 8001418:	f006 fbd0 	bl	8007bbc <yprintf>
#endif

#define SHOWEXTENDEDSUMMEDADCCHANNELS
#ifdef  SHOWEXTENDEDSUMMEDADCCHANNELS
		yprintf(&pbuf1, "\n\r     5v    cur1    cur2     12v    temp    vref\n\rA ");
 800141c:	4958      	ldr	r1, [pc, #352]	; (8001580 <StartDefaultTask+0x2c8>)
 800141e:	a809      	add	r0, sp, #36	; 0x24
 8001420:	f006 fbcc 	bl	8007bbc <yprintf>
		// Following loop takes about 450000 sysclock ticks 6.2 ms (includes waits for serial port)
		for (i = 0; i < 6; i++)
 8001424:	2400      	movs	r4, #0
 8001426:	e015      	b.n	8001454 <StartDefaultTask+0x19c>
		{	
			yprintf(&pbuf1,"%8.1f",(double)(pcf->padc->chan[i].xsum[1])*(1.0/ADCEXTENDSUMCT));
 8001428:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <StartDefaultTask+0x26c>)
 800142a:	f8d3 10e8 	ldr.w	r1, [r3, #232]	; 0xe8
 800142e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001432:	0113      	lsls	r3, r2, #4
 8001434:	440b      	add	r3, r1
 8001436:	f8d3 022c 	ldr.w	r0, [r3, #556]	; 0x22c
 800143a:	f7ff f84f 	bl	80004dc <__aeabi_ui2d>
 800143e:	2200      	movs	r2, #0
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <StartDefaultTask+0x2cc>)
 8001442:	f7ff f8c1 	bl	80005c8 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	494f      	ldr	r1, [pc, #316]	; (8001588 <StartDefaultTask+0x2d0>)
 800144c:	a809      	add	r0, sp, #36	; 0x24
 800144e:	f006 fbb5 	bl	8007bbc <yprintf>

#define SHOWEXTENDEDSUMMEDADCCHANNELS
#ifdef  SHOWEXTENDEDSUMMEDADCCHANNELS
		yprintf(&pbuf1, "\n\r     5v    cur1    cur2     12v    temp    vref\n\rA ");
		// Following loop takes about 450000 sysclock ticks 6.2 ms (includes waits for serial port)
		for (i = 0; i < 6; i++)
 8001452:	3401      	adds	r4, #1
 8001454:	2c05      	cmp	r4, #5
 8001456:	dde7      	ble.n	8001428 <StartDefaultTask+0x170>
		{	
			yprintf(&pbuf1,"%8.1f",(double)(pcf->padc->chan[i].xsum[1])*(1.0/ADCEXTENDSUMCT));
		}
		yprintf(&pbuf1,"\n\r");
 8001458:	494c      	ldr	r1, [pc, #304]	; (800158c <StartDefaultTask+0x2d4>)
 800145a:	a809      	add	r0, sp, #36	; 0x24
 800145c:	f006 fbae 	bl	8007bbc <yprintf>

#define SHOWINTERNALTEMPERATURECALCULATIONS 
#ifdef SHOWINTERNALTEMPERATURECALCULATIONS
	/* Internal temperature computation check. */
	// The following takes 1418 sysclock ticks
	dt1 = (pcf->padc->intern.dx25 - (pcf->padc->intern.dxdvref * ((double)pcf->padc->intern.adcfiltemp / (double)pcf->padc->intern.adcfilvref )))  + pcf->padc->lc.calintern.drmtemp;
 8001460:	4d30      	ldr	r5, [pc, #192]	; (8001524 <StartDefaultTask+0x26c>)
 8001462:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8001466:	f504 7394 	add.w	r3, r4, #296	; 0x128
 800146a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800146e:	f504 7398 	add.w	r3, r4, #304	; 0x130
 8001472:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001476:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800147a:	f7ff f82f 	bl	80004dc <__aeabi_ui2d>
 800147e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001482:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8001486:	f7ff f829 	bl	80004dc <__aeabi_ui2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001492:	f7ff f9c3 	bl	800081c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4640      	mov	r0, r8
 800149c:	4649      	mov	r1, r9
 800149e:	f7ff f893 	bl	80005c8 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4630      	mov	r0, r6
 80014a8:	4639      	mov	r1, r7
 80014aa:	f7fe fed9 	bl	8000260 <__aeabi_dsub>
 80014ae:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80014b2:	f7fe fed7 	bl	8000264 <__adddf3>
 80014b6:	4606      	mov	r6, r0
 80014b8:	460f      	mov	r7, r1

	yprintf(&pbuf1,"\n\rT degC: (doubles)%6.2f %6.2f (scaled int)%i\n\r", dt1,(double)pcf->padc->intern.itemp/(1<<ADCSCALEbits), adcdbg2,pcf->padc->intern.adccmpvref);
 80014ba:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80014be:	f7ff f80d 	bl	80004dc <__aeabi_ui2d>
 80014c2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80014c6:	9303      	str	r3, [sp, #12]
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <StartDefaultTask+0x2d8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80014d4:	f7ff f878 	bl	80005c8 <__aeabi_dmul>
 80014d8:	e9cd 0100 	strd	r0, r1, [sp]
 80014dc:	4632      	mov	r2, r6
 80014de:	463b      	mov	r3, r7
 80014e0:	492c      	ldr	r1, [pc, #176]	; (8001594 <StartDefaultTask+0x2dc>)
 80014e2:	a809      	add	r0, sp, #36	; 0x24
 80014e4:	f006 fb6a 	bl	8007bbc <yprintf>

#define SHOWHVUARTDATA
#ifdef  SHOWHVUARTDATA

yprintf(&pbuf1,"UART ctr: %i\n\ruart_hv%8i %9i %9i\n\r",dbgCE1-dbgCE1_prev,
  pcf->hv[0].hv,pcf->hv[1].hv,pcf->hv[2].hv);
 80014e8:	f8b5 3198 	ldrh.w	r3, [r5, #408]	; 0x198
 80014ec:	f8b5 11d0 	ldrh.w	r1, [r5, #464]	; 0x1d0
 80014f0:	f8b5 0208 	ldrh.w	r0, [r5, #520]	; 0x208
#endif

#define SHOWHVUARTDATA
#ifdef  SHOWHVUARTDATA

yprintf(&pbuf1,"UART ctr: %i\n\ruart_hv%8i %9i %9i\n\r",dbgCE1-dbgCE1_prev,
 80014f4:	4c0c      	ldr	r4, [pc, #48]	; (8001528 <StartDefaultTask+0x270>)
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	9001      	str	r0, [sp, #4]
 80014fa:	9100      	str	r1, [sp, #0]
 80014fc:	ebca 0202 	rsb	r2, sl, r2
 8001500:	4925      	ldr	r1, [pc, #148]	; (8001598 <StartDefaultTask+0x2e0>)
 8001502:	a809      	add	r0, sp, #36	; 0x24
 8001504:	f006 fb5a 	bl	8007bbc <yprintf>
  pcf->hv[0].hv,pcf->hv[1].hv,pcf->hv[2].hv);
dbgCE1_prev = dbgCE1;
 8001508:	f8d4 a000 	ldr.w	sl, [r4]
	double dhvc;           // HV calibrated
	uint32_t hvcal;        // Calibrated, scaled volts/adc tick
	uint32_t hvc;          // HV as scaled volts
	uint16_t hv;           // Raw ADC reading received from uart
*/
for (i = 0; i < 3; i++)
 800150c:	2500      	movs	r5, #0
 800150e:	e05d      	b.n	80015cc <StartDefaultTask+0x314>
 8001510:	9999999a 	.word	0x9999999a
 8001514:	3fb99999 	.word	0x3fb99999
 8001518:	00000000 	.word	0x00000000
 800151c:	40bc2000 	.word	0x40bc2000
 8001520:	20003190 	.word	0x20003190
 8001524:	200037a0 	.word	0x200037a0
 8001528:	2000378c 	.word	0x2000378c
 800152c:	40011000 	.word	0x40011000
 8001530:	0800e508 	.word	0x0800e508
 8001534:	0800e52c 	.word	0x0800e52c
 8001538:	20002fe0 	.word	0x20002fe0
 800153c:	0800e53c 	.word	0x0800e53c
 8001540:	20002ee4 	.word	0x20002ee4
 8001544:	0800e54c 	.word	0x0800e54c
 8001548:	200032f8 	.word	0x200032f8
 800154c:	0800e55c 	.word	0x0800e55c
 8001550:	2000330c 	.word	0x2000330c
 8001554:	0800e56c 	.word	0x0800e56c
 8001558:	20003368 	.word	0x20003368
 800155c:	0800e57c 	.word	0x0800e57c
 8001560:	20003aa8 	.word	0x20003aa8
 8001564:	0800e58c 	.word	0x0800e58c
 8001568:	20002f88 	.word	0x20002f88
 800156c:	40590000 	.word	0x40590000
 8001570:	0800e5a0 	.word	0x0800e5a0
 8001574:	20003350 	.word	0x20003350
 8001578:	0800e5dc 	.word	0x0800e5dc
 800157c:	0800e5e4 	.word	0x0800e5e4
 8001580:	0800e5f4 	.word	0x0800e5f4
 8001584:	3f500000 	.word	0x3f500000
 8001588:	0800e62c 	.word	0x0800e62c
 800158c:	0800e88c 	.word	0x0800e88c
 8001590:	20003778 	.word	0x20003778
 8001594:	0800e634 	.word	0x0800e634
 8001598:	0800e664 	.word	0x0800e664
{
	pcf->hv[i].dhvc = (double)pcf->hv[i].dscale * (double)pcf->hv[i].hv;
 800159c:	00ea      	lsls	r2, r5, #3
 800159e:	1b52      	subs	r2, r2, r5
 80015a0:	00d3      	lsls	r3, r2, #3
 80015a2:	4ca4      	ldr	r4, [pc, #656]	; (8001834 <StartDefaultTask+0x57c>)
 80015a4:	441c      	add	r4, r3
 80015a6:	f504 73c0 	add.w	r3, r4, #384	; 0x180
 80015aa:	e9d3 6700 	ldrd	r6, r7, [r3]
 80015ae:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
 80015b2:	f7fe ff93 	bl	80004dc <__aeabi_ui2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4630      	mov	r0, r6
 80015bc:	4639      	mov	r1, r7
 80015be:	f7ff f803 	bl	80005c8 <__aeabi_dmul>
 80015c2:	f504 74c4 	add.w	r4, r4, #392	; 0x188
 80015c6:	e9c4 0100 	strd	r0, r1, [r4]
	double dhvc;           // HV calibrated
	uint32_t hvcal;        // Calibrated, scaled volts/adc tick
	uint32_t hvc;          // HV as scaled volts
	uint16_t hv;           // Raw ADC reading received from uart
*/
for (i = 0; i < 3; i++)
 80015ca:	3501      	adds	r5, #1
 80015cc:	2d02      	cmp	r5, #2
 80015ce:	dde5      	ble.n	800159c <StartDefaultTask+0x2e4>
{
	pcf->hv[i].dhvc = (double)pcf->hv[i].dscale * (double)pcf->hv[i].hv;
}
yprintf(&pbuf1,"dscale%9.7f %9.7f %9.7f\n\r",pcf->hv[0].dscale,pcf->hv[1].dscale,pcf->hv[2].dscale);
 80015d0:	4c98      	ldr	r4, [pc, #608]	; (8001834 <StartDefaultTask+0x57c>)
 80015d2:	4625      	mov	r5, r4
 80015d4:	e9f5 2360 	ldrd	r2, r3, [r5, #384]!	; 0x180
 80015d8:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
 80015dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015e4:	f504 71dc 	add.w	r1, r4, #440	; 0x1b8
 80015e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015ec:	e9cd 0100 	strd	r0, r1, [sp]
 80015f0:	4991      	ldr	r1, [pc, #580]	; (8001838 <StartDefaultTask+0x580>)
 80015f2:	a809      	add	r0, sp, #36	; 0x24
 80015f4:	f006 fae2 	bl	8007bbc <yprintf>

yprintf(&pbuf1,"hvcal %9i %9i %9i\n\r",pcf->hv[0].hvcal,pcf->hv[1].hvcal,pcf->hv[2].hvcal);
 80015f8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8001602:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
 8001606:	498d      	ldr	r1, [pc, #564]	; (800183c <StartDefaultTask+0x584>)
 8001608:	a809      	add	r0, sp, #36	; 0x24
 800160a:	f006 fad7 	bl	8007bbc <yprintf>

yprintf(&pbuf1,"hvc   %9i %9i %9i\n\r",pcf->hv[0].hvc,pcf->hv[1].hvc,pcf->hv[2].hvc);
 800160e:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8001618:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
 800161c:	4988      	ldr	r1, [pc, #544]	; (8001840 <StartDefaultTask+0x588>)
 800161e:	a809      	add	r0, sp, #36	; 0x24
 8001620:	f006 facc 	bl	8007bbc <yprintf>

yprintf(&pbuf1,"hv    %9i %9i %9i\n\r",pcf->hv[0].hv,pcf->hv[1].hv,pcf->hv[2].hv);
 8001624:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
 8001628:	f8b4 31d0 	ldrh.w	r3, [r4, #464]	; 0x1d0
 800162c:	f8b4 1208 	ldrh.w	r1, [r4, #520]	; 0x208
 8001630:	9100      	str	r1, [sp, #0]
 8001632:	4984      	ldr	r1, [pc, #528]	; (8001844 <StartDefaultTask+0x58c>)
 8001634:	a809      	add	r0, sp, #36	; 0x24
 8001636:	f006 fac1 	bl	8007bbc <yprintf>

yprintf(&pbuf1,"dhvc  %9.2f %9.2f %9.2f\n\r",pcf->hv[0].dhvc,pcf->hv[1].dhvc,pcf->hv[2].dhvc);
 800163a:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
 8001646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800164a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800164e:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
 8001652:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001656:	e9cd 0100 	strd	r0, r1, [sp]
 800165a:	497b      	ldr	r1, [pc, #492]	; (8001848 <StartDefaultTask+0x590>)
 800165c:	a809      	add	r0, sp, #36	; 0x24
 800165e:	f006 faad 	bl	8007bbc <yprintf>

#define SHOWBATTERYLOWSTUFF
#ifdef  SHOWBATTERYLOWSTUFF

yprintf(&pbuf1,"ibattlow: %i  fbattlow: %0.2f  hv[0]: %i battnow: %0.2f\n\r",
   pcf->ibattlow, pcf->lc.fbattlow,
 8001662:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   pcf->hv[0].hv,
 8001666:	f8b4 8198 	ldrh.w	r8, [r4, #408]	; 0x198
   (double)pcf->hv[0].dscale*(double)pcf->hv[0].hv);
 800166a:	e9d5 6700 	ldrd	r6, r7, [r5]
 800166e:	4640      	mov	r0, r8
 8001670:	f7fe ff34 	bl	80004dc <__aeabi_ui2d>
#endif

#define SHOWBATTERYLOWSTUFF
#ifdef  SHOWBATTERYLOWSTUFF

yprintf(&pbuf1,"ibattlow: %i  fbattlow: %0.2f  hv[0]: %i battnow: %0.2f\n\r",
 8001674:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4630      	mov	r0, r6
 800167e:	4639      	mov	r1, r7
 8001680:	f7fe ffa2 	bl	80005c8 <__aeabi_dmul>
 8001684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001688:	f8cd 8008 	str.w	r8, [sp, #8]
 800168c:	4648      	mov	r0, r9
 800168e:	f7fe ff47 	bl	8000520 <__aeabi_f2d>
 8001692:	e9cd 0100 	strd	r0, r1, [sp]
 8001696:	462a      	mov	r2, r5
 8001698:	496c      	ldr	r1, [pc, #432]	; (800184c <StartDefaultTask+0x594>)
 800169a:	a809      	add	r0, sp, #36	; 0x24
 800169c:	f006 fa8e 	bl	8007bbc <yprintf>
   pcf->ibattlow, pcf->lc.fbattlow,
   pcf->hv[0].hv,
   (double)pcf->hv[0].dscale*(double)pcf->hv[0].hv);

yprintf(&pbuf1,"iprechgendv: %i hv[IDXHV3].hvc: %i\n\r",pcf->iprechgendv,pcf->hv[IDXHV3].hv);
 80016a0:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
 80016a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80016a8:	4969      	ldr	r1, [pc, #420]	; (8001850 <StartDefaultTask+0x598>)
 80016aa:	a809      	add	r0, sp, #36	; 0x24
 80016ac:	f006 fa86 	bl	8007bbc <yprintf>
	uint32_t adcfil;  // Filtered ADC reading
	int32_t irk5ke;   // Ratio k5/ke ratio: scale int (~32768)
	int32_t irko;     // Offset ratio: scale int (~32768)
	int32_t iI;       // integer result w offset, not final scaling
}; */
yprintf(&pbuf1,"\n\rRATIOMETRIC: struct ADCRATIOMETRIC for cur1--\n\r");
 80016b0:	4968      	ldr	r1, [pc, #416]	; (8001854 <StartDefaultTask+0x59c>)
 80016b2:	a809      	add	r0, sp, #36	; 0x24
 80016b4:	f006 fa82 	bl	8007bbc <yprintf>
yprintf(&pbuf1,"drko   %0.5f\n\rdscale %0.6f\n\r",
	pcf->padc->cur1.drko,    /* Offset ratio: double (~0.5)               */
 80016b8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	int32_t irk5ke;   // Ratio k5/ke ratio: scale int (~32768)
	int32_t irko;     // Offset ratio: scale int (~32768)
	int32_t iI;       // integer result w offset, not final scaling
}; */
yprintf(&pbuf1,"\n\rRATIOMETRIC: struct ADCRATIOMETRIC for cur1--\n\r");
yprintf(&pbuf1,"drko   %0.5f\n\rdscale %0.6f\n\r",
 80016bc:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
 80016c0:	e9d2 6700 	ldrd	r6, r7, [r2]
 80016c4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80016c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016cc:	e9cd 0100 	strd	r0, r1, [sp]
 80016d0:	4632      	mov	r2, r6
 80016d2:	463b      	mov	r3, r7
 80016d4:	4960      	ldr	r1, [pc, #384]	; (8001858 <StartDefaultTask+0x5a0>)
 80016d6:	a809      	add	r0, sp, #36	; 0x24
 80016d8:	f006 fa70 	bl	8007bbc <yprintf>
	pcf->padc->cur1.drko,    /* Offset ratio: double (~0.5)               */
	pcf->padc->cur1.dscale); /* Scale factor                              */
yprintf(&pbuf1,"adcfil %i\n\rirko   %i\n\riI     %i\n\r",
	pcf->padc->cur1.adcfil,  /* Filtered ADC reading                      */
 80016dc:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
}; */
yprintf(&pbuf1,"\n\rRATIOMETRIC: struct ADCRATIOMETRIC for cur1--\n\r");
yprintf(&pbuf1,"drko   %0.5f\n\rdscale %0.6f\n\r",
	pcf->padc->cur1.drko,    /* Offset ratio: double (~0.5)               */
	pcf->padc->cur1.dscale); /* Scale factor                              */
yprintf(&pbuf1,"adcfil %i\n\rirko   %i\n\riI     %i\n\r",
 80016e0:	f8d1 31d4 	ldr.w	r3, [r1, #468]	; 0x1d4
 80016e4:	f8d1 21d0 	ldr.w	r2, [r1, #464]	; 0x1d0
 80016e8:	f8d1 11d8 	ldr.w	r1, [r1, #472]	; 0x1d8
 80016ec:	9100      	str	r1, [sp, #0]
 80016ee:	495b      	ldr	r1, [pc, #364]	; (800185c <StartDefaultTask+0x5a4>)
 80016f0:	a809      	add	r0, sp, #36	; 0x24
 80016f2:	f006 fa63 	bl	8007bbc <yprintf>
	pcf->padc->cur1.adcfil,  /* Filtered ADC reading                      */
	pcf->padc->cur1.irko,    /* Offset ratio: scale int (~32768)          */
	pcf->padc->cur1.iI );    /* integer result w offset, not final scaling*/

double dI = (pcf->padc->cur1.iI * pcf->padc->cur1.dscale) / (1<<ADCSCALEbits);
 80016f6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80016fa:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
 80016fe:	e9d2 6700 	ldrd	r6, r7, [r2]
 8001702:	f8d3 01d8 	ldr.w	r0, [r3, #472]	; 0x1d8
 8001706:	f7fe fef9 	bl	80004fc <__aeabi_i2d>
 800170a:	4632      	mov	r2, r6
 800170c:	463b      	mov	r3, r7
 800170e:	f7fe ff5b 	bl	80005c8 <__aeabi_dmul>
 8001712:	2200      	movs	r2, #0
 8001714:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001718:	f7fe ff56 	bl	80005c8 <__aeabi_dmul>
yprintf(&pbuf1,"calib %0.5f\n\r",dI);
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	494f      	ldr	r1, [pc, #316]	; (8001860 <StartDefaultTask+0x5a8>)
 8001722:	a809      	add	r0, sp, #36	; 0x24
 8001724:	f006 fa4a 	bl	8007bbc <yprintf>

// Debug
extern uint32_t dbgadcfil;
extern uint32_t dbgadcratio;
yprintf(&pbuf1,"dadcfil %i\n\rratio  %i\n\r",
 8001728:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <StartDefaultTask+0x5ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <StartDefaultTask+0x5b0>)
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	494e      	ldr	r1, [pc, #312]	; (800186c <StartDefaultTask+0x5b4>)
 8001732:	a809      	add	r0, sp, #36	; 0x24
 8001734:	f006 fa42 	bl	8007bbc <yprintf>
dbgadcfil,
dbgadcratio);

yprintf(&pbuf1,"icurrentdisconnect %i iI %d\n\r",pcf->icurrentdisconnect,pcf->padc->cur1.iI);
 8001738:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800173c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001740:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001744:	494a      	ldr	r1, [pc, #296]	; (8001870 <StartDefaultTask+0x5b8>)
 8001746:	a809      	add	r0, sp, #36	; 0x24
 8001748:	f006 fa38 	bl	8007bbc <yprintf>
#endif

#define TESTABSOLUTECALIBRATION
#ifdef  TESTABSOLUTECALIBRATION

double dt1 = ((double)pcf->padc->v5.ival * (1.0/(1<<ADCSCALEbits)) * pcf->padc->v5.dscale );
 800174c:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
 8001750:	f8d5 81a4 	ldr.w	r8, [r5, #420]	; 0x1a4
 8001754:	4640      	mov	r0, r8
 8001756:	f7fe fec1 	bl	80004dc <__aeabi_ui2d>
 800175a:	2200      	movs	r2, #0
 800175c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001760:	f7fe ff32 	bl	80005c8 <__aeabi_dmul>
 8001764:	f505 73c8 	add.w	r3, r5, #400	; 0x190
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7fe ff2c 	bl	80005c8 <__aeabi_dmul>
 8001770:	4606      	mov	r6, r0
 8001772:	460f      	mov	r7, r1
yprintf(&pbuf1,"v5--\n\radc v5  %i\n\rival    %i\n\rk       %8.6f\n\rdref   %9.6f\n\r",
 8001774:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
 8001778:	f505 7388 	add.w	r3, r5, #272	; 0x110
 800177c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001784:	f505 75cc 	add.w	r5, r5, #408	; 0x198
 8001788:	e9d5 0100 	ldrd	r0, r1, [r5]
 800178c:	e9cd 0100 	strd	r0, r1, [sp]
 8001790:	4643      	mov	r3, r8
 8001792:	4938      	ldr	r1, [pc, #224]	; (8001874 <StartDefaultTask+0x5bc>)
 8001794:	a809      	add	r0, sp, #36	; 0x24
 8001796:	f006 fa11 	bl	8007bbc <yprintf>
pcf->padc->v5.adcfil,
pcf->padc->v5.ival,
pcf->padc->v5.k,
pcf->padc->intern.dvref);
yprintf(&pbuf1,"cmpvref %i\n\radcvref %i\n\rdscale  %8.6f\n\r5V %13.3f\n\r",
pcf->padc->intern.adccmpvref,
 800179a:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
yprintf(&pbuf1,"v5--\n\radc v5  %i\n\rival    %i\n\rk       %8.6f\n\rdref   %9.6f\n\r",
pcf->padc->v5.adcfil,
pcf->padc->v5.ival,
pcf->padc->v5.k,
pcf->padc->intern.dvref);
yprintf(&pbuf1,"cmpvref %i\n\radcvref %i\n\rdscale  %8.6f\n\r5V %13.3f\n\r",
 800179e:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
 80017a2:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 80017a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80017aa:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 80017ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017b2:	e9cd 0100 	strd	r0, r1, [sp]
 80017b6:	4930      	ldr	r1, [pc, #192]	; (8001878 <StartDefaultTask+0x5c0>)
 80017b8:	a809      	add	r0, sp, #36	; 0x24
 80017ba:	f006 f9ff 	bl	8007bbc <yprintf>
pcf->padc->intern.adccmpvref,
pcf->padc->intern.adcfilvref,
pcf->padc->v5.dscale,
dt1);

dt1 = ((double)pcf->padc->v12.ival * (1.0/(1<<ADCSCALEbits)) * pcf->padc->v12.dscale );
 80017be:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
 80017c2:	f8d5 8174 	ldr.w	r8, [r5, #372]	; 0x174
 80017c6:	4640      	mov	r0, r8
 80017c8:	f7fe fe88 	bl	80004dc <__aeabi_ui2d>
 80017cc:	2200      	movs	r2, #0
 80017ce:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80017d2:	f7fe fef9 	bl	80005c8 <__aeabi_dmul>
 80017d6:	f505 73b0 	add.w	r3, r5, #352	; 0x160
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe fef3 	bl	80005c8 <__aeabi_dmul>
 80017e2:	4606      	mov	r6, r0
 80017e4:	460f      	mov	r7, r1
yprintf(&pbuf1,"v12--\n\radc v12 %i\n\rival    %i\n\rk       %8.6f\n\rdref   %9.6f\n\r",
 80017e6:	f8d5 2170 	ldr.w	r2, [r5, #368]	; 0x170
 80017ea:	f505 7388 	add.w	r3, r5, #272	; 0x110
 80017ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017f6:	f505 75b4 	add.w	r5, r5, #360	; 0x168
 80017fa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80017fe:	e9cd 0100 	strd	r0, r1, [sp]
 8001802:	4643      	mov	r3, r8
 8001804:	491d      	ldr	r1, [pc, #116]	; (800187c <StartDefaultTask+0x5c4>)
 8001806:	a809      	add	r0, sp, #36	; 0x24
 8001808:	f006 f9d8 	bl	8007bbc <yprintf>
pcf->padc->v12.adcfil,
pcf->padc->v12.ival,
pcf->padc->v12.k,
pcf->padc->intern.dvref);
yprintf(&pbuf1,"cmpvref %i\n\radcvref %i\n\rdscale  %8.6f\n\r12V %12.3f\n\r",
pcf->padc->intern.adccmpvref,
 800180c:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
yprintf(&pbuf1,"v12--\n\radc v12 %i\n\rival    %i\n\rk       %8.6f\n\rdref   %9.6f\n\r",
pcf->padc->v12.adcfil,
pcf->padc->v12.ival,
pcf->padc->v12.k,
pcf->padc->intern.dvref);
yprintf(&pbuf1,"cmpvref %i\n\radcvref %i\n\rdscale  %8.6f\n\r12V %12.3f\n\r",
 8001810:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
 8001814:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 8001818:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800181c:	f501 71b0 	add.w	r1, r1, #352	; 0x160
 8001820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001824:	e9cd 0100 	strd	r0, r1, [sp]
 8001828:	4915      	ldr	r1, [pc, #84]	; (8001880 <StartDefaultTask+0x5c8>)
 800182a:	a809      	add	r0, sp, #36	; 0x24
 800182c:	f006 f9c6 	bl	8007bbc <yprintf>

#define SHOWSTACKWATERMARK
#ifdef SHOWSTACKWATERMARK
			// Following takes 1370791 sysclock ticks 19.0 ms (includes serial port wait)
			/* Display the amount of unused stack space for tasks. */
			yprintf(&pbuf1,"\n\n\r#%4i Unused Task stack space--", ctr++);
 8001830:	465c      	mov	r4, fp
pcf->padc->v12.dscale,
dt1);

#endif

  } // END OF FOR LOOP
 8001832:	e574      	b.n	800131e <StartDefaultTask+0x66>
 8001834:	200037a0 	.word	0x200037a0
 8001838:	0800e688 	.word	0x0800e688
 800183c:	0800e6a4 	.word	0x0800e6a4
 8001840:	0800e6b8 	.word	0x0800e6b8
 8001844:	0800e6cc 	.word	0x0800e6cc
 8001848:	0800e6e0 	.word	0x0800e6e0
 800184c:	0800e6fc 	.word	0x0800e6fc
 8001850:	0800e738 	.word	0x0800e738
 8001854:	0800e760 	.word	0x0800e760
 8001858:	0800e794 	.word	0x0800e794
 800185c:	0800e7b4 	.word	0x0800e7b4
 8001860:	0800e7d8 	.word	0x0800e7d8
 8001864:	20003370 	.word	0x20003370
 8001868:	20003780 	.word	0x20003780
 800186c:	0800e7e8 	.word	0x0800e7e8
 8001870:	0800e800 	.word	0x0800e800
 8001874:	0800e820 	.word	0x0800e820
 8001878:	0800e85c 	.word	0x0800e85c
 800187c:	0800e890 	.word	0x0800e890
 8001880:	0800e8d0 	.word	0x0800e8d0

08001884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001886:	6803      	ldr	r3, [r0, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188c:	d101      	bne.n	8001892 <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 800188e:	f001 f967 	bl	8002b60 <HAL_IncTick>
 8001892:	bd08      	pop	{r3, pc}

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	morse_trap(m_trap); // Trap any HAL Init
 8001896:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <Error_Handler+0xc>)
 8001898:	8818      	ldrh	r0, [r3, #0]
 800189a:	f006 fbc3 	bl	8008024 <morse_trap>
 800189e:	bd08      	pop	{r3, pc}
 80018a0:	20000000 	.word	0x20000000

080018a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80018a4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 0 */
	m_trap = 446; // morse_trap(446);
 80018a6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_CAN_Init+0x44>)
 80018ac:	801a      	strh	r2, [r3, #0]
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80018ae:	480f      	ldr	r0, [pc, #60]	; (80018ec <MX_CAN_Init+0x48>)
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_CAN_Init+0x4c>)
 80018b2:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 4;
 80018b4:	2304      	movs	r3, #4
 80018b6:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80018bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018c0:	60c2      	str	r2, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80018c2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80018c6:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80018c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018cc:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80018ce:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80018d0:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80018d2:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80018d4:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80018d6:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80018d8:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80018da:	f002 fbe9 	bl	80040b0 <HAL_CAN_Init>
 80018de:	b108      	cbz	r0, 80018e4 <MX_CAN_Init+0x40>
  {
    Error_Handler();
 80018e0:	f7ff ffd8 	bl	8001894 <Error_Handler>
 80018e4:	bd08      	pop	{r3, pc}
 80018e6:	bf00      	nop
 80018e8:	20000000 	.word	0x20000000
 80018ec:	2000306c 	.word	0x2000306c
 80018f0:	40006400 	.word	0x40006400

080018f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART3_Init 0 */
	m_trap = 441; // morse_trap(441);
 80018f6:	f240 12b9 	movw	r2, #441	; 0x1b9
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_USART3_UART_Init+0x34>)
 80018fc:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018fe:	480b      	ldr	r0, [pc, #44]	; (800192c <MX_USART3_UART_Init+0x38>)
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART3_UART_Init+0x3c>)
 8001902:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8001904:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001908:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	2300      	movs	r3, #0
 800190c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800190e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001910:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8001912:	2204      	movs	r2, #4
 8001914:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800191a:	f003 f8cd 	bl	8004ab8 <HAL_UART_Init>
 800191e:	b108      	cbz	r0, 8001924 <MX_USART3_UART_Init+0x30>
  {
    Error_Handler();
 8001920:	f7ff ffb8 	bl	8001894 <Error_Handler>
 8001924:	bd08      	pop	{r3, pc}
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000
 800192c:	20003028 	.word	0x20003028
 8001930:	40004800 	.word	0x40004800

08001934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001934:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 0 */
	m_trap = 442; // morse_trap(442);
 8001936:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_USART1_UART_Init+0x34>)
 800193c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800193e:	480b      	ldr	r0, [pc, #44]	; (800196c <MX_USART1_UART_Init+0x38>)
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_USART1_UART_Init+0x3c>)
 8001942:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001944:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001948:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	2300      	movs	r3, #0
 800194c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800194e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001950:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001952:	220c      	movs	r2, #12
 8001954:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195a:	f003 f8ad 	bl	8004ab8 <HAL_UART_Init>
 800195e:	b108      	cbz	r0, 8001964 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
 8001960:	f7ff ff98 	bl	8001894 <Error_Handler>
 8001964:	bd08      	pop	{r3, pc}
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000
 800196c:	20003190 	.word	0x20003190
 8001970:	40013800 	.word	0x40013800

08001974 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001974:	b500      	push	{lr}
 8001976:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */
	m_trap = 447; // morse_trap(447);
 8001978:	f240 12bf 	movw	r2, #447	; 0x1bf
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <MX_ADC1_Init+0xd0>)
 800197e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001980:	2300      	movs	r3, #0
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /**Common config 
  */
  hadc1.Instance = ADC1;
 8001988:	482f      	ldr	r0, [pc, #188]	; (8001a48 <MX_ADC1_Init+0xd4>)
 800198a:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <MX_ADC1_Init+0xd8>)
 800198c:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800198e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001992:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001994:	2201      	movs	r2, #1
 8001996:	60c2      	str	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001998:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800199a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800199e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a0:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 6;
 80019a2:	2306      	movs	r3, #6
 80019a4:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a6:	f002 fa85 	bl	8003eb4 <HAL_ADC_Init>
 80019aa:	b108      	cbz	r0, 80019b0 <MX_ADC1_Init+0x3c>
  {
    Error_Handler();
 80019ac:	f7ff ff72 	bl	8001894 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80019b8:	2303      	movs	r3, #3
 80019ba:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019bc:	a901      	add	r1, sp, #4
 80019be:	4822      	ldr	r0, [pc, #136]	; (8001a48 <MX_ADC1_Init+0xd4>)
 80019c0:	f002 f8d2 	bl	8003b68 <HAL_ADC_ConfigChannel>
 80019c4:	b108      	cbz	r0, 80019ca <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 80019c6:	f7ff ff65 	bl	8001894 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019ce:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d0:	a901      	add	r1, sp, #4
 80019d2:	481d      	ldr	r0, [pc, #116]	; (8001a48 <MX_ADC1_Init+0xd4>)
 80019d4:	f002 f8c8 	bl	8003b68 <HAL_ADC_ConfigChannel>
 80019d8:	b108      	cbz	r0, 80019de <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 80019da:	f7ff ff5b 	bl	8001894 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019de:	2304      	movs	r3, #4
 80019e0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019e2:	2303      	movs	r3, #3
 80019e4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e6:	a901      	add	r1, sp, #4
 80019e8:	4817      	ldr	r0, [pc, #92]	; (8001a48 <MX_ADC1_Init+0xd4>)
 80019ea:	f002 f8bd 	bl	8003b68 <HAL_ADC_ConfigChannel>
 80019ee:	b108      	cbz	r0, 80019f4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80019f0:	f7ff ff50 	bl	8001894 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019f4:	2307      	movs	r3, #7
 80019f6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80019f8:	2304      	movs	r3, #4
 80019fa:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fc:	eb0d 0103 	add.w	r1, sp, r3
 8001a00:	4811      	ldr	r0, [pc, #68]	; (8001a48 <MX_ADC1_Init+0xd4>)
 8001a02:	f002 f8b1 	bl	8003b68 <HAL_ADC_ConfigChannel>
 8001a06:	b108      	cbz	r0, 8001a0c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001a08:	f7ff ff44 	bl	8001894 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001a10:	2305      	movs	r3, #5
 8001a12:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a14:	2307      	movs	r3, #7
 8001a16:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a18:	a901      	add	r1, sp, #4
 8001a1a:	480b      	ldr	r0, [pc, #44]	; (8001a48 <MX_ADC1_Init+0xd4>)
 8001a1c:	f002 f8a4 	bl	8003b68 <HAL_ADC_ConfigChannel>
 8001a20:	b108      	cbz	r0, 8001a26 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a22:	f7ff ff37 	bl	8001894 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001a26:	2311      	movs	r3, #17
 8001a28:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2e:	a901      	add	r1, sp, #4
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_ADC1_Init+0xd4>)
 8001a32:	f002 f899 	bl	8003b68 <HAL_ADC_ConfigChannel>
 8001a36:	b108      	cbz	r0, 8001a3c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001a38:	f7ff ff2c 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a3c:	b005      	add	sp, #20
 8001a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a42:	bf00      	nop
 8001a44:	20000000 	.word	0x20000000
 8001a48:	2000311c 	.word	0x2000311c
 8001a4c:	40012400 	.word	0x40012400

08001a50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a50:	b500      	push	{lr}
 8001a52:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM4_Init 0 */
	m_trap = 443; // morse_trap(443);
 8001a54:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <MX_TIM4_Init+0xa4>)
 8001a5a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8001a60:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a62:	930c      	str	r3, [sp, #48]	; 0x30
 8001a64:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	9308      	str	r3, [sp, #32]
 8001a68:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	9303      	str	r3, [sp, #12]
 8001a70:	9304      	str	r3, [sp, #16]
 8001a72:	9305      	str	r3, [sp, #20]
 8001a74:	9306      	str	r3, [sp, #24]
 8001a76:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a78:	481f      	ldr	r0, [pc, #124]	; (8001af8 <MX_TIM4_Init+0xa8>)
 8001a7a:	4a20      	ldr	r2, [pc, #128]	; (8001afc <MX_TIM4_Init+0xac>)
 8001a7c:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8001a7e:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 14400-1;
 8001a82:	f643 023f 	movw	r2, #14399	; 0x383f
 8001a86:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a88:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a8c:	f000 feb4 	bl	80027f8 <HAL_TIM_Base_Init>
 8001a90:	b108      	cbz	r0, 8001a96 <MX_TIM4_Init+0x46>
  {
    Error_Handler();
 8001a92:	f7ff feff 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a96:	a90e      	add	r1, sp, #56	; 0x38
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aa0:	4815      	ldr	r0, [pc, #84]	; (8001af8 <MX_TIM4_Init+0xa8>)
 8001aa2:	f000 fd25 	bl	80024f0 <HAL_TIM_ConfigClockSource>
 8001aa6:	b108      	cbz	r0, 8001aac <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001aa8:	f7ff fef4 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aac:	4812      	ldr	r0, [pc, #72]	; (8001af8 <MX_TIM4_Init+0xa8>)
 8001aae:	f000 fedb 	bl	8002868 <HAL_TIM_PWM_Init>
 8001ab2:	b108      	cbz	r0, 8001ab8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001ab4:	f7ff feee 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001abe:	a908      	add	r1, sp, #32
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <MX_TIM4_Init+0xa8>)
 8001ac2:	f001 f80d 	bl	8002ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	b108      	cbz	r0, 8001acc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ac8:	f7ff fee4 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001acc:	2360      	movs	r3, #96	; 0x60
 8001ace:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad4:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad6:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ad8:	2208      	movs	r2, #8
 8001ada:	a901      	add	r1, sp, #4
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <MX_TIM4_Init+0xa8>)
 8001ade:	f000 ff3f 	bl	8002960 <HAL_TIM_PWM_ConfigChannel>
 8001ae2:	b108      	cbz	r0, 8001ae8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ae4:	f7ff fed6 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <MX_TIM4_Init+0xa8>)
 8001aea:	f000 fb3b 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8001aee:	b00f      	add	sp, #60	; 0x3c
 8001af0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20002fe8 	.word	0x20002fe8
 8001afc:	40000800 	.word	0x40000800

08001b00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b00:	b500      	push	{lr}
 8001b02:	b095      	sub	sp, #84	; 0x54

  /* USER CODE BEGIN TIM1_Init 0 */
	m_trap = 445; // morse_trap(445);
 8001b04:	f240 12bd 	movw	r2, #445	; 0x1bd
 8001b08:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <MX_TIM1_Init+0x104>)
 8001b0a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9310      	str	r3, [sp, #64]	; 0x40
 8001b10:	9311      	str	r3, [sp, #68]	; 0x44
 8001b12:	9312      	str	r3, [sp, #72]	; 0x48
 8001b14:	9313      	str	r3, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b16:	930e      	str	r3, [sp, #56]	; 0x38
 8001b18:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1a:	9307      	str	r3, [sp, #28]
 8001b1c:	9308      	str	r3, [sp, #32]
 8001b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001b20:	930a      	str	r3, [sp, #40]	; 0x28
 8001b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b24:	930c      	str	r3, [sp, #48]	; 0x30
 8001b26:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	9302      	str	r3, [sp, #8]
 8001b2e:	9303      	str	r3, [sp, #12]
 8001b30:	9304      	str	r3, [sp, #16]
 8001b32:	9305      	str	r3, [sp, #20]
 8001b34:	9306      	str	r3, [sp, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b36:	4834      	ldr	r0, [pc, #208]	; (8001c08 <MX_TIM1_Init+0x108>)
 8001b38:	4a34      	ldr	r2, [pc, #208]	; (8001c0c <MX_TIM1_Init+0x10c>)
 8001b3a:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 36000;
 8001b3c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001b40:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 8001b44:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b48:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b4c:	f000 fe54 	bl	80027f8 <HAL_TIM_Base_Init>
 8001b50:	b108      	cbz	r0, 8001b56 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001b52:	f7ff fe9f 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b56:	a914      	add	r1, sp, #80	; 0x50
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b60:	4829      	ldr	r0, [pc, #164]	; (8001c08 <MX_TIM1_Init+0x108>)
 8001b62:	f000 fcc5 	bl	80024f0 <HAL_TIM_ConfigClockSource>
 8001b66:	b108      	cbz	r0, 8001b6c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b68:	f7ff fe94 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001b6c:	4826      	ldr	r0, [pc, #152]	; (8001c08 <MX_TIM1_Init+0x108>)
 8001b6e:	f000 fe5f 	bl	8002830 <HAL_TIM_OC_Init>
 8001b72:	b108      	cbz	r0, 8001b78 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001b74:	f7ff fe8e 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b7e:	a90e      	add	r1, sp, #56	; 0x38
 8001b80:	4821      	ldr	r0, [pc, #132]	; (8001c08 <MX_TIM1_Init+0x108>)
 8001b82:	f000 ffad 	bl	8002ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	b108      	cbz	r0, 8001b8c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001b88:	f7ff fe84 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	9207      	str	r2, [sp, #28]
  sConfigOC.Pulse = 0;
 8001b90:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b92:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b94:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b98:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b9a:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9c:	a907      	add	r1, sp, #28
 8001b9e:	481a      	ldr	r0, [pc, #104]	; (8001c08 <MX_TIM1_Init+0x108>)
 8001ba0:	f000 feae 	bl	8002900 <HAL_TIM_OC_ConfigChannel>
 8001ba4:	b108      	cbz	r0, 8001baa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001ba6:	f7ff fe75 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001baa:	2204      	movs	r2, #4
 8001bac:	a907      	add	r1, sp, #28
 8001bae:	4816      	ldr	r0, [pc, #88]	; (8001c08 <MX_TIM1_Init+0x108>)
 8001bb0:	f000 fea6 	bl	8002900 <HAL_TIM_OC_ConfigChannel>
 8001bb4:	b108      	cbz	r0, 8001bba <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001bb6:	f7ff fe6d 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bba:	2208      	movs	r2, #8
 8001bbc:	a907      	add	r1, sp, #28
 8001bbe:	4812      	ldr	r0, [pc, #72]	; (8001c08 <MX_TIM1_Init+0x108>)
 8001bc0:	f000 fe9e 	bl	8002900 <HAL_TIM_OC_ConfigChannel>
 8001bc4:	b108      	cbz	r0, 8001bca <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001bc6:	f7ff fe65 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	a907      	add	r1, sp, #28
 8001bce:	480e      	ldr	r0, [pc, #56]	; (8001c08 <MX_TIM1_Init+0x108>)
 8001bd0:	f000 fe96 	bl	8002900 <HAL_TIM_OC_ConfigChannel>
 8001bd4:	b108      	cbz	r0, 8001bda <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001bd6:	f7ff fe5d 	bl	8001894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bde:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001be0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001be2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bea:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bec:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bee:	4669      	mov	r1, sp
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM1_Init+0x108>)
 8001bf2:	f000 ff49 	bl	8002a88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bf6:	b108      	cbz	r0, 8001bfc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001bf8:	f7ff fe4c 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bfc:	b015      	add	sp, #84	; 0x54
 8001bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c02:	bf00      	nop
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20003220 	.word	0x20003220
 8001c0c:	40012c00 	.word	0x40012c00

08001c10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c10:	b500      	push	{lr}
 8001c12:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM3_Init 0 */
	m_trap = 444; // morse_trap(444);
 8001c14:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <MX_TIM3_Init+0xa8>)
 8001c1a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8001c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c22:	930c      	str	r3, [sp, #48]	; 0x30
 8001c24:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	9308      	str	r3, [sp, #32]
 8001c28:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	9303      	str	r3, [sp, #12]
 8001c30:	9304      	str	r3, [sp, #16]
 8001c32:	9305      	str	r3, [sp, #20]
 8001c34:	9306      	str	r3, [sp, #24]
 8001c36:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c38:	4820      	ldr	r0, [pc, #128]	; (8001cbc <MX_TIM3_Init+0xac>)
 8001c3a:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <MX_TIM3_Init+0xb0>)
 8001c3c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8001c3e:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c40:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 14400-1;
 8001c42:	f643 023f 	movw	r2, #14399	; 0x383f
 8001c46:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c48:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c4c:	f000 fdd4 	bl	80027f8 <HAL_TIM_Base_Init>
 8001c50:	b108      	cbz	r0, 8001c56 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 8001c52:	f7ff fe1f 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c56:	a90e      	add	r1, sp, #56	; 0x38
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c60:	4816      	ldr	r0, [pc, #88]	; (8001cbc <MX_TIM3_Init+0xac>)
 8001c62:	f000 fc45 	bl	80024f0 <HAL_TIM_ConfigClockSource>
 8001c66:	b108      	cbz	r0, 8001c6c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001c68:	f7ff fe14 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <MX_TIM3_Init+0xac>)
 8001c6e:	f000 fdfb 	bl	8002868 <HAL_TIM_PWM_Init>
 8001c72:	b108      	cbz	r0, 8001c78 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c74:	f7ff fe0e 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c7e:	a908      	add	r1, sp, #32
 8001c80:	480e      	ldr	r0, [pc, #56]	; (8001cbc <MX_TIM3_Init+0xac>)
 8001c82:	f000 ff2d 	bl	8002ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c86:	b108      	cbz	r0, 8001c8c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c88:	f7ff fe04 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8c:	2360      	movs	r3, #96	; 0x60
 8001c8e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c94:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c98:	2204      	movs	r2, #4
 8001c9a:	eb0d 0102 	add.w	r1, sp, r2
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <MX_TIM3_Init+0xac>)
 8001ca0:	f000 fe5e 	bl	8002960 <HAL_TIM_PWM_ConfigChannel>
 8001ca4:	b108      	cbz	r0, 8001caa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001ca6:	f7ff fdf5 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001caa:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_TIM3_Init+0xac>)
 8001cac:	f000 fa5a 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8001cb0:	b00f      	add	sp, #60	; 0x3c
 8001cb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20003098 	.word	0x20003098
 8001cc0:	40000400 	.word	0x40000400

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b500      	push	{lr}
 8001cc6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc8:	2228      	movs	r2, #40	; 0x28
 8001cca:	2100      	movs	r1, #0
 8001ccc:	eb0d 0002 	add.w	r0, sp, r2
 8001cd0:	f008 ff48 	bl	800ab64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9305      	str	r3, [sp, #20]
 8001cd8:	9306      	str	r3, [sp, #24]
 8001cda:	9307      	str	r3, [sp, #28]
 8001cdc:	9308      	str	r3, [sp, #32]
 8001cde:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	9303      	str	r3, [sp, #12]
 8001ce6:	9304      	str	r3, [sp, #16]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cf8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cfa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cfe:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d00:	a80a      	add	r0, sp, #40	; 0x28
 8001d02:	f000 ff55 	bl	8002bb0 <HAL_RCC_OscConfig>
 8001d06:	b108      	cbz	r0, 8001d0c <SystemClock_Config+0x48>
  {
    Error_Handler();
 8001d08:	f7ff fdc4 	bl	8001894 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d10:	2102      	movs	r1, #2
 8001d12:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1e:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d20:	a805      	add	r0, sp, #20
 8001d22:	f001 f97d 	bl	8003020 <HAL_RCC_ClockConfig>
 8001d26:	b108      	cbz	r0, 8001d2c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001d28:	f7ff fdb4 	bl	8001894 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d34:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d36:	a801      	add	r0, sp, #4
 8001d38:	f001 fa8a 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 8001d3c:	b108      	cbz	r0, 8001d42 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001d3e:	f7ff fda9 	bl	8001894 <Error_Handler>
  }
}
 8001d42:	b015      	add	sp, #84	; 0x54
 8001d44:	f85d fb04 	ldr.w	pc, [sp], #4

08001d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d48:	b530      	push	{r4, r5, lr}
 8001d4a:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4c:	f000 fef6 	bl	8002b3c <HAL_Init>

  /* USER CODE BEGIN Init */
	DTW_counter_init();
 8001d50:	f005 fb76 	bl	8007440 <DTW_counter_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d54:	f7ff ffb6 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d58:	f7ff fa1c 	bl	8001194 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d5c:	f7ff fa80 	bl	8001260 <MX_DMA_Init>
  MX_CAN_Init();
 8001d60:	f7ff fda0 	bl	80018a4 <MX_CAN_Init>
  MX_USART3_UART_Init();
 8001d64:	f7ff fdc6 	bl	80018f4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001d68:	f7ff fde4 	bl	8001934 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001d6c:	f7ff fe02 	bl	8001974 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001d70:	f7ff fe6e 	bl	8001a50 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001d74:	f7ff fec4 	bl	8001b00 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001d78:	f7ff ff4a 	bl	8001c10 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	if (hcan.ErrorCode != HAL_CAN_ERROR_NONE)
 8001d7c:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <main+0x15c>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	b15b      	cbz	r3, 8001d9a <main+0x52>
	{ // CAN init returned with an error
		if ((hcan.ErrorCode & HAL_CAN_ERROR_TIMEOUT) != 0)
 8001d82:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <main+0x15c>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d8a:	d003      	beq.n	8001d94 <main+0x4c>
			morse_trap(61);
 8001d8c:	203d      	movs	r0, #61	; 0x3d
 8001d8e:	f006 f949 	bl	8008024 <morse_trap>
 8001d92:	e002      	b.n	8001d9a <main+0x52>
		else
			morse_trap(62);
 8001d94:	203e      	movs	r0, #62	; 0x3e
 8001d96:	f006 f945 	bl	8008024 <morse_trap>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 304);
 8001d9a:	ac01      	add	r4, sp, #4
 8001d9c:	4d42      	ldr	r5, [pc, #264]	; (8001ea8 <main+0x160>)
 8001d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001daa:	2100      	movs	r1, #0
 8001dac:	a801      	add	r0, sp, #4
 8001dae:	f004 ff7b 	bl	8006ca8 <osThreadCreate>
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <main+0x164>)
 8001db4:	6018      	str	r0, [r3, #0]
  /* add threads, ... */
/* =================================================== */

	/* Create serial task (priority) */
	// Task handle "osThreadId SerialTaskHandle" is global
	Thrdret = xSerialTaskSendCreate(0);	// Create task and set Task priority
 8001db6:	2000      	movs	r0, #0
 8001db8:	f005 face 	bl	8007358 <xSerialTaskSendCreate>
	if (Thrdret == NULL) morse_trap(17);
 8001dbc:	b910      	cbnz	r0, 8001dc4 <main+0x7c>
 8001dbe:	2011      	movs	r0, #17
 8001dc0:	f006 f930 	bl	8008024 <morse_trap>

	/* Add bcb circular buffer to SerialTaskSend for usart1 */
	#define NUMCIRBCB1  16 // Size of circular buffer of BCB for usart6
	ret = xSerialTaskSendAdd(&huart1, NUMCIRBCB1, 1); // dma
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2110      	movs	r1, #16
 8001dc8:	4839      	ldr	r0, [pc, #228]	; (8001eb0 <main+0x168>)
 8001dca:	f005 fa8f 	bl	80072ec <xSerialTaskSendAdd>
	if (ret < 0) morse_trap(1); // Panic LED flashing
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	da02      	bge.n	8001dd8 <main+0x90>
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f006 f926 	bl	8008024 <morse_trap>

	/* Add bcb circular buffer to SerialTaskSend for usart3 */
	#define NUMCIRBCB3  16 // Size of circular buffer of BCB for usart3
	ret = xSerialTaskSendAdd(&huart3, NUMCIRBCB3, 0); // char-by-char
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2110      	movs	r1, #16
 8001ddc:	4835      	ldr	r0, [pc, #212]	; (8001eb4 <main+0x16c>)
 8001dde:	f005 fa85 	bl	80072ec <xSerialTaskSendAdd>
	if (ret < 0) morse_trap(2); // Panic LED flashing
 8001de2:	2800      	cmp	r0, #0
 8001de4:	da02      	bge.n	8001dec <main+0xa4>
 8001de6:	2002      	movs	r0, #2
 8001de8:	f006 f91c 	bl	8008024 <morse_trap>

	/* Setup semaphore for yprint and sprintf et al. */
	yprintf_init();
 8001dec:	f005 fec8 	bl	8007b80 <yprintf_init>

	/* Create serial receiving task. */
	Thrdret = xSerialTaskReceiveCreate(1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f006 f833 	bl	8007e5c <xSerialTaskReceiveCreate>
	if (Thrdret == NULL) morse_trap(21);
 8001df6:	b910      	cbnz	r0, 8001dfe <main+0xb6>
 8001df8:	2015      	movs	r0, #21
 8001dfa:	f006 f913 	bl	8008024 <morse_trap>

  /* definition and creation of CanTxTask - CAN driver TX interface. */
  Qidret = xCanTxTaskCreate(1, 32); // CanTask priority, Number of msgs in queue
 8001dfe:	2120      	movs	r1, #32
 8001e00:	2001      	movs	r0, #1
 8001e02:	f005 fb69 	bl	80074d8 <xCanTxTaskCreate>
	if (Qidret < 0) morse_trap(5);   // Queue creation
	if (CanTxTaskHandle == NULL) morse_trap(51); // Task creation 
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <main+0x170>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b913      	cbnz	r3, 8001e12 <main+0xca>
 8001e0c:	2033      	movs	r0, #51	; 0x33
 8001e0e:	f006 f909 	bl	8008024 <morse_trap>
//	if (Qidret < 0) morse_trap(6);     // Queue creation
//	if (CanRxTaskHandle == NULL) morse_trap(61); // Task creation 

	/* Setup TX linked list for CAN  */
   // CAN1 (CAN_HandleTypeDef *phcan, uint8_t canidx, uint16_t numtx, uint16_t numrx);
	pctl0 = can_iface_init(&hcan, 0, 32, 64);
 8001e12:	2340      	movs	r3, #64	; 0x40
 8001e14:	2220      	movs	r2, #32
 8001e16:	2100      	movs	r1, #0
 8001e18:	4822      	ldr	r0, [pc, #136]	; (8001ea4 <main+0x15c>)
 8001e1a:	f005 fc15 	bl	8007648 <can_iface_init>
 8001e1e:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <main+0x174>)
 8001e20:	6018      	str	r0, [r3, #0]
	if (pctl0 == NULL) morse_trap(7); // Panic LED flashing
 8001e22:	b910      	cbnz	r0, 8001e2a <main+0xe2>
 8001e24:	2007      	movs	r0, #7
 8001e26:	f006 f8fd 	bl	8008024 <morse_trap>
	if (pctl0->ret < 0) morse_trap(77);
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <main+0x174>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f993 30b0 	ldrsb.w	r3, [r3, #176]	; 0xb0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da02      	bge.n	8001e3c <main+0xf4>
 8001e36:	204d      	movs	r0, #77	; 0x4d
 8001e38:	f006 f8f4 	bl	8008024 <morse_trap>

	/* Setup CAN hardware filters to default to accept all ids. */
	HAL_StatusTypeDef Cret;
	Cret = canfilter_setup_first(1, &hcan, 15); // CAN1
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	4919      	ldr	r1, [pc, #100]	; (8001ea4 <main+0x15c>)
 8001e40:	2001      	movs	r0, #1
 8001e42:	f005 fddb 	bl	80079fc <canfilter_setup_first>
	if (Cret == HAL_ERROR) morse_trap(9);
 8001e46:	2801      	cmp	r0, #1
 8001e48:	d102      	bne.n	8001e50 <main+0x108>
 8001e4a:	2009      	movs	r0, #9
 8001e4c:	f006 f8ea 	bl	8008024 <morse_trap>

	/* Remove "accept all" CAN msgs and add specific id & mask, or id here. */
	// See canfilter_setup.h

	/* Contactor control. */
	Thrdret = xContactorTaskCreate(1);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f008 fa03 	bl	800a25c <xContactorTaskCreate>
	if (Thrdret == NULL) morse_trap(18);
 8001e56:	b910      	cbnz	r0, 8001e5e <main+0x116>
 8001e58:	2012      	movs	r0, #18
 8001e5a:	f006 f8e3 	bl	8008024 <morse_trap>

	/* Create MailboxTask */
	Thrdret = xMailboxTaskCreate(3);
 8001e5e:	2003      	movs	r0, #3
 8001e60:	f006 fb44 	bl	80084ec <xMailboxTaskCreate>
	if (Thrdret == NULL) morse_trap(19);
 8001e64:	b910      	cbnz	r0, 8001e6c <main+0x124>
 8001e66:	2013      	movs	r0, #19
 8001e68:	f006 f8dc 	bl	8008024 <morse_trap>

	/* Create Mailbox control block w 'take' pointer for each CAN module. */
	struct MAILBOXCANNUM* pmbxret;
	// (CAN1 control block pointer, size of circular buffer)
	pmbxret = MailboxTask_add_CANlist(pctl0, 16);
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <main+0x174>)
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	f006 fa0d 	bl	8008290 <MailboxTask_add_CANlist>
	if (pmbxret == NULL) morse_trap(16);
 8001e76:	b910      	cbnz	r0, 8001e7e <main+0x136>
 8001e78:	2010      	movs	r0, #16
 8001e7a:	f006 f8d3 	bl	8008024 <morse_trap>

	/* Select interrupts for CAN1 */
	HAL_CAN_ActivateNotification(&hcan, \
 8001e7e:	4c09      	ldr	r4, [pc, #36]	; (8001ea4 <main+0x15c>)
 8001e80:	2113      	movs	r1, #19
 8001e82:	4620      	mov	r0, r4
 8001e84:	f002 fba2 	bl	80045cc <HAL_CAN_ActivateNotification>
		CAN_IT_TX_MAILBOX_EMPTY     |  \
		CAN_IT_RX_FIFO0_MSG_PENDING |  \
		CAN_IT_RX_FIFO1_MSG_PENDING    );

	/* Start CANs */
	HAL_CAN_Start(&hcan); // CAN1
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f002 fa39 	bl	8004300 <HAL_CAN_Start>

	/* ADC summing, calibration, etc. */
	Thrdret = 	xADCTaskCreate(2);
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f006 fc2a 	bl	80086e8 <xADCTaskCreate>
	if (Thrdret == NULL) morse_trap(20);
 8001e94:	b910      	cbnz	r0, 8001e9c <main+0x154>
 8001e96:	2014      	movs	r0, #20
 8001e98:	f006 f8c4 	bl	8008024 <morse_trap>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8001e9c:	f004 fefe 	bl	8006c9c <osKernelStart>
 8001ea0:	e7fe      	b.n	8001ea0 <main+0x158>
 8001ea2:	bf00      	nop
 8001ea4:	2000306c 	.word	0x2000306c
 8001ea8:	0800e438 	.word	0x0800e438
 8001eac:	20002fe0 	.word	0x20002fe0
 8001eb0:	20003190 	.word	0x20003190
 8001eb4:	20003028 	.word	0x20003028
 8001eb8:	200032f8 	.word	0x200032f8
 8001ebc:	200031d4 	.word	0x200031d4

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop

08001ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec4:	e7fe      	b.n	8001ec4 <HardFault_Handler>
 8001ec6:	bf00      	nop

08001ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler>
 8001eca:	bf00      	nop

08001ecc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ecc:	e7fe      	b.n	8001ecc <BusFault_Handler>
 8001ece:	bf00      	nop

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	e7fe      	b.n	8001ed0 <UsageFault_Handler>
 8001ed2:	bf00      	nop

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eda:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA1_Channel1_IRQHandler+0xc>)
 8001edc:	f001 fc98 	bl	8003810 <HAL_DMA_IRQHandler>
 8001ee0:	bd08      	pop	{r3, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200031d8 	.word	0x200031d8

08001ee8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ee8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001eea:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <DMA1_Channel4_IRQHandler+0xc>)
 8001eec:	f001 fc90 	bl	8003810 <HAL_DMA_IRQHandler>
 8001ef0:	bd08      	pop	{r3, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200030d8 	.word	0x200030d8

08001ef8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001efa:	4802      	ldr	r0, [pc, #8]	; (8001f04 <DMA1_Channel5_IRQHandler+0xc>)
 8001efc:	f001 fc88 	bl	8003810 <HAL_DMA_IRQHandler>
 8001f00:	bd08      	pop	{r3, pc}
 8001f02:	bf00      	nop
 8001f04:	2000314c 	.word	0x2000314c

08001f08 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001f08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f0a:	4802      	ldr	r0, [pc, #8]	; (8001f14 <USB_HP_CAN1_TX_IRQHandler+0xc>)
 8001f0c:	f002 fb80 	bl	8004610 <HAL_CAN_IRQHandler>
 8001f10:	bd08      	pop	{r3, pc}
 8001f12:	bf00      	nop
 8001f14:	2000306c 	.word	0x2000306c

08001f18 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f1a:	4802      	ldr	r0, [pc, #8]	; (8001f24 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001f1c:	f002 fb78 	bl	8004610 <HAL_CAN_IRQHandler>
 8001f20:	bd08      	pop	{r3, pc}
 8001f22:	bf00      	nop
 8001f24:	2000306c 	.word	0x2000306c

08001f28 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f2a:	4802      	ldr	r0, [pc, #8]	; (8001f34 <CAN1_RX1_IRQHandler+0xc>)
 8001f2c:	f002 fb70 	bl	8004610 <HAL_CAN_IRQHandler>
 8001f30:	bd08      	pop	{r3, pc}
 8001f32:	bf00      	nop
 8001f34:	2000306c 	.word	0x2000306c

08001f38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f3a:	4802      	ldr	r0, [pc, #8]	; (8001f44 <TIM2_IRQHandler+0xc>)
 8001f3c:	f000 fb6a 	bl	8002614 <HAL_TIM_IRQHandler>
 8001f40:	bd08      	pop	{r3, pc}
 8001f42:	bf00      	nop
 8001f44:	20003268 	.word	0x20003268

08001f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f4a:	4802      	ldr	r0, [pc, #8]	; (8001f54 <USART1_IRQHandler+0xc>)
 8001f4c:	f002 ff9e 	bl	8004e8c <HAL_UART_IRQHandler>
 8001f50:	bd08      	pop	{r3, pc}
 8001f52:	bf00      	nop
 8001f54:	20003190 	.word	0x20003190

08001f58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f5a:	4802      	ldr	r0, [pc, #8]	; (8001f64 <USART3_IRQHandler+0xc>)
 8001f5c:	f002 ff96 	bl	8004e8c <HAL_UART_IRQHandler>
 8001f60:	bd08      	pop	{r3, pc}
 8001f62:	bf00      	nop
 8001f64:	20003028 	.word	0x20003028

08001f68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f68:	b500      	push	{lr}
 8001f6a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	619a      	str	r2, [r3, #24]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	f002 0201 	and.w	r2, r2, #1
 8001f7c:	9200      	str	r2, [sp, #0]
 8001f7e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f86:	61da      	str	r2, [r3, #28]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	210f      	movs	r1, #15
 8001f96:	f06f 0001 	mvn.w	r0, #1
 8001f9a:	f001 fced 	bl	8003978 <HAL_NVIC_SetPriority>

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f9e:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <HAL_MspInit+0x50>)
 8001fa0:	6853      	ldr	r3, [r2, #4]
 8001fa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001faa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fac:	b003      	add	sp, #12
 8001fae:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000

08001fbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	9303      	str	r3, [sp, #12]
 8001fc6:	9304      	str	r3, [sp, #16]
 8001fc8:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001fca:	6802      	ldr	r2, [r0, #0]
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_ADC_MspInit+0x88>)
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d135      	bne.n	800203e <HAL_ADC_MspInit+0x82>
 8001fd2:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fd4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fde:	619a      	str	r2, [r3, #24]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001fe6:	9200      	str	r2, [sp, #0]
 8001fe8:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	f042 0204 	orr.w	r2, r2, #4
 8001ff0:	619a      	str	r2, [r3, #24]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	9b01      	ldr	r3, [sp, #4]
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = Supply_5V_Pin|Battery_current_sensor_Pin|spare_current_sensor_Pin|Supply_12V_Pin;
 8001ffc:	2395      	movs	r3, #149	; 0x95
 8001ffe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002000:	2303      	movs	r3, #3
 8002002:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	a902      	add	r1, sp, #8
 8002006:	4810      	ldr	r0, [pc, #64]	; (8002048 <HAL_ADC_MspInit+0x8c>)
 8002008:	f001 fa30 	bl	800346c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800200c:	480f      	ldr	r0, [pc, #60]	; (800204c <HAL_ADC_MspInit+0x90>)
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_ADC_MspInit+0x94>)
 8002010:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002012:	2300      	movs	r3, #0
 8002014:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002016:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800201c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002020:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002026:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002028:	2220      	movs	r2, #32
 800202a:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800202c:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800202e:	f001 fb31 	bl	8003694 <HAL_DMA_Init>
 8002032:	b108      	cbz	r0, 8002038 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8002034:	f7ff fc2e 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_ADC_MspInit+0x90>)
 800203a:	6223      	str	r3, [r4, #32]
 800203c:	625c      	str	r4, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800203e:	b006      	add	sp, #24
 8002040:	bd10      	pop	{r4, pc}
 8002042:	bf00      	nop
 8002044:	40012400 	.word	0x40012400
 8002048:	40010800 	.word	0x40010800
 800204c:	200031d8 	.word	0x200031d8
 8002050:	40020008 	.word	0x40020008

08002054 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002054:	b530      	push	{r4, r5, lr}
 8002056:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	2300      	movs	r3, #0
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	9303      	str	r3, [sp, #12]
 800205e:	9304      	str	r3, [sp, #16]
 8002060:	9305      	str	r3, [sp, #20]
  if(hcan->Instance==CAN1)
 8002062:	6802      	ldr	r2, [r0, #0]
 8002064:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_CAN_MspInit+0x9c>)
 8002066:	429a      	cmp	r2, r3
 8002068:	d140      	bne.n	80020ec <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800206a:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002074:	61da      	str	r2, [r3, #28]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	f042 0204 	orr.w	r2, r2, #4
 8002086:	619a      	str	r2, [r3, #24]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	9b01      	ldr	r3, [sp, #4]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002092:	ac06      	add	r4, sp, #24
 8002094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002098:	f844 3d10 	str.w	r3, [r4, #-16]!
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	4d15      	ldr	r5, [pc, #84]	; (80020f4 <HAL_CAN_MspInit+0xa0>)
 800209e:	4621      	mov	r1, r4
 80020a0:	4628      	mov	r0, r5
 80020a2:	f001 f9e3 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	4621      	mov	r1, r4
 80020b6:	4628      	mov	r0, r5
 80020b8:	f001 f9d8 	bl	800346c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 6, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2106      	movs	r1, #6
 80020c0:	2013      	movs	r0, #19
 80020c2:	f001 fc59 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80020c6:	2013      	movs	r0, #19
 80020c8:	f001 fc88 	bl	80039dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 6, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2106      	movs	r1, #6
 80020d0:	2014      	movs	r0, #20
 80020d2:	f001 fc51 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80020d6:	2014      	movs	r0, #20
 80020d8:	f001 fc80 	bl	80039dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 6, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2106      	movs	r1, #6
 80020e0:	2015      	movs	r0, #21
 80020e2:	f001 fc49 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80020e6:	2015      	movs	r0, #21
 80020e8:	f001 fc78 	bl	80039dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80020ec:	b007      	add	sp, #28
 80020ee:	bd30      	pop	{r4, r5, pc}
 80020f0:	40006400 	.word	0x40006400
 80020f4:	40010800 	.word	0x40010800

080020f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f8:	b084      	sub	sp, #16

  if(htim_base->Instance==TIM1)
 80020fa:	6803      	ldr	r3, [r0, #0]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_TIM_Base_MspInit+0x5c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10a      	bne.n	8002118 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_TIM_Base_MspInit+0x60>)
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210a:	619a      	str	r2, [r3, #24]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	9b01      	ldr	r3, [sp, #4]
 8002116:	e01a      	b.n	800214e <HAL_TIM_Base_MspInit+0x56>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_TIM_Base_MspInit+0x64>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10a      	bne.n	8002134 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_TIM_Base_MspInit+0x60>)
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	f042 0202 	orr.w	r2, r2, #2
 8002126:	61da      	str	r2, [r3, #28]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	9b02      	ldr	r3, [sp, #8]
 8002132:	e00c      	b.n	800214e <HAL_TIM_Base_MspInit+0x56>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_TIM_Base_MspInit+0x68>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d109      	bne.n	800214e <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_TIM_Base_MspInit+0x60>)
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	f042 0204 	orr.w	r2, r2, #4
 8002142:	61da      	str	r2, [r3, #28]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	9303      	str	r3, [sp, #12]
 800214c:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800214e:	b004      	add	sp, #16
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40012c00 	.word	0x40012c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800

08002164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002164:	b500      	push	{lr}
 8002166:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	2300      	movs	r3, #0
 800216a:	9302      	str	r3, [sp, #8]
 800216c:	9303      	str	r3, [sp, #12]
 800216e:	9304      	str	r3, [sp, #16]
 8002170:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8002172:	6803      	ldr	r3, [r0, #0]
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_TIM_MspPostInit+0x84>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d11c      	bne.n	80021b4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_TIM_MspPostInit+0x88>)
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	f042 0208 	orr.w	r2, r2, #8
 8002182:	619a      	str	r2, [r3, #24]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	9b00      	ldr	r3, [sp, #0]
    /**TIM3 GPIO Configuration    
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = coil__2_drive__U25_2_Pin;
 800218e:	2320      	movs	r3, #32
 8002190:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(coil__2_drive__U25_2_GPIO_Port, &GPIO_InitStruct);
 8002198:	a902      	add	r1, sp, #8
 800219a:	4815      	ldr	r0, [pc, #84]	; (80021f0 <HAL_TIM_MspPostInit+0x8c>)
 800219c:	f001 f966 	bl	800346c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_TIM_MspPostInit+0x90>)
 80021a2:	6853      	ldr	r3, [r2, #4]
 80021a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021b0:	6053      	str	r3, [r2, #4]
 80021b2:	e016      	b.n	80021e2 <HAL_TIM_MspPostInit+0x7e>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_TIM_MspPostInit+0x94>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d113      	bne.n	80021e2 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_TIM_MspPostInit+0x88>)
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	f042 0208 	orr.w	r2, r2, #8
 80021c2:	619a      	str	r2, [r3, #24]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	9b01      	ldr	r3, [sp, #4]
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = FET_drive_contactor__1__U26_2_Pin;
 80021ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FET_drive_contactor__1__U26_2_GPIO_Port, &GPIO_InitStruct);
 80021da:	a902      	add	r1, sp, #8
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <HAL_TIM_MspPostInit+0x8c>)
 80021de:	f001 f945 	bl	800346c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021e2:	b007      	add	sp, #28
 80021e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010c00 	.word	0x40010c00
 80021f4:	40010000 	.word	0x40010000
 80021f8:	40000800 	.word	0x40000800

080021fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	2300      	movs	r3, #0
 8002202:	9304      	str	r3, [sp, #16]
 8002204:	9305      	str	r3, [sp, #20]
 8002206:	9306      	str	r3, [sp, #24]
 8002208:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	4a4a      	ldr	r2, [pc, #296]	; (8002338 <HAL_UART_MspInit+0x13c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d15b      	bne.n	80022ca <HAL_UART_MspInit+0xce>
 8002212:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002214:	4b49      	ldr	r3, [pc, #292]	; (800233c <HAL_UART_MspInit+0x140>)
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800221c:	619a      	str	r2, [r3, #24]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002224:	9200      	str	r2, [sp, #0]
 8002226:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	f042 0204 	orr.w	r2, r2, #4
 800222e:	619a      	str	r2, [r3, #24]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	9b01      	ldr	r3, [sp, #4]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800223a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800223e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	4e3d      	ldr	r6, [pc, #244]	; (8002340 <HAL_UART_MspInit+0x144>)
 800224a:	a904      	add	r1, sp, #16
 800224c:	4630      	mov	r0, r6
 800224e:	f001 f90d 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002256:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2500      	movs	r5, #0
 800225a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	a904      	add	r1, sp, #16
 8002260:	4630      	mov	r0, r6
 8002262:	f001 f903 	bl	800346c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002266:	4837      	ldr	r0, [pc, #220]	; (8002344 <HAL_UART_MspInit+0x148>)
 8002268:	4b37      	ldr	r3, [pc, #220]	; (8002348 <HAL_UART_MspInit+0x14c>)
 800226a:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800226c:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800226e:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002274:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002276:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002278:	2320      	movs	r3, #32
 800227a:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800227c:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800227e:	f001 fa09 	bl	8003694 <HAL_DMA_Init>
 8002282:	b108      	cbz	r0, 8002288 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8002284:	f7ff fb06 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <HAL_UART_MspInit+0x148>)
 800228a:	6363      	str	r3, [r4, #52]	; 0x34
 800228c:	625c      	str	r4, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800228e:	482f      	ldr	r0, [pc, #188]	; (800234c <HAL_UART_MspInit+0x150>)
 8002290:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_UART_MspInit+0x154>)
 8002292:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002294:	2310      	movs	r3, #16
 8002296:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800229c:	2280      	movs	r2, #128	; 0x80
 800229e:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a0:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a2:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022a4:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022a6:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022a8:	f001 f9f4 	bl	8003694 <HAL_DMA_Init>
 80022ac:	b108      	cbz	r0, 80022b2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80022ae:	f7ff faf1 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_UART_MspInit+0x150>)
 80022b4:	6323      	str	r3, [r4, #48]	; 0x30
 80022b6:	625c      	str	r4, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	210a      	movs	r1, #10
 80022bc:	2025      	movs	r0, #37	; 0x25
 80022be:	f001 fb5b 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022c2:	2025      	movs	r0, #37	; 0x25
 80022c4:	f001 fb8a 	bl	80039dc <HAL_NVIC_EnableIRQ>
 80022c8:	e033      	b.n	8002332 <HAL_UART_MspInit+0x136>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80022ca:	4a22      	ldr	r2, [pc, #136]	; (8002354 <HAL_UART_MspInit+0x158>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d130      	bne.n	8002332 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_UART_MspInit+0x140>)
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022d8:	61da      	str	r2, [r3, #28]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80022e0:	9202      	str	r2, [sp, #8]
 80022e2:	9a02      	ldr	r2, [sp, #8]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	f042 0208 	orr.w	r2, r2, #8
 80022ea:	619a      	str	r2, [r3, #24]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	9303      	str	r3, [sp, #12]
 80022f4:	9b03      	ldr	r3, [sp, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	4d14      	ldr	r5, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x15c>)
 8002306:	a904      	add	r1, sp, #16
 8002308:	4628      	mov	r0, r5
 800230a:	f001 f8af 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800230e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002312:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2400      	movs	r4, #0
 8002316:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231a:	a904      	add	r1, sp, #16
 800231c:	4628      	mov	r0, r5
 800231e:	f001 f8a5 	bl	800346c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 9, 0);
 8002322:	4622      	mov	r2, r4
 8002324:	2109      	movs	r1, #9
 8002326:	2027      	movs	r0, #39	; 0x27
 8002328:	f001 fb26 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800232c:	2027      	movs	r0, #39	; 0x27
 800232e:	f001 fb55 	bl	80039dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002332:	b008      	add	sp, #32
 8002334:	bd70      	pop	{r4, r5, r6, pc}
 8002336:	bf00      	nop
 8002338:	40013800 	.word	0x40013800
 800233c:	40021000 	.word	0x40021000
 8002340:	40010800 	.word	0x40010800
 8002344:	2000314c 	.word	0x2000314c
 8002348:	40020058 	.word	0x40020058
 800234c:	200030d8 	.word	0x200030d8
 8002350:	40020044 	.word	0x40020044
 8002354:	40004800 	.word	0x40004800
 8002358:	40010c00 	.word	0x40010c00

0800235c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800235c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800235e:	6a03      	ldr	r3, [r0, #32]
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002366:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002368:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800236a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800236c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002370:	680c      	ldr	r4, [r1, #0]
 8002372:	ea42 0504 	orr.w	r5, r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002376:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800237a:	688b      	ldr	r3, [r1, #8]
 800237c:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800237e:	4c0c      	ldr	r4, [pc, #48]	; (80023b0 <TIM_OC1_SetConfig+0x54>)
 8002380:	42a0      	cmp	r0, r4
 8002382:	d105      	bne.n	8002390 <TIM_OC1_SetConfig+0x34>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002384:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002388:	68ca      	ldr	r2, [r1, #12]
 800238a:	4313      	orrs	r3, r2
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800238c:	f023 0304 	bic.w	r3, r3, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002390:	4c07      	ldr	r4, [pc, #28]	; (80023b0 <TIM_OC1_SetConfig+0x54>)
 8002392:	42a0      	cmp	r0, r4
 8002394:	d105      	bne.n	80023a2 <TIM_OC1_SetConfig+0x46>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002396:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800239a:	694a      	ldr	r2, [r1, #20]
 800239c:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800239e:	698e      	ldr	r6, [r1, #24]
 80023a0:	4316      	orrs	r6, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a2:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a4:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023a6:	684a      	ldr	r2, [r1, #4]
 80023a8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023aa:	6203      	str	r3, [r0, #32]
}
 80023ac:	bc70      	pop	{r4, r5, r6}
 80023ae:	4770      	bx	lr
 80023b0:	40012c00 	.word	0x40012c00

080023b4 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023b6:	6a03      	ldr	r3, [r0, #32]
 80023b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023c2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023c4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023c8:	680c      	ldr	r4, [r1, #0]
 80023ca:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023d0:	688c      	ldr	r4, [r1, #8]
 80023d2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023d6:	4c0e      	ldr	r4, [pc, #56]	; (8002410 <TIM_OC3_SetConfig+0x5c>)
 80023d8:	42a0      	cmp	r0, r4
 80023da:	d106      	bne.n	80023ea <TIM_OC3_SetConfig+0x36>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023e0:	68cc      	ldr	r4, [r1, #12]
 80023e2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023ea:	4c09      	ldr	r4, [pc, #36]	; (8002410 <TIM_OC3_SetConfig+0x5c>)
 80023ec:	42a0      	cmp	r0, r4
 80023ee:	d107      	bne.n	8002400 <TIM_OC3_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023f0:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023f4:	694c      	ldr	r4, [r1, #20]
 80023f6:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023fa:	698c      	ldr	r4, [r1, #24]
 80023fc:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002400:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002402:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002404:	684a      	ldr	r2, [r1, #4]
 8002406:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002408:	6203      	str	r3, [r0, #32]
}
 800240a:	bc30      	pop	{r4, r5}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40012c00 	.word	0x40012c00

08002414 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002414:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002416:	6a03      	ldr	r3, [r0, #32]
 8002418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800241c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800241e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002420:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002422:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002424:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002428:	680d      	ldr	r5, [r1, #0]
 800242a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800242e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002432:	688d      	ldr	r5, [r1, #8]
 8002434:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002438:	4d07      	ldr	r5, [pc, #28]	; (8002458 <TIM_OC4_SetConfig+0x44>)
 800243a:	42a8      	cmp	r0, r5
 800243c:	d104      	bne.n	8002448 <TIM_OC4_SetConfig+0x34>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800243e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002442:	694d      	ldr	r5, [r1, #20]
 8002444:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002448:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800244a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800244c:	684a      	ldr	r2, [r1, #4]
 800244e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002450:	6203      	str	r3, [r0, #32]
}
 8002452:	bc30      	pop	{r4, r5}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40012c00 	.word	0x40012c00

0800245c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800245c:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800245e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002460:	6a04      	ldr	r4, [r0, #32]
 8002462:	f024 0401 	bic.w	r4, r4, #1
 8002466:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002468:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800246a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800246e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002472:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002476:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002478:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800247a:	6201      	str	r1, [r0, #32]
}
 800247c:	bc10      	pop	{r4}
 800247e:	4770      	bx	lr

08002480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002480:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002482:	6a03      	ldr	r3, [r0, #32]
 8002484:	f023 0310 	bic.w	r3, r3, #16
 8002488:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800248c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800248e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002492:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002496:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800249a:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800249e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024a0:	6201      	str	r1, [r0, #32]
}
 80024a2:	bc10      	pop	{r4}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop

080024a8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80024a8:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024ae:	f041 0107 	orr.w	r1, r1, #7
 80024b2:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80024b4:	6083      	str	r3, [r0, #8]
 80024b6:	4770      	bx	lr

080024b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024b8:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80024ba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024bc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024c0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80024c4:	4319      	orrs	r1, r3
 80024c6:	ea44 0301 	orr.w	r3, r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ca:	6083      	str	r3, [r0, #8]
}
 80024cc:	bc10      	pop	{r4}
 80024ce:	4770      	bx	lr

080024d0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d0:	6802      	ldr	r2, [r0, #0]
 80024d2:	68d3      	ldr	r3, [r2, #12]
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	60d3      	str	r3, [r2, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80024da:	6802      	ldr	r2, [r0, #0]
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 80024e4:	2000      	movs	r0, #0
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop

080024f0 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	f000 8083 	beq.w	8002600 <HAL_TIM_ConfigClockSource+0x110>
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80024fa:	b510      	push	{r4, lr}
 80024fc:	4604      	mov	r4, r0
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024fe:	2301      	movs	r3, #1
 8002500:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250a:	6802      	ldr	r2, [r0, #0]
 800250c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800250e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002512:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002516:	6093      	str	r3, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 8002518:	680b      	ldr	r3, [r1, #0]
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d04c      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0xc8>
 800251e:	d80a      	bhi.n	8002536 <HAL_TIM_ConfigClockSource+0x46>
 8002520:	2b10      	cmp	r3, #16
 8002522:	d058      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0xe6>
 8002524:	d802      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x3c>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d050      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0xdc>
 800252a:	e062      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
 800252c:	2b20      	cmp	r3, #32
 800252e:	d057      	beq.n	80025e0 <HAL_TIM_ConfigClockSource+0xf0>
 8002530:	2b30      	cmp	r3, #48	; 0x30
 8002532:	d05a      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0xfa>
 8002534:	e05d      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
 8002536:	2b70      	cmp	r3, #112	; 0x70
 8002538:	d012      	beq.n	8002560 <HAL_TIM_ConfigClockSource+0x70>
 800253a:	d804      	bhi.n	8002546 <HAL_TIM_ConfigClockSource+0x56>
 800253c:	2b50      	cmp	r3, #80	; 0x50
 800253e:	d027      	beq.n	8002590 <HAL_TIM_ConfigClockSource+0xa0>
 8002540:	2b60      	cmp	r3, #96	; 0x60
 8002542:	d02f      	beq.n	80025a4 <HAL_TIM_ConfigClockSource+0xb4>
 8002544:	e055      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254a:	d003      	beq.n	8002554 <HAL_TIM_ConfigClockSource+0x64>
 800254c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002550:	d012      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0x88>
 8002552:	e04e      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002554:	6802      	ldr	r2, [r0, #0]
 8002556:	6893      	ldr	r3, [r2, #8]
 8002558:	f023 0307 	bic.w	r3, r3, #7
 800255c:	6093      	str	r3, [r2, #8]
    }
    break;
 800255e:	e048      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002560:	68cb      	ldr	r3, [r1, #12]
 8002562:	684a      	ldr	r2, [r1, #4]
 8002564:	6889      	ldr	r1, [r1, #8]
 8002566:	6800      	ldr	r0, [r0, #0]
 8002568:	f7ff ffa6 	bl	80024b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800256c:	6822      	ldr	r2, [r4, #0]
 800256e:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002574:	6093      	str	r3, [r2, #8]
    }
    break;
 8002576:	e03c      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002578:	68cb      	ldr	r3, [r1, #12]
 800257a:	684a      	ldr	r2, [r1, #4]
 800257c:	6889      	ldr	r1, [r1, #8]
 800257e:	6800      	ldr	r0, [r0, #0]
 8002580:	f7ff ff9a 	bl	80024b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002584:	6822      	ldr	r2, [r4, #0]
 8002586:	6893      	ldr	r3, [r2, #8]
 8002588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258c:	6093      	str	r3, [r2, #8]
    }
    break;
 800258e:	e030      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002590:	68ca      	ldr	r2, [r1, #12]
 8002592:	6849      	ldr	r1, [r1, #4]
 8002594:	6800      	ldr	r0, [r0, #0]
 8002596:	f7ff ff61 	bl	800245c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800259a:	2150      	movs	r1, #80	; 0x50
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	f7ff ff83 	bl	80024a8 <TIM_ITRx_SetConfig>
    }
    break;
 80025a2:	e026      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025a4:	68ca      	ldr	r2, [r1, #12]
 80025a6:	6849      	ldr	r1, [r1, #4]
 80025a8:	6800      	ldr	r0, [r0, #0]
 80025aa:	f7ff ff69 	bl	8002480 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ae:	2160      	movs	r1, #96	; 0x60
 80025b0:	6820      	ldr	r0, [r4, #0]
 80025b2:	f7ff ff79 	bl	80024a8 <TIM_ITRx_SetConfig>
    }
    break;
 80025b6:	e01c      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b8:	68ca      	ldr	r2, [r1, #12]
 80025ba:	6849      	ldr	r1, [r1, #4]
 80025bc:	6800      	ldr	r0, [r0, #0]
 80025be:	f7ff ff4d 	bl	800245c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025c2:	2140      	movs	r1, #64	; 0x40
 80025c4:	6820      	ldr	r0, [r4, #0]
 80025c6:	f7ff ff6f 	bl	80024a8 <TIM_ITRx_SetConfig>
    }
    break;
 80025ca:	e012      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
  case TIM_CLOCKSOURCE_ITR0:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80025cc:	2100      	movs	r1, #0
 80025ce:	6800      	ldr	r0, [r0, #0]
 80025d0:	f7ff ff6a 	bl	80024a8 <TIM_ITRx_SetConfig>
    }
    break;
 80025d4:	e00d      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
  case TIM_CLOCKSOURCE_ITR1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80025d6:	2110      	movs	r1, #16
 80025d8:	6800      	ldr	r0, [r0, #0]
 80025da:	f7ff ff65 	bl	80024a8 <TIM_ITRx_SetConfig>
    }
    break;
 80025de:	e008      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
  case TIM_CLOCKSOURCE_ITR2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80025e0:	2120      	movs	r1, #32
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	f7ff ff60 	bl	80024a8 <TIM_ITRx_SetConfig>
    }
    break;
 80025e8:	e003      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x102>
  case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80025ea:	2130      	movs	r1, #48	; 0x30
 80025ec:	6800      	ldr	r0, [r0, #0]
 80025ee:	f7ff ff5b 	bl	80024a8 <TIM_ITRx_SetConfig>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 80025fe:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002600:	2002      	movs	r0, #2
 8002602:	4770      	bx	lr

08002604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop

08002608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop

0800260c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop

08002614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002614:	b510      	push	{r4, lr}
 8002616:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002618:	6803      	ldr	r3, [r0, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	f012 0f02 	tst.w	r2, #2
 8002620:	d017      	beq.n	8002652 <HAL_TIM_IRQHandler+0x3e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	f012 0f02 	tst.w	r2, #2
 8002628:	d013      	beq.n	8002652 <HAL_TIM_IRQHandler+0x3e>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800262a:	f06f 0202 	mvn.w	r2, #2
 800262e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002630:	2301      	movs	r3, #1
 8002632:	7703      	strb	r3, [r0, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002634:	6803      	ldr	r3, [r0, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f013 0f03 	tst.w	r3, #3
 800263c:	d002      	beq.n	8002644 <HAL_TIM_IRQHandler+0x30>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800263e:	f7ff ffe3 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8002642:	e004      	b.n	800264e <HAL_TIM_IRQHandler+0x3a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002644:	f7ff ffde 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	4620      	mov	r0, r4
 800264a:	f7ff ffdf 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	2300      	movs	r3, #0
 8002650:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	f012 0f04 	tst.w	r2, #4
 800265a:	d019      	beq.n	8002690 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	f012 0f04 	tst.w	r2, #4
 8002662:	d015      	beq.n	8002690 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002664:	f06f 0204 	mvn.w	r2, #4
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800266a:	2302      	movs	r3, #2
 800266c:	7723      	strb	r3, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002676:	d003      	beq.n	8002680 <HAL_TIM_IRQHandler+0x6c>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff ffc5 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 800267e:	e005      	b.n	800268c <HAL_TIM_IRQHandler+0x78>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff ffbf 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff ffc0 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268c:	2300      	movs	r3, #0
 800268e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	f012 0f08 	tst.w	r2, #8
 8002698:	d019      	beq.n	80026ce <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	f012 0f08 	tst.w	r2, #8
 80026a0:	d015      	beq.n	80026ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026a2:	f06f 0208 	mvn.w	r2, #8
 80026a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026a8:	2304      	movs	r3, #4
 80026aa:	7723      	strb	r3, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f013 0f03 	tst.w	r3, #3
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0xaa>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	4620      	mov	r0, r4
 80026b8:	f7ff ffa6 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0xb6>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	4620      	mov	r0, r4
 80026c0:	f7ff ffa0 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7ff ffa1 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	2300      	movs	r3, #0
 80026cc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	f012 0f10 	tst.w	r2, #16
 80026d6:	d019      	beq.n	800270c <HAL_TIM_IRQHandler+0xf8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	f012 0f10 	tst.w	r2, #16
 80026de:	d015      	beq.n	800270c <HAL_TIM_IRQHandler+0xf8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026e0:	f06f 0210 	mvn.w	r2, #16
 80026e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e6:	2308      	movs	r3, #8
 80026e8:	7723      	strb	r3, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f413 7f40 	tst.w	r3, #768	; 0x300
 80026f2:	d003      	beq.n	80026fc <HAL_TIM_IRQHandler+0xe8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ff87 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 80026fa:	e005      	b.n	8002708 <HAL_TIM_IRQHandler+0xf4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff ff81 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002702:	4620      	mov	r0, r4
 8002704:	f7ff ff82 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002708:	2300      	movs	r3, #0
 800270a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	f012 0f01 	tst.w	r2, #1
 8002714:	d009      	beq.n	800272a <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	f012 0f01 	tst.w	r2, #1
 800271c:	d005      	beq.n	800272a <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800271e:	f06f 0201 	mvn.w	r2, #1
 8002722:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff f8ad 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002732:	d009      	beq.n	8002748 <HAL_TIM_IRQHandler+0x134>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	f012 0f80 	tst.w	r2, #128	; 0x80
 800273a:	d005      	beq.n	8002748 <HAL_TIM_IRQHandler+0x134>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800273c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002740:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002742:	4620      	mov	r0, r4
 8002744:	f000 f9f8 	bl	8002b38 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002750:	d009      	beq.n	8002766 <HAL_TIM_IRQHandler+0x152>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002758:	d005      	beq.n	8002766 <HAL_TIM_IRQHandler+0x152>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800275a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800275e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff ff55 	bl	8002610 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002766:	6823      	ldr	r3, [r4, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	f012 0f20 	tst.w	r2, #32
 800276e:	d009      	beq.n	8002784 <HAL_TIM_IRQHandler+0x170>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	f012 0f20 	tst.w	r2, #32
 8002776:	d005      	beq.n	8002784 <HAL_TIM_IRQHandler+0x170>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002778:	f06f 0220 	mvn.w	r2, #32
 800277c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800277e:	4620      	mov	r0, r4
 8002780:	f000 f9d8 	bl	8002b34 <HAL_TIMEx_CommutationCallback>
 8002784:	bd10      	pop	{r4, pc}
 8002786:	bf00      	nop

08002788 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8002788:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800278a:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <TIM_Base_SetConfig+0x6c>)
 800278c:	4290      	cmp	r0, r2
 800278e:	d00a      	beq.n	80027a6 <TIM_Base_SetConfig+0x1e>
 8002790:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002794:	d007      	beq.n	80027a6 <TIM_Base_SetConfig+0x1e>
 8002796:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800279a:	4290      	cmp	r0, r2
 800279c:	d003      	beq.n	80027a6 <TIM_Base_SetConfig+0x1e>
 800279e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027a2:	4290      	cmp	r0, r2
 80027a4:	d103      	bne.n	80027ae <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80027aa:	684a      	ldr	r2, [r1, #4]
 80027ac:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ae:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <TIM_Base_SetConfig+0x6c>)
 80027b0:	4290      	cmp	r0, r2
 80027b2:	d00a      	beq.n	80027ca <TIM_Base_SetConfig+0x42>
 80027b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0x42>
 80027ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80027be:	4290      	cmp	r0, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0x42>
 80027c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027c6:	4290      	cmp	r0, r2
 80027c8:	d103      	bne.n	80027d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ce:	68ca      	ldr	r2, [r1, #12]
 80027d0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80027d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80027d6:	694a      	ldr	r2, [r1, #20]
 80027d8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80027da:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027dc:	688b      	ldr	r3, [r1, #8]
 80027de:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80027e0:	680b      	ldr	r3, [r1, #0]
 80027e2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <TIM_Base_SetConfig+0x6c>)
 80027e6:	4298      	cmp	r0, r3
 80027e8:	d101      	bne.n	80027ee <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ea:	690b      	ldr	r3, [r1, #16]
 80027ec:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80027ee:	2301      	movs	r3, #1
 80027f0:	6143      	str	r3, [r0, #20]
 80027f2:	4770      	bx	lr
 80027f4:	40012c00 	.word	0x40012c00

080027f8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80027f8:	b1b8      	cbz	r0, 800282a <HAL_TIM_Base_Init+0x32>
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027fa:	b510      	push	{r4, lr}
 80027fc:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80027fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002802:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002806:	d104      	bne.n	8002812 <HAL_TIM_Base_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002808:	2300      	movs	r3, #0
 800280a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280e:	f7ff fc73 	bl	80020f8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002812:	2302      	movs	r3, #2
 8002814:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002818:	1d21      	adds	r1, r4, #4
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	f7ff ffb4 	bl	8002788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002820:	2301      	movs	r3, #1
 8002822:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8002826:	2000      	movs	r0, #0
 8002828:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800282a:	2001      	movs	r0, #1
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <HAL_TIM_OC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002830:	b1b8      	cbz	r0, 8002862 <HAL_TIM_OC_Init+0x32>
  *       Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002832:	b510      	push	{r4, lr}
 8002834:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002836:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800283a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800283e:	d104      	bne.n	800284a <HAL_TIM_OC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002840:	2300      	movs	r3, #0
 8002842:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002846:	f7ff fe4f 	bl	80024e8 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002850:	1d21      	adds	r1, r4, #4
 8002852:	6820      	ldr	r0, [r4, #0]
 8002854:	f7ff ff98 	bl	8002788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002858:	2301      	movs	r3, #1
 800285a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 800285e:	2000      	movs	r0, #0
 8002860:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002862:	2001      	movs	r0, #1
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop

08002868 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002868:	b1b8      	cbz	r0, 800289a <HAL_TIM_PWM_Init+0x32>
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800286a:	b510      	push	{r4, lr}
 800286c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800286e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002872:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002876:	d104      	bne.n	8002882 <HAL_TIM_PWM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002878:	2300      	movs	r3, #0
 800287a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800287e:	f7ff fe35 	bl	80024ec <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002882:	2302      	movs	r3, #2
 8002884:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	1d21      	adds	r1, r4, #4
 800288a:	6820      	ldr	r0, [r4, #0]
 800288c:	f7ff ff7c 	bl	8002788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002890:	2301      	movs	r3, #1
 8002892:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8002896:	2000      	movs	r0, #0
 8002898:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800289a:	2001      	movs	r0, #1
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop

080028a0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a2:	6a03      	ldr	r3, [r0, #32]
 80028a4:	f023 0310 	bic.w	r3, r3, #16
 80028a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028b0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b4:	680d      	ldr	r5, [r1, #0]
 80028b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028ba:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028be:	688d      	ldr	r5, [r1, #8]
 80028c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028c4:	4d0d      	ldr	r5, [pc, #52]	; (80028fc <TIM_OC2_SetConfig+0x5c>)
 80028c6:	42a8      	cmp	r0, r5
 80028c8:	d106      	bne.n	80028d8 <TIM_OC2_SetConfig+0x38>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028ce:	68cd      	ldr	r5, [r1, #12]
 80028d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80028d8:	4d08      	ldr	r5, [pc, #32]	; (80028fc <TIM_OC2_SetConfig+0x5c>)
 80028da:	42a8      	cmp	r0, r5
 80028dc:	d107      	bne.n	80028ee <TIM_OC2_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028de:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80028e2:	694d      	ldr	r5, [r1, #20]
 80028e4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80028e8:	698d      	ldr	r5, [r1, #24]
 80028ea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ee:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028f2:	684a      	ldr	r2, [r1, #4]
 80028f4:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f6:	6203      	str	r3, [r0, #32]
}
 80028f8:	bc30      	pop	{r4, r5}
 80028fa:	4770      	bx	lr
 80028fc:	40012c00 	.word	0x40012c00

08002900 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8002900:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d028      	beq.n	800295a <HAL_TIM_OC_ConfigChannel+0x5a>
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002908:	b510      	push	{r4, lr}
 800290a:	4604      	mov	r4, r0
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800290c:	2301      	movs	r3, #1
 800290e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002912:	2302      	movs	r3, #2
 8002914:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 8002918:	2a0c      	cmp	r2, #12
 800291a:	d817      	bhi.n	800294c <HAL_TIM_OC_ConfigChannel+0x4c>
 800291c:	e8df f002 	tbb	[pc, r2]
 8002920:	16161607 	.word	0x16161607
 8002924:	1616160b 	.word	0x1616160b
 8002928:	1616160f 	.word	0x1616160f
 800292c:	13          	.byte	0x13
 800292d:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800292e:	6800      	ldr	r0, [r0, #0]
 8002930:	f7ff fd14 	bl	800235c <TIM_OC1_SetConfig>
    }
    break;
 8002934:	e00a      	b.n	800294c <HAL_TIM_OC_ConfigChannel+0x4c>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002936:	6800      	ldr	r0, [r0, #0]
 8002938:	f7ff ffb2 	bl	80028a0 <TIM_OC2_SetConfig>
    }
    break;
 800293c:	e006      	b.n	800294c <HAL_TIM_OC_ConfigChannel+0x4c>

    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800293e:	6800      	ldr	r0, [r0, #0]
 8002940:	f7ff fd38 	bl	80023b4 <TIM_OC3_SetConfig>
    }
    break;
 8002944:	e002      	b.n	800294c <HAL_TIM_OC_ConfigChannel+0x4c>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002946:	6800      	ldr	r0, [r0, #0]
 8002948:	f7ff fd64 	bl	8002414 <TIM_OC4_SetConfig>
    break;

    default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 800294c:	2301      	movs	r3, #1
 800294e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002952:	2000      	movs	r0, #0
 8002954:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8002958:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800295a:	2002      	movs	r0, #2
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002960:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002962:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d066      	beq.n	8002a38 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800296a:	460d      	mov	r5, r1
 800296c:	4604      	mov	r4, r0
 800296e:	2301      	movs	r3, #1
 8002970:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	2302      	movs	r3, #2
 8002976:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 800297a:	2a0c      	cmp	r2, #12
 800297c:	d855      	bhi.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0xca>
 800297e:	e8df f002 	tbb	[pc, r2]
 8002982:	5407      	.short	0x5407
 8002984:	541a5454 	.word	0x541a5454
 8002988:	542e5454 	.word	0x542e5454
 800298c:	5454      	.short	0x5454
 800298e:	41          	.byte	0x41
 800298f:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002990:	6800      	ldr	r0, [r0, #0]
 8002992:	f7ff fce3 	bl	800235c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002996:	6822      	ldr	r2, [r4, #0]
 8002998:	6993      	ldr	r3, [r2, #24]
 800299a:	f043 0308 	orr.w	r3, r3, #8
 800299e:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a0:	6822      	ldr	r2, [r4, #0]
 80029a2:	6993      	ldr	r3, [r2, #24]
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029aa:	6822      	ldr	r2, [r4, #0]
 80029ac:	6991      	ldr	r1, [r2, #24]
 80029ae:	692b      	ldr	r3, [r5, #16]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6193      	str	r3, [r2, #24]
    }
    break;
 80029b4:	e039      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0xca>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029b6:	6800      	ldr	r0, [r0, #0]
 80029b8:	f7ff ff72 	bl	80028a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029bc:	6822      	ldr	r2, [r4, #0]
 80029be:	6993      	ldr	r3, [r2, #24]
 80029c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029c4:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029c6:	6822      	ldr	r2, [r4, #0]
 80029c8:	6993      	ldr	r3, [r2, #24]
 80029ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	6993      	ldr	r3, [r2, #24]
 80029d4:	6929      	ldr	r1, [r5, #16]
 80029d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029da:	6193      	str	r3, [r2, #24]
    }
    break;
 80029dc:	e025      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0xca>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029de:	6800      	ldr	r0, [r0, #0]
 80029e0:	f7ff fce8 	bl	80023b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029e4:	6822      	ldr	r2, [r4, #0]
 80029e6:	69d3      	ldr	r3, [r2, #28]
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	61d3      	str	r3, [r2, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029ee:	6822      	ldr	r2, [r4, #0]
 80029f0:	69d3      	ldr	r3, [r2, #28]
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029f8:	6822      	ldr	r2, [r4, #0]
 80029fa:	69d1      	ldr	r1, [r2, #28]
 80029fc:	692b      	ldr	r3, [r5, #16]
 80029fe:	430b      	orrs	r3, r1
 8002a00:	61d3      	str	r3, [r2, #28]
    }
    break;
 8002a02:	e012      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0xca>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a04:	6800      	ldr	r0, [r0, #0]
 8002a06:	f7ff fd05 	bl	8002414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	69d3      	ldr	r3, [r2, #28]
 8002a0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a12:	61d3      	str	r3, [r2, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a14:	6822      	ldr	r2, [r4, #0]
 8002a16:	69d3      	ldr	r3, [r2, #28]
 8002a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a1c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002a1e:	6822      	ldr	r2, [r4, #0]
 8002a20:	69d3      	ldr	r3, [r2, #28]
 8002a22:	6929      	ldr	r1, [r5, #16]
 8002a24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a28:	61d3      	str	r3, [r2, #28]

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
  __HAL_LOCK(htim);
 8002a38:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}

08002a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a3c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a44:	6a03      	ldr	r3, [r0, #32]
 8002a46:	ea23 0304 	bic.w	r3, r3, r4
 8002a4a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002a4c:	6a03      	ldr	r3, [r0, #32]
 8002a4e:	408a      	lsls	r2, r1
 8002a50:	431a      	orrs	r2, r3
 8002a52:	6202      	str	r2, [r0, #32]
}
 8002a54:	bc10      	pop	{r4}
 8002a56:	4770      	bx	lr

08002a58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a58:	b510      	push	{r4, lr}
 8002a5a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	6800      	ldr	r0, [r0, #0]
 8002a60:	f7ff ffec 	bl	8002a3c <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <HAL_TIM_PWM_Start+0x2c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d103      	bne.n	8002a74 <HAL_TIM_PWM_Start+0x1c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	6813      	ldr	r3, [r2, #0]
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8002a7e:	2000      	movs	r0, #0
 8002a80:	bd10      	pop	{r4, pc}
 8002a82:	bf00      	nop
 8002a84:	40012c00 	.word	0x40012c00

08002a88 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d025      	beq.n	8002adc <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8002a90:	2301      	movs	r3, #1
 8002a92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a96:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a9c:	688b      	ldr	r3, [r1, #8]
 8002a9e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002aa0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002aa4:	684b      	ldr	r3, [r1, #4]
 8002aa6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002aa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002aac:	680b      	ldr	r3, [r1, #0]
 8002aae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ab0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ab4:	690b      	ldr	r3, [r1, #16]
 8002ab6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ab8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002abc:	694b      	ldr	r3, [r1, #20]
 8002abe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ac4:	698a      	ldr	r2, [r1, #24]
 8002ac6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ac8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002acc:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ace:	6802      	ldr	r2, [r0, #0]
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002ad8:	4618      	mov	r0, r3
 8002ada:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002adc:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002ae0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d021      	beq.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002ae8:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002aea:	2201      	movs	r2, #1
 8002aec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	2302      	movs	r3, #2
 8002af2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002af6:	6804      	ldr	r4, [r0, #0]
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afe:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002b00:	6804      	ldr	r4, [r0, #0]
 8002b02:	6865      	ldr	r5, [r4, #4]
 8002b04:	680b      	ldr	r3, [r1, #0]
 8002b06:	432b      	orrs	r3, r5
 8002b08:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002b0a:	6804      	ldr	r4, [r0, #0]
 8002b0c:	68a3      	ldr	r3, [r4, #8]
 8002b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b12:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002b14:	6804      	ldr	r4, [r0, #0]
 8002b16:	68a5      	ldr	r5, [r4, #8]
 8002b18:	684b      	ldr	r3, [r1, #4]
 8002b1a:	432b      	orrs	r3, r5
 8002b1c:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002b1e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b22:	2300      	movs	r3, #0
 8002b24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002b28:	4618      	mov	r0, r3
 8002b2a:	e001      	b.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002b30:	bc30      	pop	{r4, r5}
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop

08002b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop

08002b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3c:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_Init+0x20>)
 8002b40:	6813      	ldr	r3, [r2, #0]
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f000 ff03 	bl	8003954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f000 ff90 	bl	8003a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b54:	f7ff fa08 	bl	8001f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002b58:	2000      	movs	r0, #0
 8002b5a:	bd08      	pop	{r3, pc}
 8002b5c:	40022000 	.word	0x40022000

08002b60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b60:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <HAL_IncTick+0x10>)
 8002b62:	6813      	ldr	r3, [r2, #0]
 8002b64:	4903      	ldr	r1, [pc, #12]	; (8002b74 <HAL_IncTick+0x14>)
 8002b66:	7809      	ldrb	r1, [r1, #0]
 8002b68:	440b      	add	r3, r1
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20003264 	.word	0x20003264
 8002b74:	20000002 	.word	0x20000002

08002b78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b78:	4b01      	ldr	r3, [pc, #4]	; (8002b80 <HAL_GetTick+0x8>)
 8002b7a:	6818      	ldr	r0, [r3, #0]
}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20003264 	.word	0x20003264

08002b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b84:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <RCC_Delay+0x24>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <RCC_Delay+0x28>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	0a5b      	lsrs	r3, r3, #9
 8002b92:	fb00 f003 	mul.w	r0, r0, r3
 8002b96:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002b98:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002b9a:	9b01      	ldr	r3, [sp, #4]
 8002b9c:	1e5a      	subs	r2, r3, #1
 8002b9e:	9201      	str	r2, [sp, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f9      	bne.n	8002b98 <RCC_Delay+0x14>
}
 8002ba4:	b002      	add	sp, #8
 8002ba6:	4770      	bx	lr
 8002ba8:	20000004 	.word	0x20000004
 8002bac:	10624dd3 	.word	0x10624dd3

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	6803      	ldr	r3, [r0, #0]
 8002bb8:	f013 0f01 	tst.w	r3, #1
 8002bbc:	d06b      	beq.n	8002c96 <HAL_RCC_OscConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bbe:	4ba8      	ldr	r3, [pc, #672]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bca:	4ba5      	ldr	r3, [pc, #660]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x42>
 8002bd6:	4ba2      	ldr	r3, [pc, #648]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	4b9f      	ldr	r3, [pc, #636]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002be8:	d055      	beq.n	8002c96 <HAL_RCC_OscConfig+0xe6>
 8002bea:	6863      	ldr	r3, [r4, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d152      	bne.n	8002c96 <HAL_RCC_OscConfig+0xe6>
 8002bf0:	e1b8      	b.n	8002f64 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf2:	6863      	ldr	r3, [r4, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x56>
 8002bfa:	4a99      	ldr	r2, [pc, #612]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	e026      	b.n	8002c54 <HAL_RCC_OscConfig+0xa4>
 8002c06:	b963      	cbnz	r3, 8002c22 <HAL_RCC_OscConfig+0x72>
 8002c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c0c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e018      	b.n	8002c54 <HAL_RCC_OscConfig+0xa4>
 8002c22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c26:	d10c      	bne.n	8002c42 <HAL_RCC_OscConfig+0x92>
 8002c28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c2c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0xa4>
 8002c42:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	b17b      	cbz	r3, 8002c78 <HAL_RCC_OscConfig+0xc8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff ff8e 	bl	8002b78 <HAL_GetTick>
 8002c5c:	4605      	mov	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e005      	b.n	8002c6c <HAL_RCC_OscConfig+0xbc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c60:	f7ff ff8a 	bl	8002b78 <HAL_GetTick>
 8002c64:	1b40      	subs	r0, r0, r5
 8002c66:	2864      	cmp	r0, #100	; 0x64
 8002c68:	f200 817e 	bhi.w	8002f68 <HAL_RCC_OscConfig+0x3b8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6c:	4b7c      	ldr	r3, [pc, #496]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c74:	d0f4      	beq.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c76:	e00e      	b.n	8002c96 <HAL_RCC_OscConfig+0xe6>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7ff ff7e 	bl	8002b78 <HAL_GetTick>
 8002c7c:	4605      	mov	r5, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e005      	b.n	8002c8c <HAL_RCC_OscConfig+0xdc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c80:	f7ff ff7a 	bl	8002b78 <HAL_GetTick>
 8002c84:	1b40      	subs	r0, r0, r5
 8002c86:	2864      	cmp	r0, #100	; 0x64
 8002c88:	f200 8170 	bhi.w	8002f6c <HAL_RCC_OscConfig+0x3bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8c:	4b74      	ldr	r3, [pc, #464]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c94:	d1f4      	bne.n	8002c80 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	f013 0f02 	tst.w	r3, #2
 8002c9c:	d050      	beq.n	8002d40 <HAL_RCC_OscConfig+0x190>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c9e:	4b70      	ldr	r3, [pc, #448]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f013 0f0c 	tst.w	r3, #12
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCC_OscConfig+0x10e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ca8:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d116      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x132>
 8002cb4:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002cbc:	d111      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f013 0f02 	tst.w	r3, #2
 8002cc6:	d003      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x120>
 8002cc8:	6923      	ldr	r3, [r4, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f040 8150 	bne.w	8002f70 <HAL_RCC_OscConfig+0x3c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4a63      	ldr	r2, [pc, #396]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cd8:	6961      	ldr	r1, [r4, #20]
 8002cda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cde:	6013      	str	r3, [r2, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce0:	e02e      	b.n	8002d40 <HAL_RCC_OscConfig+0x190>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce2:	6923      	ldr	r3, [r4, #16]
 8002ce4:	b1d3      	cbz	r3, 8002d1c <HAL_RCC_OscConfig+0x16c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4b5e      	ldr	r3, [pc, #376]	; (8002e64 <HAL_RCC_OscConfig+0x2b4>)
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7ff ff44 	bl	8002b78 <HAL_GetTick>
 8002cf0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	e005      	b.n	8002d00 <HAL_RCC_OscConfig+0x150>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7ff ff40 	bl	8002b78 <HAL_GetTick>
 8002cf8:	1b40      	subs	r0, r0, r5
 8002cfa:	2802      	cmp	r0, #2
 8002cfc:	f200 813a 	bhi.w	8002f74 <HAL_RCC_OscConfig+0x3c4>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	4b57      	ldr	r3, [pc, #348]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f013 0f02 	tst.w	r3, #2
 8002d08:	d0f4      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x144>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4a55      	ldr	r2, [pc, #340]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002d0c:	6813      	ldr	r3, [r2, #0]
 8002d0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d12:	6961      	ldr	r1, [r4, #20]
 8002d14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e011      	b.n	8002d40 <HAL_RCC_OscConfig+0x190>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <HAL_RCC_OscConfig+0x2b4>)
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7ff ff29 	bl	8002b78 <HAL_GetTick>
 8002d26:	4605      	mov	r5, r0

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d28:	e005      	b.n	8002d36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7ff ff25 	bl	8002b78 <HAL_GetTick>
 8002d2e:	1b40      	subs	r0, r0, r5
 8002d30:	2802      	cmp	r0, #2
 8002d32:	f200 8121 	bhi.w	8002f78 <HAL_RCC_OscConfig+0x3c8>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f013 0f02 	tst.w	r3, #2
 8002d3e:	d1f4      	bne.n	8002d2a <HAL_RCC_OscConfig+0x17a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	f013 0f08 	tst.w	r3, #8
 8002d46:	d029      	beq.n	8002d9c <HAL_RCC_OscConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d48:	69a3      	ldr	r3, [r4, #24]
 8002d4a:	b1ab      	cbz	r3, 8002d78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_RCC_OscConfig+0x2b8>)
 8002d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7ff ff11 	bl	8002b78 <HAL_GetTick>
 8002d56:	4605      	mov	r5, r0

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d58:	e005      	b.n	8002d66 <HAL_RCC_OscConfig+0x1b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7ff ff0d 	bl	8002b78 <HAL_GetTick>
 8002d5e:	1b40      	subs	r0, r0, r5
 8002d60:	2802      	cmp	r0, #2
 8002d62:	f200 810b 	bhi.w	8002f7c <HAL_RCC_OscConfig+0x3cc>

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f013 0f02 	tst.w	r3, #2
 8002d6e:	d0f4      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1aa>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002d70:	2001      	movs	r0, #1
 8002d72:	f7ff ff07 	bl	8002b84 <RCC_Delay>
 8002d76:	e011      	b.n	8002d9c <HAL_RCC_OscConfig+0x1ec>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCC_OscConfig+0x2b8>)
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7ff fefb 	bl	8002b78 <HAL_GetTick>
 8002d82:	4605      	mov	r5, r0

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	e005      	b.n	8002d92 <HAL_RCC_OscConfig+0x1e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d86:	f7ff fef7 	bl	8002b78 <HAL_GetTick>
 8002d8a:	1b40      	subs	r0, r0, r5
 8002d8c:	2802      	cmp	r0, #2
 8002d8e:	f200 80f7 	bhi.w	8002f80 <HAL_RCC_OscConfig+0x3d0>

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d92:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f013 0f02 	tst.w	r3, #2
 8002d9a:	d1f4      	bne.n	8002d86 <HAL_RCC_OscConfig+0x1d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	f013 0f04 	tst.w	r3, #4
 8002da2:	f000 8089 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da6:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002db8:	61da      	str	r2, [r3, #28]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002dc4:	2501      	movs	r5, #1
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x21a>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc8:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_RCC_OscConfig+0x2bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002dd2:	d113      	bne.n	8002dfc <HAL_RCC_OscConfig+0x24c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd4:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <HAL_RCC_OscConfig+0x2bc>)
 8002dd6:	6813      	ldr	r3, [r2, #0]
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7ff fecb 	bl	8002b78 <HAL_GetTick>
 8002de2:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e005      	b.n	8002df2 <HAL_RCC_OscConfig+0x242>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de6:	f7ff fec7 	bl	8002b78 <HAL_GetTick>
 8002dea:	1b80      	subs	r0, r0, r6
 8002dec:	2864      	cmp	r0, #100	; 0x64
 8002dee:	f200 80c9 	bhi.w	8002f84 <HAL_RCC_OscConfig+0x3d4>
      SET_BIT(PWR->CR, PWR_CR_DBP);

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <HAL_RCC_OscConfig+0x2bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002dfa:	d0f4      	beq.n	8002de6 <HAL_RCC_OscConfig+0x236>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfc:	68e3      	ldr	r3, [r4, #12]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <HAL_RCC_OscConfig+0x25e>
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002e04:	6a13      	ldr	r3, [r2, #32]
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	e022      	b.n	8002e54 <HAL_RCC_OscConfig+0x2a4>
 8002e0e:	b963      	cbnz	r3, 8002e2a <HAL_RCC_OscConfig+0x27a>
 8002e10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e14:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	621a      	str	r2, [r3, #32]
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	f022 0204 	bic.w	r2, r2, #4
 8002e26:	621a      	str	r2, [r3, #32]
 8002e28:	e014      	b.n	8002e54 <HAL_RCC_OscConfig+0x2a4>
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_OscConfig+0x292>
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002e30:	6a1a      	ldr	r2, [r3, #32]
 8002e32:	f042 0204 	orr.w	r2, r2, #4
 8002e36:	621a      	str	r2, [r3, #32]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	621a      	str	r2, [r3, #32]
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x2a4>
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	621a      	str	r2, [r3, #32]
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	f022 0204 	bic.w	r2, r2, #4
 8002e52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e54:	68e3      	ldr	r3, [r4, #12]
 8002e56:	b1cb      	cbz	r3, 8002e8c <HAL_RCC_OscConfig+0x2dc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e58:	f7ff fe8e 	bl	8002b78 <HAL_GetTick>
 8002e5c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	e00f      	b.n	8002e80 <HAL_RCC_OscConfig+0x2d0>
 8002e60:	40021000 	.word	0x40021000
 8002e64:	42420000 	.word	0x42420000
 8002e68:	42420480 	.word	0x42420480
 8002e6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7ff fe82 	bl	8002b78 <HAL_GetTick>
 8002e74:	1b80      	subs	r0, r0, r6
 8002e76:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e7a:	4298      	cmp	r0, r3
 8002e7c:	f200 8084 	bhi.w	8002f88 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	4b49      	ldr	r3, [pc, #292]	; (8002fa8 <HAL_RCC_OscConfig+0x3f8>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f013 0f02 	tst.w	r3, #2
 8002e88:	d0f2      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2c0>
 8002e8a:	e00f      	b.n	8002eac <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8c:	f7ff fe74 	bl	8002b78 <HAL_GetTick>
 8002e90:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e92:	e006      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7ff fe70 	bl	8002b78 <HAL_GetTick>
 8002e98:	1b80      	subs	r0, r0, r6
 8002e9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e9e:	4298      	cmp	r0, r3
 8002ea0:	d874      	bhi.n	8002f8c <HAL_RCC_OscConfig+0x3dc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea2:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_RCC_OscConfig+0x3f8>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f013 0f02 	tst.w	r3, #2
 8002eaa:	d1f3      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2e4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eac:	b125      	cbz	r5, 8002eb8 <HAL_RCC_OscConfig+0x308>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4a3e      	ldr	r2, [pc, #248]	; (8002fa8 <HAL_RCC_OscConfig+0x3f8>)
 8002eb0:	69d3      	ldr	r3, [r2, #28]
 8002eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb8:	69e3      	ldr	r3, [r4, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d068      	beq.n	8002f90 <HAL_RCC_OscConfig+0x3e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ebe:	4a3a      	ldr	r2, [pc, #232]	; (8002fa8 <HAL_RCC_OscConfig+0x3f8>)
 8002ec0:	6852      	ldr	r2, [r2, #4]
 8002ec2:	f002 020c 	and.w	r2, r2, #12
 8002ec6:	2a08      	cmp	r2, #8
 8002ec8:	d064      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3e4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d137      	bne.n	8002f3e <HAL_RCC_OscConfig+0x38e>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	2200      	movs	r2, #0
 8002ed0:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_RCC_OscConfig+0x3fc>)
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff fe50 	bl	8002b78 <HAL_GetTick>
 8002ed8:	4605      	mov	r5, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	e004      	b.n	8002ee6 <HAL_RCC_OscConfig+0x336>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002edc:	f7ff fe4c 	bl	8002b78 <HAL_GetTick>
 8002ee0:	1b40      	subs	r0, r0, r5
 8002ee2:	2802      	cmp	r0, #2
 8002ee4:	d858      	bhi.n	8002f98 <HAL_RCC_OscConfig+0x3e8>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee6:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_RCC_OscConfig+0x3f8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002eee:	d1f5      	bne.n	8002edc <HAL_RCC_OscConfig+0x32c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef0:	6a23      	ldr	r3, [r4, #32]
 8002ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x356>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ef8:	492b      	ldr	r1, [pc, #172]	; (8002fa8 <HAL_RCC_OscConfig+0x3f8>)
 8002efa:	684b      	ldr	r3, [r1, #4]
 8002efc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f00:	68a3      	ldr	r3, [r4, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f06:	4828      	ldr	r0, [pc, #160]	; (8002fa8 <HAL_RCC_OscConfig+0x3f8>)
 8002f08:	6843      	ldr	r3, [r0, #4]
 8002f0a:	f423 1174 	bic.w	r1, r3, #3997696	; 0x3d0000
 8002f0e:	6a23      	ldr	r3, [r4, #32]
 8002f10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f12:	4313      	orrs	r3, r2
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f18:	2201      	movs	r2, #1
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_RCC_OscConfig+0x3fc>)
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7ff fe2b 	bl	8002b78 <HAL_GetTick>
 8002f22:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f24:	e004      	b.n	8002f30 <HAL_RCC_OscConfig+0x380>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7ff fe27 	bl	8002b78 <HAL_GetTick>
 8002f2a:	1b00      	subs	r0, r0, r4
 8002f2c:	2802      	cmp	r0, #2
 8002f2e:	d835      	bhi.n	8002f9c <HAL_RCC_OscConfig+0x3ec>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_OscConfig+0x3f8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f38:	d0f5      	beq.n	8002f26 <HAL_RCC_OscConfig+0x376>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	e031      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_OscConfig+0x3fc>)
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7ff fe18 	bl	8002b78 <HAL_GetTick>
 8002f48:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4a:	e004      	b.n	8002f56 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7ff fe14 	bl	8002b78 <HAL_GetTick>
 8002f50:	1b00      	subs	r0, r0, r4
 8002f52:	2802      	cmp	r0, #2
 8002f54:	d824      	bhi.n	8002fa0 <HAL_RCC_OscConfig+0x3f0>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_RCC_OscConfig+0x3f8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f5e:	d1f5      	bne.n	8002f4c <HAL_RCC_OscConfig+0x39c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002f60:	2000      	movs	r0, #0
 8002f62:	e01e      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8002f64:	2001      	movs	r0, #1
 8002f66:	e01c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002f68:	2003      	movs	r0, #3
 8002f6a:	e01a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	e018      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 8002f70:	2001      	movs	r0, #1
 8002f72:	e016      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002f74:	2003      	movs	r0, #3
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002f78:	2003      	movs	r0, #3
 8002f7a:	e012      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	e010      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002f80:	2003      	movs	r0, #3
 8002f82:	e00e      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002f84:	2003      	movs	r0, #3
 8002f86:	e00c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002f88:	2003      	movs	r0, #3
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002f90:	2000      	movs	r0, #0
 8002f92:	e006      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f94:	2001      	movs	r0, #1
 8002f96:	e004      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002f98:	2003      	movs	r0, #3
 8002f9a:	e002      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002fa0:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8002fa2:	b002      	add	sp, #8
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	42420060 	.word	0x42420060

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	b430      	push	{r4, r5}
 8002fb2:	b086      	sub	sp, #24
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fb4:	4d16      	ldr	r5, [pc, #88]	; (8003010 <HAL_RCC_GetSysClockFreq+0x60>)
 8002fb6:	ac02      	add	r4, sp, #8
 8002fb8:	6828      	ldr	r0, [r5, #0]
 8002fba:	6869      	ldr	r1, [r5, #4]
 8002fbc:	68aa      	ldr	r2, [r5, #8]
 8002fbe:	68eb      	ldr	r3, [r5, #12]
 8002fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fc2:	8a2b      	ldrh	r3, [r5, #16]
 8002fc4:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_GetSysClockFreq+0x64>)
 8002fca:	685b      	ldr	r3, [r3, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fcc:	f003 020c 	and.w	r2, r3, #12
 8002fd0:	2a08      	cmp	r2, #8
 8002fd2:	d119      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fd4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002fd8:	a906      	add	r1, sp, #24
 8002fda:	440a      	add	r2, r1
 8002fdc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002fe4:	d00c      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x50>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_GetSysClockFreq+0x64>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_RCC_GetSysClockFreq+0x68>)
 8002ff6:	fb03 f000 	mul.w	r0, r3, r0
 8002ffa:	fbb0 f0f2 	udiv	r0, r0, r2
 8002ffe:	e004      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x5a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_GetSysClockFreq+0x6c>)
 8003002:	fb03 f000 	mul.w	r0, r3, r0
 8003006:	e000      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x5a>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003008:	4803      	ldr	r0, [pc, #12]	; (8003018 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800300a:	b006      	add	sp, #24
 800300c:	bc30      	pop	{r4, r5}
 800300e:	4770      	bx	lr
 8003010:	0800e454 	.word	0x0800e454
 8003014:	40021000 	.word	0x40021000
 8003018:	007a1200 	.word	0x007a1200
 800301c:	003d0900 	.word	0x003d0900

08003020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b570      	push	{r4, r5, r6, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003022:	4b65      	ldr	r3, [pc, #404]	; (80031b8 <HAL_RCC_ClockConfig+0x198>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	428b      	cmp	r3, r1
 800302c:	d20b      	bcs.n	8003046 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4a62      	ldr	r2, [pc, #392]	; (80031b8 <HAL_RCC_ClockConfig+0x198>)
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	f023 0307 	bic.w	r3, r3, #7
 8003036:	430b      	orrs	r3, r1
 8003038:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4299      	cmp	r1, r3
 8003042:	f040 80a8 	bne.w	8003196 <HAL_RCC_ClockConfig+0x176>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003046:	6803      	ldr	r3, [r0, #0]
 8003048:	f013 0f02 	tst.w	r3, #2
 800304c:	d017      	beq.n	800307e <HAL_RCC_ClockConfig+0x5e>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304e:	f013 0f04 	tst.w	r3, #4
 8003052:	d004      	beq.n	800305e <HAL_RCC_ClockConfig+0x3e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4a59      	ldr	r2, [pc, #356]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 8003056:	6853      	ldr	r3, [r2, #4]
 8003058:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800305c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	6803      	ldr	r3, [r0, #0]
 8003060:	f013 0f08 	tst.w	r3, #8
 8003064:	d004      	beq.n	8003070 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003066:	4a55      	ldr	r2, [pc, #340]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 8003068:	6853      	ldr	r3, [r2, #4]
 800306a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800306e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003070:	4c52      	ldr	r4, [pc, #328]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 8003072:	6863      	ldr	r3, [r4, #4]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003078:	6883      	ldr	r3, [r0, #8]
 800307a:	4313      	orrs	r3, r2
 800307c:	6063      	str	r3, [r4, #4]
 800307e:	460d      	mov	r5, r1
 8003080:	4604      	mov	r4, r0
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003082:	6803      	ldr	r3, [r0, #0]
 8003084:	f013 0f01 	tst.w	r3, #1
 8003088:	d04d      	beq.n	8003126 <HAL_RCC_ClockConfig+0x106>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	6842      	ldr	r2, [r0, #4]
 800308c:	2a01      	cmp	r2, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_ClockConfig+0x7c>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003090:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003098:	d10d      	bne.n	80030b6 <HAL_RCC_ClockConfig+0x96>
 800309a:	e07e      	b.n	800319a <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309c:	2a02      	cmp	r2, #2
 800309e:	d105      	bne.n	80030ac <HAL_RCC_ClockConfig+0x8c>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a0:	4b46      	ldr	r3, [pc, #280]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030a8:	d105      	bne.n	80030b6 <HAL_RCC_ClockConfig+0x96>
 80030aa:	e078      	b.n	800319e <HAL_RCC_ClockConfig+0x17e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f013 0f02 	tst.w	r3, #2
 80030b4:	d075      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b6:	4941      	ldr	r1, [pc, #260]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 80030b8:	684b      	ldr	r3, [r1, #4]
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c2:	f7ff fd59 	bl	8002b78 <HAL_GetTick>
 80030c6:	4606      	mov	r6, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c8:	6863      	ldr	r3, [r4, #4]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d10e      	bne.n	80030ec <HAL_RCC_ClockConfig+0xcc>
 80030ce:	e006      	b.n	80030de <HAL_RCC_ClockConfig+0xbe>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d0:	f7ff fd52 	bl	8002b78 <HAL_GetTick>
 80030d4:	1b80      	subs	r0, r0, r6
 80030d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80030da:	4298      	cmp	r0, r3
 80030dc:	d863      	bhi.n	80031a6 <HAL_RCC_ClockConfig+0x186>
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030de:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d1f2      	bne.n	80030d0 <HAL_RCC_ClockConfig+0xb0>
 80030ea:	e01c      	b.n	8003126 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d115      	bne.n	800311c <HAL_RCC_ClockConfig+0xfc>
 80030f0:	e006      	b.n	8003100 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f2:	f7ff fd41 	bl	8002b78 <HAL_GetTick>
 80030f6:	1b80      	subs	r0, r0, r6
 80030f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80030fc:	4298      	cmp	r0, r3
 80030fe:	d854      	bhi.n	80031aa <HAL_RCC_ClockConfig+0x18a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d1f2      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xd2>
 800310c:	e00b      	b.n	8003126 <HAL_RCC_ClockConfig+0x106>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310e:	f7ff fd33 	bl	8002b78 <HAL_GetTick>
 8003112:	1b80      	subs	r0, r0, r6
 8003114:	f241 3388 	movw	r3, #5000	; 0x1388
 8003118:	4298      	cmp	r0, r3
 800311a:	d848      	bhi.n	80031ae <HAL_RCC_ClockConfig+0x18e>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f013 0f0c 	tst.w	r3, #12
 8003124:	d1f3      	bne.n	800310e <HAL_RCC_ClockConfig+0xee>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003126:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_ClockConfig+0x198>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	429d      	cmp	r5, r3
 8003130:	d20a      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x128>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <HAL_RCC_ClockConfig+0x198>)
 8003134:	6813      	ldr	r3, [r2, #0]
 8003136:	f023 0307 	bic.w	r3, r3, #7
 800313a:	432b      	orrs	r3, r5
 800313c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800313e:	6813      	ldr	r3, [r2, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	429d      	cmp	r5, r3
 8003146:	d134      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x192>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	f013 0f04 	tst.w	r3, #4
 800314e:	d006      	beq.n	800315e <HAL_RCC_ClockConfig+0x13e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003150:	491a      	ldr	r1, [pc, #104]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 8003152:	684b      	ldr	r3, [r1, #4]
 8003154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003158:	68e3      	ldr	r3, [r4, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	f013 0f08 	tst.w	r3, #8
 8003164:	d007      	beq.n	8003176 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 8003168:	6853      	ldr	r3, [r2, #4]
 800316a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800316e:	6921      	ldr	r1, [r4, #16]
 8003170:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003174:	6053      	str	r3, [r2, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003176:	f7ff ff1b 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_RCC_ClockConfig+0x19c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003182:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <HAL_RCC_ClockConfig+0x1a0>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	40d8      	lsrs	r0, r3
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x1a4>)
 800318a:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800318c:	2000      	movs	r0, #0
 800318e:	f000 fc71 	bl	8003a74 <HAL_InitTick>
  
  return HAL_OK;
 8003192:	2000      	movs	r0, #0
 8003194:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8003196:	2001      	movs	r0, #1
 8003198:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 800319a:	2001      	movs	r0, #1
 800319c:	bd70      	pop	{r4, r5, r6, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 800319e:	2001      	movs	r0, #1
 80031a0:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 80031a2:	2001      	movs	r0, #1
 80031a4:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80031a6:	2003      	movs	r0, #3
 80031a8:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80031aa:	2003      	movs	r0, #3
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80031ae:	2003      	movs	r0, #3
 80031b0:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 80031b2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
 80031b6:	bf00      	nop
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40021000 	.word	0x40021000
 80031c0:	0800e910 	.word	0x0800e910
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d6:	f7ff fff7 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031da:	4b04      	ldr	r3, [pc, #16]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80031e2:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
}    
 80031e6:	40d8      	lsrs	r0, r3
 80031e8:	bd08      	pop	{r3, pc}
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	0800e920 	.word	0x0800e920

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f6:	f7ff ffe7 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <HAL_RCC_GetPCLK2Freq+0x18>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003202:	4a03      	ldr	r2, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003204:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003206:	40d8      	lsrs	r0, r3
 8003208:	bd08      	pop	{r3, pc}
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	0800e920 	.word	0x0800e920

08003214 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003214:	230f      	movs	r3, #15
 8003216:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_GetClockConfig+0x34>)
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	f002 0203 	and.w	r2, r2, #3
 8003220:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003228:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003230:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	08db      	lsrs	r3, r3, #3
 8003236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800323a:	6103      	str	r3, [r0, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <HAL_RCC_GetClockConfig+0x38>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	600b      	str	r3, [r1, #0]
 8003246:	4770      	bx	lr
 8003248:	40021000 	.word	0x40021000
 800324c:	40022000 	.word	0x40022000

08003250 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003256:	6803      	ldr	r3, [r0, #0]
 8003258:	f013 0f01 	tst.w	r3, #1
 800325c:	d05c      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b3e      	ldr	r3, [pc, #248]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003266:	d10b      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x30>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003270:	61da      	str	r2, [r3, #28]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800327c:	2601      	movs	r6, #1
 800327e:	e000      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x32>
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003280:	2600      	movs	r6, #0
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b36      	ldr	r3, [pc, #216]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f413 7f80 	tst.w	r3, #256	; 0x100
 800328a:	d112      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328c:	4a33      	ldr	r2, [pc, #204]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7ff fc6f 	bl	8002b78 <HAL_GetTick>
 800329a:	4605      	mov	r5, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	e004      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7ff fc6b 	bl	8002b78 <HAL_GetTick>
 80032a2:	1b40      	subs	r0, r0, r5
 80032a4:	2864      	cmp	r0, #100	; 0x64
 80032a6:	d84f      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b2c      	ldr	r3, [pc, #176]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032b0:	d0f5      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x4e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032b2:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80032ba:	d021      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80032bc:	6862      	ldr	r2, [r4, #4]
 80032be:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01c      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032c6:	4a24      	ldr	r2, [pc, #144]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80032c8:	6a13      	ldr	r3, [r2, #32]
 80032ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ce:	4924      	ldr	r1, [pc, #144]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80032d0:	2501      	movs	r5, #1
 80032d2:	600d      	str	r5, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032d4:	2500      	movs	r5, #0
 80032d6:	600d      	str	r5, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032d8:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032da:	f013 0f01 	tst.w	r3, #1
 80032de:	d00f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7ff fc4a 	bl	8002b78 <HAL_GetTick>
 80032e4:	4605      	mov	r5, r0
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e006      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7ff fc46 	bl	8002b78 <HAL_GetTick>
 80032ec:	1b40      	subs	r0, r0, r5
 80032ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80032f2:	4298      	cmp	r0, r3
 80032f4:	d82a      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f013 0f02 	tst.w	r3, #2
 80032fe:	d0f3      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003300:	4915      	ldr	r1, [pc, #84]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003302:	6a0b      	ldr	r3, [r1, #32]
 8003304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003308:	6863      	ldr	r3, [r4, #4]
 800330a:	4313      	orrs	r3, r2
 800330c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800330e:	b11e      	cbz	r6, 8003318 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	69cb      	ldr	r3, [r1, #28]
 8003312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003316:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	f013 0f02 	tst.w	r3, #2
 800331e:	d006      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003320:	490d      	ldr	r1, [pc, #52]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003322:	684b      	ldr	r3, [r1, #4]
 8003324:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	f013 0f10 	tst.w	r3, #16
 8003334:	d00c      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003336:	4908      	ldr	r1, [pc, #32]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003338:	684b      	ldr	r3, [r1, #4]
 800333a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800333e:	68e3      	ldr	r3, [r4, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003344:	2000      	movs	r0, #0
 8003346:	e004      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x102>
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8003348:	2003      	movs	r0, #3
 800334a:	e002      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x102>
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800334c:	2003      	movs	r0, #3
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x102>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003350:	2000      	movs	r0, #0
}
 8003352:	b002      	add	sp, #8
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	40007000 	.word	0x40007000
 8003360:	42420440 	.word	0x42420440

08003364 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	4606      	mov	r6, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800336a:	4d3b      	ldr	r5, [pc, #236]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 800336c:	ac02      	add	r4, sp, #8
 800336e:	6828      	ldr	r0, [r5, #0]
 8003370:	6869      	ldr	r1, [r5, #4]
 8003372:	68aa      	ldr	r2, [r5, #8]
 8003374:	68eb      	ldr	r3, [r5, #12]
 8003376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003378:	8a2b      	ldrh	r3, [r5, #16]
 800337a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800337e:	2e02      	cmp	r6, #2
 8003380:	d04e      	beq.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003382:	2e10      	cmp	r6, #16
 8003384:	d002      	beq.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8003386:	2e01      	cmp	r6, #1
 8003388:	d155      	bne.n	8003436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800338a:	e02d      	b.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800338c:	4b33      	ldr	r3, [pc, #204]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 800338e:	685a      	ldr	r2, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003396:	d050      	beq.n	800343a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003398:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800339c:	a906      	add	r1, sp, #24
 800339e:	440b      	add	r3, r1
 80033a0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033a4:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 80033a8:	d00e      	beq.n	80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033aa:	492c      	ldr	r1, [pc, #176]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80033ac:	6849      	ldr	r1, [r1, #4]
 80033ae:	f3c1 4140 	ubfx	r1, r1, #17, #1
 80033b2:	a806      	add	r0, sp, #24
 80033b4:	4401      	add	r1, r0
 80033b6:	f811 0c14 	ldrb.w	r0, [r1, #-20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ba:	b14a      	cbz	r2, 80033d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033bc:	4a28      	ldr	r2, [pc, #160]	; (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80033be:	fbb2 f0f0 	udiv	r0, r2, r0
 80033c2:	fb00 f003 	mul.w	r0, r0, r3
 80033c6:	e004      	b.n	80033d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033c8:	4826      	ldr	r0, [pc, #152]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 80033ca:	fb00 f003 	mul.w	r0, r0, r3
 80033ce:	e000      	b.n	80033d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80033d0:	2000      	movs	r0, #0
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80033da:	d13a      	bne.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 80033dc:	0040      	lsls	r0, r0, #1
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 80033e0:	fba3 3000 	umull	r3, r0, r3, r0
 80033e4:	0840      	lsrs	r0, r0, #1
 80033e6:	e034      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80033e8:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033ec:	f240 3202 	movw	r2, #770	; 0x302
 80033f0:	401a      	ands	r2, r3
 80033f2:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80033f6:	d022      	beq.n	800343e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80033f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003400:	d104      	bne.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8003402:	4a16      	ldr	r2, [pc, #88]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8003404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003406:	f012 0f02 	tst.w	r2, #2
 800340a:	d11b      	bne.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800340c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003410:	d11b      	bne.n	800344a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800341a:	d118      	bne.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = HSE_VALUE / 128U;
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 800341c:	2000      	movs	r0, #0
 800341e:	e018      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003420:	f7ff fee8 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800342c:	3301      	adds	r3, #1
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003434:	e00d      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003436:	2000      	movs	r0, #0
 8003438:	e00b      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800343a:	2000      	movs	r0, #0
 800343c:	e009      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
      {
        frequency = LSE_VALUE;
 800343e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003442:	e006      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
      {
        frequency = LSI_VALUE;
 8003444:	f649 4040 	movw	r0, #40000	; 0x9c40
 8003448:	e003      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
        frequency = HSE_VALUE / 128U;
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 800344a:	2000      	movs	r0, #0
 800344c:	e001      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800344e:	f24f 4024 	movw	r0, #62500	; 0xf424
    {
      break;
    }
  }
  return(frequency);
}
 8003452:	b006      	add	sp, #24
 8003454:	bd70      	pop	{r4, r5, r6, pc}
 8003456:	bf00      	nop
 8003458:	0800e468 	.word	0x0800e468
 800345c:	40021000 	.word	0x40021000
 8003460:	007a1200 	.word	0x007a1200
 8003464:	003d0900 	.word	0x003d0900
 8003468:	aaaaaaab 	.word	0xaaaaaaab

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8003470:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003472:	4634      	mov	r4, r6
 8003474:	e0d5      	b.n	8003622 <HAL_GPIO_Init+0x1b6>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8003476:	2201      	movs	r2, #1
 8003478:	40a2      	lsls	r2, r4

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800347a:	680b      	ldr	r3, [r1, #0]
 800347c:	4013      	ands	r3, r2

    if (iocurrent == ioposition)
 800347e:	429a      	cmp	r2, r3
 8003480:	f040 80ce 	bne.w	8003620 <HAL_GPIO_Init+0x1b4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003484:	684d      	ldr	r5, [r1, #4]
 8003486:	2d12      	cmp	r5, #18
 8003488:	d02d      	beq.n	80034e6 <HAL_GPIO_Init+0x7a>
 800348a:	d80b      	bhi.n	80034a4 <HAL_GPIO_Init+0x38>
 800348c:	2d02      	cmp	r5, #2
 800348e:	d027      	beq.n	80034e0 <HAL_GPIO_Init+0x74>
 8003490:	d803      	bhi.n	800349a <HAL_GPIO_Init+0x2e>
 8003492:	b35d      	cbz	r5, 80034ec <HAL_GPIO_Init+0x80>
 8003494:	2d01      	cmp	r5, #1
 8003496:	d01e      	beq.n	80034d6 <HAL_GPIO_Init+0x6a>
 8003498:	e035      	b.n	8003506 <HAL_GPIO_Init+0x9a>
 800349a:	2d03      	cmp	r5, #3
 800349c:	d030      	beq.n	8003500 <HAL_GPIO_Init+0x94>
 800349e:	2d11      	cmp	r5, #17
 80034a0:	d01b      	beq.n	80034da <HAL_GPIO_Init+0x6e>
 80034a2:	e030      	b.n	8003506 <HAL_GPIO_Init+0x9a>
 80034a4:	4f61      	ldr	r7, [pc, #388]	; (800362c <HAL_GPIO_Init+0x1c0>)
 80034a6:	42bd      	cmp	r5, r7
 80034a8:	d020      	beq.n	80034ec <HAL_GPIO_Init+0x80>
 80034aa:	d808      	bhi.n	80034be <HAL_GPIO_Init+0x52>
 80034ac:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80034b0:	42bd      	cmp	r5, r7
 80034b2:	d01b      	beq.n	80034ec <HAL_GPIO_Init+0x80>
 80034b4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80034b8:	42bd      	cmp	r5, r7
 80034ba:	d124      	bne.n	8003506 <HAL_GPIO_Init+0x9a>
 80034bc:	e016      	b.n	80034ec <HAL_GPIO_Init+0x80>
 80034be:	4f5c      	ldr	r7, [pc, #368]	; (8003630 <HAL_GPIO_Init+0x1c4>)
 80034c0:	42bd      	cmp	r5, r7
 80034c2:	d013      	beq.n	80034ec <HAL_GPIO_Init+0x80>
 80034c4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80034c8:	42bd      	cmp	r5, r7
 80034ca:	d00f      	beq.n	80034ec <HAL_GPIO_Init+0x80>
 80034cc:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80034d0:	42bd      	cmp	r5, r7
 80034d2:	d118      	bne.n	8003506 <HAL_GPIO_Init+0x9a>
 80034d4:	e00a      	b.n	80034ec <HAL_GPIO_Init+0x80>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034d6:	68ce      	ldr	r6, [r1, #12]
          break;
 80034d8:	e015      	b.n	8003506 <HAL_GPIO_Init+0x9a>

        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034da:	68ce      	ldr	r6, [r1, #12]
 80034dc:	3604      	adds	r6, #4
          break;
 80034de:	e012      	b.n	8003506 <HAL_GPIO_Init+0x9a>

        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034e0:	68ce      	ldr	r6, [r1, #12]
 80034e2:	3608      	adds	r6, #8
          break;
 80034e4:	e00f      	b.n	8003506 <HAL_GPIO_Init+0x9a>

        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034e6:	68ce      	ldr	r6, [r1, #12]
 80034e8:	360c      	adds	r6, #12
          break;
 80034ea:	e00c      	b.n	8003506 <HAL_GPIO_Init+0x9a>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034ec:	688d      	ldr	r5, [r1, #8]
 80034ee:	b14d      	cbz	r5, 8003504 <HAL_GPIO_Init+0x98>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034f0:	2d01      	cmp	r5, #1
 80034f2:	d102      	bne.n	80034fa <HAL_GPIO_Init+0x8e>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 80034f4:	6102      	str	r2, [r0, #16]
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034f6:	2608      	movs	r6, #8
 80034f8:	e005      	b.n	8003506 <HAL_GPIO_Init+0x9a>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80034fa:	6142      	str	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034fc:	2608      	movs	r6, #8
 80034fe:	e002      	b.n	8003506 <HAL_GPIO_Init+0x9a>
          }
          break;

        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003500:	2600      	movs	r6, #0
 8003502:	e000      	b.n	8003506 <HAL_GPIO_Init+0x9a>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003504:	2604      	movs	r6, #4
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003506:	2bff      	cmp	r3, #255	; 0xff
 8003508:	d801      	bhi.n	800350e <HAL_GPIO_Init+0xa2>
 800350a:	4686      	mov	lr, r0
 800350c:	e001      	b.n	8003512 <HAL_GPIO_Init+0xa6>
 800350e:	f100 0e04 	add.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003512:	2bff      	cmp	r3, #255	; 0xff
 8003514:	d801      	bhi.n	800351a <HAL_GPIO_Init+0xae>
 8003516:	00a2      	lsls	r2, r4, #2
 8003518:	e002      	b.n	8003520 <HAL_GPIO_Init+0xb4>
 800351a:	f1a4 0208 	sub.w	r2, r4, #8
 800351e:	0092      	lsls	r2, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003520:	f8de 7000 	ldr.w	r7, [lr]
 8003524:	250f      	movs	r5, #15
 8003526:	4095      	lsls	r5, r2
 8003528:	ea27 0505 	bic.w	r5, r7, r5
 800352c:	fa06 f202 	lsl.w	r2, r6, r2
 8003530:	432a      	orrs	r2, r5
 8003532:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003536:	684a      	ldr	r2, [r1, #4]
 8003538:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800353c:	d070      	beq.n	8003620 <HAL_GPIO_Init+0x1b4>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800353e:	4a3d      	ldr	r2, [pc, #244]	; (8003634 <HAL_GPIO_Init+0x1c8>)
 8003540:	6995      	ldr	r5, [r2, #24]
 8003542:	f045 0501 	orr.w	r5, r5, #1
 8003546:	6195      	str	r5, [r2, #24]
 8003548:	6992      	ldr	r2, [r2, #24]
 800354a:	f002 0201 	and.w	r2, r2, #1
 800354e:	9201      	str	r2, [sp, #4]
 8003550:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8003552:	08a7      	lsrs	r7, r4, #2
 8003554:	1cbd      	adds	r5, r7, #2
 8003556:	4a38      	ldr	r2, [pc, #224]	; (8003638 <HAL_GPIO_Init+0x1cc>)
 8003558:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800355c:	f004 0203 	and.w	r2, r4, #3
 8003560:	0092      	lsls	r2, r2, #2
 8003562:	f04f 0e0f 	mov.w	lr, #15
 8003566:	fa0e fe02 	lsl.w	lr, lr, r2
 800356a:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356e:	4d33      	ldr	r5, [pc, #204]	; (800363c <HAL_GPIO_Init+0x1d0>)
 8003570:	42a8      	cmp	r0, r5
 8003572:	d00d      	beq.n	8003590 <HAL_GPIO_Init+0x124>
 8003574:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003578:	42a8      	cmp	r0, r5
 800357a:	d00b      	beq.n	8003594 <HAL_GPIO_Init+0x128>
 800357c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003580:	42a8      	cmp	r0, r5
 8003582:	d009      	beq.n	8003598 <HAL_GPIO_Init+0x12c>
 8003584:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003588:	42a8      	cmp	r0, r5
 800358a:	d107      	bne.n	800359c <HAL_GPIO_Init+0x130>
 800358c:	2503      	movs	r5, #3
 800358e:	e006      	b.n	800359e <HAL_GPIO_Init+0x132>
 8003590:	2500      	movs	r5, #0
 8003592:	e004      	b.n	800359e <HAL_GPIO_Init+0x132>
 8003594:	2501      	movs	r5, #1
 8003596:	e002      	b.n	800359e <HAL_GPIO_Init+0x132>
 8003598:	2502      	movs	r5, #2
 800359a:	e000      	b.n	800359e <HAL_GPIO_Init+0x132>
 800359c:	2504      	movs	r5, #4
 800359e:	fa05 f202 	lsl.w	r2, r5, r2
 80035a2:	ea4e 0202 	orr.w	r2, lr, r2
        AFIO->EXTICR[position >> 2U] = temp;
 80035a6:	3702      	adds	r7, #2
 80035a8:	4d23      	ldr	r5, [pc, #140]	; (8003638 <HAL_GPIO_Init+0x1cc>)
 80035aa:	f845 2027 	str.w	r2, [r5, r7, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ae:	684a      	ldr	r2, [r1, #4]
 80035b0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80035b4:	d005      	beq.n	80035c2 <HAL_GPIO_Init+0x156>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035ba:	682a      	ldr	r2, [r5, #0]
 80035bc:	431a      	orrs	r2, r3
 80035be:	602a      	str	r2, [r5, #0]
 80035c0:	e004      	b.n	80035cc <HAL_GPIO_Init+0x160>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035c2:	4d1f      	ldr	r5, [pc, #124]	; (8003640 <HAL_GPIO_Init+0x1d4>)
 80035c4:	682a      	ldr	r2, [r5, #0]
 80035c6:	ea22 0203 	bic.w	r2, r2, r3
 80035ca:	602a      	str	r2, [r5, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035cc:	684a      	ldr	r2, [r1, #4]
 80035ce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80035d2:	d004      	beq.n	80035de <HAL_GPIO_Init+0x172>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035d4:	4d1a      	ldr	r5, [pc, #104]	; (8003640 <HAL_GPIO_Init+0x1d4>)
 80035d6:	686a      	ldr	r2, [r5, #4]
 80035d8:	431a      	orrs	r2, r3
 80035da:	606a      	str	r2, [r5, #4]
 80035dc:	e004      	b.n	80035e8 <HAL_GPIO_Init+0x17c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035de:	4d18      	ldr	r5, [pc, #96]	; (8003640 <HAL_GPIO_Init+0x1d4>)
 80035e0:	686a      	ldr	r2, [r5, #4]
 80035e2:	ea22 0203 	bic.w	r2, r2, r3
 80035e6:	606a      	str	r2, [r5, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035e8:	684a      	ldr	r2, [r1, #4]
 80035ea:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80035ee:	d004      	beq.n	80035fa <HAL_GPIO_Init+0x18e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035f0:	4d13      	ldr	r5, [pc, #76]	; (8003640 <HAL_GPIO_Init+0x1d4>)
 80035f2:	68aa      	ldr	r2, [r5, #8]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	60aa      	str	r2, [r5, #8]
 80035f8:	e004      	b.n	8003604 <HAL_GPIO_Init+0x198>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035fa:	4d11      	ldr	r5, [pc, #68]	; (8003640 <HAL_GPIO_Init+0x1d4>)
 80035fc:	68aa      	ldr	r2, [r5, #8]
 80035fe:	ea22 0203 	bic.w	r2, r2, r3
 8003602:	60aa      	str	r2, [r5, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003604:	684a      	ldr	r2, [r1, #4]
 8003606:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800360a:	d004      	beq.n	8003616 <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800360c:	4d0c      	ldr	r5, [pc, #48]	; (8003640 <HAL_GPIO_Init+0x1d4>)
 800360e:	68ea      	ldr	r2, [r5, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60eb      	str	r3, [r5, #12]
 8003614:	e004      	b.n	8003620 <HAL_GPIO_Init+0x1b4>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003616:	4d0a      	ldr	r5, [pc, #40]	; (8003640 <HAL_GPIO_Init+0x1d4>)
 8003618:	68ea      	ldr	r2, [r5, #12]
 800361a:	ea22 0303 	bic.w	r3, r2, r3
 800361e:	60eb      	str	r3, [r5, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003620:	3401      	adds	r4, #1
 8003622:	2c0f      	cmp	r4, #15
 8003624:	f67f af27 	bls.w	8003476 <HAL_GPIO_Init+0xa>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }
  }
}
 8003628:	b003      	add	sp, #12
 800362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362c:	10210000 	.word	0x10210000
 8003630:	10310000 	.word	0x10310000
 8003634:	40021000 	.word	0x40021000
 8003638:	40010000 	.word	0x40010000
 800363c:	40010800 	.word	0x40010800
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003644:	6883      	ldr	r3, [r0, #8]
 8003646:	4219      	tst	r1, r3
 8003648:	d001      	beq.n	800364e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800364a:	2001      	movs	r0, #1
 800364c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800364e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003654:	b10a      	cbz	r2, 800365a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003656:	6101      	str	r1, [r0, #16]
 8003658:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800365a:	0409      	lsls	r1, r1, #16
 800365c:	6101      	str	r1, [r0, #16]
 800365e:	4770      	bx	lr

08003660 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003660:	68c3      	ldr	r3, [r0, #12]
 8003662:	4059      	eors	r1, r3
 8003664:	60c1      	str	r1, [r0, #12]
 8003666:	4770      	bx	lr

08003668 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003668:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800366a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800366c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800366e:	2401      	movs	r4, #1
 8003670:	40b4      	lsls	r4, r6
 8003672:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003674:	6804      	ldr	r4, [r0, #0]
 8003676:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003678:	6843      	ldr	r3, [r0, #4]
 800367a:	2b10      	cmp	r3, #16
 800367c:	d104      	bne.n	8003688 <DMA_SetConfig+0x20>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800367e:	6803      	ldr	r3, [r0, #0]
 8003680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	60d9      	str	r1, [r3, #12]
 8003686:	e003      	b.n	8003690 <DMA_SetConfig+0x28>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003688:	6803      	ldr	r3, [r0, #0]
 800368a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800368c:	6803      	ldr	r3, [r0, #0]
 800368e:	60da      	str	r2, [r3, #12]
  }
}
 8003690:	bc70      	pop	{r4, r5, r6}
 8003692:	4770      	bx	lr

08003694 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003694:	b358      	cbz	r0, 80036ee <HAL_DMA_Init+0x5a>
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003696:	b410      	push	{r4}
 8003698:	4603      	mov	r3, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800369a:	6800      	ldr	r0, [r0, #0]
 800369c:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <HAL_DMA_Init+0x64>)
 800369e:	4402      	add	r2, r0
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_DMA_Init+0x68>)
 80036a2:	fba1 1202 	umull	r1, r2, r1, r2
 80036a6:	0912      	lsrs	r2, r2, #4
 80036a8:	0092      	lsls	r2, r2, #2
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80036ac:	4a14      	ldr	r2, [pc, #80]	; (8003700 <HAL_DMA_Init+0x6c>)
 80036ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036b6:	6802      	ldr	r2, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036b8:	f422 517f 	bic.w	r1, r2, #16320	; 0x3fc0
 80036bc:	f021 0130 	bic.w	r1, r1, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036c0:	685c      	ldr	r4, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c2:	689a      	ldr	r2, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036c4:	4314      	orrs	r4, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4314      	orrs	r4, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ca:	691a      	ldr	r2, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036cc:	4314      	orrs	r4, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	4314      	orrs	r4, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d2:	699a      	ldr	r2, [r3, #24]
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d4:	4314      	orrs	r4, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036da:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036dc:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036de:	2000      	movs	r0, #0
 80036e0:	6398      	str	r0, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036e8:	f883 0020 	strb.w	r0, [r3, #32]

  return HAL_OK;
 80036ec:	e001      	b.n	80036f2 <HAL_DMA_Init+0x5e>
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80036ee:	2001      	movs	r0, #1
 80036f0:	4770      	bx	lr
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
}
 80036f2:	bc10      	pop	{r4}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	bffdfff8 	.word	0xbffdfff8
 80036fc:	cccccccd 	.word	0xcccccccd
 8003700:	40020000 	.word	0x40020000

08003704 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003704:	b538      	push	{r3, r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003706:	f890 4020 	ldrb.w	r4, [r0, #32]
 800370a:	2c01      	cmp	r4, #1
 800370c:	d032      	beq.n	8003774 <HAL_DMA_Start_IT+0x70>
 800370e:	2401      	movs	r4, #1
 8003710:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003714:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8003718:	2c01      	cmp	r4, #1
 800371a:	d126      	bne.n	800376a <HAL_DMA_Start_IT+0x66>
 800371c:	4604      	mov	r4, r0
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800371e:	2002      	movs	r0, #2
 8003720:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003724:	2000      	movs	r0, #0
 8003726:	63a0      	str	r0, [r4, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003728:	6825      	ldr	r5, [r4, #0]
 800372a:	6828      	ldr	r0, [r5, #0]
 800372c:	f020 0001 	bic.w	r0, r0, #1
 8003730:	6028      	str	r0, [r5, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003732:	4620      	mov	r0, r4
 8003734:	f7ff ff98 	bl	8003668 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800373a:	b12b      	cbz	r3, 8003748 <HAL_DMA_Start_IT+0x44>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800373c:	6822      	ldr	r2, [r4, #0]
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	f043 030e 	orr.w	r3, r3, #14
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e009      	b.n	800375c <HAL_DMA_Start_IT+0x58>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003748:	6822      	ldr	r2, [r4, #0]
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	6813      	ldr	r3, [r2, #0]
 8003756:	f043 030a 	orr.w	r3, r3, #10
 800375a:	6013      	str	r3, [r2, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800375c:	6822      	ldr	r2, [r4, #0]
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6013      	str	r3, [r2, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2000      	movs	r0, #0
 8003768:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800376a:	2300      	movs	r3, #0
 800376c:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003770:	2002      	movs	r0, #2
 8003772:	bd38      	pop	{r3, r4, r5, pc}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003774:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }    
  return status;
}
 8003776:	bd38      	pop	{r3, r4, r5, pc}

08003778 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003778:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800377a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800377e:	2b02      	cmp	r3, #2
 8003780:	d003      	beq.n	800378a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003782:	2304      	movs	r3, #4
 8003784:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8003786:	2001      	movs	r0, #1
 8003788:	bd08      	pop	{r3, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378a:	6802      	ldr	r2, [r0, #0]
 800378c:	6813      	ldr	r3, [r2, #0]
 800378e:	f023 030e 	bic.w	r3, r3, #14
 8003792:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003794:	6802      	ldr	r2, [r0, #0]
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6013      	str	r3, [r2, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800379e:	6803      	ldr	r3, [r0, #0]
 80037a0:	4a19      	ldr	r2, [pc, #100]	; (8003808 <HAL_DMA_Abort_IT+0x90>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d011      	beq.n	80037ca <HAL_DMA_Abort_IT+0x52>
 80037a6:	3214      	adds	r2, #20
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d010      	beq.n	80037ce <HAL_DMA_Abort_IT+0x56>
 80037ac:	3214      	adds	r2, #20
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00f      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x5a>
 80037b2:	3214      	adds	r2, #20
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00f      	beq.n	80037d8 <HAL_DMA_Abort_IT+0x60>
 80037b8:	3214      	adds	r2, #20
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00f      	beq.n	80037de <HAL_DMA_Abort_IT+0x66>
 80037be:	3214      	adds	r2, #20
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d10f      	bne.n	80037e4 <HAL_DMA_Abort_IT+0x6c>
 80037c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037c8:	e00e      	b.n	80037e8 <HAL_DMA_Abort_IT+0x70>
 80037ca:	2201      	movs	r2, #1
 80037cc:	e00c      	b.n	80037e8 <HAL_DMA_Abort_IT+0x70>
 80037ce:	2210      	movs	r2, #16
 80037d0:	e00a      	b.n	80037e8 <HAL_DMA_Abort_IT+0x70>
 80037d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d6:	e007      	b.n	80037e8 <HAL_DMA_Abort_IT+0x70>
 80037d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037dc:	e004      	b.n	80037e8 <HAL_DMA_Abort_IT+0x70>
 80037de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037e2:	e001      	b.n	80037e8 <HAL_DMA_Abort_IT+0x70>
 80037e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_DMA_Abort_IT+0x94>)
 80037ea:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	2300      	movs	r3, #0
 80037f4:	f880 3020 	strb.w	r3, [r0, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037fa:	b113      	cbz	r3, 8003802 <HAL_DMA_Abort_IT+0x8a>
    {
      hdma->XferAbortCallback(hdma);
 80037fc:	4798      	blx	r3
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2000      	movs	r0, #0
 8003800:	bd08      	pop	{r3, pc}
 8003802:	2000      	movs	r0, #0
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8003804:	bd08      	pop	{r3, pc}
 8003806:	bf00      	nop
 8003808:	40020008 	.word	0x40020008
 800380c:	40020000 	.word	0x40020000

08003810 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003810:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003812:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003814:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003816:	6804      	ldr	r4, [r0, #0]
 8003818:	6825      	ldr	r5, [r4, #0]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800381a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800381c:	2304      	movs	r3, #4
 800381e:	408b      	lsls	r3, r1
 8003820:	421a      	tst	r2, r3
 8003822:	d036      	beq.n	8003892 <HAL_DMA_IRQHandler+0x82>
 8003824:	f015 0f04 	tst.w	r5, #4
 8003828:	d033      	beq.n	8003892 <HAL_DMA_IRQHandler+0x82>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	f013 0f20 	tst.w	r3, #32
 8003830:	d103      	bne.n	800383a <HAL_DMA_IRQHandler+0x2a>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	6023      	str	r3, [r4, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800383a:	6803      	ldr	r3, [r0, #0]
 800383c:	4a43      	ldr	r2, [pc, #268]	; (800394c <HAL_DMA_IRQHandler+0x13c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d011      	beq.n	8003866 <HAL_DMA_IRQHandler+0x56>
 8003842:	3214      	adds	r2, #20
 8003844:	4293      	cmp	r3, r2
 8003846:	d010      	beq.n	800386a <HAL_DMA_IRQHandler+0x5a>
 8003848:	3214      	adds	r2, #20
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <HAL_DMA_IRQHandler+0x5e>
 800384e:	3214      	adds	r2, #20
 8003850:	4293      	cmp	r3, r2
 8003852:	d00f      	beq.n	8003874 <HAL_DMA_IRQHandler+0x64>
 8003854:	3214      	adds	r2, #20
 8003856:	4293      	cmp	r3, r2
 8003858:	d00f      	beq.n	800387a <HAL_DMA_IRQHandler+0x6a>
 800385a:	3214      	adds	r2, #20
 800385c:	4293      	cmp	r3, r2
 800385e:	d10f      	bne.n	8003880 <HAL_DMA_IRQHandler+0x70>
 8003860:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003864:	e00e      	b.n	8003884 <HAL_DMA_IRQHandler+0x74>
 8003866:	2204      	movs	r2, #4
 8003868:	e00c      	b.n	8003884 <HAL_DMA_IRQHandler+0x74>
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	e00a      	b.n	8003884 <HAL_DMA_IRQHandler+0x74>
 800386e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003872:	e007      	b.n	8003884 <HAL_DMA_IRQHandler+0x74>
 8003874:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003878:	e004      	b.n	8003884 <HAL_DMA_IRQHandler+0x74>
 800387a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800387e:	e001      	b.n	8003884 <HAL_DMA_IRQHandler+0x74>
 8003880:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_DMA_IRQHandler+0x140>)
 8003886:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003888:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d05c      	beq.n	8003948 <HAL_DMA_IRQHandler+0x138>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800388e:	4798      	blx	r3
 8003890:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003892:	2302      	movs	r3, #2
 8003894:	408b      	lsls	r3, r1
 8003896:	421a      	tst	r2, r3
 8003898:	d03b      	beq.n	8003912 <HAL_DMA_IRQHandler+0x102>
 800389a:	f015 0f02 	tst.w	r5, #2
 800389e:	d038      	beq.n	8003912 <HAL_DMA_IRQHandler+0x102>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	f013 0f20 	tst.w	r3, #32
 80038a6:	d106      	bne.n	80038b6 <HAL_DMA_IRQHandler+0xa6>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	f023 030a 	bic.w	r3, r3, #10
 80038ae:	6023      	str	r3, [r4, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80038b6:	6803      	ldr	r3, [r0, #0]
 80038b8:	4a24      	ldr	r2, [pc, #144]	; (800394c <HAL_DMA_IRQHandler+0x13c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d011      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038be:	3214      	adds	r2, #20
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d010      	beq.n	80038e6 <HAL_DMA_IRQHandler+0xd6>
 80038c4:	3214      	adds	r2, #20
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00f      	beq.n	80038ea <HAL_DMA_IRQHandler+0xda>
 80038ca:	3214      	adds	r2, #20
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00f      	beq.n	80038f0 <HAL_DMA_IRQHandler+0xe0>
 80038d0:	3214      	adds	r2, #20
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xe6>
 80038d6:	3214      	adds	r2, #20
 80038d8:	4293      	cmp	r3, r2
 80038da:	d10f      	bne.n	80038fc <HAL_DMA_IRQHandler+0xec>
 80038dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038e0:	e00e      	b.n	8003900 <HAL_DMA_IRQHandler+0xf0>
 80038e2:	2202      	movs	r2, #2
 80038e4:	e00c      	b.n	8003900 <HAL_DMA_IRQHandler+0xf0>
 80038e6:	2220      	movs	r2, #32
 80038e8:	e00a      	b.n	8003900 <HAL_DMA_IRQHandler+0xf0>
 80038ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ee:	e007      	b.n	8003900 <HAL_DMA_IRQHandler+0xf0>
 80038f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038f4:	e004      	b.n	8003900 <HAL_DMA_IRQHandler+0xf0>
 80038f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038fa:	e001      	b.n	8003900 <HAL_DMA_IRQHandler+0xf0>
 80038fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <HAL_DMA_IRQHandler+0x140>)
 8003902:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003904:	2300      	movs	r3, #0
 8003906:	f880 3020 	strb.w	r3, [r0, #32]

    if(hdma->XferCpltCallback != NULL)
 800390a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800390c:	b1e3      	cbz	r3, 8003948 <HAL_DMA_IRQHandler+0x138>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800390e:	4798      	blx	r3
 8003910:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003912:	2308      	movs	r3, #8
 8003914:	fa03 f101 	lsl.w	r1, r3, r1
 8003918:	420a      	tst	r2, r1
 800391a:	d015      	beq.n	8003948 <HAL_DMA_IRQHandler+0x138>
 800391c:	f015 0f08 	tst.w	r5, #8
 8003920:	d012      	beq.n	8003948 <HAL_DMA_IRQHandler+0x138>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	f023 030e 	bic.w	r3, r3, #14
 8003928:	6023      	str	r3, [r4, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800392a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800392c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800392e:	2301      	movs	r3, #1
 8003930:	fa03 f202 	lsl.w	r2, r3, r2
 8003934:	604a      	str	r2, [r1, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003936:	6383      	str	r3, [r0, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003938:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393c:	2300      	movs	r3, #0
 800393e:	f880 3020 	strb.w	r3, [r0, #32]

    if (hdma->XferErrorCallback != NULL)
 8003942:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003944:	b103      	cbz	r3, 8003948 <HAL_DMA_IRQHandler+0x138>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003946:	4798      	blx	r3
 8003948:	bd38      	pop	{r3, r4, r5, pc}
 800394a:	bf00      	nop
 800394c:	40020008 	.word	0x40020008
 8003950:	40020000 	.word	0x40020000

08003954 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003954:	4a07      	ldr	r2, [pc, #28]	; (8003974 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003956:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003958:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003960:	0200      	lsls	r0, r0, #8
 8003962:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003966:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003968:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800396c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8003970:	60d0      	str	r0, [r2, #12]
 8003972:	4770      	bx	lr
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003978:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_NVIC_SetPriority+0x5c>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003982:	f1c3 0407 	rsb	r4, r3, #7
 8003986:	2c04      	cmp	r4, #4
 8003988:	bf28      	it	cs
 800398a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398c:	1d1d      	adds	r5, r3, #4
 800398e:	2d06      	cmp	r5, #6
 8003990:	d901      	bls.n	8003996 <HAL_NVIC_SetPriority+0x1e>
 8003992:	1edd      	subs	r5, r3, #3
 8003994:	e000      	b.n	8003998 <HAL_NVIC_SetPriority+0x20>
 8003996:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	2301      	movs	r3, #1
 800399a:	fa03 f404 	lsl.w	r4, r3, r4
 800399e:	3c01      	subs	r4, #1
 80039a0:	4021      	ands	r1, r4
 80039a2:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a4:	40ab      	lsls	r3, r5
 80039a6:	3b01      	subs	r3, #1
 80039a8:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80039aa:	430a      	orrs	r2, r1
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80039ac:	2800      	cmp	r0, #0
 80039ae:	da06      	bge.n	80039be <HAL_NVIC_SetPriority+0x46>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	f000 000f 	and.w	r0, r0, #15
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <HAL_NVIC_SetPriority+0x60>)
 80039ba:	541a      	strb	r2, [r3, r0]
 80039bc:	e007      	b.n	80039ce <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039be:	0112      	lsls	r2, r2, #4
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80039c6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80039ca:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80039ce:	bc30      	pop	{r4, r5}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000ed00 	.word	0xe000ed00
 80039d8:	e000ed14 	.word	0xe000ed14

080039dc <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80039dc:	0942      	lsrs	r2, r0, #5
 80039de:	f000 001f 	and.w	r0, r0, #31
 80039e2:	2301      	movs	r3, #1
 80039e4:	fa03 f000 	lsl.w	r0, r3, r0
 80039e8:	4b01      	ldr	r3, [pc, #4]	; (80039f0 <HAL_NVIC_EnableIRQ+0x14>)
 80039ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100

080039f4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <SystemInit+0x40>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <SystemInit+0x44>)
 8003a02:	400a      	ands	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003a0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a10:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a18:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003a20:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003a22:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003a26:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003a28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a2c:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <SystemInit+0x48>)
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	f8ff0000 	.word	0xf8ff0000
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop

08003a44 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <vApplicationGetIdleTaskMemory+0x10>)
 8003a46:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <vApplicationGetIdleTaskMemory+0x14>)
 8003a4a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000fd4 	.word	0x20000fd4
 8003a58:	200009d4 	.word	0x200009d4

08003a5c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <vApplicationGetTimerTaskMemory+0x10>)
 8003a5e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <vApplicationGetTimerTaskMemory+0x14>)
 8003a62:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4770      	bx	lr
 8003a6c:	20001028 	.word	0x20001028
 8003a70:	20000bd4 	.word	0x20000bd4

08003a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a74:	b500      	push	{lr}
 8003a76:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	201c      	movs	r0, #28
 8003a7e:	f7ff ff7b 	bl	8003978 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8003a82:	201c      	movs	r0, #28
 8003a84:	f7ff ffaa 	bl	80039dc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003a88:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <HAL_InitTick+0x6c>)
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	61da      	str	r2, [r3, #28]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a9c:	a902      	add	r1, sp, #8
 8003a9e:	a803      	add	r0, sp, #12
 8003aa0:	f7ff fbb8 	bl	8003214 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7ff fb96 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8003aa8:	0040      	lsls	r0, r0, #1
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_InitTick+0x70>)
 8003aac:	fba3 2300 	umull	r2, r3, r3, r0
 8003ab0:	0c9b      	lsrs	r3, r3, #18
 8003ab2:	3b01      	subs	r3, #1
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003ab4:	480c      	ldr	r0, [pc, #48]	; (8003ae8 <HAL_InitTick+0x74>)
 8003ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aba:	6002      	str	r2, [r0, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8003abc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ac0:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003ac2:	6043      	str	r3, [r0, #4]
  htim2.Init.ClockDivision = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac8:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003aca:	f7fe fe95 	bl	80027f8 <HAL_TIM_Base_Init>
 8003ace:	b918      	cbnz	r0, 8003ad8 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8003ad0:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <HAL_InitTick+0x74>)
 8003ad2:	f7fe fcfd 	bl	80024d0 <HAL_TIM_Base_Start_IT>
 8003ad6:	e000      	b.n	8003ada <HAL_InitTick+0x66>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003ad8:	2001      	movs	r0, #1
}
 8003ada:	b009      	add	sp, #36	; 0x24
 8003adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	431bde83 	.word	0x431bde83
 8003ae8:	20003268 	.word	0x20003268

08003aec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003aec:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af2:	f012 0f50 	tst.w	r2, #80	; 0x50
 8003af6:	d11c      	bne.n	8003b32 <ADC_DMAConvCplt+0x46>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003b08:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8003b0c:	d10d      	bne.n	8003b2a <ADC_DMAConvCplt+0x3e>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b0e:	68da      	ldr	r2, [r3, #12]
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b10:	b95a      	cbnz	r2, 8003b2a <ADC_DMAConvCplt+0x3e>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003b20:	d103      	bne.n	8003b2a <ADC_DMAConvCplt+0x3e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f004 fd58 	bl	80085e0 <HAL_ADC_ConvCpltCallback>
 8003b30:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4798      	blx	r3
 8003b38:	bd08      	pop	{r3, pc}
 8003b3a:	bf00      	nop

08003b3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b3c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003b3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003b40:	f004 fd2e 	bl	80085a0 <HAL_ADC_ConvHalfCpltCallback>
 8003b44:	bd08      	pop	{r3, pc}
 8003b46:	bf00      	nop

08003b48 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b4c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b56:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8003b60:	f7ff fff2 	bl	8003b48 <HAL_ADC_ErrorCallback>
 8003b64:	bd08      	pop	{r3, pc}
 8003b66:	bf00      	nop

08003b68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003b68:	b470      	push	{r4, r5, r6}
 8003b6a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b70:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	f000 8088 	beq.w	8003c8a <HAL_ADC_ConfigChannel+0x122>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b80:	684b      	ldr	r3, [r1, #4]
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d80e      	bhi.n	8003ba4 <HAL_ADC_ConfigChannel+0x3c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003b86:	6806      	ldr	r6, [r0, #0]
 8003b88:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8003b8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b8e:	3b05      	subs	r3, #5
 8003b90:	241f      	movs	r4, #31
 8003b92:	409c      	lsls	r4, r3
 8003b94:	ea25 0404 	bic.w	r4, r5, r4
 8003b98:	680a      	ldr	r2, [r1, #0]
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	4323      	orrs	r3, r4
 8003ba0:	6373      	str	r3, [r6, #52]	; 0x34
 8003ba2:	e01e      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x7a>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	d80e      	bhi.n	8003bc6 <HAL_ADC_ConfigChannel+0x5e>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003ba8:	6805      	ldr	r5, [r0, #0]
 8003baa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003bac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bb0:	3b23      	subs	r3, #35	; 0x23
 8003bb2:	241f      	movs	r4, #31
 8003bb4:	409c      	lsls	r4, r3
 8003bb6:	ea22 0404 	bic.w	r4, r2, r4
 8003bba:	680a      	ldr	r2, [r1, #0]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	4323      	orrs	r3, r4
 8003bc2:	632b      	str	r3, [r5, #48]	; 0x30
 8003bc4:	e00d      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x7a>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003bc6:	6805      	ldr	r5, [r0, #0]
 8003bc8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003bca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bce:	3b41      	subs	r3, #65	; 0x41
 8003bd0:	241f      	movs	r4, #31
 8003bd2:	409c      	lsls	r4, r3
 8003bd4:	ea22 0404 	bic.w	r4, r2, r4
 8003bd8:	680a      	ldr	r2, [r1, #0]
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	4323      	orrs	r3, r4
 8003be0:	62eb      	str	r3, [r5, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003be2:	680b      	ldr	r3, [r1, #0]
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	d90e      	bls.n	8003c06 <HAL_ADC_ConfigChannel+0x9e>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003be8:	6806      	ldr	r6, [r0, #0]
 8003bea:	68f5      	ldr	r5, [r6, #12]
 8003bec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003bf0:	3b1e      	subs	r3, #30
 8003bf2:	2407      	movs	r4, #7
 8003bf4:	409c      	lsls	r4, r3
 8003bf6:	ea25 0404 	bic.w	r4, r5, r4
 8003bfa:	688a      	ldr	r2, [r1, #8]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	4323      	orrs	r3, r4
 8003c02:	60f3      	str	r3, [r6, #12]
 8003c04:	e00c      	b.n	8003c20 <HAL_ADC_ConfigChannel+0xb8>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003c06:	6806      	ldr	r6, [r0, #0]
 8003c08:	6935      	ldr	r5, [r6, #16]
 8003c0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003c0e:	2407      	movs	r4, #7
 8003c10:	409c      	lsls	r4, r3
 8003c12:	ea25 0404 	bic.w	r4, r5, r4
 8003c16:	688a      	ldr	r2, [r1, #8]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	4323      	orrs	r3, r4
 8003c1e:	6133      	str	r3, [r6, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c20:	680b      	ldr	r3, [r1, #0]
 8003c22:	3b10      	subs	r3, #16
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d826      	bhi.n	8003c76 <HAL_ADC_ConfigChannel+0x10e>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003c28:	6803      	ldr	r3, [r0, #0]
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_ADC_ConfigChannel+0x12c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d11c      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x102>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8003c36:	d120      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x112>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c3e:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003c40:	680b      	ldr	r3, [r1, #0]
 8003c42:	2b10      	cmp	r3, #16
 8003c44:	d11b      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x116>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <HAL_ADC_ConfigChannel+0x130>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <HAL_ADC_ConfigChannel+0x134>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	0c9b      	lsrs	r3, r3, #18
 8003c52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c56:	005a      	lsls	r2, r3, #1
 8003c58:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003c5a:	e002      	b.n	8003c62 <HAL_ADC_ConfigChannel+0xfa>
          {
            wait_loop_index--;
 8003c5c:	9b01      	ldr	r3, [sp, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
          while(wait_loop_index != 0U)
 8003c62:	9b01      	ldr	r3, [sp, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f9      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0xf4>
 8003c68:	e00a      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x118>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c6c:	f043 0320 	orr.w	r3, r3, #32
 8003c70:	6283      	str	r3, [r0, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e004      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x118>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e002      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x118>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x118>
 8003c7e:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c80:	2200      	movs	r2, #0
 8003c82:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003c86:	4618      	mov	r0, r3
 8003c88:	e000      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x124>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c8a:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8003c8c:	b003      	add	sp, #12
 8003c8e:	bc70      	pop	{r4, r5, r6}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012400 	.word	0x40012400
 8003c98:	20000004 	.word	0x20000004
 8003c9c:	431bde83 	.word	0x431bde83

08003ca0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ca0:	b530      	push	{r4, r5, lr}
 8003ca2:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ca8:	6803      	ldr	r3, [r0, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	f012 0f01 	tst.w	r2, #1
 8003cb0:	d12f      	bne.n	8003d12 <ADC_Enable+0x72>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <ADC_Enable+0x78>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <ADC_Enable+0x7c>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	0c9b      	lsrs	r3, r3, #18
 8003cc6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003cc8:	e002      	b.n	8003cd0 <ADC_Enable+0x30>
    {
      wait_loop_index--;
 8003cca:	9b01      	ldr	r3, [sp, #4]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	9301      	str	r3, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
    while(wait_loop_index != 0U)
 8003cd0:	9b01      	ldr	r3, [sp, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f9      	bne.n	8003cca <ADC_Enable+0x2a>
 8003cd6:	4604      	mov	r4, r0
    {
      wait_loop_index--;
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cd8:	f7fe ff4e 	bl	8002b78 <HAL_GetTick>
 8003cdc:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003cde:	e011      	b.n	8003d04 <ADC_Enable+0x64>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ce0:	f7fe ff4a 	bl	8002b78 <HAL_GetTick>
 8003ce4:	1b40      	subs	r0, r0, r5
 8003ce6:	2802      	cmp	r0, #2
 8003ce8:	d90c      	bls.n	8003d04 <ADC_Enable+0x64>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cec:	f043 0310 	orr.w	r3, r3, #16
 8003cf0:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      
        return HAL_ERROR;
 8003d00:	2001      	movs	r0, #1
 8003d02:	e007      	b.n	8003d14 <ADC_Enable+0x74>
    
    /* Get tick count */
    tickstart = HAL_GetTick();

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f013 0f01 	tst.w	r3, #1
 8003d0c:	d0e8      	beq.n	8003ce0 <ADC_Enable+0x40>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e000      	b.n	8003d14 <ADC_Enable+0x74>
 8003d12:	2000      	movs	r0, #0
}
 8003d14:	b003      	add	sp, #12
 8003d16:	bd30      	pop	{r4, r5, pc}
 8003d18:	20000004 	.word	0x20000004
 8003d1c:	431bde83 	.word	0x431bde83

08003d20 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003d22:	6804      	ldr	r4, [r0, #0]
 8003d24:	4d4a      	ldr	r5, [pc, #296]	; (8003e50 <HAL_ADC_Start_DMA+0x130>)
 8003d26:	42ac      	cmp	r4, r5
 8003d28:	d003      	beq.n	8003d32 <HAL_ADC_Start_DMA+0x12>
 8003d2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d2e:	42ac      	cmp	r4, r5
 8003d30:	d105      	bne.n	8003d3e <HAL_ADC_Start_DMA+0x1e>
 8003d32:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_ADC_Start_DMA+0x130>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8003d3a:	f040 8085 	bne.w	8003e48 <HAL_ADC_Start_DMA+0x128>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d3e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003d42:	2c01      	cmp	r4, #1
 8003d44:	f000 8082 	beq.w	8003e4c <HAL_ADC_Start_DMA+0x12c>
 8003d48:	4617      	mov	r7, r2
 8003d4a:	460e      	mov	r6, r1
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d54:	f7ff ffa4 	bl	8003ca0 <ADC_Enable>
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d58:	4605      	mov	r5, r0
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d170      	bne.n	8003e40 <HAL_ADC_Start_DMA+0x120>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	4b38      	ldr	r3, [pc, #224]	; (8003e54 <HAL_ADC_Start_DMA+0x134>)
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d105      	bne.n	8003d82 <HAL_ADC_Start_DMA+0x62>
 8003d76:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8003d80:	d10e      	bne.n	8003da0 <HAL_ADC_Start_DMA+0x80>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003d88:	62a3      	str	r3, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d8a:	6853      	ldr	r3, [r2, #4]
 8003d8c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d90:	d01c      	beq.n	8003dcc <HAL_ADC_Start_DMA+0xac>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d9e:	e015      	b.n	8003dcc <HAL_ADC_Start_DMA+0xac>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003da0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003da6:	62a3      	str	r3, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003da8:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <HAL_ADC_Start_DMA+0x130>)
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d003      	beq.n	8003db6 <HAL_ADC_Start_DMA+0x96>
 8003dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d10a      	bne.n	8003dcc <HAL_ADC_Start_DMA+0xac>
 8003db6:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <HAL_ADC_Start_DMA+0x130>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003dbe:	d005      	beq.n	8003dcc <HAL_ADC_Start_DMA+0xac>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dca:	62a3      	str	r3, [r4, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003dd2:	d004      	beq.n	8003dde <HAL_ADC_Start_DMA+0xbe>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003dd6:	f023 0306 	bic.w	r3, r3, #6
 8003dda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ddc:	e001      	b.n	8003de2 <HAL_ADC_Start_DMA+0xc2>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003dde:	2300      	movs	r3, #0
 8003de0:	62e3      	str	r3, [r4, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003de2:	2300      	movs	r3, #0
 8003de4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003de8:	6a23      	ldr	r3, [r4, #32]
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_ADC_Start_DMA+0x138>)
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dee:	6a23      	ldr	r3, [r4, #32]
 8003df0:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <HAL_ADC_Start_DMA+0x13c>)
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003df4:	6a23      	ldr	r3, [r4, #32]
 8003df6:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_ADC_Start_DMA+0x140>)
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f06f 0202 	mvn.w	r2, #2
 8003e00:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	6893      	ldr	r3, [r2, #8]
 8003e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0a:	6093      	str	r3, [r2, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e0c:	6821      	ldr	r1, [r4, #0]
 8003e0e:	463b      	mov	r3, r7
 8003e10:	4632      	mov	r2, r6
 8003e12:	314c      	adds	r1, #76	; 0x4c
 8003e14:	6a20      	ldr	r0, [r4, #32]
 8003e16:	f7ff fc75 	bl	8003704 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003e1a:	6822      	ldr	r2, [r4, #0]
 8003e1c:	6893      	ldr	r3, [r2, #8]
 8003e1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003e22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e26:	d105      	bne.n	8003e34 <HAL_ADC_Start_DMA+0x114>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003e28:	6893      	ldr	r3, [r2, #8]
 8003e2a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8003e2e:	6093      	str	r3, [r2, #8]
  {
    /* Process locked */
    __HAL_LOCK(hadc);
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e30:	4628      	mov	r0, r5
 8003e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003e34:	6893      	ldr	r3, [r2, #8]
 8003e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e3a:	6093      	str	r3, [r2, #8]
  {
    /* Process locked */
    __HAL_LOCK(hadc);
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e40:	2300      	movs	r3, #0
 8003e42:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e48:	2001      	movs	r0, #1
 8003e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e4c:	2002      	movs	r0, #2
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8003e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e50:	40012400 	.word	0x40012400
 8003e54:	40012800 	.word	0x40012800
 8003e58:	08003aed 	.word	0x08003aed
 8003e5c:	08003b3d 	.word	0x08003b3d
 8003e60:	08003b4d 	.word	0x08003b4d

08003e64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003e64:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e66:	6803      	ldr	r3, [r0, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	f012 0f01 	tst.w	r2, #1
 8003e6e:	d01e      	beq.n	8003eae <ADC_ConversionStop_Disable+0x4a>
 8003e70:	4604      	mov	r4, r0
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e7a:	f7fe fe7d 	bl	8002b78 <HAL_GetTick>
 8003e7e:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e80:	e00e      	b.n	8003ea0 <ADC_ConversionStop_Disable+0x3c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e82:	f7fe fe79 	bl	8002b78 <HAL_GetTick>
 8003e86:	1b40      	subs	r0, r0, r5
 8003e88:	2802      	cmp	r0, #2
 8003e8a:	d909      	bls.n	8003ea0 <ADC_ConversionStop_Disable+0x3c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e8e:	f043 0310 	orr.w	r3, r3, #16
 8003e92:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	62e3      	str	r3, [r4, #44]	; 0x2c
        
        return HAL_ERROR;
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
     
    /* Get tick count */
    tickstart = HAL_GetTick();
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f013 0f01 	tst.w	r3, #1
 8003ea8:	d1eb      	bne.n	8003e82 <ADC_ConversionStop_Disable+0x1e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003eaa:	2000      	movs	r0, #0
 8003eac:	bd38      	pop	{r3, r4, r5, pc}
 8003eae:	2000      	movs	r0, #0
}
 8003eb0:	bd38      	pop	{r3, r4, r5, pc}
 8003eb2:	bf00      	nop

08003eb4 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d07d      	beq.n	8003fb4 <HAL_ADC_Init+0x100>
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4604      	mov	r4, r0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ebc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ebe:	b923      	cbnz	r3, 8003eca <HAL_ADC_Init+0x16>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec0:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ec2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ec6:	f7fe f879 	bl	8001fbc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7ff ffca 	bl	8003e64 <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ed0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ed2:	f013 0f10 	tst.w	r3, #16
 8003ed6:	d167      	bne.n	8003fa8 <HAL_ADC_Init+0xf4>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d165      	bne.n	8003fa8 <HAL_ADC_Init+0xf4>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003edc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ede:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ee2:	f023 0302 	bic.w	r3, r3, #2
 8003ee6:	f043 0302 	orr.w	r3, r3, #2
 8003eea:	62a3      	str	r3, [r4, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8003eec:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8003eee:	69e3      	ldr	r3, [r4, #28]
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8003ef0:	4313      	orrs	r3, r2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8003ef2:	68e1      	ldr	r1, [r4, #12]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8003ef4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003ef8:	68a2      	ldr	r2, [r4, #8]
 8003efa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003efe:	d004      	beq.n	8003f0a <HAL_ADC_Init+0x56>
 8003f00:	2a01      	cmp	r2, #1
 8003f02:	d105      	bne.n	8003f10 <HAL_ADC_Init+0x5c>
 8003f04:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003f08:	e003      	b.n	8003f12 <HAL_ADC_Init+0x5e>
 8003f0a:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003f0e:	e000      	b.n	8003f12 <HAL_ADC_Init+0x5e>
 8003f10:	2500      	movs	r5, #0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f12:	6962      	ldr	r2, [r4, #20]
 8003f14:	2a01      	cmp	r2, #1
 8003f16:	d10f      	bne.n	8003f38 <HAL_ADC_Init+0x84>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f18:	b931      	cbnz	r1, 8003f28 <HAL_ADC_Init+0x74>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003f1a:	69a2      	ldr	r2, [r4, #24]
 8003f1c:	3a01      	subs	r2, #1
 8003f1e:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8003f22:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
 8003f26:	e007      	b.n	8003f38 <HAL_ADC_Init+0x84>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003f2a:	f042 0220 	orr.w	r2, r2, #32
 8003f2e:	62a2      	str	r2, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	62e2      	str	r2, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003f38:	6821      	ldr	r1, [r4, #0]
 8003f3a:	684a      	ldr	r2, [r1, #4]
 8003f3c:	f422 4269 	bic.w	r2, r2, #59648	; 0xe900
 8003f40:	432a      	orrs	r2, r5
 8003f42:	604a      	str	r2, [r1, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003f44:	6821      	ldr	r1, [r4, #0]
 8003f46:	688d      	ldr	r5, [r1, #8]
 8003f48:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <HAL_ADC_Init+0x104>)
 8003f4a:	402a      	ands	r2, r5
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	608a      	str	r2, [r1, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003f50:	68a2      	ldr	r2, [r4, #8]
 8003f52:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003f56:	d001      	beq.n	8003f5c <HAL_ADC_Init+0xa8>
 8003f58:	2a01      	cmp	r2, #1
 8003f5a:	d103      	bne.n	8003f64 <HAL_ADC_Init+0xb0>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003f5c:	6922      	ldr	r2, [r4, #16]
 8003f5e:	3a01      	subs	r2, #1
 8003f60:	0511      	lsls	r1, r2, #20
 8003f62:	e000      	b.n	8003f66 <HAL_ADC_Init+0xb2>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
 8003f64:	2100      	movs	r1, #0
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003f66:	6825      	ldr	r5, [r4, #0]
 8003f68:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003f6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	62ea      	str	r2, [r5, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f72:	6822      	ldr	r2, [r4, #0]
 8003f74:	6891      	ldr	r1, [r2, #8]
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <HAL_ADC_Init+0x108>)
 8003f78:	400a      	ands	r2, r1
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d108      	bne.n	8003f90 <HAL_ADC_Init+0xdc>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	62e3      	str	r3, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f84:	f023 0303 	bic.w	r3, r3, #3
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f92:	f023 0312 	bic.w	r3, r3, #18
 8003f96:	f043 0310 	orr.w	r3, r3, #16
 8003f9a:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003faa:	f043 0310 	orr.w	r3, r3, #16
 8003fae:	62a3      	str	r3, [r4, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	4770      	bx	lr
 8003fb8:	ffe1f7fd 	.word	0xffe1f7fd
 8003fbc:	ff1f0efe 	.word	0xff1f0efe

08003fc0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d069      	beq.n	80040a4 <HAL_ADCEx_Calibration_Start+0xe4>
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003fd8:	f7ff ff44 	bl	8003e64 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fdc:	4605      	mov	r5, r0
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d15b      	bne.n	800409a <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003fe4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fe8:	f023 0302 	bic.w	r3, r3, #2
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	62a3      	str	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003ff2:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <HAL_ADCEx_Calibration_Start+0xec>)
 8003ff4:	681e      	ldr	r6, [r3, #0]
 8003ff6:	2002      	movs	r0, #2
 8003ff8:	f7ff f9b4 	bl	8003364 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ffc:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004000:	0040      	lsls	r0, r0, #1
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
 8004002:	9001      	str	r0, [sp, #4]
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );

    while(wait_loop_index != 0U)
 8004004:	e002      	b.n	800400c <HAL_ADCEx_Calibration_Start+0x4c>
    {
      wait_loop_index--;
 8004006:	9b01      	ldr	r3, [sp, #4]
 8004008:	3b01      	subs	r3, #1
 800400a:	9301      	str	r3, [sp, #4]
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );

    while(wait_loop_index != 0U)
 800400c:	9b01      	ldr	r3, [sp, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f9      	bne.n	8004006 <HAL_ADCEx_Calibration_Start+0x46>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004012:	4620      	mov	r0, r4
 8004014:	f7ff fe44 	bl	8003ca0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004018:	6822      	ldr	r2, [r4, #0]
 800401a:	6893      	ldr	r3, [r2, #8]
 800401c:	f043 0308 	orr.w	r3, r3, #8
 8004020:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8004022:	f7fe fda9 	bl	8002b78 <HAL_GetTick>
 8004026:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004028:	e00f      	b.n	800404a <HAL_ADCEx_Calibration_Start+0x8a>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800402a:	f7fe fda5 	bl	8002b78 <HAL_GetTick>
 800402e:	1b80      	subs	r0, r0, r6
 8004030:	280a      	cmp	r0, #10
 8004032:	d90a      	bls.n	800404a <HAL_ADCEx_Calibration_Start+0x8a>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004034:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004036:	f023 0312 	bic.w	r3, r3, #18
 800403a:	f043 0310 	orr.w	r3, r3, #16
 800403e:	62a3      	str	r3, [r4, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004040:	2300      	movs	r3, #0
 8004042:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        
        return HAL_ERROR;
 8004046:	2001      	movs	r0, #1
 8004048:	e02d      	b.n	80040a6 <HAL_ADCEx_Calibration_Start+0xe6>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
    
    tickstart = HAL_GetTick();  

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	f012 0f08 	tst.w	r2, #8
 8004052:	d1ea      	bne.n	800402a <HAL_ADCEx_Calibration_Start+0x6a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	f042 0204 	orr.w	r2, r2, #4
 800405a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800405c:	f7fe fd8c 	bl	8002b78 <HAL_GetTick>
 8004060:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004062:	e00f      	b.n	8004084 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004064:	f7fe fd88 	bl	8002b78 <HAL_GetTick>
 8004068:	1b80      	subs	r0, r0, r6
 800406a:	280a      	cmp	r0, #10
 800406c:	d90a      	bls.n	8004084 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800406e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004070:	f023 0312 	bic.w	r3, r3, #18
 8004074:	f043 0310 	orr.w	r3, r3, #16
 8004078:	62a3      	str	r3, [r4, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800407a:	2300      	movs	r3, #0
 800407c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        
        return HAL_ERROR;
 8004080:	2001      	movs	r0, #1
 8004082:	e010      	b.n	80040a6 <HAL_ADCEx_Calibration_Start+0xe6>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
    
    tickstart = HAL_GetTick();  

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f013 0f04 	tst.w	r3, #4
 800408c:	d1ea      	bne.n	8004064 <HAL_ADCEx_Calibration_Start+0xa4>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800408e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004090:	f023 0303 	bic.w	r3, r3, #3
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800409a:	2300      	movs	r3, #0
 800409c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040a0:	4628      	mov	r0, r5
 80040a2:	e000      	b.n	80040a6 <HAL_ADCEx_Calibration_Start+0xe6>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040a4:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 80040a6:	b002      	add	sp, #8
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	bf00      	nop
 80040ac:	20000004 	.word	0x20000004

080040b0 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040b0:	2800      	cmp	r0, #0
 80040b2:	f000 80a4 	beq.w	80041fe <HAL_CAN_Init+0x14e>
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80040b6:	b538      	push	{r3, r4, r5, lr}
 80040b8:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80040ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 80040be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80040c2:	d101      	bne.n	80040c8 <HAL_CAN_Init+0x18>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040c4:	f7fd ffc6 	bl	8002054 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	6813      	ldr	r3, [r2, #0]
 80040cc:	f023 0302 	bic.w	r3, r3, #2
 80040d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040d2:	f7fe fd51 	bl	8002b78 <HAL_GetTick>
 80040d6:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040d8:	e00d      	b.n	80040f6 <HAL_CAN_Init+0x46>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040da:	f7fe fd4d 	bl	8002b78 <HAL_GetTick>
 80040de:	1b40      	subs	r0, r0, r5
 80040e0:	280a      	cmp	r0, #10
 80040e2:	d908      	bls.n	80040f6 <HAL_CAN_Init+0x46>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ea:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040ec:	2305      	movs	r3, #5
 80040ee:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80040f2:	2001      	movs	r0, #1
 80040f4:	bd38      	pop	{r3, r4, r5, pc}

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	f012 0f02 	tst.w	r2, #2
 80040fe:	d1ec      	bne.n	80040da <HAL_CAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004108:	f7fe fd36 	bl	8002b78 <HAL_GetTick>
 800410c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800410e:	e00d      	b.n	800412c <HAL_CAN_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004110:	f7fe fd32 	bl	8002b78 <HAL_GetTick>
 8004114:	1b40      	subs	r0, r0, r5
 8004116:	280a      	cmp	r0, #10
 8004118:	d908      	bls.n	800412c <HAL_CAN_Init+0x7c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800411a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800411c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004120:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004122:	2305      	movs	r3, #5
 8004124:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8004128:	2001      	movs	r0, #1
 800412a:	bd38      	pop	{r3, r4, r5, pc}

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	f012 0f01 	tst.w	r2, #1
 8004134:	d0ec      	beq.n	8004110 <HAL_CAN_Init+0x60>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004136:	7e22      	ldrb	r2, [r4, #24]
 8004138:	2a01      	cmp	r2, #1
 800413a:	d104      	bne.n	8004146 <HAL_CAN_Init+0x96>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e003      	b.n	800414e <HAL_CAN_Init+0x9e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800414e:	7e63      	ldrb	r3, [r4, #25]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d105      	bne.n	8004160 <HAL_CAN_Init+0xb0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e004      	b.n	800416a <HAL_CAN_Init+0xba>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004160:	6822      	ldr	r2, [r4, #0]
 8004162:	6813      	ldr	r3, [r2, #0]
 8004164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004168:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800416a:	7ea3      	ldrb	r3, [r4, #26]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d105      	bne.n	800417c <HAL_CAN_Init+0xcc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004170:	6822      	ldr	r2, [r4, #0]
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	f043 0320 	orr.w	r3, r3, #32
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e004      	b.n	8004186 <HAL_CAN_Init+0xd6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800417c:	6822      	ldr	r2, [r4, #0]
 800417e:	6813      	ldr	r3, [r2, #0]
 8004180:	f023 0320 	bic.w	r3, r3, #32
 8004184:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004186:	7ee3      	ldrb	r3, [r4, #27]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_CAN_Init+0xe8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	6813      	ldr	r3, [r2, #0]
 8004190:	f023 0310 	bic.w	r3, r3, #16
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e004      	b.n	80041a2 <HAL_CAN_Init+0xf2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004198:	6822      	ldr	r2, [r4, #0]
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	f043 0310 	orr.w	r3, r3, #16
 80041a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041a2:	7f23      	ldrb	r3, [r4, #28]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <HAL_CAN_Init+0x104>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041a8:	6822      	ldr	r2, [r4, #0]
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	f043 0308 	orr.w	r3, r3, #8
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e004      	b.n	80041be <HAL_CAN_Init+0x10e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	f023 0308 	bic.w	r3, r3, #8
 80041bc:	6013      	str	r3, [r2, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041be:	7f63      	ldrb	r3, [r4, #29]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d105      	bne.n	80041d0 <HAL_CAN_Init+0x120>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	6813      	ldr	r3, [r2, #0]
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e004      	b.n	80041da <HAL_CAN_Init+0x12a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041d0:	6822      	ldr	r2, [r4, #0]
 80041d2:	6813      	ldr	r3, [r2, #0]
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	6013      	str	r3, [r2, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80041da:	6821      	ldr	r1, [r4, #0]
 80041dc:	68a2      	ldr	r2, [r4, #8]
 80041de:	68e3      	ldr	r3, [r4, #12]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	6963      	ldr	r3, [r4, #20]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61cb      	str	r3, [r1, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041f2:	2000      	movs	r0, #0
 80041f4:	6260      	str	r0, [r4, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80041fc:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
  {
    return HAL_ERROR;
 80041fe:	2001      	movs	r0, #1
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004204:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004206:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800420a:	3b01      	subs	r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d86d      	bhi.n	80042ee <HAL_CAN_ConfigFilter+0xea>
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004212:	b470      	push	{r4, r5, r6}
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004214:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004220:	694b      	ldr	r3, [r1, #20]
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2001      	movs	r0, #1
 8004228:	fa00 f303 	lsl.w	r3, r0, r3

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800422c:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8004230:	43dc      	mvns	r4, r3
 8004232:	4020      	ands	r0, r4
 8004234:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004238:	69c8      	ldr	r0, [r1, #28]
 800423a:	b9a8      	cbnz	r0, 8004268 <HAL_CAN_ConfigFilter+0x64>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800423c:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8004240:	4020      	ands	r0, r4
 8004242:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004246:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004248:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800424a:	888d      	ldrh	r5, [r1, #4]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800424c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004250:	3048      	adds	r0, #72	; 0x48
 8004252:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004256:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004258:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800425a:	880d      	ldrh	r5, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800425c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004260:	3048      	adds	r0, #72	; 0x48
 8004262:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8004266:	6045      	str	r5, [r0, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004268:	69c8      	ldr	r0, [r1, #28]
 800426a:	2801      	cmp	r0, #1
 800426c:	d115      	bne.n	800429a <HAL_CAN_ConfigFilter+0x96>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800426e:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8004272:	4318      	orrs	r0, r3
 8004274:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004278:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800427a:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800427c:	888d      	ldrh	r5, [r1, #4]
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800427e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004282:	3048      	adds	r0, #72	; 0x48
 8004284:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004288:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800428a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800428c:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800428e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004292:	3048      	adds	r0, #72	; 0x48
 8004294:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8004298:	6045      	str	r5, [r0, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800429a:	6988      	ldr	r0, [r1, #24]
 800429c:	b928      	cbnz	r0, 80042aa <HAL_CAN_ConfigFilter+0xa6>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800429e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80042a2:	4020      	ands	r0, r4
 80042a4:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 80042a8:	e004      	b.n	80042b4 <HAL_CAN_ConfigFilter+0xb0>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80042aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80042ae:	4318      	orrs	r0, r3
 80042b0:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80042b4:	6908      	ldr	r0, [r1, #16]
 80042b6:	b928      	cbnz	r0, 80042c4 <HAL_CAN_ConfigFilter+0xc0>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80042b8:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 80042bc:	4004      	ands	r4, r0
 80042be:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
 80042c2:	e004      	b.n	80042ce <HAL_CAN_ConfigFilter+0xca>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80042c4:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 80042c8:	4318      	orrs	r0, r3
 80042ca:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80042ce:	6a09      	ldr	r1, [r1, #32]
 80042d0:	2901      	cmp	r1, #1
 80042d2:	d104      	bne.n	80042de <HAL_CAN_ConfigFilter+0xda>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80042d4:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 80042d8:	430b      	orrs	r3, r1
 80042da:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80042ea:	2000      	movs	r0, #0
 80042ec:	e005      	b.n	80042fa <HAL_CAN_ConfigFilter+0xf6>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80042f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80042f6:	2001      	movs	r0, #1
 80042f8:	4770      	bx	lr
  }
}
 80042fa:	bc70      	pop	{r4, r5, r6}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop

08004300 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004300:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004302:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d122      	bne.n	8004352 <HAL_CAN_Start+0x52>
 800430c:	4604      	mov	r4, r0
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800430e:	2302      	movs	r3, #2
 8004310:	f880 3020 	strb.w	r3, [r0, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004314:	6802      	ldr	r2, [r0, #0]
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800431e:	f7fe fc2b 	bl	8002b78 <HAL_GetTick>
 8004322:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004324:	e00d      	b.n	8004342 <HAL_CAN_Start+0x42>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004326:	f7fe fc27 	bl	8002b78 <HAL_GetTick>
 800432a:	1b40      	subs	r0, r0, r5
 800432c:	280a      	cmp	r0, #10
 800432e:	d908      	bls.n	8004342 <HAL_CAN_Start+0x42>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004336:	6263      	str	r3, [r4, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004338:	2305      	movs	r3, #5
 800433a:	f884 3020 	strb.w	r3, [r4, #32]

        return HAL_ERROR;
 800433e:	2001      	movs	r0, #1
 8004340:	bd38      	pop	{r3, r4, r5, pc}

    /* Get tick */
    tickstart = HAL_GetTick();

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f013 0f01 	tst.w	r3, #1
 800434a:	d1ec      	bne.n	8004326 <HAL_CAN_Start+0x26>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800434c:	2000      	movs	r0, #0
 800434e:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004350:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004352:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004358:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800435a:	2001      	movs	r0, #1
  }
}
 800435c:	bd38      	pop	{r3, r4, r5, pc}
 800435e:	bf00      	nop

08004360 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004360:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004362:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004366:	6805      	ldr	r5, [r0, #0]
 8004368:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800436a:	3c01      	subs	r4, #1
 800436c:	b2e4      	uxtb	r4, r4
 800436e:	2c01      	cmp	r4, #1
 8004370:	d862      	bhi.n	8004438 <HAL_CAN_AddTxMessage+0xd8>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004372:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 8004376:	d059      	beq.n	800442c <HAL_CAN_AddTxMessage+0xcc>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004378:	f3c5 6501 	ubfx	r5, r5, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800437c:	2d02      	cmp	r5, #2
 800437e:	d905      	bls.n	800438c <HAL_CAN_AddTxMessage+0x2c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004380:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004382:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004386:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8004388:	2001      	movs	r0, #1
 800438a:	e05a      	b.n	8004442 <HAL_CAN_AddTxMessage+0xe2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800438c:	2401      	movs	r4, #1
 800438e:	40ac      	lsls	r4, r5
 8004390:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004392:	688b      	ldr	r3, [r1, #8]
 8004394:	b94b      	cbnz	r3, 80043aa <HAL_CAN_AddTxMessage+0x4a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004396:	6804      	ldr	r4, [r0, #0]
 8004398:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 800439a:	68cb      	ldr	r3, [r1, #12]
      *pTxMailbox = (uint32_t)1 << transmitmailbox;

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800439c:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 80043a0:	f105 0318 	add.w	r3, r5, #24
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	50e6      	str	r6, [r4, r3]
 80043a8:	e009      	b.n	80043be <HAL_CAN_AddTxMessage+0x5e>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80043aa:	6806      	ldr	r6, [r0, #0]
 80043ac:	684c      	ldr	r4, [r1, #4]
 80043ae:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->IDE |
                                                           pHeader->RTR);
 80043b2:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 80043b4:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80043b6:	f105 0418 	add.w	r4, r5, #24
 80043ba:	0124      	lsls	r4, r4, #4
 80043bc:	5133      	str	r3, [r6, r4]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80043be:	6803      	ldr	r3, [r0, #0]
 80043c0:	690c      	ldr	r4, [r1, #16]
 80043c2:	f105 0618 	add.w	r6, r5, #24
 80043c6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80043ca:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80043cc:	7d0b      	ldrb	r3, [r1, #20]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d106      	bne.n	80043e0 <HAL_CAN_AddTxMessage+0x80>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80043d2:	6803      	ldr	r3, [r0, #0]
 80043d4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80043de:	6059      	str	r1, [r3, #4]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80043e0:	6801      	ldr	r1, [r0, #0]
 80043e2:	79d4      	ldrb	r4, [r2, #7]
 80043e4:	7993      	ldrb	r3, [r2, #6]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80043ec:	7954      	ldrb	r4, [r2, #5]
 80043ee:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80043f2:	7914      	ldrb	r4, [r2, #4]
 80043f4:	4323      	orrs	r3, r4
 80043f6:	012c      	lsls	r4, r5, #4
 80043f8:	4421      	add	r1, r4
 80043fa:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043fe:	6801      	ldr	r1, [r0, #0]
 8004400:	78d6      	ldrb	r6, [r2, #3]
 8004402:	7893      	ldrb	r3, [r2, #2]
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800440a:	7856      	ldrb	r6, [r2, #1]
 800440c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	4313      	orrs	r3, r2
 8004414:	4421      	add	r1, r4
 8004416:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800441a:	6802      	ldr	r2, [r0, #0]
 800441c:	3518      	adds	r5, #24
 800441e:	012d      	lsls	r5, r5, #4
 8004420:	5953      	ldr	r3, [r2, r5]
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	5153      	str	r3, [r2, r5]

      /* Return function status */
      return HAL_OK;
 8004428:	2000      	movs	r0, #0
 800442a:	e00a      	b.n	8004442 <HAL_CAN_AddTxMessage+0xe2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800442c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800442e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004432:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 8004434:	2001      	movs	r0, #1
 8004436:	e004      	b.n	8004442 <HAL_CAN_AddTxMessage+0xe2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004438:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800443a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800443e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004440:	2001      	movs	r0, #1
  }
}
 8004442:	bc70      	pop	{r4, r5, r6}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop

08004448 <HAL_CAN_AbortTxRequest>:
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8004448:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800444c:	3b01      	subs	r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d819      	bhi.n	8004488 <HAL_CAN_AbortTxRequest+0x40>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8004454:	f011 0f01 	tst.w	r1, #1
 8004458:	d004      	beq.n	8004464 <HAL_CAN_AbortTxRequest+0x1c>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 800445a:	6802      	ldr	r2, [r0, #0]
 800445c:	6893      	ldr	r3, [r2, #8]
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	6093      	str	r3, [r2, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8004464:	f011 0f02 	tst.w	r1, #2
 8004468:	d004      	beq.n	8004474 <HAL_CAN_AbortTxRequest+0x2c>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 800446a:	6802      	ldr	r2, [r0, #0]
 800446c:	6893      	ldr	r3, [r2, #8]
 800446e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004472:	6093      	str	r3, [r2, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8004474:	f011 0f04 	tst.w	r1, #4
 8004478:	d00c      	beq.n	8004494 <HAL_CAN_AbortTxRequest+0x4c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800447a:	6802      	ldr	r2, [r0, #0]
 800447c:	6893      	ldr	r3, [r2, #8]
 800447e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004482:	6093      	str	r3, [r2, #8]
    }

    /* Return function status */
    return HAL_OK;
 8004484:	2000      	movs	r0, #0
 8004486:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004488:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800448a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004490:	2001      	movs	r0, #1
 8004492:	4770      	bx	lr
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
    }

    /* Return function status */
    return HAL_OK;
 8004494:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8004496:	4770      	bx	lr

08004498 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004498:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 800449a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800449e:	3c01      	subs	r4, #1
 80044a0:	b2e4      	uxtb	r4, r4
 80044a2:	2c01      	cmp	r4, #1
 80044a4:	f200 808a 	bhi.w	80045bc <HAL_CAN_GetRxMessage+0x124>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044a8:	b951      	cbnz	r1, 80044c0 <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80044aa:	6804      	ldr	r4, [r0, #0]
 80044ac:	68e4      	ldr	r4, [r4, #12]
 80044ae:	f014 0f03 	tst.w	r4, #3
 80044b2:	d110      	bne.n	80044d6 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80044b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044ba:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80044bc:	2001      	movs	r0, #1
 80044be:	e082      	b.n	80045c6 <HAL_CAN_GetRxMessage+0x12e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044c0:	6804      	ldr	r4, [r0, #0]
 80044c2:	6924      	ldr	r4, [r4, #16]
 80044c4:	f014 0f03 	tst.w	r4, #3
 80044c8:	d105      	bne.n	80044d6 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80044cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044d0:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
 80044d4:	e077      	b.n	80045c6 <HAL_CAN_GetRxMessage+0x12e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044d6:	6805      	ldr	r5, [r0, #0]
 80044d8:	f101 041b 	add.w	r4, r1, #27
 80044dc:	0124      	lsls	r4, r4, #4
 80044de:	592c      	ldr	r4, [r5, r4]
 80044e0:	f004 0404 	and.w	r4, r4, #4
 80044e4:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044e6:	b93c      	cbnz	r4, 80044f8 <HAL_CAN_GetRxMessage+0x60>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044e8:	6805      	ldr	r5, [r0, #0]
 80044ea:	f101 041b 	add.w	r4, r1, #27
 80044ee:	0124      	lsls	r4, r4, #4
 80044f0:	592c      	ldr	r4, [r5, r4]
 80044f2:	0d64      	lsrs	r4, r4, #21
 80044f4:	6014      	str	r4, [r2, #0]
 80044f6:	e006      	b.n	8004506 <HAL_CAN_GetRxMessage+0x6e>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044f8:	6805      	ldr	r5, [r0, #0]
 80044fa:	f101 041b 	add.w	r4, r1, #27
 80044fe:	0124      	lsls	r4, r4, #4
 8004500:	592c      	ldr	r4, [r5, r4]
 8004502:	08e4      	lsrs	r4, r4, #3
 8004504:	6054      	str	r4, [r2, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8004506:	6805      	ldr	r5, [r0, #0]
 8004508:	f101 041b 	add.w	r4, r1, #27
 800450c:	0124      	lsls	r4, r4, #4
 800450e:	592d      	ldr	r5, [r5, r4]
 8004510:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8004514:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004516:	6805      	ldr	r5, [r0, #0]
 8004518:	4425      	add	r5, r4
 800451a:	686d      	ldr	r5, [r5, #4]
 800451c:	f005 050f 	and.w	r5, r5, #15
 8004520:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004522:	6805      	ldr	r5, [r0, #0]
 8004524:	4425      	add	r5, r4
 8004526:	686d      	ldr	r5, [r5, #4]
 8004528:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800452c:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800452e:	6805      	ldr	r5, [r0, #0]
 8004530:	442c      	add	r4, r5
 8004532:	6864      	ldr	r4, [r4, #4]
 8004534:	0c24      	lsrs	r4, r4, #16
 8004536:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004538:	6804      	ldr	r4, [r0, #0]
 800453a:	010a      	lsls	r2, r1, #4
 800453c:	4414      	add	r4, r2
 800453e:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8004542:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004544:	6804      	ldr	r4, [r0, #0]
 8004546:	4414      	add	r4, r2
 8004548:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800454c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004550:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004552:	6804      	ldr	r4, [r0, #0]
 8004554:	4414      	add	r4, r2
 8004556:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800455a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800455e:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004560:	6804      	ldr	r4, [r0, #0]
 8004562:	4414      	add	r4, r2
 8004564:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8004568:	0e24      	lsrs	r4, r4, #24
 800456a:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800456c:	6804      	ldr	r4, [r0, #0]
 800456e:	4414      	add	r4, r2
 8004570:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8004574:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004576:	6804      	ldr	r4, [r0, #0]
 8004578:	4414      	add	r4, r2
 800457a:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800457e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004582:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004584:	6804      	ldr	r4, [r0, #0]
 8004586:	4414      	add	r4, r2
 8004588:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800458c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8004590:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004592:	6804      	ldr	r4, [r0, #0]
 8004594:	4422      	add	r2, r4
 8004596:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800459a:	0e12      	lsrs	r2, r2, #24
 800459c:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800459e:	b931      	cbnz	r1, 80045ae <HAL_CAN_GetRxMessage+0x116>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80045a0:	6802      	ldr	r2, [r0, #0]
 80045a2:	68d3      	ldr	r3, [r2, #12]
 80045a4:	f043 0320 	orr.w	r3, r3, #32
 80045a8:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80045aa:	2000      	movs	r0, #0
 80045ac:	e00b      	b.n	80045c6 <HAL_CAN_GetRxMessage+0x12e>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80045ae:	6802      	ldr	r2, [r0, #0]
 80045b0:	6913      	ldr	r3, [r2, #16]
 80045b2:	f043 0320 	orr.w	r3, r3, #32
 80045b6:	6113      	str	r3, [r2, #16]
    }

    /* Return function status */
    return HAL_OK;
 80045b8:	2000      	movs	r0, #0
 80045ba:	e004      	b.n	80045c6 <HAL_CAN_GetRxMessage+0x12e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80045c4:	2001      	movs	r0, #1
  }
}
 80045c6:	bc30      	pop	{r4, r5}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop

080045cc <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80045cc:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d805      	bhi.n	80045e4 <HAL_CAN_ActivateNotification+0x18>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80045d8:	6803      	ldr	r3, [r0, #0]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	4311      	orrs	r1, r2
 80045de:	6159      	str	r1, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80045e0:	2000      	movs	r0, #0
 80045e2:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ea:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80045ec:	2001      	movs	r0, #1
  }
}
 80045ee:	4770      	bx	lr

080045f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop

080045f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop

080045f8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop

080045fc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop

08004604 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop

08004608 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop

0800460c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop

08004610 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	4605      	mov	r5, r0
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004616:	6803      	ldr	r3, [r0, #0]
 8004618:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800461a:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800461c:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800461e:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004622:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004626:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800462a:	f014 0f01 	tst.w	r4, #1
 800462e:	d05a      	beq.n	80046e6 <HAL_CAN_IRQHandler+0xd6>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004630:	f016 0f01 	tst.w	r6, #1
 8004634:	d014      	beq.n	8004660 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004636:	2201      	movs	r2, #1
 8004638:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800463a:	f016 0f02 	tst.w	r6, #2
 800463e:	d004      	beq.n	800464a <HAL_CAN_IRQHandler+0x3a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004640:	f003 f94e 	bl	80078e0 <HAL_CAN_TxMailbox0CompleteCallback>
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004644:	f04f 0b00 	mov.w	fp, #0
 8004648:	e012      	b.n	8004670 <HAL_CAN_IRQHandler+0x60>
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800464a:	f016 0f04 	tst.w	r6, #4
 800464e:	d10a      	bne.n	8004666 <HAL_CAN_IRQHandler+0x56>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004650:	f016 0f08 	tst.w	r6, #8
 8004654:	d10a      	bne.n	800466c <HAL_CAN_IRQHandler+0x5c>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004656:	f003 f983 	bl	8007960 <HAL_CAN_TxMailbox0AbortCallback>
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800465a:	f04f 0b00 	mov.w	fp, #0
 800465e:	e007      	b.n	8004670 <HAL_CAN_IRQHandler+0x60>
 8004660:	f04f 0b00 	mov.w	fp, #0
 8004664:	e004      	b.n	8004670 <HAL_CAN_IRQHandler+0x60>
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004666:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 800466a:	e001      	b.n	8004670 <HAL_CAN_IRQHandler+0x60>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800466c:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004670:	f416 7f80 	tst.w	r6, #256	; 0x100
 8004674:	d019      	beq.n	80046aa <HAL_CAN_IRQHandler+0x9a>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004676:	682b      	ldr	r3, [r5, #0]
 8004678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800467c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800467e:	f416 7f00 	tst.w	r6, #512	; 0x200
 8004682:	d003      	beq.n	800468c <HAL_CAN_IRQHandler+0x7c>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004684:	4628      	mov	r0, r5
 8004686:	f7ff ffb3 	bl	80045f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800468a:	e00e      	b.n	80046aa <HAL_CAN_IRQHandler+0x9a>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800468c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8004690:	d002      	beq.n	8004698 <HAL_CAN_IRQHandler+0x88>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004692:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
 8004696:	e008      	b.n	80046aa <HAL_CAN_IRQHandler+0x9a>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004698:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800469c:	d002      	beq.n	80046a4 <HAL_CAN_IRQHandler+0x94>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800469e:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 80046a2:	e002      	b.n	80046aa <HAL_CAN_IRQHandler+0x9a>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80046a4:	4628      	mov	r0, r5
 80046a6:	f7ff ffa7 	bl	80045f8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80046aa:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80046ae:	d01c      	beq.n	80046ea <HAL_CAN_IRQHandler+0xda>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80046b8:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80046bc:	d003      	beq.n	80046c6 <HAL_CAN_IRQHandler+0xb6>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80046be:	4628      	mov	r0, r5
 80046c0:	f7ff ff98 	bl	80045f4 <HAL_CAN_TxMailbox2CompleteCallback>
 80046c4:	e011      	b.n	80046ea <HAL_CAN_IRQHandler+0xda>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80046c6:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 80046ca:	d002      	beq.n	80046d2 <HAL_CAN_IRQHandler+0xc2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80046cc:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 80046d0:	e00b      	b.n	80046ea <HAL_CAN_IRQHandler+0xda>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80046d2:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 80046d6:	d002      	beq.n	80046de <HAL_CAN_IRQHandler+0xce>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80046d8:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 80046dc:	e005      	b.n	80046ea <HAL_CAN_IRQHandler+0xda>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80046de:	4628      	mov	r0, r5
 80046e0:	f7ff ff8c 	bl	80045fc <HAL_CAN_TxMailbox2AbortCallback>
 80046e4:	e001      	b.n	80046ea <HAL_CAN_IRQHandler+0xda>
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046e6:	f04f 0b00 	mov.w	fp, #0
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80046ea:	f014 0f08 	tst.w	r4, #8
 80046ee:	d007      	beq.n	8004700 <HAL_CAN_IRQHandler+0xf0>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80046f0:	f019 0f10 	tst.w	r9, #16
 80046f4:	d004      	beq.n	8004700 <HAL_CAN_IRQHandler+0xf0>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80046f6:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	2210      	movs	r2, #16
 80046fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004700:	f014 0f04 	tst.w	r4, #4
 8004704:	d008      	beq.n	8004718 <HAL_CAN_IRQHandler+0x108>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004706:	f019 0f08 	tst.w	r9, #8
 800470a:	d005      	beq.n	8004718 <HAL_CAN_IRQHandler+0x108>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	2208      	movs	r2, #8
 8004710:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004712:	4628      	mov	r0, r5
 8004714:	f7ff ff74 	bl	8004600 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004718:	f014 0f02 	tst.w	r4, #2
 800471c:	d007      	beq.n	800472e <HAL_CAN_IRQHandler+0x11e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f013 0f03 	tst.w	r3, #3
 8004726:	d002      	beq.n	800472e <HAL_CAN_IRQHandler+0x11e>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004728:	4628      	mov	r0, r5
 800472a:	f003 f95b 	bl	80079e4 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800472e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004732:	d007      	beq.n	8004744 <HAL_CAN_IRQHandler+0x134>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004734:	f018 0f10 	tst.w	r8, #16
 8004738:	d004      	beq.n	8004744 <HAL_CAN_IRQHandler+0x134>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800473a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800473e:	682b      	ldr	r3, [r5, #0]
 8004740:	2210      	movs	r2, #16
 8004742:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004744:	f014 0f20 	tst.w	r4, #32
 8004748:	d008      	beq.n	800475c <HAL_CAN_IRQHandler+0x14c>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800474a:	f018 0f08 	tst.w	r8, #8
 800474e:	d005      	beq.n	800475c <HAL_CAN_IRQHandler+0x14c>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	2208      	movs	r2, #8
 8004754:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004756:	4628      	mov	r0, r5
 8004758:	f7ff ff54 	bl	8004604 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800475c:	f014 0f10 	tst.w	r4, #16
 8004760:	d007      	beq.n	8004772 <HAL_CAN_IRQHandler+0x162>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004762:	682b      	ldr	r3, [r5, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f013 0f03 	tst.w	r3, #3
 800476a:	d002      	beq.n	8004772 <HAL_CAN_IRQHandler+0x162>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800476c:	4628      	mov	r0, r5
 800476e:	f003 f93f 	bl	80079f0 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004772:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8004776:	d008      	beq.n	800478a <HAL_CAN_IRQHandler+0x17a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004778:	f017 0f10 	tst.w	r7, #16
 800477c:	d005      	beq.n	800478a <HAL_CAN_IRQHandler+0x17a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800477e:	682b      	ldr	r3, [r5, #0]
 8004780:	2210      	movs	r2, #16
 8004782:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004784:	4628      	mov	r0, r5
 8004786:	f7ff ff3f 	bl	8004608 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800478a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800478e:	d008      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x192>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004790:	f017 0f08 	tst.w	r7, #8
 8004794:	d005      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	2208      	movs	r2, #8
 800479a:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800479c:	4628      	mov	r0, r5
 800479e:	f7ff ff35 	bl	800460c <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80047a2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80047a6:	d04e      	beq.n	8004846 <HAL_CAN_IRQHandler+0x236>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80047a8:	f017 0f04 	tst.w	r7, #4
 80047ac:	d048      	beq.n	8004840 <HAL_CAN_IRQHandler+0x230>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047ae:	f414 7f80 	tst.w	r4, #256	; 0x100
 80047b2:	d004      	beq.n	80047be <HAL_CAN_IRQHandler+0x1ae>
 80047b4:	f01a 0f01 	tst.w	sl, #1
 80047b8:	d001      	beq.n	80047be <HAL_CAN_IRQHandler+0x1ae>
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80047ba:	f04b 0b01 	orr.w	fp, fp, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047be:	f414 7f00 	tst.w	r4, #512	; 0x200
 80047c2:	d004      	beq.n	80047ce <HAL_CAN_IRQHandler+0x1be>
 80047c4:	f01a 0f02 	tst.w	sl, #2
 80047c8:	d001      	beq.n	80047ce <HAL_CAN_IRQHandler+0x1be>
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80047ca:	f04b 0b02 	orr.w	fp, fp, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047ce:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80047d2:	d004      	beq.n	80047de <HAL_CAN_IRQHandler+0x1ce>
 80047d4:	f01a 0f04 	tst.w	sl, #4
 80047d8:	d001      	beq.n	80047de <HAL_CAN_IRQHandler+0x1ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80047da:	f04b 0b04 	orr.w	fp, fp, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047de:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80047e2:	d02d      	beq.n	8004840 <HAL_CAN_IRQHandler+0x230>
 80047e4:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 80047e8:	d02a      	beq.n	8004840 <HAL_CAN_IRQHandler+0x230>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 80047ea:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80047ee:	d017      	beq.n	8004820 <HAL_CAN_IRQHandler+0x210>
 80047f0:	d806      	bhi.n	8004800 <HAL_CAN_IRQHandler+0x1f0>
 80047f2:	f1ba 0f10 	cmp.w	sl, #16
 80047f6:	d00d      	beq.n	8004814 <HAL_CAN_IRQHandler+0x204>
 80047f8:	f1ba 0f20 	cmp.w	sl, #32
 80047fc:	d00d      	beq.n	800481a <HAL_CAN_IRQHandler+0x20a>
 80047fe:	e01a      	b.n	8004836 <HAL_CAN_IRQHandler+0x226>
 8004800:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8004804:	d012      	beq.n	800482c <HAL_CAN_IRQHandler+0x21c>
 8004806:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 800480a:	d012      	beq.n	8004832 <HAL_CAN_IRQHandler+0x222>
 800480c:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8004810:	d111      	bne.n	8004836 <HAL_CAN_IRQHandler+0x226>
 8004812:	e008      	b.n	8004826 <HAL_CAN_IRQHandler+0x216>
        {
          case (CAN_ESR_LEC_0):
            /* Set CAN error code to Stuff error */
            errorcode |= HAL_CAN_ERROR_STF;
 8004814:	f04b 0b08 	orr.w	fp, fp, #8
            break;
 8004818:	e00d      	b.n	8004836 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_1):
            /* Set CAN error code to Form error */
            errorcode |= HAL_CAN_ERROR_FOR;
 800481a:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 800481e:	e00a      	b.n	8004836 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
 8004820:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 8004824:	e007      	b.n	8004836 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 8004826:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 800482a:	e004      	b.n	8004836 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
            /* Set CAN error code to Bit Dominant error */
            errorcode |= HAL_CAN_ERROR_BD;
 800482c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 8004830:	e001      	b.n	8004836 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
 8004832:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004836:	682a      	ldr	r2, [r5, #0]
 8004838:	6993      	ldr	r3, [r2, #24]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	2204      	movs	r2, #4
 8004844:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004846:	f1bb 0f00 	cmp.w	fp, #0
 800484a:	d006      	beq.n	800485a <HAL_CAN_IRQHandler+0x24a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800484c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800484e:	ea4b 0303 	orr.w	r3, fp, r3
 8004852:	626b      	str	r3, [r5, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004854:	4628      	mov	r0, r5
 8004856:	f003 f88d 	bl	8007974 <HAL_CAN_ErrorCallback>
 800485a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485e:	bf00      	nop

08004860 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004860:	6802      	ldr	r2, [r0, #0]
 8004862:	68d3      	ldr	r3, [r2, #12]
 8004864:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004868:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800486a:	2320      	movs	r3, #32
 800486c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop

08004874 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004874:	6802      	ldr	r2, [r0, #0]
 8004876:	68d3      	ldr	r3, [r2, #12]
 8004878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800487c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	6802      	ldr	r2, [r0, #0]
 8004880:	6953      	ldr	r3, [r2, #20]
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004888:	2320      	movs	r3, #32
 800488a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800488e:	4770      	bx	lr

08004890 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004890:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b21      	cmp	r3, #33	; 0x21
 8004898:	d12b      	bne.n	80048f2 <UART_Transmit_IT+0x62>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800489a:	6883      	ldr	r3, [r0, #8]
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a0:	d10f      	bne.n	80048c2 <UART_Transmit_IT+0x32>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80048a2:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048a4:	6802      	ldr	r2, [r0, #0]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ac:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80048ae:	6903      	ldr	r3, [r0, #16]
 80048b0:	b91b      	cbnz	r3, 80048ba <UART_Transmit_IT+0x2a>
      {
        huart->pTxBuffPtr += 2U;
 80048b2:	6a03      	ldr	r3, [r0, #32]
 80048b4:	3302      	adds	r3, #2
 80048b6:	6203      	str	r3, [r0, #32]
 80048b8:	e009      	b.n	80048ce <UART_Transmit_IT+0x3e>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048ba:	6a03      	ldr	r3, [r0, #32]
 80048bc:	3301      	adds	r3, #1
 80048be:	6203      	str	r3, [r0, #32]
 80048c0:	e005      	b.n	80048ce <UART_Transmit_IT+0x3e>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048c2:	6802      	ldr	r2, [r0, #0]
 80048c4:	6a03      	ldr	r3, [r0, #32]
 80048c6:	1c59      	adds	r1, r3, #1
 80048c8:	6201      	str	r1, [r0, #32]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 80048ce:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	84c3      	strh	r3, [r0, #38]	; 0x26
 80048d8:	b96b      	cbnz	r3, 80048f6 <UART_Transmit_IT+0x66>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048da:	6802      	ldr	r2, [r0, #0]
 80048dc:	68d3      	ldr	r3, [r2, #12]
 80048de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e2:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048e4:	6802      	ldr	r2, [r0, #0]
 80048e6:	68d3      	ldr	r3, [r2, #12]
 80048e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ec:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80048ee:	2000      	movs	r0, #0
 80048f0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2002      	movs	r0, #2
 80048f4:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
    }
    return HAL_OK;
 80048f6:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop

080048fc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004900:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004902:	6801      	ldr	r1, [r0, #0]
 8004904:	690b      	ldr	r3, [r1, #16]
 8004906:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800490a:	68c3      	ldr	r3, [r0, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	610b      	str	r3, [r1, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004910:	6881      	ldr	r1, [r0, #8]
 8004912:	6903      	ldr	r3, [r0, #16]
 8004914:	4319      	orrs	r1, r3
 8004916:	6943      	ldr	r3, [r0, #20]
 8004918:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, 
 800491a:	6800      	ldr	r0, [r0, #0]
 800491c:	68c2      	ldr	r2, [r0, #12]
 800491e:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 8004922:	f023 030c 	bic.w	r3, r3, #12
 8004926:	430b      	orrs	r3, r1
 8004928:	60c3      	str	r3, [r0, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800492a:	f8d9 1000 	ldr.w	r1, [r9]
 800492e:	694b      	ldr	r3, [r1, #20]
 8004930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004934:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004938:	4313      	orrs	r3, r2
 800493a:	614b      	str	r3, [r1, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800493c:	f8d9 5000 	ldr.w	r5, [r9]
 8004940:	4b5b      	ldr	r3, [pc, #364]	; (8004ab0 <UART_SetConfig+0x1b4>)
 8004942:	429d      	cmp	r5, r3
 8004944:	d159      	bne.n	80049fa <UART_SetConfig+0xfe>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004946:	f7fe fc55 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 800494a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800494e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004952:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8004956:	00a4      	lsls	r4, r4, #2
 8004958:	fbb0 f4f4 	udiv	r4, r0, r4
 800495c:	4e55      	ldr	r6, [pc, #340]	; (8004ab4 <UART_SetConfig+0x1b8>)
 800495e:	fba6 3404 	umull	r3, r4, r6, r4
 8004962:	0964      	lsrs	r4, r4, #5
 8004964:	0124      	lsls	r4, r4, #4
 8004966:	f7fe fc45 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 800496a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800496e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004972:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	fbb0 f7f3 	udiv	r7, r0, r3
 800497c:	f7fe fc3a 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8004980:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004984:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004988:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004992:	fba6 2303 	umull	r2, r3, r6, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f04f 0864 	mov.w	r8, #100	; 0x64
 800499c:	fb08 7313 	mls	r3, r8, r3, r7
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	3332      	adds	r3, #50	; 0x32
 80049a4:	fba6 2303 	umull	r2, r3, r6, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ae:	441c      	add	r4, r3
 80049b0:	f7fe fc20 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 80049b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	fbb0 f7f3 	udiv	r7, r0, r3
 80049c6:	f7fe fc15 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 80049ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80049dc:	fba6 2303 	umull	r2, r3, r6, r3
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	fb08 7313 	mls	r3, r8, r3, r7
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	3332      	adds	r3, #50	; 0x32
 80049ea:	fba6 2303 	umull	r2, r3, r6, r3
 80049ee:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80049f2:	441c      	add	r4, r3
 80049f4:	60ac      	str	r4, [r5, #8]
 80049f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049fa:	f7fe fbeb 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 80049fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a06:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8004a0a:	00a4      	lsls	r4, r4, #2
 8004a0c:	fbb0 f4f4 	udiv	r4, r0, r4
 8004a10:	4e28      	ldr	r6, [pc, #160]	; (8004ab4 <UART_SetConfig+0x1b8>)
 8004a12:	fba6 3404 	umull	r3, r4, r6, r4
 8004a16:	0964      	lsrs	r4, r4, #5
 8004a18:	0124      	lsls	r4, r4, #4
 8004a1a:	f7fe fbdb 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	fbb0 f7f3 	udiv	r7, r0, r3
 8004a30:	f7fe fbd0 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8004a34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a46:	fba6 2303 	umull	r2, r3, r6, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004a50:	fb08 7313 	mls	r3, r8, r3, r7
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	3332      	adds	r3, #50	; 0x32
 8004a58:	fba6 2303 	umull	r2, r3, r6, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a62:	441c      	add	r4, r3
 8004a64:	f7fe fbb6 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8004a68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	fbb0 f7f3 	udiv	r7, r0, r3
 8004a7a:	f7fe fbab 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8004a7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a86:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a90:	fba6 2303 	umull	r2, r3, r6, r3
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	fb08 7313 	mls	r3, r8, r3, r7
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	3332      	adds	r3, #50	; 0x32
 8004a9e:	fba6 2303 	umull	r2, r3, r6, r3
 8004aa2:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8004aa6:	441c      	add	r4, r3
 8004aa8:	60ac      	str	r4, [r5, #8]
 8004aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aae:	bf00      	nop
 8004ab0:	40013800 	.word	0x40013800
 8004ab4:	51eb851f 	.word	0x51eb851f

08004ab8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004ab8:	b368      	cbz	r0, 8004b16 <HAL_UART_Init+0x5e>
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aba:	b510      	push	{r4, lr}
 8004abc:	4604      	mov	r4, r0
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004abe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004ac2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004ac6:	d104      	bne.n	8004ad2 <HAL_UART_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8004ace:	f7fd fb95 	bl	80021fc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad2:	2324      	movs	r3, #36	; 0x24
 8004ad4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	68d3      	ldr	r3, [r2, #12]
 8004adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae0:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7ff ff0a 	bl	80048fc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	6913      	ldr	r3, [r2, #16]
 8004aec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004af0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af2:	6822      	ldr	r2, [r4, #0]
 8004af4:	6953      	ldr	r3, [r2, #20]
 8004af6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004afa:	6153      	str	r3, [r2, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	68d3      	ldr	r3, [r2, #12]
 8004b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b04:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b06:	2000      	movs	r0, #0
 8004b08:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004b10:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8004b14:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8004b16:	2001      	movs	r0, #1
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop

08004b1c <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004b1c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d116      	bne.n	8004b54 <HAL_UART_Transmit_IT+0x38>
  {
    if((pData == NULL) || (Size == 0U)) 
 8004b26:	b1b9      	cbz	r1, 8004b58 <HAL_UART_Transmit_IT+0x3c>
 8004b28:	b1c2      	cbz	r2, 8004b5c <HAL_UART_Transmit_IT+0x40>
    {
      return HAL_ERROR;
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 8004b2a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d016      	beq.n	8004b60 <HAL_UART_Transmit_IT+0x44>

    huart->pTxBuffPtr = pData;
 8004b32:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004b34:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b36:	84c2      	strh	r2, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b3c:	2221      	movs	r2, #33	; 0x21
 8004b3e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b42:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004b46:	6801      	ldr	r1, [r0, #0]
 8004b48:	68ca      	ldr	r2, [r1, #12]
 8004b4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b4e:	60ca      	str	r2, [r1, #12]

    return HAL_OK;
 8004b50:	4618      	mov	r0, r3
 8004b52:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2002      	movs	r0, #2
 8004b56:	4770      	bx	lr
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U)) 
    {
      return HAL_ERROR;
 8004b58:	2001      	movs	r0, #1
 8004b5a:	4770      	bx	lr
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	4770      	bx	lr
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 8004b60:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004b62:	4770      	bx	lr

08004b64 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004b64:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d120      	bne.n	8004bb0 <HAL_UART_Receive_IT+0x4c>
  {
    if((pData == NULL) || (Size == 0U))
 8004b6e:	b309      	cbz	r1, 8004bb4 <HAL_UART_Receive_IT+0x50>
 8004b70:	b312      	cbz	r2, 8004bb8 <HAL_UART_Receive_IT+0x54>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b72:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d020      	beq.n	8004bbc <HAL_UART_Receive_IT+0x58>

    huart->pRxBuffPtr = pData;
 8004b7a:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8004b7c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b7e:	85c2      	strh	r2, [r0, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b84:	2222      	movs	r2, #34	; 0x22
 8004b86:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b8a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b8e:	6801      	ldr	r1, [r0, #0]
 8004b90:	68ca      	ldr	r2, [r1, #12]
 8004b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b96:	60ca      	str	r2, [r1, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b98:	6801      	ldr	r1, [r0, #0]
 8004b9a:	694a      	ldr	r2, [r1, #20]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	614a      	str	r2, [r1, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ba2:	6801      	ldr	r1, [r0, #0]
 8004ba4:	68ca      	ldr	r2, [r1, #12]
 8004ba6:	f042 0220 	orr.w	r2, r2, #32
 8004baa:	60ca      	str	r2, [r1, #12]

    return HAL_OK;
 8004bac:	4618      	mov	r0, r3
 8004bae:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2002      	movs	r0, #2
 8004bb2:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return HAL_ERROR;
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	4770      	bx	lr
 8004bb8:	2001      	movs	r0, #1
 8004bba:	4770      	bx	lr
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bbc:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc0:	b538      	push	{r3, r4, r5, lr}
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004bc2:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8004bc6:	b2e4      	uxtb	r4, r4
 8004bc8:	2c20      	cmp	r4, #32
 8004bca:	d131      	bne.n	8004c30 <HAL_UART_Transmit_DMA+0x70>
  {
    if((pData == NULL) || (Size == 0U))
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	d031      	beq.n	8004c34 <HAL_UART_Transmit_DMA+0x74>
 8004bd0:	2a00      	cmp	r2, #0
 8004bd2:	d031      	beq.n	8004c38 <HAL_UART_Transmit_DMA+0x78>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bd4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d02f      	beq.n	8004c3c <HAL_UART_Transmit_DMA+0x7c>
 8004bdc:	4613      	mov	r3, r2
 8004bde:	4604      	mov	r4, r0
 8004be0:	2201      	movs	r2, #1
 8004be2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004be6:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004be8:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bea:	84c3      	strh	r3, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bec:	2500      	movs	r5, #0
 8004bee:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bf0:	2221      	movs	r2, #33	; 0x21
 8004bf2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004bf6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004bf8:	4811      	ldr	r0, [pc, #68]	; (8004c40 <HAL_UART_Transmit_DMA+0x80>)
 8004bfa:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004bfc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004bfe:	4811      	ldr	r0, [pc, #68]	; (8004c44 <HAL_UART_Transmit_DMA+0x84>)
 8004c00:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004c02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c04:	4810      	ldr	r0, [pc, #64]	; (8004c48 <HAL_UART_Transmit_DMA+0x88>)
 8004c06:	6310      	str	r0, [r2, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004c08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c0a:	6355      	str	r5, [r2, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004c0c:	6822      	ldr	r2, [r4, #0]
 8004c0e:	3204      	adds	r2, #4
 8004c10:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004c12:	f7fe fd77 	bl	8003704 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c1c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c1e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	6953      	ldr	r3, [r2, #20]
 8004c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2a:	6153      	str	r3, [r2, #20]

    return HAL_OK;
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2002      	movs	r0, #2
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return HAL_ERROR;
 8004c34:	2001      	movs	r0, #1
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	2001      	movs	r0, #1
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c3c:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	08004cf5 	.word	0x08004cf5
 8004c44:	08004d45 	.word	0x08004d45
 8004c48:	08004e3d 	.word	0x08004e3d

08004c4c <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c4c:	b530      	push	{r4, r5, lr}
 8004c4e:	b083      	sub	sp, #12
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8004c50:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8004c54:	b2e4      	uxtb	r4, r4
 8004c56:	2c20      	cmp	r4, #32
 8004c58:	d13d      	bne.n	8004cd6 <HAL_UART_Receive_DMA+0x8a>
  {
    if((pData == NULL) || (Size == 0U))
 8004c5a:	2900      	cmp	r1, #0
 8004c5c:	d03d      	beq.n	8004cda <HAL_UART_Receive_DMA+0x8e>
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	d03d      	beq.n	8004cde <HAL_UART_Receive_DMA+0x92>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c62:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d03b      	beq.n	8004ce2 <HAL_UART_Receive_DMA+0x96>
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	460a      	mov	r2, r1
 8004c6e:	4604      	mov	r4, r0
 8004c70:	2101      	movs	r1, #1
 8004c72:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004c76:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8004c78:	8583      	strh	r3, [r0, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7a:	2500      	movs	r5, #0
 8004c7c:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c7e:	2122      	movs	r1, #34	; 0x22
 8004c80:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c84:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004c86:	4818      	ldr	r0, [pc, #96]	; (8004ce8 <HAL_UART_Receive_DMA+0x9c>)
 8004c88:	6288      	str	r0, [r1, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c8c:	4817      	ldr	r0, [pc, #92]	; (8004cec <HAL_UART_Receive_DMA+0xa0>)
 8004c8e:	62c8      	str	r0, [r1, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c92:	4817      	ldr	r0, [pc, #92]	; (8004cf0 <HAL_UART_Receive_DMA+0xa4>)
 8004c94:	6308      	str	r0, [r1, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004c96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c98:	634d      	str	r5, [r1, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	3104      	adds	r1, #4
 8004c9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004ca0:	f7fe fd30 	bl	8003704 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004ca4:	9501      	str	r5, [sp, #4]
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	9201      	str	r2, [sp, #4]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	9201      	str	r2, [sp, #4]
 8004cb0:	9a01      	ldr	r2, [sp, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cb2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cbc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	6953      	ldr	r3, [r2, #20]
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6153      	str	r3, [r2, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc8:	6822      	ldr	r2, [r4, #0]
 8004cca:	6953      	ldr	r3, [r2, #20]
 8004ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd0:	6153      	str	r3, [r2, #20]

    return HAL_OK;
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	e006      	b.n	8004ce4 <HAL_UART_Receive_DMA+0x98>
  }
  else
  {
    return HAL_BUSY;
 8004cd6:	2002      	movs	r0, #2
 8004cd8:	e004      	b.n	8004ce4 <HAL_UART_Receive_DMA+0x98>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL) || (Size == 0U))
    {
      return HAL_ERROR;
 8004cda:	2001      	movs	r0, #1
 8004cdc:	e002      	b.n	8004ce4 <HAL_UART_Receive_DMA+0x98>
 8004cde:	2001      	movs	r0, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_UART_Receive_DMA+0x98>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ce2:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004ce4:	b003      	add	sp, #12
 8004ce6:	bd30      	pop	{r4, r5, pc}
 8004ce8:	08004d51 	.word	0x08004d51
 8004cec:	08004e31 	.word	0x08004e31
 8004cf0:	08004e3d 	.word	0x08004e3d

08004cf4 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cf6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cf8:	6802      	ldr	r2, [r0, #0]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	f012 0f20 	tst.w	r2, #32
 8004d00:	d10c      	bne.n	8004d1c <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8004d02:	2200      	movs	r2, #0
 8004d04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	694a      	ldr	r2, [r1, #20]
 8004d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d0e:	614a      	str	r2, [r1, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68d3      	ldr	r3, [r2, #12]
 8004d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d18:	60d3      	str	r3, [r2, #12]
 8004d1a:	bd08      	pop	{r3, pc}

  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f002 fb3f 	bl	80073a0 <HAL_UART_TxCpltCallback>
 8004d22:	bd08      	pop	{r3, pc}

08004d24 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d24:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d26:	6801      	ldr	r1, [r0, #0]
 8004d28:	68cb      	ldr	r3, [r1, #12]
 8004d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2e:	60cb      	str	r3, [r1, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d30:	2320      	movs	r3, #32
 8004d32:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004d36:	f002 fb33 	bl	80073a0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
}
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	bd08      	pop	{r3, pc}
 8004d3e:	bf00      	nop

08004d40 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop

08004d44 <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d44:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8004d46:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004d48:	f7ff fffa 	bl	8004d40 <HAL_UART_TxHalfCpltCallback>
 8004d4c:	bd08      	pop	{r3, pc}
 8004d4e:	bf00      	nop

08004d50 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d50:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d52:	6a43      	ldr	r3, [r0, #36]	; 0x24
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d54:	6802      	ldr	r2, [r0, #0]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	f012 0f20 	tst.w	r2, #32
 8004d5c:	d113      	bne.n	8004d86 <UART_DMAReceiveCplt+0x36>
  {
    huart->RxXferCount = 0U;
 8004d5e:	2200      	movs	r2, #0
 8004d60:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	68ca      	ldr	r2, [r1, #12]
 8004d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d6a:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	694a      	ldr	r2, [r1, #20]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	614a      	str	r2, [r1, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	6819      	ldr	r1, [r3, #0]
 8004d78:	694a      	ldr	r2, [r1, #20]
 8004d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7e:	614a      	str	r2, [r1, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8004d86:	4618      	mov	r0, r3
 8004d88:	f003 f892 	bl	8007eb0 <HAL_UART_RxCpltCallback>
 8004d8c:	bd08      	pop	{r3, pc}
 8004d8e:	bf00      	nop

08004d90 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d90:	b508      	push	{r3, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004d92:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b22      	cmp	r3, #34	; 0x22
 8004d9a:	d144      	bne.n	8004e26 <UART_Receive_IT+0x96>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d9c:	6883      	ldr	r3, [r0, #8]
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da2:	d113      	bne.n	8004dcc <UART_Receive_IT+0x3c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8004da4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004da6:	6903      	ldr	r3, [r0, #16]
 8004da8:	b943      	cbnz	r3, 8004dbc <UART_Receive_IT+0x2c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004daa:	6803      	ldr	r3, [r0, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8004db4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004db6:	3302      	adds	r3, #2
 8004db8:	6283      	str	r3, [r0, #40]	; 0x28
 8004dba:	e018      	b.n	8004dee <UART_Receive_IT+0x5e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004dbc:	6803      	ldr	r3, [r0, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8004dc4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	6283      	str	r3, [r0, #40]	; 0x28
 8004dca:	e010      	b.n	8004dee <UART_Receive_IT+0x5e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004dcc:	6903      	ldr	r3, [r0, #16]
 8004dce:	b933      	cbnz	r3, 8004dde <UART_Receive_IT+0x4e>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	6282      	str	r2, [r0, #40]	; 0x28
 8004dd6:	6802      	ldr	r2, [r0, #0]
 8004dd8:	6852      	ldr	r2, [r2, #4]
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e007      	b.n	8004dee <UART_Receive_IT+0x5e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dde:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004de0:	1c53      	adds	r3, r2, #1
 8004de2:	6283      	str	r3, [r0, #40]	; 0x28
 8004de4:	6803      	ldr	r3, [r0, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dec:	7013      	strb	r3, [r2, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8004dee:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004df8:	b9bb      	cbnz	r3, 8004e2a <UART_Receive_IT+0x9a>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dfa:	6802      	ldr	r2, [r0, #0]
 8004dfc:	68d3      	ldr	r3, [r2, #12]
 8004dfe:	f023 0320 	bic.w	r3, r3, #32
 8004e02:	60d3      	str	r3, [r2, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e04:	6802      	ldr	r2, [r0, #0]
 8004e06:	68d3      	ldr	r3, [r2, #12]
 8004e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e0c:	60d3      	str	r3, [r2, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e0e:	6802      	ldr	r2, [r0, #0]
 8004e10:	6953      	ldr	r3, [r2, #20]
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6153      	str	r3, [r2, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e18:	2320      	movs	r3, #32
 8004e1a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8004e1e:	f003 f847 	bl	8007eb0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004e22:	2000      	movs	r0, #0
 8004e24:	bd08      	pop	{r3, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004e26:	2002      	movs	r0, #2
 8004e28:	bd08      	pop	{r3, pc}

      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }
    return HAL_OK;
 8004e2a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004e2c:	bd08      	pop	{r3, pc}
 8004e2e:	bf00      	nop

08004e30 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e30:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
  HAL_UART_RxHalfCpltCallback(huart); 
 8004e32:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004e34:	f003 f872 	bl	8007f1c <HAL_UART_RxHalfCpltCallback>
 8004e38:	bd08      	pop	{r3, pc}
 8004e3a:	bf00      	nop

08004e3c <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b510      	push	{r4, lr}
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e3e:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0280 	and.w	r2, r3, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e48:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b21      	cmp	r3, #33	; 0x21
 8004e50:	d105      	bne.n	8004e5e <UART_DMAError+0x22>
 8004e52:	b122      	cbz	r2, 8004e5e <UART_DMAError+0x22>
  {
    huart->TxXferCount = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f7ff fd01 	bl	8004860 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0240 	and.w	r2, r3, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e66:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b22      	cmp	r3, #34	; 0x22
 8004e6e:	d105      	bne.n	8004e7c <UART_DMAError+0x40>
 8004e70:	b122      	cbz	r2, 8004e7c <UART_DMAError+0x40>
  {
    huart->RxXferCount = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e76:	4620      	mov	r0, r4
 8004e78:	f7ff fcfc 	bl	8004874 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e7e:	f043 0310 	orr.w	r3, r3, #16
 8004e82:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8004e84:	4620      	mov	r0, r4
 8004e86:	f003 f84d 	bl	8007f24 <HAL_UART_ErrorCallback>
 8004e8a:	bd10      	pop	{r4, pc}

08004e8c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e90:	6802      	ldr	r2, [r0, #0]
 8004e92:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e94:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e96:	6952      	ldr	r2, [r2, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8004e98:	f013 000f 	ands.w	r0, r3, #15
 8004e9c:	d109      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x26>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e9e:	f013 0f20 	tst.w	r3, #32
 8004ea2:	d006      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x26>
 8004ea4:	f011 0f20 	tst.w	r1, #32
 8004ea8:	d003      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x26>
    {
      UART_Receive_IT(huart);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7ff ff70 	bl	8004d90 <UART_Receive_IT>
      return;
 8004eb0:	bd10      	pop	{r4, pc}
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d062      	beq.n	8004f7c <HAL_UART_IRQHandler+0xf0>
 8004eb6:	f012 0201 	ands.w	r2, r2, #1
 8004eba:	d102      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x36>
 8004ebc:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004ec0:	d05c      	beq.n	8004f7c <HAL_UART_IRQHandler+0xf0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ec2:	f013 0f01 	tst.w	r3, #1
 8004ec6:	d006      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x4a>
 8004ec8:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004ecc:	d003      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ece:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ed0:	f040 0001 	orr.w	r0, r0, #1
 8004ed4:	63e0      	str	r0, [r4, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ed6:	f013 0f04 	tst.w	r3, #4
 8004eda:	d004      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x5a>
 8004edc:	b11a      	cbz	r2, 8004ee6 <HAL_UART_IRQHandler+0x5a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ede:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ee0:	f040 0002 	orr.w	r0, r0, #2
 8004ee4:	63e0      	str	r0, [r4, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ee6:	f013 0f02 	tst.w	r3, #2
 8004eea:	d004      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x6a>
 8004eec:	b11a      	cbz	r2, 8004ef6 <HAL_UART_IRQHandler+0x6a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ef0:	f040 0004 	orr.w	r0, r0, #4
 8004ef4:	63e0      	str	r0, [r4, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ef6:	f013 0f08 	tst.w	r3, #8
 8004efa:	d004      	beq.n	8004f06 <HAL_UART_IRQHandler+0x7a>
 8004efc:	b11a      	cbz	r2, 8004f06 <HAL_UART_IRQHandler+0x7a>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004efe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f00:	f042 0208 	orr.w	r2, r2, #8
 8004f04:	63e2      	str	r2, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f08:	2a00      	cmp	r2, #0
 8004f0a:	d04a      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x116>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f0c:	f013 0f20 	tst.w	r3, #32
 8004f10:	d005      	beq.n	8004f1e <HAL_UART_IRQHandler+0x92>
 8004f12:	f011 0f20 	tst.w	r1, #32
 8004f16:	d002      	beq.n	8004f1e <HAL_UART_IRQHandler+0x92>
      {
        UART_Receive_IT(huart);
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7ff ff39 	bl	8004d90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f28:	f012 0f08 	tst.w	r2, #8
 8004f2c:	d100      	bne.n	8004f30 <HAL_UART_IRQHandler+0xa4>
 8004f2e:	b1fb      	cbz	r3, 8004f70 <HAL_UART_IRQHandler+0xe4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f30:	4620      	mov	r0, r4
 8004f32:	f7ff fc9f 	bl	8004874 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004f3e:	d013      	beq.n	8004f68 <HAL_UART_IRQHandler+0xdc>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f46:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8004f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f4a:	b14b      	cbz	r3, 8004f60 <HAL_UART_IRQHandler+0xd4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f4c:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <HAL_UART_IRQHandler+0x118>)
 8004f4e:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f50:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004f52:	f7fe fc11 	bl	8003778 <HAL_DMA_Abort_IT>
 8004f56:	b320      	cbz	r0, 8004fa2 <HAL_UART_IRQHandler+0x116>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f58:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004f5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f5c:	4798      	blx	r3
 8004f5e:	bd10      	pop	{r4, pc}
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8004f60:	4620      	mov	r0, r4
 8004f62:	f002 ffdf 	bl	8007f24 <HAL_UART_ErrorCallback>
 8004f66:	bd10      	pop	{r4, pc}
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f002 ffdb 	bl	8007f24 <HAL_UART_ErrorCallback>
 8004f6e:	bd10      	pop	{r4, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8004f70:	4620      	mov	r0, r4
 8004f72:	f002 ffd7 	bl	8007f24 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004f7a:	bd10      	pop	{r4, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f80:	d006      	beq.n	8004f90 <HAL_UART_IRQHandler+0x104>
 8004f82:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f86:	d003      	beq.n	8004f90 <HAL_UART_IRQHandler+0x104>
  {
    UART_Transmit_IT(huart);
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f7ff fc81 	bl	8004890 <UART_Transmit_IT>
    return;
 8004f8e:	bd10      	pop	{r4, pc}
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f94:	d005      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x116>
 8004f96:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004f9a:	d002      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x116>
  {
    UART_EndTransmit_IT(huart);
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f7ff fec1 	bl	8004d24 <UART_EndTransmit_IT>
 8004fa2:	bd10      	pop	{r4, pc}
 8004fa4:	08004fa9 	.word	0x08004fa9

08004fa8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004faa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fb0:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004fb2:	f002 ffb7 	bl	8007f24 <HAL_UART_ErrorCallback>
 8004fb6:	bd08      	pop	{r3, pc}

08004fb8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb8:	f100 0308 	add.w	r3, r0, #8
 8004fbc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6003      	str	r3, [r0, #0]
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop

08004fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	6103      	str	r3, [r0, #16]
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop

08004fd8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fd8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fda:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fe4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fe6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004fe8:	6803      	ldr	r3, [r0, #0]
 8004fea:	3301      	adds	r3, #1
 8004fec:	6003      	str	r3, [r0, #0]
 8004fee:	4770      	bx	lr

08004ff0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ff0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ff2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ff4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ff8:	d101      	bne.n	8004ffe <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ffa:	6902      	ldr	r2, [r0, #16]
 8004ffc:	e007      	b.n	800500e <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ffe:	f100 0208 	add.w	r2, r0, #8
 8005002:	e000      	b.n	8005006 <vListInsert+0x16>
 8005004:	461a      	mov	r2, r3
 8005006:	6853      	ldr	r3, [r2, #4]
 8005008:	681c      	ldr	r4, [r3, #0]
 800500a:	42a5      	cmp	r5, r4
 800500c:	d2fa      	bcs.n	8005004 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800500e:	6853      	ldr	r3, [r2, #4]
 8005010:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005012:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005014:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005016:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005018:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800501a:	6803      	ldr	r3, [r0, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	6003      	str	r3, [r0, #0]
}
 8005020:	bc30      	pop	{r4, r5}
 8005022:	4770      	bx	lr

08005024 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005024:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005026:	6842      	ldr	r2, [r0, #4]
 8005028:	6881      	ldr	r1, [r0, #8]
 800502a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800502c:	6882      	ldr	r2, [r0, #8]
 800502e:	6841      	ldr	r1, [r0, #4]
 8005030:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	4290      	cmp	r0, r2
 8005036:	d101      	bne.n	800503c <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005038:	6882      	ldr	r2, [r0, #8]
 800503a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800503c:	2200      	movs	r2, #0
 800503e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	3801      	subs	r0, #1
 8005044:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8005046:	4770      	bx	lr

08005048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005048:	b510      	push	{r4, lr}
 800504a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800504c:	f002 f802 	bl	8007054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005050:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005054:	429a      	cmp	r2, r3
 8005056:	d101      	bne.n	800505c <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
 8005058:	2401      	movs	r4, #1
 800505a:	e000      	b.n	800505e <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
 800505c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800505e:	f002 f81b 	bl	8007098 <vPortExitCritical>

	return xReturn;
}
 8005062:	4620      	mov	r0, r4
 8005064:	bd10      	pop	{r4, pc}
 8005066:	bf00      	nop

08005068 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005068:	b510      	push	{r4, lr}
 800506a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800506c:	f001 fff2 	bl	8007054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005070:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005072:	b90b      	cbnz	r3, 8005078 <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
 8005074:	2401      	movs	r4, #1
 8005076:	e000      	b.n	800507a <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
 8005078:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800507a:	f002 f80d 	bl	8007098 <vPortExitCritical>

	return xReturn;
}
 800507e:	4620      	mov	r0, r4
 8005080:	bd10      	pop	{r4, pc}
 8005082:	bf00      	nop

08005084 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	4604      	mov	r4, r0
 8005088:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800508a:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800508c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800508e:	b93a      	cbnz	r2, 80050a0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005090:	6803      	ldr	r3, [r0, #0]
 8005092:	bb43      	cbnz	r3, 80050e6 <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005094:	6840      	ldr	r0, [r0, #4]
 8005096:	f001 fa05 	bl	80064a4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	e029      	b.n	80050f4 <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050a0:	b96e      	cbnz	r6, 80050be <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80050a2:	6880      	ldr	r0, [r0, #8]
 80050a4:	f7fb f862 	bl	800016c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80050a8:	68a2      	ldr	r2, [r4, #8]
 80050aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050ac:	4413      	add	r3, r2
 80050ae:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050b0:	6862      	ldr	r2, [r4, #4]
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d319      	bcc.n	80050ea <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80050ba:	2000      	movs	r0, #0
 80050bc:	e01a      	b.n	80050f4 <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050be:	68c0      	ldr	r0, [r0, #12]
 80050c0:	f7fb f854 	bl	800016c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80050c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050c6:	425b      	negs	r3, r3
 80050c8:	68e2      	ldr	r2, [r4, #12]
 80050ca:	441a      	add	r2, r3
 80050cc:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050ce:	6821      	ldr	r1, [r4, #0]
 80050d0:	428a      	cmp	r2, r1
 80050d2:	d202      	bcs.n	80050da <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80050d4:	6862      	ldr	r2, [r4, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050da:	2e02      	cmp	r6, #2
 80050dc:	d107      	bne.n	80050ee <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050de:	b145      	cbz	r5, 80050f2 <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050e0:	3d01      	subs	r5, #1
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80050e2:	2000      	movs	r0, #0
 80050e4:	e006      	b.n	80050f4 <prvCopyDataToQueue+0x70>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e004      	b.n	80050f4 <prvCopyDataToQueue+0x70>
 80050ea:	2000      	movs	r0, #0
 80050ec:	e002      	b.n	80050f4 <prvCopyDataToQueue+0x70>
 80050ee:	2000      	movs	r0, #0
 80050f0:	e000      	b.n	80050f4 <prvCopyDataToQueue+0x70>
 80050f2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80050f4:	3501      	adds	r5, #1
 80050f6:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
 80050fa:	bf00      	nop

080050fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80050fe:	b172      	cbz	r2, 800511e <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005100:	b510      	push	{r4, lr}
 8005102:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005104:	68c4      	ldr	r4, [r0, #12]
 8005106:	4414      	add	r4, r2
 8005108:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800510a:	6840      	ldr	r0, [r0, #4]
 800510c:	4284      	cmp	r4, r0
 800510e:	d301      	bcc.n	8005114 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	60d8      	str	r0, [r3, #12]
 8005114:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005116:	68d9      	ldr	r1, [r3, #12]
 8005118:	f7fb f828 	bl	800016c <memcpy>
 800511c:	bd10      	pop	{r4, pc}
 800511e:	4770      	bx	lr

08005120 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005124:	f001 ff96 	bl	8007054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005128:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800512c:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800512e:	e00a      	b.n	8005146 <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005130:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005132:	b153      	cbz	r3, 800514a <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005134:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005138:	f001 f89c 	bl	8006274 <xTaskRemoveFromEventList>
 800513c:	b108      	cbz	r0, 8005142 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800513e:	f001 f935 	bl	80063ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005142:	3c01      	subs	r4, #1
 8005144:	b264      	sxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005146:	2c00      	cmp	r4, #0
 8005148:	dcf2      	bgt.n	8005130 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800514a:	23ff      	movs	r3, #255	; 0xff
 800514c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005150:	f001 ffa2 	bl	8007098 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005154:	f001 ff7e 	bl	8007054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005158:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800515c:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800515e:	e00a      	b.n	8005176 <prvUnlockQueue+0x56>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005160:	692b      	ldr	r3, [r5, #16]
 8005162:	b153      	cbz	r3, 800517a <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005164:	f105 0010 	add.w	r0, r5, #16
 8005168:	f001 f884 	bl	8006274 <xTaskRemoveFromEventList>
 800516c:	b108      	cbz	r0, 8005172 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 800516e:	f001 f91d 	bl	80063ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005172:	3c01      	subs	r4, #1
 8005174:	b264      	sxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005176:	2c00      	cmp	r4, #0
 8005178:	dcf2      	bgt.n	8005160 <prvUnlockQueue+0x40>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800517a:	23ff      	movs	r3, #255	; 0xff
 800517c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005180:	f001 ff8a 	bl	8007098 <vPortExitCritical>
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	bf00      	nop

08005188 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005188:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800518a:	b940      	cbnz	r0, 800519e <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	e7fe      	b.n	800519c <xQueueGenericReset+0x14>
 800519e:	4604      	mov	r4, r0
 80051a0:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 80051a2:	f001 ff57 	bl	8007054 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051a6:	6821      	ldr	r1, [r4, #0]
 80051a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80051aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051ac:	fb03 1002 	mla	r0, r3, r2, r1
 80051b0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051b2:	2000      	movs	r0, #0
 80051b4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051b6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80051b8:	3a01      	subs	r2, #1
 80051ba:	fb02 1303 	mla	r3, r2, r3, r1
 80051be:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051c0:	23ff      	movs	r3, #255	; 0xff
 80051c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051ca:	b97d      	cbnz	r5, 80051ec <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	b1ab      	cbz	r3, 80051fc <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d0:	f104 0010 	add.w	r0, r4, #16
 80051d4:	f001 f84e 	bl	8006274 <xTaskRemoveFromEventList>
 80051d8:	b180      	cbz	r0, 80051fc <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <xQueueGenericReset+0x7c>)
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	e007      	b.n	80051fc <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051ec:	f104 0010 	add.w	r0, r4, #16
 80051f0:	f7ff fee2 	bl	8004fb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051f8:	f7ff fede 	bl	8004fb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051fc:	f001 ff4c 	bl	8007098 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8005200:	2001      	movs	r0, #1
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005208:	b510      	push	{r4, lr}
 800520a:	9b02      	ldr	r3, [sp, #8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800520c:	460c      	mov	r4, r1
 800520e:	b909      	cbnz	r1, 8005214 <prvInitialiseNewQueue+0xc>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005210:	601b      	str	r3, [r3, #0]
 8005212:	e000      	b.n	8005216 <prvInitialiseNewQueue+0xe>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005214:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005216:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005218:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800521a:	2101      	movs	r1, #1
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ffb3 	bl	8005188 <xQueueGenericReset>
 8005222:	bd10      	pop	{r4, pc}

08005224 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005224:	b940      	cbnz	r0, 8005238 <xQueueGenericCreateStatic+0x14>
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	e7fe      	b.n	8005236 <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005238:	b510      	push	{r4, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800523e:	b943      	cbnz	r3, 8005252 <xQueueGenericCreateStatic+0x2e>
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	e7fe      	b.n	8005250 <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005252:	b112      	cbz	r2, 800525a <xQueueGenericCreateStatic+0x36>
 8005254:	b119      	cbz	r1, 800525e <xQueueGenericCreateStatic+0x3a>
 8005256:	2001      	movs	r0, #1
 8005258:	e002      	b.n	8005260 <xQueueGenericCreateStatic+0x3c>
 800525a:	2001      	movs	r0, #1
 800525c:	e000      	b.n	8005260 <xQueueGenericCreateStatic+0x3c>
 800525e:	2000      	movs	r0, #0
 8005260:	b940      	cbnz	r0, 8005274 <xQueueGenericCreateStatic+0x50>
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	e7fe      	b.n	8005272 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005274:	b912      	cbnz	r2, 800527c <xQueueGenericCreateStatic+0x58>
 8005276:	b919      	cbnz	r1, 8005280 <xQueueGenericCreateStatic+0x5c>
 8005278:	2001      	movs	r0, #1
 800527a:	e002      	b.n	8005282 <xQueueGenericCreateStatic+0x5e>
 800527c:	2001      	movs	r0, #1
 800527e:	e000      	b.n	8005282 <xQueueGenericCreateStatic+0x5e>
 8005280:	2000      	movs	r0, #0
 8005282:	b940      	cbnz	r0, 8005296 <xQueueGenericCreateStatic+0x72>
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	e7fe      	b.n	8005294 <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005296:	2048      	movs	r0, #72	; 0x48
 8005298:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800529a:	9803      	ldr	r0, [sp, #12]
 800529c:	2848      	cmp	r0, #72	; 0x48
 800529e:	d008      	beq.n	80052b2 <xQueueGenericCreateStatic+0x8e>
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	e7fe      	b.n	80052b0 <xQueueGenericCreateStatic+0x8c>
 80052b2:	4620      	mov	r0, r4
 80052b4:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
 80052b6:	b13b      	cbz	r3, 80052c8 <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052be:	9400      	str	r4, [sp, #0]
 80052c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80052c4:	f7ff ffa0 	bl	8005208 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
	}
 80052c8:	4620      	mov	r0, r4
 80052ca:	b004      	add	sp, #16
 80052cc:	bd10      	pop	{r4, pc}
 80052ce:	bf00      	nop

080052d0 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052d0:	b940      	cbnz	r0, 80052e4 <xQueueGenericCreate+0x14>
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	e7fe      	b.n	80052e2 <xQueueGenericCreate+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e6:	b083      	sub	sp, #12
 80052e8:	4603      	mov	r3, r0
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052ea:	b111      	cbz	r1, 80052f2 <xQueueGenericCreate+0x22>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ec:	fb01 f000 	mul.w	r0, r1, r0
 80052f0:	e000      	b.n	80052f4 <xQueueGenericCreate+0x24>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052f2:	2000      	movs	r0, #0
 80052f4:	461e      	mov	r6, r3
 80052f6:	4617      	mov	r7, r2
 80052f8:	460c      	mov	r4, r1
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80052fa:	3048      	adds	r0, #72	; 0x48
 80052fc:	f001 fd92 	bl	8006e24 <pvPortMalloc>

		if( pxNewQueue != NULL )
 8005300:	4605      	mov	r5, r0
 8005302:	b150      	cbz	r0, 800531a <xQueueGenericCreate+0x4a>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005304:	2300      	movs	r3, #0
 8005306:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800530a:	9000      	str	r0, [sp, #0]
 800530c:	463b      	mov	r3, r7
 800530e:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8005312:	4621      	mov	r1, r4
 8005314:	4630      	mov	r0, r6
 8005316:	f7ff ff77 	bl	8005208 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
	}
 800531a:	4628      	mov	r0, r5
 800531c:	b003      	add	sp, #12
 800531e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005322:	b085      	sub	sp, #20
 8005324:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8005326:	b940      	cbnz	r0, 800533a <xQueueGenericSend+0x1a>
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	e7fe      	b.n	8005338 <xQueueGenericSend+0x18>
 800533a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800533c:	b919      	cbnz	r1, 8005346 <xQueueGenericSend+0x26>
 800533e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005340:	b91a      	cbnz	r2, 800534a <xQueueGenericSend+0x2a>
 8005342:	2201      	movs	r2, #1
 8005344:	e002      	b.n	800534c <xQueueGenericSend+0x2c>
 8005346:	2201      	movs	r2, #1
 8005348:	e000      	b.n	800534c <xQueueGenericSend+0x2c>
 800534a:	2200      	movs	r2, #0
 800534c:	b942      	cbnz	r2, 8005360 <xQueueGenericSend+0x40>
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	e7fe      	b.n	800535e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005360:	2b02      	cmp	r3, #2
 8005362:	d103      	bne.n	800536c <xQueueGenericSend+0x4c>
 8005364:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005366:	2a01      	cmp	r2, #1
 8005368:	d102      	bne.n	8005370 <xQueueGenericSend+0x50>
 800536a:	e002      	b.n	8005372 <xQueueGenericSend+0x52>
 800536c:	2201      	movs	r2, #1
 800536e:	e000      	b.n	8005372 <xQueueGenericSend+0x52>
 8005370:	2200      	movs	r2, #0
 8005372:	b942      	cbnz	r2, 8005386 <xQueueGenericSend+0x66>
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	e7fe      	b.n	8005384 <xQueueGenericSend+0x64>
 8005386:	461d      	mov	r5, r3
 8005388:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800538a:	f001 f827 	bl	80063dc <xTaskGetSchedulerState>
 800538e:	b918      	cbnz	r0, 8005398 <xQueueGenericSend+0x78>
 8005390:	9b01      	ldr	r3, [sp, #4]
 8005392:	b91b      	cbnz	r3, 800539c <xQueueGenericSend+0x7c>
 8005394:	2301      	movs	r3, #1
 8005396:	e002      	b.n	800539e <xQueueGenericSend+0x7e>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <xQueueGenericSend+0x7e>
 800539c:	2300      	movs	r3, #0
 800539e:	b943      	cbnz	r3, 80053b2 <xQueueGenericSend+0x92>
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	e7fe      	b.n	80053b0 <xQueueGenericSend+0x90>
 80053b2:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053b4:	f001 fe4e 	bl	8007054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80053ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80053bc:	429a      	cmp	r2, r3
 80053be:	d301      	bcc.n	80053c4 <xQueueGenericSend+0xa4>
 80053c0:	2d02      	cmp	r5, #2
 80053c2:	d121      	bne.n	8005408 <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053c4:	462a      	mov	r2, r5
 80053c6:	4631      	mov	r1, r6
 80053c8:	4620      	mov	r0, r4
 80053ca:	f7ff fe5b 	bl	8005084 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d0:	b16b      	cbz	r3, 80053ee <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80053d6:	f000 ff4d 	bl	8006274 <xTaskRemoveFromEventList>
 80053da:	b188      	cbz	r0, 8005400 <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e0:	4b32      	ldr	r3, [pc, #200]	; (80054ac <xQueueGenericSend+0x18c>)
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	e008      	b.n	8005400 <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053ee:	b138      	cbz	r0, 8005400 <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f4:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <xQueueGenericSend+0x18c>)
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005400:	f001 fe4a 	bl	8007098 <vPortExitCritical>
				return pdPASS;
 8005404:	2001      	movs	r0, #1
 8005406:	e04e      	b.n	80054a6 <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005408:	9b01      	ldr	r3, [sp, #4]
 800540a:	b91b      	cbnz	r3, 8005414 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800540c:	f001 fe44 	bl	8007098 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005410:	2000      	movs	r0, #0
 8005412:	e048      	b.n	80054a6 <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005414:	b91f      	cbnz	r7, 800541e <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8005416:	a802      	add	r0, sp, #8
 8005418:	f000 ff72 	bl	8006300 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800541c:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800541e:	f001 fe3b 	bl	8007098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005422:	f000 fca5 	bl	8005d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005426:	f001 fe15 	bl	8007054 <vPortEnterCritical>
 800542a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800542e:	b25b      	sxtb	r3, r3
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d102      	bne.n	800543c <xQueueGenericSend+0x11c>
 8005436:	2300      	movs	r3, #0
 8005438:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800543c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005440:	b25b      	sxtb	r3, r3
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d102      	bne.n	800544e <xQueueGenericSend+0x12e>
 8005448:	2300      	movs	r3, #0
 800544a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800544e:	f001 fe23 	bl	8007098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005452:	a901      	add	r1, sp, #4
 8005454:	a802      	add	r0, sp, #8
 8005456:	f000 ff69 	bl	800632c <xTaskCheckForTimeOut>
 800545a:	b9f0      	cbnz	r0, 800549a <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800545c:	4620      	mov	r0, r4
 800545e:	f7ff fdf3 	bl	8005048 <prvIsQueueFull>
 8005462:	b1a0      	cbz	r0, 800548e <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005464:	9901      	ldr	r1, [sp, #4]
 8005466:	f104 0010 	add.w	r0, r4, #16
 800546a:	f000 fecf 	bl	800620c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800546e:	4620      	mov	r0, r4
 8005470:	f7ff fe56 	bl	8005120 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005474:	f000 fd1c 	bl	8005eb0 <xTaskResumeAll>
 8005478:	2800      	cmp	r0, #0
 800547a:	d19b      	bne.n	80053b4 <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
 800547c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <xQueueGenericSend+0x18c>)
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	e792      	b.n	80053b4 <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800548e:	4620      	mov	r0, r4
 8005490:	f7ff fe46 	bl	8005120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005494:	f000 fd0c 	bl	8005eb0 <xTaskResumeAll>
 8005498:	e78c      	b.n	80053b4 <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800549a:	4620      	mov	r0, r4
 800549c:	f7ff fe40 	bl	8005120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054a0:	f000 fd06 	bl	8005eb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054a4:	2000      	movs	r0, #0
		}
	}
}
 80054a6:	b005      	add	sp, #20
 80054a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054aa:	bf00      	nop
 80054ac:	e000ed04 	.word	0xe000ed04

080054b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80054b4:	b940      	cbnz	r0, 80054c8 <xQueueGenericSendFromISR+0x18>
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	e7fe      	b.n	80054c6 <xQueueGenericSendFromISR+0x16>
 80054c8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ca:	b919      	cbnz	r1, 80054d4 <xQueueGenericSendFromISR+0x24>
 80054cc:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80054ce:	b918      	cbnz	r0, 80054d8 <xQueueGenericSendFromISR+0x28>
 80054d0:	2001      	movs	r0, #1
 80054d2:	e002      	b.n	80054da <xQueueGenericSendFromISR+0x2a>
 80054d4:	2001      	movs	r0, #1
 80054d6:	e000      	b.n	80054da <xQueueGenericSendFromISR+0x2a>
 80054d8:	2000      	movs	r0, #0
 80054da:	b940      	cbnz	r0, 80054ee <xQueueGenericSendFromISR+0x3e>
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	e7fe      	b.n	80054ec <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d103      	bne.n	80054fa <xQueueGenericSendFromISR+0x4a>
 80054f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80054f4:	2801      	cmp	r0, #1
 80054f6:	d102      	bne.n	80054fe <xQueueGenericSendFromISR+0x4e>
 80054f8:	e002      	b.n	8005500 <xQueueGenericSendFromISR+0x50>
 80054fa:	2001      	movs	r0, #1
 80054fc:	e000      	b.n	8005500 <xQueueGenericSendFromISR+0x50>
 80054fe:	2000      	movs	r0, #0
 8005500:	b940      	cbnz	r0, 8005514 <xQueueGenericSendFromISR+0x64>
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	e7fe      	b.n	8005512 <xQueueGenericSendFromISR+0x62>
 8005514:	461f      	mov	r7, r3
 8005516:	4690      	mov	r8, r2
 8005518:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800551a:	f001 fe73 	bl	8007204 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800551e:	f3ef 8611 	mrs	r6, BASEPRI
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005532:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005536:	429a      	cmp	r2, r3
 8005538:	d301      	bcc.n	800553e <xQueueGenericSendFromISR+0x8e>
 800553a:	2f02      	cmp	r7, #2
 800553c:	d11e      	bne.n	800557c <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800553e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005542:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005544:	463a      	mov	r2, r7
 8005546:	4649      	mov	r1, r9
 8005548:	4620      	mov	r0, r4
 800554a:	f7ff fd9b 	bl	8005084 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800554e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005552:	d10d      	bne.n	8005570 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005556:	b19b      	cbz	r3, 8005580 <xQueueGenericSendFromISR+0xd0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005558:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800555c:	f000 fe8a 	bl	8006274 <xTaskRemoveFromEventList>
 8005560:	b180      	cbz	r0, 8005584 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005562:	f1b8 0f00 	cmp.w	r8, #0
 8005566:	d00f      	beq.n	8005588 <xQueueGenericSendFromISR+0xd8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005568:	2001      	movs	r0, #1
 800556a:	f8c8 0000 	str.w	r0, [r8]
 800556e:	e00c      	b.n	800558a <xQueueGenericSendFromISR+0xda>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005570:	1c6b      	adds	r3, r5, #1
 8005572:	b25b      	sxtb	r3, r3
 8005574:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005578:	2001      	movs	r0, #1
 800557a:	e006      	b.n	800558a <xQueueGenericSendFromISR+0xda>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800557c:	2000      	movs	r0, #0
 800557e:	e004      	b.n	800558a <xQueueGenericSendFromISR+0xda>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
 8005580:	2001      	movs	r0, #1
 8005582:	e002      	b.n	800558a <xQueueGenericSendFromISR+0xda>
 8005584:	2001      	movs	r0, #1
 8005586:	e000      	b.n	800558a <xQueueGenericSendFromISR+0xda>
 8005588:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800558a:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 800558e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005592:	bf00      	nop

08005594 <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005594:	b940      	cbnz	r0, 80055a8 <xQueueGiveFromISR+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	e7fe      	b.n	80055a6 <xQueueGiveFromISR+0x12>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055ae:	b143      	cbz	r3, 80055c2 <xQueueGiveFromISR+0x2e>
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	e7fe      	b.n	80055c0 <xQueueGiveFromISR+0x2c>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80055c2:	6803      	ldr	r3, [r0, #0]
 80055c4:	b91b      	cbnz	r3, 80055ce <xQueueGiveFromISR+0x3a>
 80055c6:	6843      	ldr	r3, [r0, #4]
 80055c8:	b91b      	cbnz	r3, 80055d2 <xQueueGiveFromISR+0x3e>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e002      	b.n	80055d4 <xQueueGiveFromISR+0x40>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <xQueueGiveFromISR+0x40>
 80055d2:	2300      	movs	r3, #0
 80055d4:	b943      	cbnz	r3, 80055e8 <xQueueGiveFromISR+0x54>
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	e7fe      	b.n	80055e6 <xQueueGiveFromISR+0x52>
 80055e8:	460e      	mov	r6, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ea:	f001 fe0b 	bl	8007204 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055ee:	f3ef 8511 	mrs	r5, BASEPRI
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005602:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005604:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005606:	429a      	cmp	r2, r3
 8005608:	d218      	bcs.n	800563c <xQueueGiveFromISR+0xa8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800560a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800560e:	b25b      	sxtb	r3, r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005610:	3201      	adds	r2, #1
 8005612:	63a2      	str	r2, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d10a      	bne.n	8005630 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800561a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800561c:	b183      	cbz	r3, 8005640 <xQueueGiveFromISR+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800561e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005622:	f000 fe27 	bl	8006274 <xTaskRemoveFromEventList>
 8005626:	b168      	cbz	r0, 8005644 <xQueueGiveFromISR+0xb0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005628:	b176      	cbz	r6, 8005648 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800562a:	2001      	movs	r0, #1
 800562c:	6030      	str	r0, [r6, #0]
 800562e:	e00c      	b.n	800564a <xQueueGiveFromISR+0xb6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005630:	3301      	adds	r3, #1
 8005632:	b25b      	sxtb	r3, r3
 8005634:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005638:	2001      	movs	r0, #1
 800563a:	e006      	b.n	800564a <xQueueGiveFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800563c:	2000      	movs	r0, #0
 800563e:	e004      	b.n	800564a <xQueueGiveFromISR+0xb6>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
 8005640:	2001      	movs	r0, #1
 8005642:	e002      	b.n	800564a <xQueueGiveFromISR+0xb6>
 8005644:	2001      	movs	r0, #1
 8005646:	e000      	b.n	800564a <xQueueGiveFromISR+0xb6>
 8005648:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800564a:	f385 8811 	msr	BASEPRI, r5
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 800564e:	bd70      	pop	{r4, r5, r6, pc}

08005650 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8005650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8005658:	b940      	cbnz	r0, 800566c <xQueueGenericReceive+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	e7fe      	b.n	800566a <xQueueGenericReceive+0x1a>
 800566c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800566e:	b919      	cbnz	r1, 8005678 <xQueueGenericReceive+0x28>
 8005670:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005672:	b91a      	cbnz	r2, 800567c <xQueueGenericReceive+0x2c>
 8005674:	2201      	movs	r2, #1
 8005676:	e002      	b.n	800567e <xQueueGenericReceive+0x2e>
 8005678:	2201      	movs	r2, #1
 800567a:	e000      	b.n	800567e <xQueueGenericReceive+0x2e>
 800567c:	2200      	movs	r2, #0
 800567e:	b942      	cbnz	r2, 8005692 <xQueueGenericReceive+0x42>
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	e7fe      	b.n	8005690 <xQueueGenericReceive+0x40>
 8005692:	461f      	mov	r7, r3
 8005694:	4688      	mov	r8, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005696:	f000 fea1 	bl	80063dc <xTaskGetSchedulerState>
 800569a:	b918      	cbnz	r0, 80056a4 <xQueueGenericReceive+0x54>
 800569c:	9b01      	ldr	r3, [sp, #4]
 800569e:	b91b      	cbnz	r3, 80056a8 <xQueueGenericReceive+0x58>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e002      	b.n	80056aa <xQueueGenericReceive+0x5a>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <xQueueGenericReceive+0x5a>
 80056a8:	2300      	movs	r3, #0
 80056aa:	b943      	cbnz	r3, 80056be <xQueueGenericReceive+0x6e>
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	e7fe      	b.n	80056bc <xQueueGenericReceive+0x6c>
 80056be:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056c0:	f001 fcc8 	bl	8007054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056c6:	b385      	cbz	r5, 800572a <xQueueGenericReceive+0xda>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80056c8:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056ca:	4641      	mov	r1, r8
 80056cc:	4620      	mov	r0, r4
 80056ce:	f7ff fd15 	bl	80050fc <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80056d2:	b9b7      	cbnz	r7, 8005702 <xQueueGenericReceive+0xb2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80056d4:	3d01      	subs	r5, #1
 80056d6:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	b913      	cbnz	r3, 80056e2 <xQueueGenericReceive+0x92>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80056dc:	f000 ff3c 	bl	8006558 <pvTaskIncrementMutexHeldCount>
 80056e0:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	b1eb      	cbz	r3, 8005722 <xQueueGenericReceive+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e6:	f104 0010 	add.w	r0, r4, #16
 80056ea:	f000 fdc3 	bl	8006274 <xTaskRemoveFromEventList>
 80056ee:	b1c0      	cbz	r0, 8005722 <xQueueGenericReceive+0xd2>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80056f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f4:	4b3d      	ldr	r3, [pc, #244]	; (80057ec <xQueueGenericReceive+0x19c>)
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	e00f      	b.n	8005722 <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005702:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005706:	b163      	cbz	r3, 8005722 <xQueueGenericReceive+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005708:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800570c:	f000 fdb2 	bl	8006274 <xTaskRemoveFromEventList>
 8005710:	b138      	cbz	r0, 8005722 <xQueueGenericReceive+0xd2>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8005712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005716:	4b35      	ldr	r3, [pc, #212]	; (80057ec <xQueueGenericReceive+0x19c>)
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8005722:	f001 fcb9 	bl	8007098 <vPortExitCritical>
				return pdPASS;
 8005726:	2001      	movs	r0, #1
 8005728:	e05d      	b.n	80057e6 <xQueueGenericReceive+0x196>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800572a:	9b01      	ldr	r3, [sp, #4]
 800572c:	b91b      	cbnz	r3, 8005736 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800572e:	f001 fcb3 	bl	8007098 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005732:	2000      	movs	r0, #0
 8005734:	e057      	b.n	80057e6 <xQueueGenericReceive+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005736:	b91e      	cbnz	r6, 8005740 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8005738:	a802      	add	r0, sp, #8
 800573a:	f000 fde1 	bl	8006300 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800573e:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005740:	f001 fcaa 	bl	8007098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005744:	f000 fb14 	bl	8005d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005748:	f001 fc84 	bl	8007054 <vPortEnterCritical>
 800574c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005750:	b25b      	sxtb	r3, r3
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d102      	bne.n	800575e <xQueueGenericReceive+0x10e>
 8005758:	2300      	movs	r3, #0
 800575a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800575e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005762:	b25b      	sxtb	r3, r3
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d102      	bne.n	8005770 <xQueueGenericReceive+0x120>
 800576a:	2300      	movs	r3, #0
 800576c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005770:	f001 fc92 	bl	8007098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005774:	a901      	add	r1, sp, #4
 8005776:	a802      	add	r0, sp, #8
 8005778:	f000 fdd8 	bl	800632c <xTaskCheckForTimeOut>
 800577c:	bb38      	cbnz	r0, 80057ce <xQueueGenericReceive+0x17e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800577e:	4620      	mov	r0, r4
 8005780:	f7ff fc72 	bl	8005068 <prvIsQueueEmpty>
 8005784:	b1e8      	cbz	r0, 80057c2 <xQueueGenericReceive+0x172>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	b933      	cbnz	r3, 8005798 <xQueueGenericReceive+0x148>
					{
						taskENTER_CRITICAL();
 800578a:	f001 fc63 	bl	8007054 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800578e:	6860      	ldr	r0, [r4, #4]
 8005790:	f000 fe34 	bl	80063fc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8005794:	f001 fc80 	bl	8007098 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005798:	9901      	ldr	r1, [sp, #4]
 800579a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800579e:	f000 fd35 	bl	800620c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7ff fcbc 	bl	8005120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057a8:	f000 fb82 	bl	8005eb0 <xTaskResumeAll>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d187      	bne.n	80056c0 <xQueueGenericReceive+0x70>
				{
					portYIELD_WITHIN_API();
 80057b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b4:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <xQueueGenericReceive+0x19c>)
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	e77e      	b.n	80056c0 <xQueueGenericReceive+0x70>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7ff fcac 	bl	8005120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057c8:	f000 fb72 	bl	8005eb0 <xTaskResumeAll>
 80057cc:	e778      	b.n	80056c0 <xQueueGenericReceive+0x70>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff fca6 	bl	8005120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057d4:	f000 fb6c 	bl	8005eb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057d8:	4620      	mov	r0, r4
 80057da:	f7ff fc45 	bl	8005068 <prvIsQueueEmpty>
 80057de:	2800      	cmp	r0, #0
 80057e0:	f43f af6e 	beq.w	80056c0 <xQueueGenericReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057e4:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80057e6:	b004      	add	sp, #16
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057f0:	2300      	movs	r3, #0
 80057f2:	e00b      	b.n	800580c <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057f4:	4a07      	ldr	r2, [pc, #28]	; (8005814 <vQueueAddToRegistry+0x24>)
 80057f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80057fa:	b932      	cbnz	r2, 800580a <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057fc:	4a05      	ldr	r2, [pc, #20]	; (8005814 <vQueueAddToRegistry+0x24>)
 80057fe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005802:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005806:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005808:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800580a:	3301      	adds	r3, #1
 800580c:	2b07      	cmp	r3, #7
 800580e:	d9f1      	bls.n	80057f4 <vQueueAddToRegistry+0x4>
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	200032a8 	.word	0x200032a8

08005818 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4604      	mov	r4, r0
 800581c:	460d      	mov	r5, r1
 800581e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005820:	f001 fc18 	bl	8007054 <vPortEnterCritical>
 8005824:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005828:	b25b      	sxtb	r3, r3
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d102      	bne.n	8005836 <vQueueWaitForMessageRestricted+0x1e>
 8005830:	2300      	movs	r3, #0
 8005832:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005836:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800583a:	b25b      	sxtb	r3, r3
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d102      	bne.n	8005848 <vQueueWaitForMessageRestricted+0x30>
 8005842:	2300      	movs	r3, #0
 8005844:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005848:	f001 fc26 	bl	8007098 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800584c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800584e:	b92b      	cbnz	r3, 800585c <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005850:	4632      	mov	r2, r6
 8005852:	4629      	mov	r1, r5
 8005854:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005858:	f000 fcf0 	bl	800623c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800585c:	4620      	mov	r0, r4
 800585e:	f7ff fc5f 	bl	8005120 <prvUnlockQueue>
 8005862:	bd70      	pop	{r4, r5, r6, pc}

08005864 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8005864:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005866:	e001      	b.n	800586c <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005868:	3001      	adds	r0, #1
			ulCount++;
 800586a:	3301      	adds	r3, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800586c:	7802      	ldrb	r2, [r0, #0]
 800586e:	2aa5      	cmp	r2, #165	; 0xa5
 8005870:	d0fa      	beq.n	8005868 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( uint16_t ) ulCount;
	}
 8005872:	f3c3 008f 	ubfx	r0, r3, #2, #16
 8005876:	4770      	bx	lr

08005878 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <prvResetNextTaskUnblockTime+0x2c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	b90b      	cbnz	r3, 8005884 <prvResetNextTaskUnblockTime+0xc>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <prvResetNextTaskUnblockTime+0xe>
 8005884:	2300      	movs	r3, #0
 8005886:	b123      	cbz	r3, 8005892 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005888:	f04f 32ff 	mov.w	r2, #4294967295
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <prvResetNextTaskUnblockTime+0x30>)
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <prvResetNextTaskUnblockTime+0x2c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	4b02      	ldr	r3, [pc, #8]	; (80058a8 <prvResetNextTaskUnblockTime+0x30>)
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2000107c 	.word	0x2000107c
 80058a8:	20001158 	.word	0x20001158

080058ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80058ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	4681      	mov	r9, r0
 80058b2:	460d      	mov	r5, r1
 80058b4:	4617      	mov	r7, r2
 80058b6:	469a      	mov	sl, r3
 80058b8:	9e08      	ldr	r6, [sp, #32]
 80058ba:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80058be:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058c0:	0092      	lsls	r2, r2, #2
 80058c2:	21a5      	movs	r1, #165	; 0xa5
 80058c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80058c6:	f005 f94d 	bl	800ab64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80058ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80058cc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80058d0:	3a01      	subs	r2, #1
 80058d2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80058d6:	f027 0707 	bic.w	r7, r7, #7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058da:	2300      	movs	r3, #0
 80058dc:	e006      	b.n	80058ec <prvInitialiseNewTask+0x40>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058de:	5ce9      	ldrb	r1, [r5, r3]
 80058e0:	18e2      	adds	r2, r4, r3
 80058e2:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80058e6:	5cea      	ldrb	r2, [r5, r3]
 80058e8:	b112      	cbz	r2, 80058f0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058ea:	3301      	adds	r3, #1
 80058ec:	2b0f      	cmp	r3, #15
 80058ee:	d9f6      	bls.n	80058de <prvInitialiseNewTask+0x32>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058f0:	2300      	movs	r3, #0
 80058f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058f6:	2e06      	cmp	r6, #6
 80058f8:	d900      	bls.n	80058fc <prvInitialiseNewTask+0x50>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058fa:	2606      	movs	r6, #6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058fc:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058fe:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005900:	2500      	movs	r5, #0
 8005902:	64a5      	str	r5, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005904:	1d20      	adds	r0, r4, #4
 8005906:	f7ff fb63 	bl	8004fd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800590a:	f104 0018 	add.w	r0, r4, #24
 800590e:	f7ff fb5f 	bl	8004fd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005912:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005914:	f1c6 0607 	rsb	r6, r6, #7
 8005918:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800591a:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800591c:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800591e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005922:	4652      	mov	r2, sl
 8005924:	4649      	mov	r1, r9
 8005926:	4638      	mov	r0, r7
 8005928:	f001 fb6a 	bl	8007000 <pxPortInitialiseStack>
 800592c:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800592e:	f1b8 0f00 	cmp.w	r8, #0
 8005932:	d001      	beq.n	8005938 <prvInitialiseNewTask+0x8c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005934:	f8c8 4000 	str.w	r4, [r8]
 8005938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800593c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800593c:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593e:	2400      	movs	r4, #0
 8005940:	e007      	b.n	8005952 <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005942:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005946:	0093      	lsls	r3, r2, #2
 8005948:	480e      	ldr	r0, [pc, #56]	; (8005984 <prvInitialiseTaskLists+0x48>)
 800594a:	4418      	add	r0, r3
 800594c:	f7ff fb34 	bl	8004fb8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005950:	3401      	adds	r4, #1
 8005952:	2c06      	cmp	r4, #6
 8005954:	d9f5      	bls.n	8005942 <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8005956:	4d0c      	ldr	r5, [pc, #48]	; (8005988 <prvInitialiseTaskLists+0x4c>)
 8005958:	4628      	mov	r0, r5
 800595a:	f7ff fb2d 	bl	8004fb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800595e:	4c0b      	ldr	r4, [pc, #44]	; (800598c <prvInitialiseTaskLists+0x50>)
 8005960:	4620      	mov	r0, r4
 8005962:	f7ff fb29 	bl	8004fb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005966:	480a      	ldr	r0, [pc, #40]	; (8005990 <prvInitialiseTaskLists+0x54>)
 8005968:	f7ff fb26 	bl	8004fb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800596c:	4809      	ldr	r0, [pc, #36]	; (8005994 <prvInitialiseTaskLists+0x58>)
 800596e:	f7ff fb23 	bl	8004fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005972:	4809      	ldr	r0, [pc, #36]	; (8005998 <prvInitialiseTaskLists+0x5c>)
 8005974:	f7ff fb20 	bl	8004fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005978:	4b08      	ldr	r3, [pc, #32]	; (800599c <prvInitialiseTaskLists+0x60>)
 800597a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800597c:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <prvInitialiseTaskLists+0x64>)
 800597e:	601c      	str	r4, [r3, #0]
 8005980:	bd38      	pop	{r3, r4, r5, pc}
 8005982:	bf00      	nop
 8005984:	200010a0 	.word	0x200010a0
 8005988:	20001160 	.word	0x20001160
 800598c:	20001174 	.word	0x20001174
 8005990:	2000113c 	.word	0x2000113c
 8005994:	20001084 	.word	0x20001084
 8005998:	20001188 	.word	0x20001188
 800599c:	2000107c 	.word	0x2000107c
 80059a0:	20001098 	.word	0x20001098

080059a4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059a4:	b510      	push	{r4, lr}
 80059a6:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059a8:	f001 fb54 	bl	8007054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059ac:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <prvAddNewTaskToReadyList+0x8c>)
 80059ae:	6813      	ldr	r3, [r2, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059b4:	4b1f      	ldr	r3, [pc, #124]	; (8005a34 <prvAddNewTaskToReadyList+0x90>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	b93b      	cbnz	r3, 80059ca <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059ba:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <prvAddNewTaskToReadyList+0x90>)
 80059bc:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059be:	6813      	ldr	r3, [r2, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10d      	bne.n	80059e0 <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059c4:	f7ff ffba 	bl	800593c <prvInitialiseTaskLists>
 80059c8:	e00a      	b.n	80059e0 <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059ca:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <prvAddNewTaskToReadyList+0x94>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	b93b      	cbnz	r3, 80059e0 <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059d0:	4b18      	ldr	r3, [pc, #96]	; (8005a34 <prvAddNewTaskToReadyList+0x90>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059d8:	429a      	cmp	r2, r3
 80059da:	d801      	bhi.n	80059e0 <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
 80059dc:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <prvAddNewTaskToReadyList+0x90>)
 80059de:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059e0:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <prvAddNewTaskToReadyList+0x98>)
 80059e2:	6813      	ldr	r3, [r2, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059ea:	2201      	movs	r2, #1
 80059ec:	fa02 f103 	lsl.w	r1, r2, r3
 80059f0:	4813      	ldr	r0, [pc, #76]	; (8005a40 <prvAddNewTaskToReadyList+0x9c>)
 80059f2:	6802      	ldr	r2, [r0, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	6002      	str	r2, [r0, #0]
 80059f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059fc:	009a      	lsls	r2, r3, #2
 80059fe:	1d21      	adds	r1, r4, #4
 8005a00:	4810      	ldr	r0, [pc, #64]	; (8005a44 <prvAddNewTaskToReadyList+0xa0>)
 8005a02:	4410      	add	r0, r2
 8005a04:	f7ff fae8 	bl	8004fd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a08:	f001 fb46 	bl	8007098 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <prvAddNewTaskToReadyList+0x94>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	b16b      	cbz	r3, 8005a2e <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a12:	4b08      	ldr	r3, [pc, #32]	; (8005a34 <prvAddNewTaskToReadyList+0x90>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d207      	bcs.n	8005a2e <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <prvAddNewTaskToReadyList+0xa4>)
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	bd10      	pop	{r4, pc}
 8005a30:	20001134 	.word	0x20001134
 8005a34:	20001138 	.word	0x20001138
 8005a38:	20001080 	.word	0x20001080
 8005a3c:	2000115c 	.word	0x2000115c
 8005a40:	2000119c 	.word	0x2000119c
 8005a44:	200010a0 	.word	0x200010a0
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a50:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005a54:	b933      	cbnz	r3, 8005a64 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a56:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005a58:	f001 fa66 	bl	8006f28 <vPortFree>
				vPortFree( pxTCB );
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f001 fa63 	bl	8006f28 <vPortFree>
 8005a62:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d102      	bne.n	8005a6e <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 8005a68:	f001 fa5e 	bl	8006f28 <vPortFree>
 8005a6c:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d008      	beq.n	8005a84 <prvDeleteTCB+0x38>
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	e7fe      	b.n	8005a82 <prvDeleteTCB+0x36>
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	bf00      	nop

08005a88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005a90:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a92:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x80>)
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	3004      	adds	r0, #4
 8005a98:	f7ff fac4 	bl	8005024 <uxListRemove>
 8005a9c:	b950      	cbnz	r0, 8005ab4 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x80>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	fa03 f202 	lsl.w	r2, r3, r2
 8005aaa:	4918      	ldr	r1, [pc, #96]	; (8005b0c <prvAddCurrentTaskToDelayedList+0x84>)
 8005aac:	680b      	ldr	r3, [r1, #0]
 8005aae:	ea23 0302 	bic.w	r3, r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ab4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005ab8:	d107      	bne.n	8005aca <prvAddCurrentTaskToDelayedList+0x42>
 8005aba:	b136      	cbz	r6, 8005aca <prvAddCurrentTaskToDelayedList+0x42>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005abc:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x80>)
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	3104      	adds	r1, #4
 8005ac2:	4813      	ldr	r0, [pc, #76]	; (8005b10 <prvAddCurrentTaskToDelayedList+0x88>)
 8005ac4:	f7ff fa88 	bl	8004fd8 <vListInsertEnd>
 8005ac8:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aca:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005acc:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x80>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005ad2:	42a5      	cmp	r5, r4
 8005ad4:	d907      	bls.n	8005ae6 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad6:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x80>)
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	3104      	adds	r1, #4
 8005ae0:	f7ff fa86 	bl	8004ff0 <vListInsert>
 8005ae4:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x80>)
 8005aec:	6819      	ldr	r1, [r3, #0]
 8005aee:	3104      	adds	r1, #4
 8005af0:	f7ff fa7e 	bl	8004ff0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	429c      	cmp	r4, r3
 8005afa:	d201      	bcs.n	8005b00 <prvAddCurrentTaskToDelayedList+0x78>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005afc:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005afe:	601c      	str	r4, [r3, #0]
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	bf00      	nop
 8005b04:	20001154 	.word	0x20001154
 8005b08:	20001138 	.word	0x20001138
 8005b0c:	2000119c 	.word	0x2000119c
 8005b10:	20001188 	.word	0x20001188
 8005b14:	20001098 	.word	0x20001098
 8005b18:	2000107c 	.word	0x2000107c
 8005b1c:	20001158 	.word	0x20001158

08005b20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b20:	b530      	push	{r4, r5, lr}
 8005b22:	b087      	sub	sp, #28
 8005b24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005b26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b28:	b945      	cbnz	r5, 8005b3c <xTaskCreateStatic+0x1c>
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	e7fe      	b.n	8005b3a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8005b3c:	b944      	cbnz	r4, 8005b50 <xTaskCreateStatic+0x30>
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	e7fe      	b.n	8005b4e <xTaskCreateStatic+0x2e>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b50:	b18c      	cbz	r4, 8005b76 <xTaskCreateStatic+0x56>
 8005b52:	b185      	cbz	r5, 8005b76 <xTaskCreateStatic+0x56>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b54:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b56:	2502      	movs	r5, #2
 8005b58:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b5c:	2500      	movs	r5, #0
 8005b5e:	9503      	str	r5, [sp, #12]
 8005b60:	9402      	str	r4, [sp, #8]
 8005b62:	ad05      	add	r5, sp, #20
 8005b64:	9501      	str	r5, [sp, #4]
 8005b66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005b68:	9500      	str	r5, [sp, #0]
 8005b6a:	f7ff fe9f 	bl	80058ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f7ff ff18 	bl	80059a4 <prvAddNewTaskToReadyList>
 8005b74:	e001      	b.n	8005b7a <xTaskCreateStatic+0x5a>
		}
		else
		{
			xReturn = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
 8005b7a:	9805      	ldr	r0, [sp, #20]
 8005b7c:	b007      	add	sp, #28
 8005b7e:	bd30      	pop	{r4, r5, pc}

08005b80 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b84:	b085      	sub	sp, #20
 8005b86:	4606      	mov	r6, r0
 8005b88:	460f      	mov	r7, r1
 8005b8a:	4615      	mov	r5, r2
 8005b8c:	4698      	mov	r8, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b8e:	0090      	lsls	r0, r2, #2
 8005b90:	f001 f948 	bl	8006e24 <pvPortMalloc>

			if( pxStack != NULL )
 8005b94:	b160      	cbz	r0, 8005bb0 <xTaskCreate+0x30>
 8005b96:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005b98:	2054      	movs	r0, #84	; 0x54
 8005b9a:	f001 f943 	bl	8006e24 <pvPortMalloc>

				if( pxNewTCB != NULL )
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	b110      	cbz	r0, 8005ba8 <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ba2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
 8005ba6:	e004      	b.n	8005bb2 <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ba8:	4648      	mov	r0, r9
 8005baa:	f001 f9bd 	bl	8006f28 <vPortFree>
 8005bae:	e000      	b.n	8005bb2 <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bb0:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bb2:	b19c      	cbz	r4, 8005bdc <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bba:	9303      	str	r3, [sp, #12]
 8005bbc:	9402      	str	r4, [sp, #8]
 8005bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	4643      	mov	r3, r8
 8005bc8:	462a      	mov	r2, r5
 8005bca:	4639      	mov	r1, r7
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7ff fe6d 	bl	80058ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff fee6 	bl	80059a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bd8:	2001      	movs	r0, #1
 8005bda:	e001      	b.n	8005be0 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8005be0:	b005      	add	sp, #20
 8005be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005be6:	bf00      	nop

08005be8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005bea:	2906      	cmp	r1, #6
 8005bec:	d908      	bls.n	8005c00 <vTaskPrioritySet+0x18>
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	e7fe      	b.n	8005bfe <vTaskPrioritySet+0x16>
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c04:	2906      	cmp	r1, #6
 8005c06:	d900      	bls.n	8005c0a <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c08:	2506      	movs	r5, #6
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005c0a:	f001 fa23 	bl	8007054 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005c0e:	b90c      	cbnz	r4, 8005c14 <vTaskPrioritySet+0x2c>
 8005c10:	4b2d      	ldr	r3, [pc, #180]	; (8005cc8 <vTaskPrioritySet+0xe0>)
 8005c12:	681c      	ldr	r4, [r3, #0]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005c14:	6c63      	ldr	r3, [r4, #68]	; 0x44
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005c16:	429d      	cmp	r5, r3
 8005c18:	d053      	beq.n	8005cc2 <vTaskPrioritySet+0xda>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005c1a:	d90a      	bls.n	8005c32 <vTaskPrioritySet+0x4a>
				{
					if( pxTCB != pxCurrentTCB )
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <vTaskPrioritySet+0xe0>)
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	4294      	cmp	r4, r2
 8005c22:	d00c      	beq.n	8005c3e <vTaskPrioritySet+0x56>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005c24:	4a28      	ldr	r2, [pc, #160]	; (8005cc8 <vTaskPrioritySet+0xe0>)
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c2a:	4295      	cmp	r5, r2
 8005c2c:	d209      	bcs.n	8005c42 <vTaskPrioritySet+0x5a>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005c2e:	2600      	movs	r6, #0
 8005c30:	e00a      	b.n	8005c48 <vTaskPrioritySet+0x60>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005c32:	4a25      	ldr	r2, [pc, #148]	; (8005cc8 <vTaskPrioritySet+0xe0>)
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	4294      	cmp	r4, r2
 8005c38:	d005      	beq.n	8005c46 <vTaskPrioritySet+0x5e>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	e004      	b.n	8005c48 <vTaskPrioritySet+0x60>
 8005c3e:	2600      	movs	r6, #0
 8005c40:	e002      	b.n	8005c48 <vTaskPrioritySet+0x60>
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
 8005c42:	2601      	movs	r6, #1
 8005c44:	e000      	b.n	8005c48 <vTaskPrioritySet+0x60>
				else if( pxTCB == pxCurrentTCB )
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005c46:	2601      	movs	r6, #1
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005c4a:	42bb      	cmp	r3, r7
 8005c4c:	d100      	bne.n	8005c50 <vTaskPrioritySet+0x68>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005c4e:	62e5      	str	r5, [r4, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8005c50:	6465      	str	r5, [r4, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c52:	69a3      	ldr	r3, [r4, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	db02      	blt.n	8005c5e <vTaskPrioritySet+0x76>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c58:	f1c5 0507 	rsb	r5, r5, #7
 8005c5c:	61a5      	str	r5, [r4, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c5e:	6961      	ldr	r1, [r4, #20]
 8005c60:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8005c64:	0093      	lsls	r3, r2, #2
 8005c66:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <vTaskPrioritySet+0xe4>)
 8005c68:	4413      	add	r3, r2
 8005c6a:	4299      	cmp	r1, r3
 8005c6c:	d101      	bne.n	8005c72 <vTaskPrioritySet+0x8a>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <vTaskPrioritySet+0x8c>
 8005c72:	2300      	movs	r3, #0
 8005c74:	b1e3      	cbz	r3, 8005cb0 <vTaskPrioritySet+0xc8>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c76:	1d25      	adds	r5, r4, #4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f7ff f9d3 	bl	8005024 <uxListRemove>
 8005c7e:	b938      	cbnz	r0, 8005c90 <vTaskPrioritySet+0xa8>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8005c80:	2301      	movs	r3, #1
 8005c82:	fa03 f707 	lsl.w	r7, r3, r7
 8005c86:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <vTaskPrioritySet+0xe8>)
 8005c88:	6813      	ldr	r3, [r2, #0]
 8005c8a:	ea23 0307 	bic.w	r3, r3, r7
 8005c8e:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c92:	2201      	movs	r2, #1
 8005c94:	fa02 f103 	lsl.w	r1, r2, r3
 8005c98:	480d      	ldr	r0, [pc, #52]	; (8005cd0 <vTaskPrioritySet+0xe8>)
 8005c9a:	6802      	ldr	r2, [r0, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	6002      	str	r2, [r0, #0]
 8005ca0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ca4:	009a      	lsls	r2, r3, #2
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4808      	ldr	r0, [pc, #32]	; (8005ccc <vTaskPrioritySet+0xe4>)
 8005caa:	4410      	add	r0, r2
 8005cac:	f7ff f994 	bl	8004fd8 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005cb0:	b13e      	cbz	r6, 8005cc2 <vTaskPrioritySet+0xda>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb6:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <vTaskPrioritySet+0xec>)
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005cc2:	f001 f9e9 	bl	8007098 <vPortExitCritical>
 8005cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc8:	20001138 	.word	0x20001138
 8005ccc:	200010a0 	.word	0x200010a0
 8005cd0:	2000119c 	.word	0x2000119c
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cd8:	b510      	push	{r4, lr}
 8005cda:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005cdc:	2400      	movs	r4, #0
 8005cde:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ce0:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ce2:	aa07      	add	r2, sp, #28
 8005ce4:	a906      	add	r1, sp, #24
 8005ce6:	a805      	add	r0, sp, #20
 8005ce8:	f7fd feac 	bl	8003a44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cec:	9b05      	ldr	r3, [sp, #20]
 8005cee:	9302      	str	r3, [sp, #8]
 8005cf0:	9b06      	ldr	r3, [sp, #24]
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	9400      	str	r4, [sp, #0]
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	9a07      	ldr	r2, [sp, #28]
 8005cfa:	4918      	ldr	r1, [pc, #96]	; (8005d5c <vTaskStartScheduler+0x84>)
 8005cfc:	4818      	ldr	r0, [pc, #96]	; (8005d60 <vTaskStartScheduler+0x88>)
 8005cfe:	f7ff ff0f 	bl	8005b20 <xTaskCreateStatic>
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d02:	b108      	cbz	r0, 8005d08 <vTaskStartScheduler+0x30>
		{
			xReturn = pdPASS;
 8005d04:	2001      	movs	r0, #1
 8005d06:	e000      	b.n	8005d0a <vTaskStartScheduler+0x32>
		}
		else
		{
			xReturn = pdFAIL;
 8005d08:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d0a:	2801      	cmp	r0, #1
 8005d0c:	d101      	bne.n	8005d12 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d0e:	f000 fe0b 	bl	8006928 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d12:	2801      	cmp	r0, #1
 8005d14:	d114      	bne.n	8005d40 <vTaskStartScheduler+0x68>
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d26:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <vTaskStartScheduler+0x8c>)
 8005d2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <vTaskStartScheduler+0x90>)
 8005d32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d34:	2200      	movs	r2, #0
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <vTaskStartScheduler+0x94>)
 8005d38:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d3a:	f001 fa17 	bl	800716c <xPortStartScheduler>
 8005d3e:	e00b      	b.n	8005d58 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d44:	d108      	bne.n	8005d58 <vTaskStartScheduler+0x80>
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	e7fe      	b.n	8005d56 <vTaskStartScheduler+0x7e>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d58:	b008      	add	sp, #32
 8005d5a:	bd10      	pop	{r4, pc}
 8005d5c:	0800e928 	.word	0x0800e928
 8005d60:	0800604d 	.word	0x0800604d
 8005d64:	20001158 	.word	0x20001158
 8005d68:	20001080 	.word	0x20001080
 8005d6c:	20001154 	.word	0x20001154

08005d70 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d70:	4a02      	ldr	r2, [pc, #8]	; (8005d7c <vTaskSuspendAll+0xc>)
 8005d72:	6813      	ldr	r3, [r2, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	2000112c 	.word	0x2000112c

08005d80 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d80:	4b01      	ldr	r3, [pc, #4]	; (8005d88 <xTaskGetTickCount+0x8>)
 8005d82:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	20001154 	.word	0x20001154

08005d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d8e:	4b3d      	ldr	r3, [pc, #244]	; (8005e84 <xTaskIncrementTick+0xf8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d169      	bne.n	8005e6a <xTaskIncrementTick+0xde>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8005d96:	4b3c      	ldr	r3, [pc, #240]	; (8005e88 <xTaskIncrementTick+0xfc>)
 8005d98:	681d      	ldr	r5, [r3, #0]
 8005d9a:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d9c:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8005d9e:	b9c5      	cbnz	r5, 8005dd2 <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8005da0:	4b3a      	ldr	r3, [pc, #232]	; (8005e8c <xTaskIncrementTick+0x100>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	b143      	cbz	r3, 8005dba <xTaskIncrementTick+0x2e>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	e7fe      	b.n	8005db8 <xTaskIncrementTick+0x2c>
 8005dba:	4a34      	ldr	r2, [pc, #208]	; (8005e8c <xTaskIncrementTick+0x100>)
 8005dbc:	6811      	ldr	r1, [r2, #0]
 8005dbe:	4b34      	ldr	r3, [pc, #208]	; (8005e90 <xTaskIncrementTick+0x104>)
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	6010      	str	r0, [r2, #0]
 8005dc4:	6019      	str	r1, [r3, #0]
 8005dc6:	4a33      	ldr	r2, [pc, #204]	; (8005e94 <xTaskIncrementTick+0x108>)
 8005dc8:	6813      	ldr	r3, [r2, #0]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	f7ff fd53 	bl	8005878 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dd2:	4b31      	ldr	r3, [pc, #196]	; (8005e98 <xTaskIncrementTick+0x10c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	d203      	bcs.n	8005de2 <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dda:	2400      	movs	r4, #0
 8005ddc:	e03a      	b.n	8005e54 <xTaskIncrementTick+0xc8>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
 8005dde:	2401      	movs	r4, #1
 8005de0:	e000      	b.n	8005de4 <xTaskIncrementTick+0x58>
 8005de2:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de4:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <xTaskIncrementTick+0x100>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	b90b      	cbnz	r3, 8005df0 <xTaskIncrementTick+0x64>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <xTaskIncrementTick+0x66>
 8005df0:	2300      	movs	r3, #0
 8005df2:	b123      	cbz	r3, 8005dfe <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295
 8005df8:	4b27      	ldr	r3, [pc, #156]	; (8005e98 <xTaskIncrementTick+0x10c>)
 8005dfa:	601a      	str	r2, [r3, #0]
					break;
 8005dfc:	e02a      	b.n	8005e54 <xTaskIncrementTick+0xc8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005dfe:	4b23      	ldr	r3, [pc, #140]	; (8005e8c <xTaskIncrementTick+0x100>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e06:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
 8005e08:	429d      	cmp	r5, r3
 8005e0a:	d202      	bcs.n	8005e12 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e0c:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <xTaskIncrementTick+0x10c>)
 8005e0e:	6013      	str	r3, [r2, #0]
						break;
 8005e10:	e020      	b.n	8005e54 <xTaskIncrementTick+0xc8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e12:	1d37      	adds	r7, r6, #4
 8005e14:	4638      	mov	r0, r7
 8005e16:	f7ff f905 	bl	8005024 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e1a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005e1c:	b11b      	cbz	r3, 8005e26 <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e1e:	f106 0018 	add.w	r0, r6, #24
 8005e22:	f7ff f8ff 	bl	8005024 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e26:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005e28:	2201      	movs	r2, #1
 8005e2a:	fa02 f103 	lsl.w	r1, r2, r3
 8005e2e:	481b      	ldr	r0, [pc, #108]	; (8005e9c <xTaskIncrementTick+0x110>)
 8005e30:	6802      	ldr	r2, [r0, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	6002      	str	r2, [r0, #0]
 8005e36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e3a:	009a      	lsls	r2, r3, #2
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	4818      	ldr	r0, [pc, #96]	; (8005ea0 <xTaskIncrementTick+0x114>)
 8005e40:	4410      	add	r0, r2
 8005e42:	f7ff f8c9 	bl	8004fd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e46:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8005e48:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <xTaskIncrementTick+0x118>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d2c5      	bcs.n	8005dde <xTaskIncrementTick+0x52>
 8005e52:	e7c7      	b.n	8005de4 <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e54:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <xTaskIncrementTick+0x118>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e5e:	009a      	lsls	r2, r3, #2
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <xTaskIncrementTick+0x114>)
 8005e62:	589b      	ldr	r3, [r3, r2]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d806      	bhi.n	8005e76 <xTaskIncrementTick+0xea>
 8005e68:	e006      	b.n	8005e78 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e6a:	4a0f      	ldr	r2, [pc, #60]	; (8005ea8 <xTaskIncrementTick+0x11c>)
 8005e6c:	6813      	ldr	r3, [r2, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e72:	2400      	movs	r4, #0
 8005e74:	e000      	b.n	8005e78 <xTaskIncrementTick+0xec>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 8005e76:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e78:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <xTaskIncrementTick+0x120>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b103      	cbz	r3, 8005e80 <xTaskIncrementTick+0xf4>
		{
			xSwitchRequired = pdTRUE;
 8005e7e:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8005e80:	4620      	mov	r0, r4
 8005e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e84:	2000112c 	.word	0x2000112c
 8005e88:	20001154 	.word	0x20001154
 8005e8c:	2000107c 	.word	0x2000107c
 8005e90:	20001098 	.word	0x20001098
 8005e94:	20001150 	.word	0x20001150
 8005e98:	20001158 	.word	0x20001158
 8005e9c:	2000119c 	.word	0x2000119c
 8005ea0:	200010a0 	.word	0x200010a0
 8005ea4:	20001138 	.word	0x20001138
 8005ea8:	2000109c 	.word	0x2000109c
 8005eac:	200011a0 	.word	0x200011a0

08005eb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005eb0:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005eb2:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <xTaskResumeAll+0xd4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	b943      	cbnz	r3, 8005eca <xTaskResumeAll+0x1a>
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	e7fe      	b.n	8005ec8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005eca:	f001 f8c3 	bl	8007054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ece:	4b2d      	ldr	r3, [pc, #180]	; (8005f84 <xTaskResumeAll+0xd4>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	3a01      	subs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d14c      	bne.n	8005f76 <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005edc:	4b2a      	ldr	r3, [pc, #168]	; (8005f88 <xTaskResumeAll+0xd8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	bb33      	cbnz	r3, 8005f30 <xTaskResumeAll+0x80>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8005ee2:	2400      	movs	r4, #0
 8005ee4:	e04a      	b.n	8005f7c <xTaskResumeAll+0xcc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <xTaskResumeAll+0xdc>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eec:	f104 0018 	add.w	r0, r4, #24
 8005ef0:	f7ff f898 	bl	8005024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ef4:	1d25      	adds	r5, r4, #4
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f7ff f894 	bl	8005024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005efe:	2201      	movs	r2, #1
 8005f00:	fa02 f103 	lsl.w	r1, r2, r3
 8005f04:	4822      	ldr	r0, [pc, #136]	; (8005f90 <xTaskResumeAll+0xe0>)
 8005f06:	6802      	ldr	r2, [r0, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	6002      	str	r2, [r0, #0]
 8005f0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f10:	009a      	lsls	r2, r3, #2
 8005f12:	4629      	mov	r1, r5
 8005f14:	481f      	ldr	r0, [pc, #124]	; (8005f94 <xTaskResumeAll+0xe4>)
 8005f16:	4410      	add	r0, r2
 8005f18:	f7ff f85e 	bl	8004fd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <xTaskResumeAll+0xe8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d304      	bcc.n	8005f32 <xTaskResumeAll+0x82>
					{
						xYieldPending = pdTRUE;
 8005f28:	2201      	movs	r2, #1
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <xTaskResumeAll+0xec>)
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e000      	b.n	8005f32 <xTaskResumeAll+0x82>
 8005f30:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f32:	4b16      	ldr	r3, [pc, #88]	; (8005f8c <xTaskResumeAll+0xdc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1d5      	bne.n	8005ee6 <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f3a:	b10c      	cbz	r4, 8005f40 <xTaskResumeAll+0x90>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f3c:	f7ff fc9c 	bl	8005878 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f40:	4b17      	ldr	r3, [pc, #92]	; (8005fa0 <xTaskResumeAll+0xf0>)
 8005f42:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f44:	b154      	cbz	r4, 8005f5c <xTaskResumeAll+0xac>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f46:	f7ff ff21 	bl	8005d8c <xTaskIncrementTick>
 8005f4a:	b110      	cbz	r0, 8005f52 <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	4b13      	ldr	r3, [pc, #76]	; (8005f9c <xTaskResumeAll+0xec>)
 8005f50:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f52:	3c01      	subs	r4, #1
 8005f54:	d1f7      	bne.n	8005f46 <xTaskResumeAll+0x96>

						uxPendedTicks = 0;
 8005f56:	2200      	movs	r2, #0
 8005f58:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <xTaskResumeAll+0xf0>)
 8005f5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <xTaskResumeAll+0xec>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	b15b      	cbz	r3, 8005f7a <xTaskResumeAll+0xca>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f66:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <xTaskResumeAll+0xf4>)
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f72:	2401      	movs	r4, #1
 8005f74:	e002      	b.n	8005f7c <xTaskResumeAll+0xcc>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8005f76:	2400      	movs	r4, #0
 8005f78:	e000      	b.n	8005f7c <xTaskResumeAll+0xcc>
 8005f7a:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f7c:	f001 f88c 	bl	8007098 <vPortExitCritical>

	return xAlreadyYielded;
}
 8005f80:	4620      	mov	r0, r4
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	2000112c 	.word	0x2000112c
 8005f88:	20001134 	.word	0x20001134
 8005f8c:	2000113c 	.word	0x2000113c
 8005f90:	2000119c 	.word	0x2000119c
 8005f94:	200010a0 	.word	0x200010a0
 8005f98:	20001138 	.word	0x20001138
 8005f9c:	200011a0 	.word	0x200011a0
 8005fa0:	2000109c 	.word	0x2000109c
 8005fa4:	e000ed04 	.word	0xe000ed04

08005fa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fa8:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005faa:	b1a8      	cbz	r0, 8005fd8 <vTaskDelay+0x30>
 8005fac:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <vTaskDelay+0x48>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	b143      	cbz	r3, 8005fc6 <vTaskDelay+0x1e>
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	e7fe      	b.n	8005fc4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005fc6:	f7ff fed3 	bl	8005d70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f7ff fd5b 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fd2:	f7ff ff6d 	bl	8005eb0 <xTaskResumeAll>
 8005fd6:	e000      	b.n	8005fda <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fd8:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fda:	b938      	cbnz	r0, 8005fec <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 8005fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <vTaskDelay+0x4c>)
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	bd10      	pop	{r4, pc}
 8005fee:	bf00      	nop
 8005ff0:	2000112c 	.word	0x2000112c
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ff8:	b510      	push	{r4, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ffa:	e01b      	b.n	8006034 <prvCheckTasksWaitingTermination+0x3c>
		{
			vTaskSuspendAll();
 8005ffc:	f7ff feb8 	bl	8005d70 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <prvCheckTasksWaitingTermination+0x48>)
 8006002:	681c      	ldr	r4, [r3, #0]
			}
			( void ) xTaskResumeAll();
 8006004:	f7ff ff54 	bl	8005eb0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8006008:	b1a4      	cbz	r4, 8006034 <prvCheckTasksWaitingTermination+0x3c>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800600a:	f001 f823 	bl	8007054 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <prvCheckTasksWaitingTermination+0x48>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006014:	1d20      	adds	r0, r4, #4
 8006016:	f7ff f805 	bl	8005024 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800601a:	4a0a      	ldr	r2, [pc, #40]	; (8006044 <prvCheckTasksWaitingTermination+0x4c>)
 800601c:	6813      	ldr	r3, [r2, #0]
 800601e:	3b01      	subs	r3, #1
 8006020:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006022:	4a09      	ldr	r2, [pc, #36]	; (8006048 <prvCheckTasksWaitingTermination+0x50>)
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	3b01      	subs	r3, #1
 8006028:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800602a:	f001 f835 	bl	8007098 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800602e:	4620      	mov	r0, r4
 8006030:	f7ff fd0c 	bl	8005a4c <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006034:	4b04      	ldr	r3, [pc, #16]	; (8006048 <prvCheckTasksWaitingTermination+0x50>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1df      	bne.n	8005ffc <prvCheckTasksWaitingTermination+0x4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800603c:	bd10      	pop	{r4, pc}
 800603e:	bf00      	nop
 8006040:	20001084 	.word	0x20001084
 8006044:	20001134 	.word	0x20001134
 8006048:	20001130 	.word	0x20001130

0800604c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800604c:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800604e:	f7ff ffd3 	bl	8005ff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006052:	4b06      	ldr	r3, [pc, #24]	; (800606c <prvIdleTask+0x20>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d9f9      	bls.n	800604e <prvIdleTask+0x2>
			{
				taskYIELD();
 800605a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605e:	4b04      	ldr	r3, [pc, #16]	; (8006070 <prvIdleTask+0x24>)
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	e7f0      	b.n	800604e <prvIdleTask+0x2>
 800606c:	200010a0 	.word	0x200010a0
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006074:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006076:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <vTaskSwitchContext+0xb0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	b11b      	cbz	r3, 8006084 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800607c:	2201      	movs	r2, #1
 800607e:	4b2a      	ldr	r3, [pc, #168]	; (8006128 <vTaskSwitchContext+0xb4>)
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xYieldPending = pdFALSE;
 8006084:	2200      	movs	r2, #0
 8006086:	4b28      	ldr	r3, [pc, #160]	; (8006128 <vTaskSwitchContext+0xb4>)
 8006088:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 800608a:	4b28      	ldr	r3, [pc, #160]	; (800612c <vTaskSwitchContext+0xb8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8006096:	d10b      	bne.n	80060b0 <vTaskSwitchContext+0x3c>
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800609e:	d107      	bne.n	80060b0 <vTaskSwitchContext+0x3c>
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80060a6:	d103      	bne.n	80060b0 <vTaskSwitchContext+0x3c>
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 80060ae:	d005      	beq.n	80060bc <vTaskSwitchContext+0x48>
 80060b0:	4b1e      	ldr	r3, [pc, #120]	; (800612c <vTaskSwitchContext+0xb8>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	6819      	ldr	r1, [r3, #0]
 80060b6:	3134      	adds	r1, #52	; 0x34
 80060b8:	f7fd fcc2 	bl	8003a40 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80060bc:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <vTaskSwitchContext+0xbc>)
 80060be:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80060c0:	fab3 f383 	clz	r3, r3
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	f1c3 031f 	rsb	r3, r3, #31
 80060ca:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80060ce:	008a      	lsls	r2, r1, #2
 80060d0:	4918      	ldr	r1, [pc, #96]	; (8006134 <vTaskSwitchContext+0xc0>)
 80060d2:	588a      	ldr	r2, [r1, r2]
 80060d4:	b942      	cbnz	r2, 80060e8 <vTaskSwitchContext+0x74>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	e7fe      	b.n	80060e6 <vTaskSwitchContext+0x72>
 80060e8:	4d12      	ldr	r5, [pc, #72]	; (8006134 <vTaskSwitchContext+0xc0>)
 80060ea:	0099      	lsls	r1, r3, #2
 80060ec:	18ca      	adds	r2, r1, r3
 80060ee:	0090      	lsls	r0, r2, #2
 80060f0:	4428      	add	r0, r5
 80060f2:	6842      	ldr	r2, [r0, #4]
 80060f4:	6854      	ldr	r4, [r2, #4]
 80060f6:	6044      	str	r4, [r0, #4]
 80060f8:	4419      	add	r1, r3
 80060fa:	008a      	lsls	r2, r1, #2
 80060fc:	3208      	adds	r2, #8
 80060fe:	442a      	add	r2, r5
 8006100:	4294      	cmp	r4, r2
 8006102:	d105      	bne.n	8006110 <vTaskSwitchContext+0x9c>
 8006104:	6860      	ldr	r0, [r4, #4]
 8006106:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800610a:	008a      	lsls	r2, r1, #2
 800610c:	442a      	add	r2, r5
 800610e:	6050      	str	r0, [r2, #4]
 8006110:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006114:	009a      	lsls	r2, r3, #2
 8006116:	4b07      	ldr	r3, [pc, #28]	; (8006134 <vTaskSwitchContext+0xc0>)
 8006118:	441a      	add	r2, r3
 800611a:	6853      	ldr	r3, [r2, #4]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	4b03      	ldr	r3, [pc, #12]	; (800612c <vTaskSwitchContext+0xb8>)
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	2000112c 	.word	0x2000112c
 8006128:	200011a0 	.word	0x200011a0
 800612c:	20001138 	.word	0x20001138
 8006130:	2000119c 	.word	0x2000119c
 8006134:	200010a0 	.word	0x200010a0

08006138 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4604      	mov	r4, r0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800613c:	f000 ff8a 	bl	8007054 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006140:	b90c      	cbnz	r4, 8006146 <vTaskSuspend+0xe>
 8006142:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <vTaskSuspend+0xb4>)
 8006144:	681c      	ldr	r4, [r3, #0]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006146:	1d25      	adds	r5, r4, #4
 8006148:	4628      	mov	r0, r5
 800614a:	f7fe ff6b 	bl	8005024 <uxListRemove>
 800614e:	b970      	cbnz	r0, 800616e <vTaskSuspend+0x36>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006150:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006152:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006156:	008b      	lsls	r3, r1, #2
 8006158:	4925      	ldr	r1, [pc, #148]	; (80061f0 <vTaskSuspend+0xb8>)
 800615a:	58cb      	ldr	r3, [r1, r3]
 800615c:	b93b      	cbnz	r3, 800616e <vTaskSuspend+0x36>
 800615e:	2301      	movs	r3, #1
 8006160:	fa03 f202 	lsl.w	r2, r3, r2
 8006164:	4923      	ldr	r1, [pc, #140]	; (80061f4 <vTaskSuspend+0xbc>)
 8006166:	680b      	ldr	r3, [r1, #0]
 8006168:	ea23 0302 	bic.w	r3, r3, r2
 800616c:	600b      	str	r3, [r1, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800616e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006170:	b11b      	cbz	r3, 800617a <vTaskSuspend+0x42>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006172:	f104 0018 	add.w	r0, r4, #24
 8006176:	f7fe ff55 	bl	8005024 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800617a:	4629      	mov	r1, r5
 800617c:	481e      	ldr	r0, [pc, #120]	; (80061f8 <vTaskSuspend+0xc0>)
 800617e:	f7fe ff2b 	bl	8004fd8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8006182:	f000 ff89 	bl	8007098 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <vTaskSuspend+0xc4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	b12b      	cbz	r3, 8006198 <vTaskSuspend+0x60>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800618c:	f000 ff62 	bl	8007054 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006190:	f7ff fb72 	bl	8005878 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006194:	f000 ff80 	bl	8007098 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006198:	4b14      	ldr	r3, [pc, #80]	; (80061ec <vTaskSuspend+0xb4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	429c      	cmp	r4, r3
 800619e:	d123      	bne.n	80061e8 <vTaskSuspend+0xb0>
		{
			if( xSchedulerRunning != pdFALSE )
 80061a0:	4b16      	ldr	r3, [pc, #88]	; (80061fc <vTaskSuspend+0xc4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b1a3      	cbz	r3, 80061d0 <vTaskSuspend+0x98>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80061a6:	4b16      	ldr	r3, [pc, #88]	; (8006200 <vTaskSuspend+0xc8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	b143      	cbz	r3, 80061be <vTaskSuspend+0x86>
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	e7fe      	b.n	80061bc <vTaskSuspend+0x84>
				portYIELD_WITHIN_API();
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	4b10      	ldr	r3, [pc, #64]	; (8006204 <vTaskSuspend+0xcc>)
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80061d0:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <vTaskSuspend+0xc0>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <vTaskSuspend+0xd0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d103      	bne.n	80061e4 <vTaskSuspend+0xac>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 80061dc:	2200      	movs	r2, #0
 80061de:	4b03      	ldr	r3, [pc, #12]	; (80061ec <vTaskSuspend+0xb4>)
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					vTaskSwitchContext();
 80061e4:	f7ff ff46 	bl	8006074 <vTaskSwitchContext>
 80061e8:	bd38      	pop	{r3, r4, r5, pc}
 80061ea:	bf00      	nop
 80061ec:	20001138 	.word	0x20001138
 80061f0:	200010a0 	.word	0x200010a0
 80061f4:	2000119c 	.word	0x2000119c
 80061f8:	20001188 	.word	0x20001188
 80061fc:	20001080 	.word	0x20001080
 8006200:	2000112c 	.word	0x2000112c
 8006204:	e000ed04 	.word	0xe000ed04
 8006208:	20001134 	.word	0x20001134

0800620c <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
 800620c:	b940      	cbnz	r0, 8006220 <vTaskPlaceOnEventList+0x14>
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	e7fe      	b.n	800621e <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006220:	b510      	push	{r4, lr}
 8006222:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <vTaskPlaceOnEventList+0x2c>)
 8006226:	6819      	ldr	r1, [r3, #0]
 8006228:	3118      	adds	r1, #24
 800622a:	f7fe fee1 	bl	8004ff0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800622e:	2101      	movs	r1, #1
 8006230:	4620      	mov	r0, r4
 8006232:	f7ff fc29 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
 8006236:	bd10      	pop	{r4, pc}
 8006238:	20001138 	.word	0x20001138

0800623c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800623c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800623e:	b940      	cbnz	r0, 8006252 <vTaskPlaceOnEventListRestricted+0x16>
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	e7fe      	b.n	8006250 <vTaskPlaceOnEventListRestricted+0x14>
 8006252:	460c      	mov	r4, r1
 8006254:	4615      	mov	r5, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006256:	4a06      	ldr	r2, [pc, #24]	; (8006270 <vTaskPlaceOnEventListRestricted+0x34>)
 8006258:	6811      	ldr	r1, [r2, #0]
 800625a:	3118      	adds	r1, #24
 800625c:	f7fe febc 	bl	8004fd8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006260:	b10d      	cbz	r5, 8006266 <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
 8006262:	f04f 34ff 	mov.w	r4, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006266:	4629      	mov	r1, r5
 8006268:	4620      	mov	r0, r4
 800626a:	f7ff fc0d 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	20001138 	.word	0x20001138

08006274 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006274:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006276:	68c3      	ldr	r3, [r0, #12]
 8006278:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800627a:	b944      	cbnz	r4, 800628e <xTaskRemoveFromEventList+0x1a>
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	e7fe      	b.n	800628c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800628e:	f104 0518 	add.w	r5, r4, #24
 8006292:	4628      	mov	r0, r5
 8006294:	f7fe fec6 	bl	8005024 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006298:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <xTaskRemoveFromEventList+0x74>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	b9a3      	cbnz	r3, 80062c8 <xTaskRemoveFromEventList+0x54>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800629e:	1d25      	adds	r5, r4, #4
 80062a0:	4628      	mov	r0, r5
 80062a2:	f7fe febf 	bl	8005024 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80062a8:	2201      	movs	r2, #1
 80062aa:	fa02 f103 	lsl.w	r1, r2, r3
 80062ae:	480f      	ldr	r0, [pc, #60]	; (80062ec <xTaskRemoveFromEventList+0x78>)
 80062b0:	6802      	ldr	r2, [r0, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	6002      	str	r2, [r0, #0]
 80062b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062ba:	009a      	lsls	r2, r3, #2
 80062bc:	4629      	mov	r1, r5
 80062be:	480c      	ldr	r0, [pc, #48]	; (80062f0 <xTaskRemoveFromEventList+0x7c>)
 80062c0:	4410      	add	r0, r2
 80062c2:	f7fe fe89 	bl	8004fd8 <vListInsertEnd>
 80062c6:	e003      	b.n	80062d0 <xTaskRemoveFromEventList+0x5c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062c8:	4629      	mov	r1, r5
 80062ca:	480a      	ldr	r0, [pc, #40]	; (80062f4 <xTaskRemoveFromEventList+0x80>)
 80062cc:	f7fe fe84 	bl	8004fd8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <xTaskRemoveFromEventList+0x84>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	429a      	cmp	r2, r3
 80062da:	d903      	bls.n	80062e4 <xTaskRemoveFromEventList+0x70>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062dc:	2001      	movs	r0, #1
 80062de:	4b07      	ldr	r3, [pc, #28]	; (80062fc <xTaskRemoveFromEventList+0x88>)
 80062e0:	6018      	str	r0, [r3, #0]
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
 80062e4:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	2000112c 	.word	0x2000112c
 80062ec:	2000119c 	.word	0x2000119c
 80062f0:	200010a0 	.word	0x200010a0
 80062f4:	2000113c 	.word	0x2000113c
 80062f8:	20001138 	.word	0x20001138
 80062fc:	200011a0 	.word	0x200011a0

08006300 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 8006300:	b940      	cbnz	r0, 8006314 <vTaskSetTimeOutState+0x14>
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	e7fe      	b.n	8006312 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006314:	4a03      	ldr	r2, [pc, #12]	; (8006324 <vTaskSetTimeOutState+0x24>)
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800631a:	4a03      	ldr	r2, [pc, #12]	; (8006328 <vTaskSetTimeOutState+0x28>)
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	6042      	str	r2, [r0, #4]
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20001150 	.word	0x20001150
 8006328:	20001154 	.word	0x20001154

0800632c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800632c:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800632e:	b940      	cbnz	r0, 8006342 <xTaskCheckForTimeOut+0x16>
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	e7fe      	b.n	8006340 <xTaskCheckForTimeOut+0x14>
 8006342:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8006344:	b941      	cbnz	r1, 8006358 <xTaskCheckForTimeOut+0x2c>
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	e7fe      	b.n	8006356 <xTaskCheckForTimeOut+0x2a>
 8006358:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 800635a:	f000 fe7b 	bl	8007054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800635e:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <xTaskCheckForTimeOut+0x78>)
 8006360:	6819      	ldr	r1, [r3, #0]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006362:	682a      	ldr	r2, [r5, #0]
 8006364:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006368:	d013      	beq.n	8006392 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800636a:	6820      	ldr	r0, [r4, #0]
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <xTaskCheckForTimeOut+0x7c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4298      	cmp	r0, r3
 8006372:	d002      	beq.n	800637a <xTaskCheckForTimeOut+0x4e>
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	4299      	cmp	r1, r3
 8006378:	d20d      	bcs.n	8006396 <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800637a:	6863      	ldr	r3, [r4, #4]
 800637c:	1ac8      	subs	r0, r1, r3
 800637e:	4282      	cmp	r2, r0
 8006380:	d90b      	bls.n	800639a <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8006382:	1a5b      	subs	r3, r3, r1
 8006384:	4413      	add	r3, r2
 8006386:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8006388:	4620      	mov	r0, r4
 800638a:	f7ff ffb9 	bl	8006300 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800638e:	2400      	movs	r4, #0
 8006390:	e004      	b.n	800639c <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006392:	2400      	movs	r4, #0
 8006394:	e002      	b.n	800639c <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006396:	2401      	movs	r4, #1
 8006398:	e000      	b.n	800639c <xTaskCheckForTimeOut+0x70>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
 800639a:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
 800639c:	f000 fe7c 	bl	8007098 <vPortExitCritical>

	return xReturn;
}
 80063a0:	4620      	mov	r0, r4
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	20001154 	.word	0x20001154
 80063a8:	20001150 	.word	0x20001150

080063ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 80063ac:	2201      	movs	r2, #1
 80063ae:	4b01      	ldr	r3, [pc, #4]	; (80063b4 <vTaskMissedYield+0x8>)
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	4770      	bx	lr
 80063b4:	200011a0 	.word	0x200011a0

080063b8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80063b8:	b508      	push	{r3, lr}
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80063ba:	4603      	mov	r3, r0
 80063bc:	b908      	cbnz	r0, 80063c2 <uxTaskGetStackHighWaterMark+0xa>
 80063be:	4b03      	ldr	r3, [pc, #12]	; (80063cc <uxTaskGetStackHighWaterMark+0x14>)
 80063c0:	681b      	ldr	r3, [r3, #0]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80063c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063c4:	f7ff fa4e 	bl	8005864 <prvTaskCheckFreeStackSpace>

		return uxReturn;
	}
 80063c8:	bd08      	pop	{r3, pc}
 80063ca:	bf00      	nop
 80063cc:	20001138 	.word	0x20001138

080063d0 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80063d0:	4b01      	ldr	r3, [pc, #4]	; (80063d8 <xTaskGetCurrentTaskHandle+0x8>)
 80063d2:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20001138 	.word	0x20001138

080063dc <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <xTaskGetSchedulerState+0x18>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	b123      	cbz	r3, 80063ec <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <xTaskGetSchedulerState+0x1c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b91b      	cbnz	r3, 80063f0 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063e8:	2002      	movs	r0, #2
 80063ea:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063ec:	2001      	movs	r0, #1
 80063ee:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063f0:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
 80063f2:	4770      	bx	lr
 80063f4:	20001080 	.word	0x20001080
 80063f8:	2000112c 	.word	0x2000112c

080063fc <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d04a      	beq.n	8006496 <vTaskPriorityInherit+0x9a>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4602      	mov	r2, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006404:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006406:	4924      	ldr	r1, [pc, #144]	; (8006498 <vTaskPriorityInherit+0x9c>)
 8006408:	6809      	ldr	r1, [r1, #0]
 800640a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800640c:	428b      	cmp	r3, r1
 800640e:	d241      	bcs.n	8006494 <vTaskPriorityInherit+0x98>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006410:	6981      	ldr	r1, [r0, #24]
 8006412:	2900      	cmp	r1, #0
 8006414:	db05      	blt.n	8006422 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006416:	4920      	ldr	r1, [pc, #128]	; (8006498 <vTaskPriorityInherit+0x9c>)
 8006418:	6809      	ldr	r1, [r1, #0]
 800641a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800641c:	f1c1 0107 	rsb	r1, r1, #7
 8006420:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006422:	6950      	ldr	r0, [r2, #20]
 8006424:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006428:	0099      	lsls	r1, r3, #2
 800642a:	4b1c      	ldr	r3, [pc, #112]	; (800649c <vTaskPriorityInherit+0xa0>)
 800642c:	4419      	add	r1, r3
 800642e:	4288      	cmp	r0, r1
 8006430:	d101      	bne.n	8006436 <vTaskPriorityInherit+0x3a>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <vTaskPriorityInherit+0x3c>
 8006436:	2300      	movs	r3, #0
 8006438:	b343      	cbz	r3, 800648c <vTaskPriorityInherit+0x90>
 800643a:	4614      	mov	r4, r2
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800643c:	1d15      	adds	r5, r2, #4
 800643e:	4628      	mov	r0, r5
 8006440:	f7fe fdf0 	bl	8005024 <uxListRemove>
 8006444:	b970      	cbnz	r0, 8006464 <vTaskPriorityInherit+0x68>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006446:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006448:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800644c:	008a      	lsls	r2, r1, #2
 800644e:	4913      	ldr	r1, [pc, #76]	; (800649c <vTaskPriorityInherit+0xa0>)
 8006450:	588a      	ldr	r2, [r1, r2]
 8006452:	b93a      	cbnz	r2, 8006464 <vTaskPriorityInherit+0x68>
 8006454:	2201      	movs	r2, #1
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	4911      	ldr	r1, [pc, #68]	; (80064a0 <vTaskPriorityInherit+0xa4>)
 800645c:	680a      	ldr	r2, [r1, #0]
 800645e:	ea22 0303 	bic.w	r3, r2, r3
 8006462:	600b      	str	r3, [r1, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006464:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <vTaskPriorityInherit+0x9c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800646c:	2201      	movs	r2, #1
 800646e:	fa02 f103 	lsl.w	r1, r2, r3
 8006472:	480b      	ldr	r0, [pc, #44]	; (80064a0 <vTaskPriorityInherit+0xa4>)
 8006474:	6802      	ldr	r2, [r0, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	6002      	str	r2, [r0, #0]
 800647a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800647e:	009a      	lsls	r2, r3, #2
 8006480:	4629      	mov	r1, r5
 8006482:	4806      	ldr	r0, [pc, #24]	; (800649c <vTaskPriorityInherit+0xa0>)
 8006484:	4410      	add	r0, r2
 8006486:	f7fe fda7 	bl	8004fd8 <vListInsertEnd>
 800648a:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800648c:	4b02      	ldr	r3, [pc, #8]	; (8006498 <vTaskPriorityInherit+0x9c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	4770      	bx	lr
 8006498:	20001138 	.word	0x20001138
 800649c:	200010a0 	.word	0x200010a0
 80064a0:	2000119c 	.word	0x2000119c

080064a4 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d04b      	beq.n	8006540 <xTaskPriorityDisinherit+0x9c>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064ac:	4a27      	ldr	r2, [pc, #156]	; (800654c <xTaskPriorityDisinherit+0xa8>)
 80064ae:	6812      	ldr	r2, [r2, #0]
 80064b0:	4290      	cmp	r0, r2
 80064b2:	d008      	beq.n	80064c6 <xTaskPriorityDisinherit+0x22>
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	e7fe      	b.n	80064c4 <xTaskPriorityDisinherit+0x20>

			configASSERT( pxTCB->uxMutexesHeld );
 80064c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80064c8:	b942      	cbnz	r2, 80064dc <xTaskPriorityDisinherit+0x38>
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	e7fe      	b.n	80064da <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80064dc:	3a01      	subs	r2, #1
 80064de:	6482      	str	r2, [r0, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80064e2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80064e4:	4288      	cmp	r0, r1
 80064e6:	d02d      	beq.n	8006544 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064e8:	bb72      	cbnz	r2, 8006548 <xTaskPriorityDisinherit+0xa4>
 80064ea:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ec:	1d1d      	adds	r5, r3, #4
 80064ee:	4628      	mov	r0, r5
 80064f0:	f7fe fd98 	bl	8005024 <uxListRemove>
 80064f4:	b970      	cbnz	r0, 8006514 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80064f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80064fc:	008b      	lsls	r3, r1, #2
 80064fe:	4914      	ldr	r1, [pc, #80]	; (8006550 <xTaskPriorityDisinherit+0xac>)
 8006500:	58cb      	ldr	r3, [r1, r3]
 8006502:	b93b      	cbnz	r3, 8006514 <xTaskPriorityDisinherit+0x70>
 8006504:	2301      	movs	r3, #1
 8006506:	fa03 f202 	lsl.w	r2, r3, r2
 800650a:	4912      	ldr	r1, [pc, #72]	; (8006554 <xTaskPriorityDisinherit+0xb0>)
 800650c:	680b      	ldr	r3, [r1, #0]
 800650e:	ea23 0302 	bic.w	r3, r3, r2
 8006512:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006516:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006518:	f1c3 0207 	rsb	r2, r3, #7
 800651c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800651e:	2401      	movs	r4, #1
 8006520:	fa04 f003 	lsl.w	r0, r4, r3
 8006524:	490b      	ldr	r1, [pc, #44]	; (8006554 <xTaskPriorityDisinherit+0xb0>)
 8006526:	680a      	ldr	r2, [r1, #0]
 8006528:	4302      	orrs	r2, r0
 800652a:	600a      	str	r2, [r1, #0]
 800652c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006530:	009a      	lsls	r2, r3, #2
 8006532:	4629      	mov	r1, r5
 8006534:	4806      	ldr	r0, [pc, #24]	; (8006550 <xTaskPriorityDisinherit+0xac>)
 8006536:	4410      	add	r0, r2
 8006538:	f7fe fd4e 	bl	8004fd8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800653c:	4620      	mov	r0, r4
 800653e:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8006540:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8006542:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8006544:	2000      	movs	r0, #0
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	20001138 	.word	0x20001138
 8006550:	200010a0 	.word	0x200010a0
 8006554:	2000119c 	.word	0x2000119c

08006558 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006558:	4b05      	ldr	r3, [pc, #20]	; (8006570 <pvTaskIncrementMutexHeldCount+0x18>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	b123      	cbz	r3, 8006568 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800655e:	4b04      	ldr	r3, [pc, #16]	; (8006570 <pvTaskIncrementMutexHeldCount+0x18>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006564:	3301      	adds	r3, #1
 8006566:	6493      	str	r3, [r2, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006568:	4b01      	ldr	r3, [pc, #4]	; (8006570 <pvTaskIncrementMutexHeldCount+0x18>)
 800656a:	6818      	ldr	r0, [r3, #0]
	}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20001138 	.word	0x20001138

08006574 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	4607      	mov	r7, r0
 8006578:	460c      	mov	r4, r1
 800657a:	4615      	mov	r5, r2
 800657c:	461e      	mov	r6, r3
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800657e:	f000 fd69 	bl	8007054 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006582:	4b20      	ldr	r3, [pc, #128]	; (8006604 <xTaskNotifyWait+0x90>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d016      	beq.n	80065be <xTaskNotifyWait+0x4a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006590:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <xTaskNotifyWait+0x90>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8006596:	ea20 0007 	bic.w	r0, r0, r7
 800659a:	64d0      	str	r0, [r2, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80065a4:	b15e      	cbz	r6, 80065be <xTaskNotifyWait+0x4a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065a6:	4611      	mov	r1, r2
 80065a8:	4630      	mov	r0, r6
 80065aa:	f7ff fa6d 	bl	8005a88 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80065ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b2:	4b15      	ldr	r3, [pc, #84]	; (8006608 <xTaskNotifyWait+0x94>)
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80065be:	f000 fd6b 	bl	8007098 <vPortExitCritical>

		taskENTER_CRITICAL();
 80065c2:	f000 fd47 	bl	8007054 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80065c6:	b11d      	cbz	r5, 80065d0 <xTaskNotifyWait+0x5c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80065c8:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <xTaskNotifyWait+0x90>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ce:	602b      	str	r3, [r5, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <xTaskNotifyWait+0x90>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d007      	beq.n	80065ee <xTaskNotifyWait+0x7a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80065de:	4b09      	ldr	r3, [pc, #36]	; (8006604 <xTaskNotifyWait+0x90>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80065e4:	ea21 0104 	bic.w	r1, r1, r4
 80065e8:	64d9      	str	r1, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80065ea:	2401      	movs	r4, #1
 80065ec:	e000      	b.n	80065f0 <xTaskNotifyWait+0x7c>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80065ee:	2400      	movs	r4, #0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <xTaskNotifyWait+0x90>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80065fa:	f000 fd4d 	bl	8007098 <vPortExitCritical>

		return xReturn;
	}
 80065fe:	4620      	mov	r0, r4
 8006600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006602:	bf00      	nop
 8006604:	20001138 	.word	0x20001138
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800660e:	b940      	cbnz	r0, 8006622 <xTaskGenericNotify+0x16>
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	e7fe      	b.n	8006620 <xTaskGenericNotify+0x14>
 8006622:	4604      	mov	r4, r0
 8006624:	461f      	mov	r7, r3
 8006626:	4615      	mov	r5, r2
 8006628:	460e      	mov	r6, r1
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800662a:	f000 fd13 	bl	8007054 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800662e:	b10f      	cbz	r7, 8006634 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006630:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006632:	603b      	str	r3, [r7, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006634:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006638:	b2db      	uxtb	r3, r3

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800663a:	2202      	movs	r2, #2
 800663c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50

			switch( eAction )
 8006640:	1e6a      	subs	r2, r5, #1
 8006642:	2a03      	cmp	r2, #3
 8006644:	d815      	bhi.n	8006672 <xTaskGenericNotify+0x66>
 8006646:	e8df f002 	tbb	[pc, r2]
 800664a:	0702      	.short	0x0702
 800664c:	0f0c      	.short	0x0f0c
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800664e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006650:	4316      	orrs	r6, r2
 8006652:	64e6      	str	r6, [r4, #76]	; 0x4c
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006654:	2501      	movs	r5, #1

			switch( eAction )
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;
 8006656:	e00f      	b.n	8006678 <xTaskGenericNotify+0x6c>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006658:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800665a:	3201      	adds	r2, #1
 800665c:	64e2      	str	r2, [r4, #76]	; 0x4c
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800665e:	2501      	movs	r5, #1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
 8006660:	e00a      	b.n	8006678 <xTaskGenericNotify+0x6c>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006662:	64e6      	str	r6, [r4, #76]	; 0x4c
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006664:	2501      	movs	r5, #1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
 8006666:	e007      	b.n	8006678 <xTaskGenericNotify+0x6c>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006668:	2b02      	cmp	r3, #2
 800666a:	d004      	beq.n	8006676 <xTaskGenericNotify+0x6a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800666c:	64e6      	str	r6, [r4, #76]	; 0x4c
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800666e:	2501      	movs	r5, #1
 8006670:	e002      	b.n	8006678 <xTaskGenericNotify+0x6c>
 8006672:	2501      	movs	r5, #1
 8006674:	e000      	b.n	8006678 <xTaskGenericNotify+0x6c>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8006676:	2500      	movs	r5, #0

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006678:	2b01      	cmp	r3, #1
 800667a:	d12c      	bne.n	80066d6 <xTaskGenericNotify+0xca>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800667c:	1d26      	adds	r6, r4, #4
 800667e:	4630      	mov	r0, r6
 8006680:	f7fe fcd0 	bl	8005024 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006686:	2201      	movs	r2, #1
 8006688:	fa02 f103 	lsl.w	r1, r2, r3
 800668c:	4814      	ldr	r0, [pc, #80]	; (80066e0 <xTaskGenericNotify+0xd4>)
 800668e:	6802      	ldr	r2, [r0, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	6002      	str	r2, [r0, #0]
 8006694:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006698:	009a      	lsls	r2, r3, #2
 800669a:	4631      	mov	r1, r6
 800669c:	4811      	ldr	r0, [pc, #68]	; (80066e4 <xTaskGenericNotify+0xd8>)
 800669e:	4410      	add	r0, r2
 80066a0:	f7fe fc9a 	bl	8004fd8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80066a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066a6:	b143      	cbz	r3, 80066ba <xTaskGenericNotify+0xae>
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	e7fe      	b.n	80066b8 <xTaskGenericNotify+0xac>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <xTaskGenericNotify+0xdc>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d907      	bls.n	80066d6 <xTaskGenericNotify+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80066c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <xTaskGenericNotify+0xe0>)
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80066d6:	f000 fcdf 	bl	8007098 <vPortExitCritical>

		return xReturn;
	}
 80066da:	4628      	mov	r0, r5
 80066dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066de:	bf00      	nop
 80066e0:	2000119c 	.word	0x2000119c
 80066e4:	200010a0 	.word	0x200010a0
 80066e8:	20001138 	.word	0x20001138
 80066ec:	e000ed04 	.word	0xe000ed04

080066f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	9e08      	ldr	r6, [sp, #32]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80066f6:	b940      	cbnz	r0, 800670a <xTaskGenericNotifyFromISR+0x1a>
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	e7fe      	b.n	8006708 <xTaskGenericNotifyFromISR+0x18>
 800670a:	4604      	mov	r4, r0
 800670c:	4699      	mov	r9, r3
 800670e:	4615      	mov	r5, r2
 8006710:	4688      	mov	r8, r1
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006712:	f000 fd77 	bl	8007204 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006716:	f3ef 8711 	mrs	r7, BASEPRI
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
 800672a:	f1b9 0f00 	cmp.w	r9, #0
 800672e:	d002      	beq.n	8006736 <xTaskGenericNotifyFromISR+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006730:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006732:	f8c9 3000 	str.w	r3, [r9]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006736:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800673a:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800673c:	2202      	movs	r2, #2
 800673e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50

			switch( eAction )
 8006742:	1e6a      	subs	r2, r5, #1
 8006744:	2a03      	cmp	r2, #3
 8006746:	d818      	bhi.n	800677a <xTaskGenericNotifyFromISR+0x8a>
 8006748:	e8df f002 	tbb	[pc, r2]
 800674c:	110d0802 	.word	0x110d0802
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006750:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006752:	ea42 0208 	orr.w	r2, r2, r8
 8006756:	64e2      	str	r2, [r4, #76]	; 0x4c

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006758:	2501      	movs	r5, #1

			switch( eAction )
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;
 800675a:	e011      	b.n	8006780 <xTaskGenericNotifyFromISR+0x90>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800675c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800675e:	3201      	adds	r2, #1
 8006760:	64e2      	str	r2, [r4, #76]	; 0x4c

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006762:	2501      	movs	r5, #1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
 8006764:	e00c      	b.n	8006780 <xTaskGenericNotifyFromISR+0x90>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006766:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800676a:	2501      	movs	r5, #1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
 800676c:	e008      	b.n	8006780 <xTaskGenericNotifyFromISR+0x90>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800676e:	2b02      	cmp	r3, #2
 8006770:	d005      	beq.n	800677e <xTaskGenericNotifyFromISR+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006772:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006776:	2501      	movs	r5, #1
 8006778:	e002      	b.n	8006780 <xTaskGenericNotifyFromISR+0x90>
 800677a:	2501      	movs	r5, #1
 800677c:	e000      	b.n	8006780 <xTaskGenericNotifyFromISR+0x90>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 800677e:	2500      	movs	r5, #0

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006780:	2b01      	cmp	r3, #1
 8006782:	d135      	bne.n	80067f0 <xTaskGenericNotifyFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006784:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006786:	b143      	cbz	r3, 800679a <xTaskGenericNotifyFromISR+0xaa>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	e7fe      	b.n	8006798 <xTaskGenericNotifyFromISR+0xa8>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800679a:	4b18      	ldr	r3, [pc, #96]	; (80067fc <xTaskGenericNotifyFromISR+0x10c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	b9ab      	cbnz	r3, 80067cc <xTaskGenericNotifyFromISR+0xdc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a0:	f104 0804 	add.w	r8, r4, #4
 80067a4:	4640      	mov	r0, r8
 80067a6:	f7fe fc3d 	bl	8005024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067ac:	2201      	movs	r2, #1
 80067ae:	fa02 f103 	lsl.w	r1, r2, r3
 80067b2:	4813      	ldr	r0, [pc, #76]	; (8006800 <xTaskGenericNotifyFromISR+0x110>)
 80067b4:	6802      	ldr	r2, [r0, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	6002      	str	r2, [r0, #0]
 80067ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067be:	009a      	lsls	r2, r3, #2
 80067c0:	4641      	mov	r1, r8
 80067c2:	4810      	ldr	r0, [pc, #64]	; (8006804 <xTaskGenericNotifyFromISR+0x114>)
 80067c4:	4410      	add	r0, r2
 80067c6:	f7fe fc07 	bl	8004fd8 <vListInsertEnd>
 80067ca:	e004      	b.n	80067d6 <xTaskGenericNotifyFromISR+0xe6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80067cc:	f104 0118 	add.w	r1, r4, #24
 80067d0:	480d      	ldr	r0, [pc, #52]	; (8006808 <xTaskGenericNotifyFromISR+0x118>)
 80067d2:	f7fe fc01 	bl	8004fd8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067d8:	4b0c      	ldr	r3, [pc, #48]	; (800680c <xTaskGenericNotifyFromISR+0x11c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	429a      	cmp	r2, r3
 80067e0:	d906      	bls.n	80067f0 <xTaskGenericNotifyFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80067e2:	b116      	cbz	r6, 80067ea <xTaskGenericNotifyFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	6033      	str	r3, [r6, #0]
 80067e8:	e002      	b.n	80067f0 <xTaskGenericNotifyFromISR+0x100>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80067ea:	2201      	movs	r2, #1
 80067ec:	4b08      	ldr	r3, [pc, #32]	; (8006810 <xTaskGenericNotifyFromISR+0x120>)
 80067ee:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067f0:	f387 8811 	msr	BASEPRI, r7
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
 80067f4:	4628      	mov	r0, r5
 80067f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067fa:	bf00      	nop
 80067fc:	2000112c 	.word	0x2000112c
 8006800:	2000119c 	.word	0x2000119c
 8006804:	200010a0 	.word	0x200010a0
 8006808:	2000113c 	.word	0x2000113c
 800680c:	20001138 	.word	0x20001138
 8006810:	200011a0 	.word	0x200011a0

08006814 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <prvGetNextExpireTime+0x1c>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	6813      	ldr	r3, [r2, #0]
 800681a:	fab3 f383 	clz	r3, r3
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006822:	b913      	cbnz	r3, 800682a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006824:	68d3      	ldr	r3, [r2, #12]
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800682a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	200011a4 	.word	0x200011a4

08006834 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006834:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006836:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006838:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800683a:	4291      	cmp	r1, r2
 800683c:	d80a      	bhi.n	8006854 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	6983      	ldr	r3, [r0, #24]
 8006842:	429a      	cmp	r2, r3
 8006844:	d211      	bcs.n	800686a <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006846:	1d01      	adds	r1, r0, #4
 8006848:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <prvInsertTimerInActiveList+0x40>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	f7fe fbd0 	bl	8004ff0 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8006850:	2000      	movs	r0, #0
 8006852:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006854:	429a      	cmp	r2, r3
 8006856:	d201      	bcs.n	800685c <prvInsertTimerInActiveList+0x28>
 8006858:	4299      	cmp	r1, r3
 800685a:	d208      	bcs.n	800686e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800685c:	1d01      	adds	r1, r0, #4
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <prvInsertTimerInActiveList+0x44>)
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	f7fe fbc5 	bl	8004ff0 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8006866:	2000      	movs	r0, #0
 8006868:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800686a:	2001      	movs	r0, #1
 800686c:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800686e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006870:	bd08      	pop	{r3, pc}
 8006872:	bf00      	nop
 8006874:	20001220 	.word	0x20001220
 8006878:	200011a4 	.word	0x200011a4

0800687c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800687c:	b530      	push	{r4, r5, lr}
 800687e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006880:	f000 fbe8 	bl	8007054 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006884:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <prvCheckForValidListAndQueue+0x4c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	b9cb      	cbnz	r3, 80068be <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
 800688a:	4d10      	ldr	r5, [pc, #64]	; (80068cc <prvCheckForValidListAndQueue+0x50>)
 800688c:	4628      	mov	r0, r5
 800688e:	f7fe fb93 	bl	8004fb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006892:	4c0f      	ldr	r4, [pc, #60]	; (80068d0 <prvCheckForValidListAndQueue+0x54>)
 8006894:	4620      	mov	r0, r4
 8006896:	f7fe fb8f 	bl	8004fb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800689a:	4b0e      	ldr	r3, [pc, #56]	; (80068d4 <prvCheckForValidListAndQueue+0x58>)
 800689c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800689e:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <prvCheckForValidListAndQueue+0x5c>)
 80068a0:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue;
				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068a2:	2300      	movs	r3, #0
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <prvCheckForValidListAndQueue+0x60>)
 80068a8:	4a0d      	ldr	r2, [pc, #52]	; (80068e0 <prvCheckForValidListAndQueue+0x64>)
 80068aa:	210c      	movs	r1, #12
 80068ac:	200a      	movs	r0, #10
 80068ae:	f7fe fcb9 	bl	8005224 <xQueueGenericCreateStatic>
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <prvCheckForValidListAndQueue+0x4c>)
 80068b4:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068b6:	b110      	cbz	r0, 80068be <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068b8:	490a      	ldr	r1, [pc, #40]	; (80068e4 <prvCheckForValidListAndQueue+0x68>)
 80068ba:	f7fe ff99 	bl	80057f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068be:	f000 fbeb 	bl	8007098 <vPortExitCritical>
}
 80068c2:	b003      	add	sp, #12
 80068c4:	bd30      	pop	{r4, r5, pc}
 80068c6:	bf00      	nop
 80068c8:	2000121c 	.word	0x2000121c
 80068cc:	200011a8 	.word	0x200011a8
 80068d0:	200011bc 	.word	0x200011bc
 80068d4:	200011a4 	.word	0x200011a4
 80068d8:	20001220 	.word	0x20001220
 80068dc:	200011d0 	.word	0x200011d0
 80068e0:	20001228 	.word	0x20001228
 80068e4:	0800e930 	.word	0x0800e930

080068e8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80068e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ec:	9c07      	ldr	r4, [sp, #28]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80068ee:	b941      	cbnz	r1, 8006902 <prvInitialiseNewTimer+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	e7fe      	b.n	8006900 <prvInitialiseNewTimer+0x18>
 8006902:	460f      	mov	r7, r1

	if( pxNewTimer != NULL )
 8006904:	b174      	cbz	r4, 8006924 <prvInitialiseNewTimer+0x3c>
 8006906:	461d      	mov	r5, r3
 8006908:	4616      	mov	r6, r2
 800690a:	4680      	mov	r8, r0
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800690c:	f7ff ffb6 	bl	800687c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006910:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006914:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006916:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006918:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800691a:	9b06      	ldr	r3, [sp, #24]
 800691c:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800691e:	1d20      	adds	r0, r4, #4
 8006920:	f7fe fb56 	bl	8004fd0 <vListInitialiseItem>
 8006924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006928 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006928:	b510      	push	{r4, lr}
 800692a:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800692c:	f7ff ffa6 	bl	800687c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006930:	4b15      	ldr	r3, [pc, #84]	; (8006988 <xTimerCreateTimerTask+0x60>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b1d3      	cbz	r3, 800696c <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006936:	2400      	movs	r4, #0
 8006938:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800693a:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800693c:	aa07      	add	r2, sp, #28
 800693e:	a906      	add	r1, sp, #24
 8006940:	a805      	add	r0, sp, #20
 8006942:	f7fd f88b 	bl	8003a5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006946:	9b05      	ldr	r3, [sp, #20]
 8006948:	9302      	str	r3, [sp, #8]
 800694a:	9b06      	ldr	r3, [sp, #24]
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	2302      	movs	r3, #2
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	4623      	mov	r3, r4
 8006954:	9a07      	ldr	r2, [sp, #28]
 8006956:	490d      	ldr	r1, [pc, #52]	; (800698c <xTimerCreateTimerTask+0x64>)
 8006958:	480d      	ldr	r0, [pc, #52]	; (8006990 <xTimerCreateTimerTask+0x68>)
 800695a:	f7ff f8e1 	bl	8005b20 <xTaskCreateStatic>
 800695e:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <xTimerCreateTimerTask+0x6c>)
 8006960:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006962:	b908      	cbnz	r0, 8006968 <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8006964:	4620      	mov	r0, r4
 8006966:	e002      	b.n	800696e <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
 8006968:	2001      	movs	r0, #1
 800696a:	e000      	b.n	800696e <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 800696c:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800696e:	b940      	cbnz	r0, 8006982 <xTimerCreateTimerTask+0x5a>
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	e7fe      	b.n	8006980 <xTimerCreateTimerTask+0x58>
	return xReturn;
}
 8006982:	b008      	add	sp, #32
 8006984:	bd10      	pop	{r4, pc}
 8006986:	bf00      	nop
 8006988:	2000121c 	.word	0x2000121c
 800698c:	0800e938 	.word	0x0800e938
 8006990:	08006c79 	.word	0x08006c79
 8006994:	20001224 	.word	0x20001224

08006998 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	4605      	mov	r5, r0
 80069a0:	460e      	mov	r6, r1
 80069a2:	4617      	mov	r7, r2
 80069a4:	4698      	mov	r8, r3
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80069a6:	202c      	movs	r0, #44	; 0x2c
 80069a8:	f000 fa3c 	bl	8006e24 <pvPortMalloc>

		if( pxNewTimer != NULL )
 80069ac:	4604      	mov	r4, r0
 80069ae:	b158      	cbz	r0, 80069c8 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80069b0:	9001      	str	r0, [sp, #4]
 80069b2:	9b08      	ldr	r3, [sp, #32]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	4643      	mov	r3, r8
 80069b8:	463a      	mov	r2, r7
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	f7ff ff93 	bl	80068e8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
	}
 80069c8:	4620      	mov	r0, r4
 80069ca:	b002      	add	sp, #8
 80069cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080069d0 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069d0:	b940      	cbnz	r0, 80069e4 <xTimerGenericCommand+0x14>
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	e7fe      	b.n	80069e2 <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80069e4:	b530      	push	{r4, r5, lr}
 80069e6:	b085      	sub	sp, #20
 80069e8:	4615      	mov	r5, r2
 80069ea:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069ec:	4a12      	ldr	r2, [pc, #72]	; (8006a38 <xTimerGenericCommand+0x68>)
 80069ee:	6810      	ldr	r0, [r2, #0]
 80069f0:	b1f0      	cbz	r0, 8006a30 <xTimerGenericCommand+0x60>
 80069f2:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069f4:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069f6:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80069f8:	9403      	str	r4, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069fa:	2905      	cmp	r1, #5
 80069fc:	dc13      	bgt.n	8006a26 <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069fe:	f7ff fced 	bl	80063dc <xTaskGetSchedulerState>
 8006a02:	2802      	cmp	r0, #2
 8006a04:	d107      	bne.n	8006a16 <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a06:	2300      	movs	r3, #0
 8006a08:	9a08      	ldr	r2, [sp, #32]
 8006a0a:	a901      	add	r1, sp, #4
 8006a0c:	480a      	ldr	r0, [pc, #40]	; (8006a38 <xTimerGenericCommand+0x68>)
 8006a0e:	6800      	ldr	r0, [r0, #0]
 8006a10:	f7fe fc86 	bl	8005320 <xQueueGenericSend>
 8006a14:	e00d      	b.n	8006a32 <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a16:	2300      	movs	r3, #0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	a901      	add	r1, sp, #4
 8006a1c:	4806      	ldr	r0, [pc, #24]	; (8006a38 <xTimerGenericCommand+0x68>)
 8006a1e:	6800      	ldr	r0, [r0, #0]
 8006a20:	f7fe fc7e 	bl	8005320 <xQueueGenericSend>
 8006a24:	e005      	b.n	8006a32 <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a26:	2300      	movs	r3, #0
 8006a28:	a901      	add	r1, sp, #4
 8006a2a:	f7fe fd41 	bl	80054b0 <xQueueGenericSendFromISR>
 8006a2e:	e000      	b.n	8006a32 <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 8006a30:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8006a32:	b005      	add	sp, #20
 8006a34:	bd30      	pop	{r4, r5, pc}
 8006a36:	bf00      	nop
 8006a38:	2000121c 	.word	0x2000121c

08006a3c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a40:	e029      	b.n	8006a96 <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a46:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a48:	1d25      	adds	r5, r4, #4
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f7fe faea 	bl	8005024 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a52:	4620      	mov	r0, r4
 8006a54:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a56:	69e3      	ldr	r3, [r4, #28]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d11c      	bne.n	8006a96 <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a5c:	69a3      	ldr	r3, [r4, #24]
 8006a5e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8006a60:	429e      	cmp	r6, r3
 8006a62:	d207      	bcs.n	8006a74 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a64:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a66:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <prvSwitchTimerLists+0x74>)
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	f7fe fabf 	bl	8004ff0 <vListInsert>
 8006a72:	e010      	b.n	8006a96 <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a74:	2100      	movs	r1, #0
 8006a76:	9100      	str	r1, [sp, #0]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4632      	mov	r2, r6
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7ff ffa7 	bl	80069d0 <xTimerGenericCommand>
				configASSERT( xResult );
 8006a82:	b940      	cbnz	r0, 8006a96 <prvSwitchTimerLists+0x5a>
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	e7fe      	b.n	8006a94 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a96:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <prvSwitchTimerLists+0x74>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	d1d0      	bne.n	8006a42 <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8006aa0:	4a04      	ldr	r2, [pc, #16]	; (8006ab4 <prvSwitchTimerLists+0x78>)
 8006aa2:	6810      	ldr	r0, [r2, #0]
 8006aa4:	4902      	ldr	r1, [pc, #8]	; (8006ab0 <prvSwitchTimerLists+0x74>)
 8006aa6:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8006aa8:	6013      	str	r3, [r2, #0]
}
 8006aaa:	b002      	add	sp, #8
 8006aac:	bd70      	pop	{r4, r5, r6, pc}
 8006aae:	bf00      	nop
 8006ab0:	200011a4 	.word	0x200011a4
 8006ab4:	20001220 	.word	0x20001220

08006ab8 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006abc:	f7ff f960 	bl	8005d80 <xTaskGetTickCount>
 8006ac0:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <prvSampleTimeNow+0x28>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4298      	cmp	r0, r3
 8006ac8:	d204      	bcs.n	8006ad4 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
 8006aca:	f7ff ffb7 	bl	8006a3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	e001      	b.n	8006ad8 <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
 8006ad8:	4b01      	ldr	r3, [pc, #4]	; (8006ae0 <prvSampleTimeNow+0x28>)
 8006ada:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
 8006adc:	4620      	mov	r0, r4
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	20001218 	.word	0x20001218

08006ae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	4605      	mov	r5, r0
 8006aea:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aec:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <prvProcessExpiredTimer+0x58>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006af4:	1d20      	adds	r0, r4, #4
 8006af6:	f7fe fa95 	bl	8005024 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006afa:	69e3      	ldr	r3, [r4, #28]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d118      	bne.n	8006b32 <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b00:	69a1      	ldr	r1, [r4, #24]
 8006b02:	462b      	mov	r3, r5
 8006b04:	4632      	mov	r2, r6
 8006b06:	4429      	add	r1, r5
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7ff fe93 	bl	8006834 <prvInsertTimerInActiveList>
 8006b0e:	b180      	cbz	r0, 8006b32 <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b10:	2100      	movs	r1, #0
 8006b12:	9100      	str	r1, [sp, #0]
 8006b14:	460b      	mov	r3, r1
 8006b16:	462a      	mov	r2, r5
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f7ff ff59 	bl	80069d0 <xTimerGenericCommand>
			configASSERT( xResult );
 8006b1e:	b940      	cbnz	r0, 8006b32 <prvProcessExpiredTimer+0x4e>
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	e7fe      	b.n	8006b30 <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b34:	4620      	mov	r0, r4
 8006b36:	4798      	blx	r3
}
 8006b38:	b002      	add	sp, #8
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	200011a4 	.word	0x200011a4

08006b40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	4606      	mov	r6, r0
 8006b46:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b48:	f7ff f912 	bl	8005d70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b4c:	a801      	add	r0, sp, #4
 8006b4e:	f7ff ffb3 	bl	8006ab8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8006b52:	9b01      	ldr	r3, [sp, #4]
 8006b54:	bb1b      	cbnz	r3, 8006b9e <prvProcessTimerOrBlockTask+0x5e>
 8006b56:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b58:	b944      	cbnz	r4, 8006b6c <prvProcessTimerOrBlockTask+0x2c>
 8006b5a:	42b0      	cmp	r0, r6
 8006b5c:	d306      	bcc.n	8006b6c <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
 8006b5e:	f7ff f9a7 	bl	8005eb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b62:	4629      	mov	r1, r5
 8006b64:	4630      	mov	r0, r6
 8006b66:	f7ff ffbd 	bl	8006ae4 <prvProcessExpiredTimer>
 8006b6a:	e01a      	b.n	8006ba2 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8006b6c:	b12c      	cbz	r4, 8006b7a <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <prvProcessTimerOrBlockTask+0x68>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681c      	ldr	r4, [r3, #0]
 8006b74:	fab4 f484 	clz	r4, r4
 8006b78:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	1b71      	subs	r1, r6, r5
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <prvProcessTimerOrBlockTask+0x6c>)
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f7fe fe49 	bl	8005818 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8006b86:	f7ff f993 	bl	8005eb0 <xTaskResumeAll>
 8006b8a:	b950      	cbnz	r0, 8006ba2 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8006b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b90:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <prvProcessTimerOrBlockTask+0x70>)
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	e001      	b.n	8006ba2 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8006b9e:	f7ff f987 	bl	8005eb0 <xTaskResumeAll>
		}
	}
}
 8006ba2:	b002      	add	sp, #8
 8006ba4:	bd70      	pop	{r4, r5, r6, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20001220 	.word	0x20001220
 8006bac:	2000121c 	.word	0x2000121c
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bb4:	b530      	push	{r4, r5, lr}
 8006bb6:	b087      	sub	sp, #28
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bb8:	e050      	b.n	8006c5c <prvProcessReceivedCommands+0xa8>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bba:	9b03      	ldr	r3, [sp, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	db4d      	blt.n	8006c5c <prvProcessReceivedCommands+0xa8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bc0:	9c05      	ldr	r4, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8006bc2:	6963      	ldr	r3, [r4, #20]
 8006bc4:	b113      	cbz	r3, 8006bcc <prvProcessReceivedCommands+0x18>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bc6:	1d20      	adds	r0, r4, #4
 8006bc8:	f7fe fa2c 	bl	8005024 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bcc:	a802      	add	r0, sp, #8
 8006bce:	f7ff ff73 	bl	8006ab8 <prvSampleTimeNow>

			switch( xMessage.xMessageID )
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	2b09      	cmp	r3, #9
 8006bd6:	d841      	bhi.n	8006c5c <prvProcessReceivedCommands+0xa8>
 8006bd8:	e8df f003 	tbb	[pc, r3]
 8006bdc:	40050505 	.word	0x40050505
 8006be0:	05053a27 	.word	0x05053a27
 8006be4:	2740      	.short	0x2740
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006be6:	9904      	ldr	r1, [sp, #16]
 8006be8:	69a5      	ldr	r5, [r4, #24]
 8006bea:	460b      	mov	r3, r1
 8006bec:	4602      	mov	r2, r0
 8006bee:	4429      	add	r1, r5
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7ff fe1f 	bl	8006834 <prvInsertTimerInActiveList>
 8006bf6:	b388      	cbz	r0, 8006c5c <prvProcessReceivedCommands+0xa8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bfe:	69e3      	ldr	r3, [r4, #28]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d12b      	bne.n	8006c5c <prvProcessReceivedCommands+0xa8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c04:	69a2      	ldr	r2, [r4, #24]
 8006c06:	2100      	movs	r1, #0
 8006c08:	9100      	str	r1, [sp, #0]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	9804      	ldr	r0, [sp, #16]
 8006c0e:	4402      	add	r2, r0
 8006c10:	4620      	mov	r0, r4
 8006c12:	f7ff fedd 	bl	80069d0 <xTimerGenericCommand>
							configASSERT( xResult );
 8006c16:	bb08      	cbnz	r0, 8006c5c <prvProcessReceivedCommands+0xa8>
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	e7fe      	b.n	8006c28 <prvProcessReceivedCommands+0x74>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c2a:	9904      	ldr	r1, [sp, #16]
 8006c2c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c2e:	b941      	cbnz	r1, 8006c42 <prvProcessReceivedCommands+0x8e>
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	e7fe      	b.n	8006c40 <prvProcessReceivedCommands+0x8c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c42:	4603      	mov	r3, r0
 8006c44:	4602      	mov	r2, r0
 8006c46:	4401      	add	r1, r0
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f7ff fdf3 	bl	8006834 <prvInsertTimerInActiveList>
					break;
 8006c4e:	e005      	b.n	8006c5c <prvProcessReceivedCommands+0xa8>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c50:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006c54:	b913      	cbnz	r3, 8006c5c <prvProcessReceivedCommands+0xa8>
						{
							vPortFree( pxTimer );
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 f966 	bl	8006f28 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	461a      	mov	r2, r3
 8006c60:	a903      	add	r1, sp, #12
 8006c62:	4804      	ldr	r0, [pc, #16]	; (8006c74 <prvProcessReceivedCommands+0xc0>)
 8006c64:	6800      	ldr	r0, [r0, #0]
 8006c66:	f7fe fcf3 	bl	8005650 <xQueueGenericReceive>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d1a5      	bne.n	8006bba <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8006c6e:	b007      	add	sp, #28
 8006c70:	bd30      	pop	{r4, r5, pc}
 8006c72:	bf00      	nop
 8006c74:	2000121c 	.word	0x2000121c

08006c78 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006c78:	b500      	push	{lr}
 8006c7a:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c7c:	a801      	add	r0, sp, #4
 8006c7e:	f7ff fdc9 	bl	8006814 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c82:	9901      	ldr	r1, [sp, #4]
 8006c84:	f7ff ff5c 	bl	8006b40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c88:	f7ff ff94 	bl	8006bb4 <prvProcessReceivedCommands>
 8006c8c:	e7f6      	b.n	8006c7c <prvTimerTask+0x4>
 8006c8e:	bf00      	nop

08006c90 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8006c90:	2884      	cmp	r0, #132	; 0x84
 8006c92:	d001      	beq.n	8006c98 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8006c94:	3003      	adds	r0, #3
 8006c96:	4770      	bx	lr
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c98:	2000      	movs	r0, #0
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
  }
  
  return fpriority;
}
 8006c9a:	4770      	bx	lr

08006c9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c9c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006c9e:	f7ff f81b 	bl	8005cd8 <vTaskStartScheduler>
  
  return osOK;
}
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	bd08      	pop	{r3, pc}
 8006ca6:	bf00      	nop

08006ca8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cac:	b087      	sub	sp, #28
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006cb2:	6945      	ldr	r5, [r0, #20]
 8006cb4:	b1a5      	cbz	r5, 8006ce0 <osThreadCreate+0x38>
 8006cb6:	6986      	ldr	r6, [r0, #24]
 8006cb8:	b196      	cbz	r6, 8006ce0 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cba:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006cbe:	f8d0 9000 	ldr.w	r9, [r0]
 8006cc2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006cc6:	f7ff ffe3 	bl	8006c90 <makeFreeRtosPriority>
 8006cca:	6922      	ldr	r2, [r4, #16]
 8006ccc:	9602      	str	r6, [sp, #8]
 8006cce:	9501      	str	r5, [sp, #4]
 8006cd0:	9000      	str	r0, [sp, #0]
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	f7fe ff22 	bl	8005b20 <xTaskCreateStatic>
 8006cdc:	9005      	str	r0, [sp, #20]
 8006cde:	e013      	b.n	8006d08 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ce0:	6865      	ldr	r5, [r4, #4]
 8006ce2:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ce4:	f8d4 8010 	ldr.w	r8, [r4, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ce8:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8006cec:	f7ff ffd0 	bl	8006c90 <makeFreeRtosPriority>
 8006cf0:	ab05      	add	r3, sp, #20
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	9000      	str	r0, [sp, #0]
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	fa1f f288 	uxth.w	r2, r8
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f7fe ff3e 	bl	8005b80 <xTaskCreate>
 8006d04:	2801      	cmp	r0, #1
 8006d06:	d101      	bne.n	8006d0c <osThreadCreate+0x64>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d08:	9805      	ldr	r0, [sp, #20]
 8006d0a:	e000      	b.n	8006d0e <osThreadCreate+0x66>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
      return NULL;
 8006d0c:	2000      	movs	r0, #0
    return NULL;
  }     
#endif
  
  return handle;
}
 8006d0e:	b007      	add	sp, #28
 8006d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006d14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d14:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d16:	b908      	cbnz	r0, 8006d1c <osDelay+0x8>
 8006d18:	2001      	movs	r0, #1
 8006d1a:	e7ff      	b.n	8006d1c <osDelay+0x8>
 8006d1c:	f7ff f944 	bl	8005fa8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d20:	2000      	movs	r0, #0
 8006d22:	bd08      	pop	{r3, pc}

08006d24 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006d24:	b510      	push	{r4, lr}
 8006d26:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006d28:	6843      	ldr	r3, [r0, #4]
 8006d2a:	b14b      	cbz	r3, 8006d40 <osSemaphoreCreate+0x1c>
    if (count == 1) {
 8006d2c:	2901      	cmp	r1, #1
 8006d2e:	d117      	bne.n	8006d60 <osSemaphoreCreate+0x3c>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006d30:	2203      	movs	r2, #3
 8006d32:	9200      	str	r2, [sp, #0]
 8006d34:	2200      	movs	r2, #0
 8006d36:	4611      	mov	r1, r2
 8006d38:	2001      	movs	r0, #1
 8006d3a:	f7fe fa73 	bl	8005224 <xQueueGenericCreateStatic>
 8006d3e:	e013      	b.n	8006d68 <osSemaphoreCreate+0x44>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8006d40:	2901      	cmp	r1, #1
 8006d42:	d10f      	bne.n	8006d64 <osSemaphoreCreate+0x40>
      vSemaphoreCreateBinary(sema);
 8006d44:	2203      	movs	r2, #3
 8006d46:	2100      	movs	r1, #0
 8006d48:	2001      	movs	r0, #1
 8006d4a:	f7fe fac1 	bl	80052d0 <xQueueGenericCreate>
 8006d4e:	4604      	mov	r4, r0
 8006d50:	b150      	cbz	r0, 8006d68 <osSemaphoreCreate+0x44>
 8006d52:	2300      	movs	r3, #0
 8006d54:	461a      	mov	r2, r3
 8006d56:	4619      	mov	r1, r3
 8006d58:	f7fe fae2 	bl	8005320 <xQueueGenericSend>
      return sema;
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	e003      	b.n	8006d68 <osSemaphoreCreate+0x44>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006d60:	2000      	movs	r0, #0
 8006d62:	e001      	b.n	8006d68 <osSemaphoreCreate+0x44>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006d64:	2000      	movs	r0, #0
 8006d66:	e7ff      	b.n	8006d68 <osSemaphoreCreate+0x44>
#else
    return NULL;
#endif
  }
#endif
}
 8006d68:	b002      	add	sp, #8
 8006d6a:	bd10      	pop	{r4, pc}

08006d6c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d6c:	4a12      	ldr	r2, [pc, #72]	; (8006db8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d6e:	f012 0f07 	tst.w	r2, #7
 8006d72:	d007      	beq.n	8006d84 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d74:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d76:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d7a:	f5c1 53e1 	rsb	r3, r1, #7200	; 0x1c20
 8006d7e:	4413      	add	r3, r2
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d80:	460a      	mov	r2, r1
 8006d82:	e001      	b.n	8006d88 <prvHeapInit+0x1c>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d84:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d88:	480c      	ldr	r0, [pc, #48]	; (8006dbc <prvHeapInit+0x50>)
 8006d8a:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d90:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006d92:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d94:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006d98:	4809      	ldr	r0, [pc, #36]	; (8006dc0 <prvHeapInit+0x54>)
 8006d9a:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006d9c:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d9e:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006da0:	1a99      	subs	r1, r3, r2
 8006da2:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006da4:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <prvHeapInit+0x58>)
 8006da8:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006daa:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <prvHeapInit+0x5c>)
 8006dac:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <prvHeapInit+0x60>)
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	4770      	bx	lr
 8006db8:	200012b0 	.word	0x200012b0
 8006dbc:	200012a8 	.word	0x200012a8
 8006dc0:	200012a4 	.word	0x200012a4
 8006dc4:	20002ed4 	.word	0x20002ed4
 8006dc8:	200012a0 	.word	0x200012a0
 8006dcc:	20002ed0 	.word	0x20002ed0

08006dd0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dd0:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <prvInsertBlockIntoFreeList+0x4c>)
 8006dd2:	e000      	b.n	8006dd6 <prvInsertBlockIntoFreeList+0x6>
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	4282      	cmp	r2, r0
 8006dda:	d3fb      	bcc.n	8006dd4 <prvInsertBlockIntoFreeList+0x4>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ddc:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dde:	685c      	ldr	r4, [r3, #4]
 8006de0:	1919      	adds	r1, r3, r4
 8006de2:	4288      	cmp	r0, r1
 8006de4:	d103      	bne.n	8006dee <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006de6:	6841      	ldr	r1, [r0, #4]
 8006de8:	4421      	add	r1, r4
 8006dea:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dec:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dee:	6844      	ldr	r4, [r0, #4]
 8006df0:	1901      	adds	r1, r0, r4
 8006df2:	428a      	cmp	r2, r1
 8006df4:	d10c      	bne.n	8006e10 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006df6:	490a      	ldr	r1, [pc, #40]	; (8006e20 <prvInsertBlockIntoFreeList+0x50>)
 8006df8:	6809      	ldr	r1, [r1, #0]
 8006dfa:	428a      	cmp	r2, r1
 8006dfc:	d006      	beq.n	8006e0c <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dfe:	6852      	ldr	r2, [r2, #4]
 8006e00:	4422      	add	r2, r4
 8006e02:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	6002      	str	r2, [r0, #0]
 8006e0a:	e002      	b.n	8006e12 <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e0c:	6001      	str	r1, [r0, #0]
 8006e0e:	e000      	b.n	8006e12 <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e10:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e12:	4298      	cmp	r0, r3
 8006e14:	d000      	beq.n	8006e18 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e16:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e18:	bc10      	pop	{r4}
 8006e1a:	4770      	bx	lr
 8006e1c:	200012a8 	.word	0x200012a8
 8006e20:	200012a4 	.word	0x200012a4

08006e24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8006e28:	f7fe ffa2 	bl	8005d70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e2c:	4b39      	ldr	r3, [pc, #228]	; (8006f14 <pvPortMalloc+0xf0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	b90b      	cbnz	r3, 8006e36 <pvPortMalloc+0x12>
		{
			prvHeapInit();
 8006e32:	f7ff ff9b 	bl	8006d6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e36:	4b38      	ldr	r3, [pc, #224]	; (8006f18 <pvPortMalloc+0xf4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	421c      	tst	r4, r3
 8006e3c:	d153      	bne.n	8006ee6 <pvPortMalloc+0xc2>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e3e:	b194      	cbz	r4, 8006e66 <pvPortMalloc+0x42>
			{
				xWantedSize += xHeapStructSize;
 8006e40:	3408      	adds	r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e42:	f014 0f07 	tst.w	r4, #7
 8006e46:	d00e      	beq.n	8006e66 <pvPortMalloc+0x42>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e48:	f024 0407 	bic.w	r4, r4, #7
 8006e4c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e4e:	f004 0307 	and.w	r3, r4, #7
 8006e52:	b143      	cbz	r3, 8006e66 <pvPortMalloc+0x42>
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	e7fe      	b.n	8006e64 <pvPortMalloc+0x40>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	d03f      	beq.n	8006eea <pvPortMalloc+0xc6>
 8006e6a:	4b2c      	ldr	r3, [pc, #176]	; (8006f1c <pvPortMalloc+0xf8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	429c      	cmp	r4, r3
 8006e70:	d83d      	bhi.n	8006eee <pvPortMalloc+0xca>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8006e72:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <pvPortMalloc+0xfc>)
 8006e74:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e76:	e001      	b.n	8006e7c <pvPortMalloc+0x58>
				{
					pxPreviousBlock = pxBlock;
 8006e78:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e7a:	4615      	mov	r5, r2
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e7c:	686a      	ldr	r2, [r5, #4]
 8006e7e:	4294      	cmp	r4, r2
 8006e80:	d902      	bls.n	8006e88 <pvPortMalloc+0x64>
 8006e82:	682a      	ldr	r2, [r5, #0]
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	d1f7      	bne.n	8006e78 <pvPortMalloc+0x54>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e88:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <pvPortMalloc+0xf0>)
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	4295      	cmp	r5, r2
 8006e8e:	d030      	beq.n	8006ef2 <pvPortMalloc+0xce>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e90:	681e      	ldr	r6, [r3, #0]
 8006e92:	3608      	adds	r6, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e94:	682a      	ldr	r2, [r5, #0]
 8006e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e98:	686b      	ldr	r3, [r5, #4]
 8006e9a:	1b1b      	subs	r3, r3, r4
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d910      	bls.n	8006ec2 <pvPortMalloc+0x9e>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ea0:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea2:	f010 0f07 	tst.w	r0, #7
 8006ea6:	d008      	beq.n	8006eba <pvPortMalloc+0x96>
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	e7fe      	b.n	8006eb8 <pvPortMalloc+0x94>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006eba:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ebc:	606c      	str	r4, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ebe:	f7ff ff87 	bl	8006dd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ec2:	686a      	ldr	r2, [r5, #4]
 8006ec4:	4915      	ldr	r1, [pc, #84]	; (8006f1c <pvPortMalloc+0xf8>)
 8006ec6:	680b      	ldr	r3, [r1, #0]
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ecc:	4915      	ldr	r1, [pc, #84]	; (8006f24 <pvPortMalloc+0x100>)
 8006ece:	6809      	ldr	r1, [r1, #0]
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	d201      	bcs.n	8006ed8 <pvPortMalloc+0xb4>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ed4:	4913      	ldr	r1, [pc, #76]	; (8006f24 <pvPortMalloc+0x100>)
 8006ed6:	600b      	str	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <pvPortMalloc+0xf4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	431a      	orrs	r2, r3
 8006ede:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	e006      	b.n	8006ef4 <pvPortMalloc+0xd0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	e004      	b.n	8006ef4 <pvPortMalloc+0xd0>
 8006eea:	2600      	movs	r6, #0
 8006eec:	e002      	b.n	8006ef4 <pvPortMalloc+0xd0>
 8006eee:	2600      	movs	r6, #0
 8006ef0:	e000      	b.n	8006ef4 <pvPortMalloc+0xd0>
 8006ef2:	2600      	movs	r6, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ef4:	f7fe ffdc 	bl	8005eb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef8:	f016 0f07 	tst.w	r6, #7
 8006efc:	d008      	beq.n	8006f10 <pvPortMalloc+0xec>
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	e7fe      	b.n	8006f0e <pvPortMalloc+0xea>
	return pvReturn;
}
 8006f10:	4630      	mov	r0, r6
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	200012a4 	.word	0x200012a4
 8006f18:	20002ed0 	.word	0x20002ed0
 8006f1c:	200012a0 	.word	0x200012a0
 8006f20:	200012a8 	.word	0x200012a8
 8006f24:	20002ed4 	.word	0x20002ed4

08006f28 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f28:	b3a0      	cbz	r0, 8006f94 <vPortFree+0x6c>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f2a:	b538      	push	{r3, r4, r5, lr}
 8006f2c:	4603      	mov	r3, r0

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f2e:	f1a0 0508 	sub.w	r5, r0, #8

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f32:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006f36:	4918      	ldr	r1, [pc, #96]	; (8006f98 <vPortFree+0x70>)
 8006f38:	6809      	ldr	r1, [r1, #0]
 8006f3a:	ea12 0401 	ands.w	r4, r2, r1
 8006f3e:	d108      	bne.n	8006f52 <vPortFree+0x2a>
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	e7fe      	b.n	8006f50 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f52:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8006f56:	b140      	cbz	r0, 8006f6a <vPortFree+0x42>
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	e7fe      	b.n	8006f68 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f6a:	b194      	cbz	r4, 8006f92 <vPortFree+0x6a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f6c:	b988      	cbnz	r0, 8006f92 <vPortFree+0x6a>
 8006f6e:	461c      	mov	r4, r3
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f70:	ea22 0201 	bic.w	r2, r2, r1
 8006f74:	f843 2c04 	str.w	r2, [r3, #-4]

				vTaskSuspendAll();
 8006f78:	f7fe fefa 	bl	8005d70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f7c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006f80:	4a06      	ldr	r2, [pc, #24]	; (8006f9c <vPortFree+0x74>)
 8006f82:	6811      	ldr	r1, [r2, #0]
 8006f84:	440b      	add	r3, r1
 8006f86:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f7ff ff21 	bl	8006dd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f8e:	f7fe ff8f 	bl	8005eb0 <xTaskResumeAll>
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20002ed0 	.word	0x20002ed0
 8006f9c:	200012a0 	.word	0x200012a0

08006fa0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
 8006fa0:	4b01      	ldr	r3, [pc, #4]	; (8006fa8 <xPortGetFreeHeapSize+0x8>)
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	200012a0 	.word	0x200012a0

08006fac <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fac:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <prvTaskExitError+0x30>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb4:	d008      	beq.n	8006fc8 <prvTaskExitError+0x1c>
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	e7fe      	b.n	8006fc6 <prvTaskExitError+0x1a>
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	e7fe      	b.n	8006fd8 <prvTaskExitError+0x2c>
 8006fda:	bf00      	nop
 8006fdc:	20000008 	.word	0x20000008

08006fe0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006fe0:	4806      	ldr	r0, [pc, #24]	; (8006ffc <prvPortStartFirstTask+0x1c>)
 8006fe2:	6800      	ldr	r0, [r0, #0]
 8006fe4:	6800      	ldr	r0, [r0, #0]
 8006fe6:	f380 8808 	msr	MSP, r0
 8006fea:	b662      	cpsie	i
 8006fec:	b661      	cpsie	f
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	df00      	svc	0
 8006ff8:	bf00      	nop
 8006ffa:	0000      	.short	0x0000
 8006ffc:	e000ed08 	.word	0xe000ed08

08007000 <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007004:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007008:	f021 0101 	bic.w	r1, r1, #1
 800700c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007010:	4b03      	ldr	r3, [pc, #12]	; (8007020 <pxPortInitialiseStack+0x20>)
 8007012:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007016:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800701a:	3840      	subs	r0, #64	; 0x40
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	08006fad 	.word	0x08006fad
	...

08007030 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <pxCurrentTCBConst2>)
 8007032:	6819      	ldr	r1, [r3, #0]
 8007034:	6808      	ldr	r0, [r1, #0]
 8007036:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800703a:	f380 8809 	msr	PSP, r0
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f380 8811 	msr	BASEPRI, r0
 800704a:	f04e 0e0d 	orr.w	lr, lr, #13
 800704e:	4770      	bx	lr

08007050 <pxCurrentTCBConst2>:
 8007050:	20001138 	.word	0x20001138

08007054 <vPortEnterCritical>:
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007064:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <vPortEnterCritical+0x3c>)
 8007066:	6813      	ldr	r3, [r2, #0]
 8007068:	3301      	adds	r3, #1
 800706a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800706c:	2b01      	cmp	r3, #1
 800706e:	d10d      	bne.n	800708c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007070:	4b08      	ldr	r3, [pc, #32]	; (8007094 <vPortEnterCritical+0x40>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007078:	d008      	beq.n	800708c <vPortEnterCritical+0x38>
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	e7fe      	b.n	800708a <vPortEnterCritical+0x36>
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000008 	.word	0x20000008
 8007094:	e000ed04 	.word	0xe000ed04

08007098 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007098:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <vPortExitCritical+0x28>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	b943      	cbnz	r3, 80070b0 <vPortExitCritical+0x18>
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	e7fe      	b.n	80070ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80070b0:	3b01      	subs	r3, #1
 80070b2:	4a03      	ldr	r2, [pc, #12]	; (80070c0 <vPortExitCritical+0x28>)
 80070b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070b6:	b90b      	cbnz	r3, 80070bc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	20000008 	.word	0x20000008
	...

080070d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070d0:	f3ef 8009 	mrs	r0, PSP
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <pxCurrentTCBConst>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070e0:	6010      	str	r0, [r2, #0]
 80070e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80070e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070ea:	f380 8811 	msr	BASEPRI, r0
 80070ee:	f7fe ffc1 	bl	8006074 <vTaskSwitchContext>
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f380 8811 	msr	BASEPRI, r0
 80070fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	6808      	ldr	r0, [r1, #0]
 8007102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007106:	f380 8809 	msr	PSP, r0
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	4770      	bx	lr

08007110 <pxCurrentTCBConst>:
 8007110:	20001138 	.word	0x20001138

08007114 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007114:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007126:	f7fe fe31 	bl	8005d8c <xTaskIncrementTick>
 800712a:	b118      	cbz	r0, 8007134 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800712c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007130:	4b02      	ldr	r3, [pc, #8]	; (800713c <SysTick_Handler+0x28>)
 8007132:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007134:	2300      	movs	r3, #0
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	bd08      	pop	{r3, pc}
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007140:	4b06      	ldr	r3, [pc, #24]	; (800715c <vPortSetupTimerInterrupt+0x1c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a06      	ldr	r2, [pc, #24]	; (8007160 <vPortSetupTimerInterrupt+0x20>)
 8007146:	fba2 2303 	umull	r2, r3, r2, r3
 800714a:	099b      	lsrs	r3, r3, #6
 800714c:	3b01      	subs	r3, #1
 800714e:	4a05      	ldr	r2, [pc, #20]	; (8007164 <vPortSetupTimerInterrupt+0x24>)
 8007150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007152:	2207      	movs	r2, #7
 8007154:	4b04      	ldr	r3, [pc, #16]	; (8007168 <vPortSetupTimerInterrupt+0x28>)
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	20000004 	.word	0x20000004
 8007160:	10624dd3 	.word	0x10624dd3
 8007164:	e000e014 	.word	0xe000e014
 8007168:	e000e010 	.word	0xe000e010

0800716c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800716c:	b500      	push	{lr}
 800716e:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007170:	4b1f      	ldr	r3, [pc, #124]	; (80071f0 <xPortStartScheduler+0x84>)
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007178:	22ff      	movs	r2, #255	; 0xff
 800717a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007184:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007188:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800718c:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <xPortStartScheduler+0x88>)
 800718e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007190:	2207      	movs	r2, #7
 8007192:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <xPortStartScheduler+0x8c>)
 8007194:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007196:	e009      	b.n	80071ac <xPortStartScheduler+0x40>
		{
			ulMaxPRIGROUPValue--;
 8007198:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <xPortStartScheduler+0x8c>)
 800719a:	6813      	ldr	r3, [r2, #0]
 800719c:	3b01      	subs	r3, #1
 800719e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071b4:	d1f0      	bne.n	8007198 <xPortStartScheduler+0x2c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071b6:	4a10      	ldr	r2, [pc, #64]	; (80071f8 <xPortStartScheduler+0x8c>)
 80071b8:	6813      	ldr	r3, [r2, #0]
 80071ba:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071c2:	9b01      	ldr	r3, [sp, #4]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <xPortStartScheduler+0x84>)
 80071c8:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071ca:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <xPortStartScheduler+0x90>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80071d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80071da:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071dc:	f7ff ffb0 	bl	8007140 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071e0:	2200      	movs	r2, #0
 80071e2:	4b07      	ldr	r3, [pc, #28]	; (8007200 <xPortStartScheduler+0x94>)
 80071e4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071e6:	f7ff fefb 	bl	8006fe0 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80071ea:	f7ff fedf 	bl	8006fac <prvTaskExitError>
 80071ee:	bf00      	nop
 80071f0:	e000e400 	.word	0xe000e400
 80071f4:	20002ed8 	.word	0x20002ed8
 80071f8:	20002edc 	.word	0x20002edc
 80071fc:	e000ed20 	.word	0xe000ed20
 8007200:	20000008 	.word	0x20000008

08007204 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8007204:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007208:	2b0f      	cmp	r3, #15
 800720a:	d90f      	bls.n	800722c <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800720c:	4a10      	ldr	r2, [pc, #64]	; (8007250 <vPortValidateInterruptPriority+0x4c>)
 800720e:	5c9b      	ldrb	r3, [r3, r2]
 8007210:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007212:	4a10      	ldr	r2, [pc, #64]	; (8007254 <vPortValidateInterruptPriority+0x50>)
 8007214:	7812      	ldrb	r2, [r2, #0]
 8007216:	4293      	cmp	r3, r2
 8007218:	d208      	bcs.n	800722c <vPortValidateInterruptPriority+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	e7fe      	b.n	800722a <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <vPortValidateInterruptPriority+0x54>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007234:	4a09      	ldr	r2, [pc, #36]	; (800725c <vPortValidateInterruptPriority+0x58>)
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	4293      	cmp	r3, r2
 800723a:	d908      	bls.n	800724e <vPortValidateInterruptPriority+0x4a>
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	e7fe      	b.n	800724c <vPortValidateInterruptPriority+0x48>
 800724e:	4770      	bx	lr
 8007250:	e000e3f0 	.word	0xe000e3f0
 8007254:	20002ed8 	.word	0x20002ed8
 8007258:	e000ed0c 	.word	0xe000ed0c
 800725c:	20002edc 	.word	0x20002edc

08007260 <StartSerialTaskSend>:
/* *************************************************************************
 * void StartSerialTaskSend(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartSerialTaskSend(void* argument1)
{
 8007260:	b500      	push	{lr}
 8007262:	b083      	sub	sp, #12
  {
		do
		{
		/* Wait indefinitely for someone to load something into the queue */
		/* Skip over empty returns, and NULL pointers that would cause trouble */
			Qret = xQueueReceive(SerialTaskSendQHandle,&pssb,portMAX_DELAY);
 8007264:	2300      	movs	r3, #0
 8007266:	f04f 32ff 	mov.w	r2, #4294967295
 800726a:	a901      	add	r1, sp, #4
 800726c:	481d      	ldr	r0, [pc, #116]	; (80072e4 <StartSerialTaskSend+0x84>)
 800726e:	6800      	ldr	r0, [r0, #0]
 8007270:	f7fe f9ee 	bl	8005650 <xQueueGenericReceive>
			if (Qret == pdPASS) // Break loop if not empty
 8007274:	2801      	cmp	r0, #1
 8007276:	d006      	beq.n	8007286 <StartSerialTaskSend+0x26>
				break;
		} while ((pssb->phuart == NULL) || (pssb->tskhandle == NULL));
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	2a00      	cmp	r2, #0
 800727e:	d0f1      	beq.n	8007264 <StartSerialTaskSend+0x4>
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0ee      	beq.n	8007264 <StartSerialTaskSend+0x4>

		/* Add Q item to linked list for this uart/usart */

		/* Find uart/usart list for this item from Q */
		ptmp = pbhd;
 8007286:	4b18      	ldr	r3, [pc, #96]	; (80072e8 <StartSerialTaskSend+0x88>)
 8007288:	681b      	ldr	r3, [r3, #0]
		while (ptmp->phuart != pssb->phuart) ptmp = ptmp->pnext;
 800728a:	e000      	b.n	800728e <StartSerialTaskSend+0x2e>
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6959      	ldr	r1, [r3, #20]
 8007290:	9801      	ldr	r0, [sp, #4]
 8007292:	6802      	ldr	r2, [r0, #0]
 8007294:	4291      	cmp	r1, r2
 8007296:	d1f9      	bne.n	800728c <StartSerialTaskSend+0x2c>

	 	if ((pssb->pbuf == NULL) || (pssb->size == 0))
 8007298:	68c2      	ldr	r2, [r0, #12]
 800729a:	b10a      	cbz	r2, 80072a0 <StartSerialTaskSend+0x40>
 800729c:	8a02      	ldrh	r2, [r0, #16]
 800729e:	b932      	cbnz	r2, 80072ae <StartSerialTaskSend+0x4e>
		{ // Here, HAL is going to reject it
  			/* Release buffer just sent so it can be reused. */
			xSemaphoreGive(pssb->semaphore);
 80072a0:	2300      	movs	r3, #0
 80072a2:	461a      	mov	r2, r3
 80072a4:	4619      	mov	r1, r3
 80072a6:	6880      	ldr	r0, [r0, #8]
 80072a8:	f7fe f83a 	bl	8005320 <xQueueGenericSend>
 80072ac:	e7da      	b.n	8007264 <StartSerialTaskSend+0x4>
		}
		else
		{
			/* Add bcb to circular buffer for this uart/usart */
			*ptmp->padd = pssb; //Copy BCB pointer into circular buffer
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	6010      	str	r0, [r2, #0]

			ptmp->padd += 1;	// Advance list ptr with wraparound
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	3204      	adds	r2, #4
 80072b6:	60da      	str	r2, [r3, #12]
			if (ptmp->padd == ptmp->pend) ptmp->padd = ptmp->pbegin;
 80072b8:	6899      	ldr	r1, [r3, #8]
 80072ba:	428a      	cmp	r2, r1
 80072bc:	d101      	bne.n	80072c2 <StartSerialTaskSend+0x62>
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	60da      	str	r2, [r3, #12]
			{		
   	   /* If HAL for this uart/usart is busy nothing happens. */
				if (ptmp->dmaflag == 0) // send buffer via char-by-char or dma 
 80072c2:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80072c6:	b933      	cbnz	r3, 80072d6 <StartSerialTaskSend+0x76>
		 			HAL_UART_Transmit_IT((UART_HandleTypeDef*)pssb->phuart,pssb->pbuf,pssb->size);
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	8a1a      	ldrh	r2, [r3, #16]
 80072cc:	68d9      	ldr	r1, [r3, #12]
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	f7fd fc24 	bl	8004b1c <HAL_UART_Transmit_IT>
 80072d4:	e7c6      	b.n	8007264 <StartSerialTaskSend+0x4>
				else		
 					HAL_UART_Transmit_DMA((UART_HandleTypeDef*)pssb->phuart,pssb->pbuf,pssb->size);
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	8a1a      	ldrh	r2, [r3, #16]
 80072da:	68d9      	ldr	r1, [r3, #12]
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	f7fd fc6f 	bl	8004bc0 <HAL_UART_Transmit_DMA>
 80072e2:	e7bf      	b.n	8007264 <StartSerialTaskSend+0x4>
 80072e4:	200032e8 	.word	0x200032e8
 80072e8:	20002ee0 	.word	0x20002ee0

080072ec <xSerialTaskSendAdd>:
 * @param	: qsize = total number of buffer control blocks circular buffer can hold
 * @param	: dmaflag = 0 = char-by-char, 1 = dma
 * @return	: 0 = OK, -1 = failed 1st calloc, -2 = failed 2nd calloc
 * *************************************************************************/
BaseType_t xSerialTaskSendAdd(UART_HandleTypeDef* p, uint16_t qsize, int8_t dmaflag)
{
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	4607      	mov	r7, r0
 80072f0:	460d      	mov	r5, r1
 80072f2:	4616      	mov	r6, r2
	struct SSCIRBUF* ptmp1;
	struct SSCIRBUF* ptmp2;
	struct SERIALSENDTASKBCB** pssb;

taskENTER_CRITICAL();
 80072f4:	f7ff feae 	bl	8007054 <vPortEnterCritical>
	/* Add block with circular buffer pointers for this uart/usart to list */
	ptmp1 = (struct SSCIRBUF*)calloc(1, sizeof(struct SSCIRBUF));
 80072f8:	211c      	movs	r1, #28
 80072fa:	2001      	movs	r0, #1
 80072fc:	f003 f926 	bl	800a54c <calloc>
	if (ptmp1 == NULL) {taskEXIT_CRITICAL();return -1;}
 8007300:	b920      	cbnz	r0, 800730c <xSerialTaskSendAdd+0x20>
 8007302:	f7ff fec9 	bl	8007098 <vPortExitCritical>
 8007306:	f04f 30ff 	mov.w	r0, #4294967295
 800730a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800730c:	4604      	mov	r4, r0
	if (pbhd  == NULL) // Is this the first?
 800730e:	4b11      	ldr	r3, [pc, #68]	; (8007354 <xSerialTaskSendAdd+0x68>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	b923      	cbnz	r3, 800731e <xSerialTaskSendAdd+0x32>
	{ // Yes
		pbhd = ptmp1;	// Point head to first on list
 8007314:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <xSerialTaskSendAdd+0x68>)
 8007316:	6018      	str	r0, [r3, #0]
		ptmp1->pnext = ptmp1; // Point first item on list to self
 8007318:	6020      	str	r0, [r4, #0]
 800731a:	e005      	b.n	8007328 <xSerialTaskSendAdd+0x3c>
	}
	else
	{ // No, one or more have been added
		/* Find end of list */
		ptmp2 = pbhd;	// Start at head
		while (ptmp2 != ptmp2->pnext) ptmp2 = ptmp2->pnext;
 800731c:	4613      	mov	r3, r2
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4293      	cmp	r3, r2
 8007322:	d1fb      	bne.n	800731c <xSerialTaskSendAdd+0x30>
		ptmp2->pnext = ptmp1; // Last block points to added block
 8007324:	601c      	str	r4, [r3, #0]
		ptmp1->pnext = ptmp1; // Added block points to self
 8007326:	6024      	str	r4, [r4, #0]
	}

	/* Get memory for circular buffer of buffer control blocks (bcb) */	
	pssb = (struct SERIALSENDTASKBCB**)calloc(qsize, sizeof(struct SERIALSENDTASKBCB*));
 8007328:	2104      	movs	r1, #4
 800732a:	4628      	mov	r0, r5
 800732c:	f003 f90e 	bl	800a54c <calloc>
	if ( pssb == NULL) {taskEXIT_CRITICAL();return -2;}
 8007330:	b920      	cbnz	r0, 800733c <xSerialTaskSendAdd+0x50>
 8007332:	f7ff feb1 	bl	8007098 <vPortExitCritical>
 8007336:	f06f 0001 	mvn.w	r0, #1
 800733a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* Initialize pointers for circular buffer */
	// ptmp1 points to last item on list
	ptmp1->pbegin  = pssb;
 800733c:	6060      	str	r0, [r4, #4]
	ptmp1->padd    = pssb;
 800733e:	60e0      	str	r0, [r4, #12]
	ptmp1->ptake   = pssb;
 8007340:	6120      	str	r0, [r4, #16]
	ptmp1->pend    = pssb + qsize;
 8007342:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8007346:	60a1      	str	r1, [r4, #8]
	ptmp1->phuart  = p;
 8007348:	6167      	str	r7, [r4, #20]
	ptmp1->dmaflag = dmaflag;
 800734a:	7626      	strb	r6, [r4, #24]
taskEXIT_CRITICAL();
 800734c:	f7ff fea4 	bl	8007098 <vPortExitCritical>
	return 0;
 8007350:	2000      	movs	r0, #0
}
 8007352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007354:	20002ee0 	.word	0x20002ee0

08007358 <xSerialTaskSendCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: SerialTaskSendHandle
 * *************************************************************************/
osThreadId xSerialTaskSendCreate(uint32_t taskpriority)
{
 8007358:	b500      	push	{lr}
 800735a:	b083      	sub	sp, #12
unsigned short usStackDepth,
void *pvParameters,
UBaseType_t uxPriority,
TaskHandle_t *pxCreatedTask );
*/
	BaseType_t ret = xTaskCreate(StartSerialTaskSend, "SerialTaskSend",\
 800735c:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <xSerialTaskSendCreate+0x38>)
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	9000      	str	r0, [sp, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	2280      	movs	r2, #128	; 0x80
 8007366:	490b      	ldr	r1, [pc, #44]	; (8007394 <xSerialTaskSendCreate+0x3c>)
 8007368:	480b      	ldr	r0, [pc, #44]	; (8007398 <xSerialTaskSendCreate+0x40>)
 800736a:	f7fe fc09 	bl	8005b80 <xTaskCreate>
     128, NULL, taskpriority,\
     &SerialTaskHandle);
	if (ret != pdPASS) return NULL;
 800736e:	2801      	cmp	r0, #1
 8007370:	d10a      	bne.n	8007388 <xSerialTaskSendCreate+0x30>

	SerialTaskSendQHandle = xQueueCreate(QUEUESIZE, sizeof(struct SERIALSENDTASKBCB) );
 8007372:	2200      	movs	r2, #0
 8007374:	2114      	movs	r1, #20
 8007376:	2010      	movs	r0, #16
 8007378:	f7fd ffaa 	bl	80052d0 <xQueueGenericCreate>
 800737c:	4b07      	ldr	r3, [pc, #28]	; (800739c <xSerialTaskSendCreate+0x44>)
 800737e:	6018      	str	r0, [r3, #0]
	if (SerialTaskSendQHandle == NULL) return NULL;
 8007380:	b118      	cbz	r0, 800738a <xSerialTaskSendCreate+0x32>
	return SerialTaskHandle;
 8007382:	4b03      	ldr	r3, [pc, #12]	; (8007390 <xSerialTaskSendCreate+0x38>)
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	e000      	b.n	800738a <xSerialTaskSendCreate+0x32>
TaskHandle_t *pxCreatedTask );
*/
	BaseType_t ret = xTaskCreate(StartSerialTaskSend, "SerialTaskSend",\
     128, NULL, taskpriority,\
     &SerialTaskHandle);
	if (ret != pdPASS) return NULL;
 8007388:	2000      	movs	r0, #0

	SerialTaskSendQHandle = xQueueCreate(QUEUESIZE, sizeof(struct SERIALSENDTASKBCB) );
	if (SerialTaskSendQHandle == NULL) return NULL;
	return SerialTaskHandle;
}
 800738a:	b003      	add	sp, #12
 800738c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007390:	20002ee4 	.word	0x20002ee4
 8007394:	0800e53c 	.word	0x0800e53c
 8007398:	08007261 	.word	0x08007261
 800739c:	200032e8 	.word	0x200032e8

080073a0 <HAL_UART_TxCpltCallback>:
/* #######################################################################
   UART interrupt callback: file|size has been sent
   ####################################################################### */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *phuart)
{
 80073a0:	b510      	push	{r4, lr}
 80073a2:	b082      	sub	sp, #8
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	9301      	str	r3, [sp, #4]

	struct SERIALSENDTASKBCB* pbcb; // Buffer control block ptr
	struct SSCIRBUF* ptmp1;	// Linked list of usarts

	/* Find bcb circular buffer for this uart */
	ptmp1 = pbhd; // Polnt to first on list
 80073a8:	4b19      	ldr	r3, [pc, #100]	; (8007410 <HAL_UART_TxCpltCallback+0x70>)
 80073aa:	681c      	ldr	r4, [r3, #0]
	while (ptmp1->phuart != phuart) 
 80073ac:	e000      	b.n	80073b0 <HAL_UART_TxCpltCallback+0x10>
	{
		ptmp1 = ptmp1->pnext; // Step to next uart
 80073ae:	6824      	ldr	r4, [r4, #0]
	struct SERIALSENDTASKBCB* pbcb; // Buffer control block ptr
	struct SSCIRBUF* ptmp1;	// Linked list of usarts

	/* Find bcb circular buffer for this uart */
	ptmp1 = pbhd; // Polnt to first on list
	while (ptmp1->phuart != phuart) 
 80073b0:	6963      	ldr	r3, [r4, #20]
 80073b2:	4283      	cmp	r3, r0
 80073b4:	d1fb      	bne.n	80073ae <HAL_UART_TxCpltCallback+0xe>
	{
		ptmp1 = ptmp1->pnext; // Step to next uart
	}

	/* Pointer to buffer control block for next buffer to send. */
	pbcb = *ptmp1->ptake;
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	681b      	ldr	r3, [r3, #0]

   /* Release buffer just sent to it can be reused. */
	xSemaphoreGiveFromISR( pbcb->semaphore, &xHigherPriorityTaskWoken );
 80073ba:	a901      	add	r1, sp, #4
 80073bc:	6898      	ldr	r0, [r3, #8]
 80073be:	f7fe f8e9 	bl	8005594 <xQueueGiveFromISR>

	/* Advance 'take' pointer of circular bcb buffer. */
	ptmp1->ptake += 1;	// Advance ptr with wraparound
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	3304      	adds	r3, #4
 80073c6:	6123      	str	r3, [r4, #16]
	if (ptmp1->ptake == ptmp1->pend) ptmp1->ptake = ptmp1->pbegin;	
 80073c8:	68a2      	ldr	r2, [r4, #8]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d101      	bne.n	80073d2 <HAL_UART_TxCpltCallback+0x32>
 80073ce:	6863      	ldr	r3, [r4, #4]
 80073d0:	6123      	str	r3, [r4, #16]

	/* If more bcb remain in the buffer start the next sending. */
	if (ptmp1->ptake != ptmp1->padd)
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	68e2      	ldr	r2, [r4, #12]
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00e      	beq.n	80073f8 <HAL_UART_TxCpltCallback+0x58>
	{
		pbcb = *ptmp1->ptake;
 80073da:	681b      	ldr	r3, [r3, #0]
		if (ptmp1->dmaflag == 0)
 80073dc:	f994 2018 	ldrsb.w	r2, [r4, #24]
 80073e0:	b92a      	cbnz	r2, 80073ee <HAL_UART_TxCpltCallback+0x4e>
			HAL_UART_Transmit_IT (pbcb->phuart,pbcb->pbuf,pbcb->size);
 80073e2:	8a1a      	ldrh	r2, [r3, #16]
 80073e4:	68d9      	ldr	r1, [r3, #12]
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	f7fd fb98 	bl	8004b1c <HAL_UART_Transmit_IT>
 80073ec:	e004      	b.n	80073f8 <HAL_UART_TxCpltCallback+0x58>
		else
			HAL_UART_Transmit_DMA(pbcb->phuart,pbcb->pbuf,pbcb->size);
 80073ee:	8a1a      	ldrh	r2, [r3, #16]
 80073f0:	68d9      	ldr	r1, [r3, #12]
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	f7fd fbe4 	bl	8004bc0 <HAL_UART_Transmit_DMA>
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80073f8:	9b01      	ldr	r3, [sp, #4]
 80073fa:	b13b      	cbz	r3, 800740c <HAL_UART_TxCpltCallback+0x6c>
 80073fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007400:	4b04      	ldr	r3, [pc, #16]	; (8007414 <HAL_UART_TxCpltCallback+0x74>)
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	f3bf 8f6f 	isb	sy
	return;
}
 800740c:	b002      	add	sp, #8
 800740e:	bd10      	pop	{r4, pc}
 8007410:	20002ee0 	.word	0x20002ee0
 8007414:	e000ed04 	.word	0xe000ed04

08007418 <vSerialTaskSendQueueBuf>:
 * void vSerialTaskSendQueueBuf(struct SERIALSENDTASKBCB** ppbcb);
 *	@brief	: Load buffer control block onto queue for sending
 * @param	: ppbcb = Pointer to pointer to Buffer Control Block
 * *************************************************************************/
void vSerialTaskSendQueueBuf(struct SERIALSENDTASKBCB** ppbcb)
{
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4605      	mov	r5, r0
	uint32_t qret;

	do 
	{
		qret=xQueueSendToBack(SerialTaskSendQHandle, ppbcb, portMAX_DELAY);
 800741c:	2300      	movs	r3, #0
 800741e:	f04f 32ff 	mov.w	r2, #4294967295
 8007422:	4629      	mov	r1, r5
 8007424:	4805      	ldr	r0, [pc, #20]	; (800743c <vSerialTaskSendQueueBuf+0x24>)
 8007426:	6800      	ldr	r0, [r0, #0]
 8007428:	f7fd ff7a 	bl	8005320 <xQueueGenericSend>
		if (qret == errQUEUE_FULL) osDelay(1); // Delay, don't spin.
 800742c:	4604      	mov	r4, r0
 800742e:	b910      	cbnz	r0, 8007436 <vSerialTaskSendQueueBuf+0x1e>
 8007430:	2001      	movs	r0, #1
 8007432:	f7ff fc6f 	bl	8006d14 <osDelay>

	} while(qret == errQUEUE_FULL);
 8007436:	2c00      	cmp	r4, #0
 8007438:	d0f0      	beq.n	800741c <vSerialTaskSendQueueBuf+0x4>
	return;
}
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	200032e8 	.word	0x200032e8

08007440 <DTW_counter_init>:
void DTW_counter_init(void)
{
/* Use DTW_CYCCNT counter for timing */
/* CYCCNT counter is in the Cortex-M-series core.  See the following for details 
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0337g/BABJFFGJ.html */
	*(volatile unsigned int*)0xE000EDFC |= 0x01000000; // SCB_DEMCR = 0x01000000;
 8007440:	4a05      	ldr	r2, [pc, #20]	; (8007458 <DTW_counter_init+0x18>)
 8007442:	6813      	ldr	r3, [r2, #0]
 8007444:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007448:	6013      	str	r3, [r2, #0]
	*(volatile unsigned int*)0xE0001000 |= 0x1;	// Enable DTW_CYCCNT (Data Watch cycle counter)
 800744a:	4a04      	ldr	r2, [pc, #16]	; (800745c <DTW_counter_init+0x1c>)
 800744c:	6813      	ldr	r3, [r2, #0]
 800744e:	f043 0301 	orr.w	r3, r3, #1
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	e000edfc 	.word	0xe000edfc
 800745c:	e0001000 	.word	0xe0001000

08007460 <StartCanTxTask>:
/* *************************************************************************
 * void StartCanTxTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartCanTxTask(void const * argument)
{
 8007460:	b510      	push	{r4, lr}
 8007462:	b088      	sub	sp, #32
//osDelay(512*4); // Debug delay

  /* Infinite RTOS Task loop */
  for(;;)
  {
HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // ORANGE
 8007464:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007468:	4814      	ldr	r0, [pc, #80]	; (80074bc <StartCanTxTask+0x5c>)
 800746a:	f7fc f8f9 	bl	8003660 <HAL_GPIO_TogglePin>
		Qret = xQueueReceive(CanTxQHandle,&txq,portMAX_DELAY);
 800746e:	2300      	movs	r3, #0
 8007470:	f04f 32ff 	mov.w	r2, #4294967295
 8007474:	4669      	mov	r1, sp
 8007476:	4812      	ldr	r0, [pc, #72]	; (80074c0 <StartCanTxTask+0x60>)
 8007478:	6800      	ldr	r0, [r0, #0]
 800747a:	f7fe f8e9 	bl	8005650 <xQueueGenericReceive>
		if (Qret == pdPASS) // Break loop if not empty
 800747e:	2801      	cmp	r0, #1
 8007480:	d1f0      	bne.n	8007464 <StartCanTxTask+0x4>
		{
			ret = can_driver_put(txq.pctl, &txq.can, txq.maxretryct, txq.bits);
 8007482:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007486:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800748a:	a902      	add	r1, sp, #8
 800748c:	9800      	ldr	r0, [sp, #0]
 800748e:	f000 f959 	bl	8007744 <can_driver_put>
 8007492:	4604      	mov	r4, r0
/* ===> Trap errors
 *				: -1 = Buffer overrun (no free slots for the new msg)
 *				: -2 = Bogus CAN id rejected
 *				: -3 = control block pointer NULL */
			if (ret == -1) morse_trap(91);
 8007494:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007498:	d102      	bne.n	80074a0 <StartCanTxTask+0x40>
 800749a:	205b      	movs	r0, #91	; 0x5b
 800749c:	f000 fdc2 	bl	8008024 <morse_trap>
			if (ret == -2) morse_trap(92);
 80074a0:	f114 0f02 	cmn.w	r4, #2
 80074a4:	d102      	bne.n	80074ac <StartCanTxTask+0x4c>
 80074a6:	205c      	movs	r0, #92	; 0x5c
 80074a8:	f000 fdbc 	bl	8008024 <morse_trap>
			if (ret == -3) morse_trap(93);
 80074ac:	f114 0f03 	cmn.w	r4, #3
 80074b0:	d1d8      	bne.n	8007464 <StartCanTxTask+0x4>
 80074b2:	205d      	movs	r0, #93	; 0x5d
 80074b4:	f000 fdb6 	bl	8008024 <morse_trap>
 80074b8:	e7d4      	b.n	8007464 <StartCanTxTask+0x4>
 80074ba:	bf00      	nop
 80074bc:	40011400 	.word	0x40011400
 80074c0:	200032ec 	.word	0x200032ec

080074c4 <StartCanRxTask>:
/* *************************************************************************
 * void StartCanRxTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartCanRxTask(void const * argument)
{
 80074c4:	b508      	push	{r3, lr}
/* NOTE:  Since there is just one receiving task, this task is not needed.
          However, the initialization to create the queue is needed.
*/
	vTaskSuspend( NULL );
 80074c6:	2000      	movs	r0, #0
 80074c8:	f7fe fe36 	bl	8006138 <vTaskSuspend>
//	struct CANRCVBUFN ncan;

  /* Infinite RTOS Task loop */
  for(;;)
  {
osDelay(11000);
 80074cc:	f642 20f8 	movw	r0, #11000	; 0x2af8
 80074d0:	f7ff fc20 	bl	8006d14 <osDelay>
 80074d4:	e7fa      	b.n	80074cc <StartCanRxTask+0x8>
 80074d6:	bf00      	nop

080074d8 <xCanTxTaskCreate>:
 * @param	: taskpriority = Task priority (just as it says!)
 * @param	: queuesize = number of items in Tx queue
 * @return	: QueueHandle_t = queue handle
 * *************************************************************************/
QueueHandle_t  xCanTxTaskCreate(uint32_t taskpriority, int32_t queuesize)
{
 80074d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074da:	b089      	sub	sp, #36	; 0x24
 80074dc:	4607      	mov	r7, r0
 80074de:	460e      	mov	r6, r1
 /* definition and creation of CanTask */
  osThreadDef(CanTxTask, StartCanTxTask, osPriorityNormal, 0, 128);
 80074e0:	ac01      	add	r4, sp, #4
 80074e2:	4d0c      	ldr	r5, [pc, #48]	; (8007514 <xCanTxTaskCreate+0x3c>)
 80074e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CanTxTaskHandle = osThreadCreate(osThread(CanTxTask), NULL);
 80074f0:	2100      	movs	r1, #0
 80074f2:	a801      	add	r0, sp, #4
 80074f4:	f7ff fbd8 	bl	8006ca8 <osThreadCreate>
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <xCanTxTaskCreate+0x40>)
 80074fa:	6018      	str	r0, [r3, #0]
	vTaskPrioritySet( CanTxTaskHandle, taskpriority );
 80074fc:	4639      	mov	r1, r7
 80074fe:	f7fe fb73 	bl	8005be8 <vTaskPrioritySet>

	/* FreeRTOS queue for task with data to send. */
	CanTxQHandle = xQueueCreate(queuesize, sizeof(struct CANTXQMSG));
 8007502:	2200      	movs	r2, #0
 8007504:	2120      	movs	r1, #32
 8007506:	4630      	mov	r0, r6
 8007508:	f7fd fee2 	bl	80052d0 <xQueueGenericCreate>
 800750c:	4b03      	ldr	r3, [pc, #12]	; (800751c <xCanTxTaskCreate+0x44>)
 800750e:	6018      	str	r0, [r3, #0]
	return CanTxQHandle;
}
 8007510:	b009      	add	sp, #36	; 0x24
 8007512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007514:	0800e47c 	.word	0x0800e47c
 8007518:	200032f8 	.word	0x200032f8
 800751c:	200032ec 	.word	0x200032ec

08007520 <canmsg_compress>:
 * @param	: pcan = pointer to useful hardware format output
 * @param	: phal = pointer to HAL header input
 * @param	: pdat = pointer to HAL payload data array input
 * *************************************************************************/
static void canmsg_compress(struct CANRCVBUF *pcan, CAN_RxHeaderTypeDef *phal, uint8_t *pdat)
{
 8007520:	b410      	push	{r4}
	if (phal->IDE != 0)
 8007522:	688b      	ldr	r3, [r1, #8]
 8007524:	b123      	cbz	r3, 8007530 <canmsg_compress+0x10>
	{ // Extended 29b CAN id
		pcan->id = phal->IDE | (phal->ExtId << 3);
 8007526:	684c      	ldr	r4, [r1, #4]
 8007528:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 800752c:	6003      	str	r3, [r0, #0]
 800752e:	e002      	b.n	8007536 <canmsg_compress+0x16>
	}
	else
	{ // Standard 11b CAN id
		pcan->id = phal->StdId << 21;
 8007530:	680b      	ldr	r3, [r1, #0]
 8007532:	055b      	lsls	r3, r3, #21
 8007534:	6003      	str	r3, [r0, #0]
	}
	pcan->id |= phal->RTR;
 8007536:	68cb      	ldr	r3, [r1, #12]
 8007538:	6804      	ldr	r4, [r0, #0]
 800753a:	4323      	orrs	r3, r4
 800753c:	6003      	str	r3, [r0, #0]
	
	pcan->dlc = (phal->DLC & 0xf);
 800753e:	690b      	ldr	r3, [r1, #16]
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	6043      	str	r3, [r0, #4]

	pcan->cd.uc[0] = *(pdat+0);
 8007546:	7813      	ldrb	r3, [r2, #0]
 8007548:	7203      	strb	r3, [r0, #8]
	pcan->cd.uc[1] = *(pdat+1);
 800754a:	7853      	ldrb	r3, [r2, #1]
 800754c:	7243      	strb	r3, [r0, #9]
	pcan->cd.uc[2] = *(pdat+2);
 800754e:	7893      	ldrb	r3, [r2, #2]
 8007550:	7283      	strb	r3, [r0, #10]
	pcan->cd.uc[3] = *(pdat+3);
 8007552:	78d3      	ldrb	r3, [r2, #3]
 8007554:	72c3      	strb	r3, [r0, #11]
	pcan->cd.uc[4] = *(pdat+4);
 8007556:	7913      	ldrb	r3, [r2, #4]
 8007558:	7303      	strb	r3, [r0, #12]
	pcan->cd.uc[5] = *(pdat+5);
 800755a:	7953      	ldrb	r3, [r2, #5]
 800755c:	7343      	strb	r3, [r0, #13]
	pcan->cd.uc[6] = *(pdat+6);
 800755e:	7993      	ldrb	r3, [r2, #6]
 8007560:	7383      	strb	r3, [r0, #14]
	pcan->cd.uc[7] = *(pdat+7);
 8007562:	79d3      	ldrb	r3, [r2, #7]
 8007564:	73c3      	strb	r3, [r0, #15]
	return;
}
 8007566:	bc10      	pop	{r4}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop

0800756c <moveremove2>:

//	disable_TXints(pctl, save);	// TX or RX(other) interrupts might remove a msg from the free list.
// Each CAN module has its own linked list and RX0,1 does not use the linked list, so disabling interrupts is not needed.

	/* Remove from pending; move to free list. */
	pmov = pctl->pxprv->plinknext;	// Pts to removed item
 800756c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800756e:	681b      	ldr	r3, [r3, #0]
	pctl->pxprv->plinknext = pmov->plinknext;
 8007570:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	6011      	str	r1, [r2, #0]

	// Adding to free list
	pmov->plinknext = pctl->frii.plinknext; 
 8007576:	6882      	ldr	r2, [r0, #8]
 8007578:	601a      	str	r2, [r3, #0]
	pctl->frii.plinknext  = pmov;
 800757a:	6083      	str	r3, [r0, #8]
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop

08007580 <loadmbx2>:
{
	uint32_t uidata[2];
	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef halmsg;

	volatile struct CAN_POOLBLOCK* p = pctl->pend.plinknext;
 8007580:	6b03      	ldr	r3, [r0, #48]	; 0x30

	if (p == NULL)
 8007582:	b90b      	cbnz	r3, 8007588 <loadmbx2+0x8>
	{
		pctl->pxprv = NULL;
 8007584:	6503      	str	r3, [r0, #80]	; 0x50
 8007586:	4770      	bx	lr
/*---------------------------------------------------------------------------------------------
 * static void loadmbx2(struct CAN_CTLBLOCK* pctl)
 * @brief	: Load mailbox
 ----------------------------------------------------------------------------------------------*/
static void loadmbx2(struct CAN_CTLBLOCK* pctl)
{
 8007588:	b500      	push	{lr}
 800758a:	b08b      	sub	sp, #44	; 0x2c
	{
		pctl->pxprv = NULL;
		return; // Return if no more to send
	}

	pctl->pxprv = &pctl->pend;	// Save in a static var
 800758c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8007590:	6502      	str	r2, [r0, #80]	; 0x50
	pctl->phcan->sTxMailBox[0].TDHR = p->can.cd.ui[1];	// CAN_TDL0RH: mailbox 0 data low  register
	/* Load CAN ID with TX Request bit set */
	pctl->phcan->sTxMailBox[0].TIR = (p->can.id | 0x1); 	// CAN_TI0R:   mailbox 0 identifier register
#else
	/* Expand hardware friendly format to HAL format (which gets changed back to hardware friendly) */
	halmsg.StdId = (p->can.id >> 21);
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	0d52      	lsrs	r2, r2, #21
 8007596:	9201      	str	r2, [sp, #4]
	halmsg.ExtId = (p->can.id >>  3);
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	08d2      	lsrs	r2, r2, #3
 800759c:	9202      	str	r2, [sp, #8]
	halmsg.IDE   = (p->can.id & CAN_ID_EXT);
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	f002 0204 	and.w	r2, r2, #4
 80075a4:	9203      	str	r2, [sp, #12]
	halmsg.RTR   = (p->can.id & CAN_RTR_REMOTE);
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	f002 0202 	and.w	r2, r2, #2
 80075ac:	9204      	str	r2, [sp, #16]
	halmsg.DLC   = (p->can.dlc & 0xf);
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	f002 020f 	and.w	r2, r2, #15
 80075b4:	9205      	str	r2, [sp, #20]
	uidata[0]   = p->can.cd.ui[0];
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	9208      	str	r2, [sp, #32]
	uidata[1]   = p->can.cd.ui[1];
 80075ba:	695a      	ldr	r2, [r3, #20]
 80075bc:	9209      	str	r2, [sp, #36]	; 0x24
	pctl->mbx0  = p->can.id;	// Shadow MBX0 ID
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	6283      	str	r3, [r0, #40]	; 0x28
   HAL_CAN_AddTxMessage(pctl->phcan, &halmsg, (uint8_t*)uidata, &TxMailbox);
 80075c2:	ab07      	add	r3, sp, #28
 80075c4:	aa08      	add	r2, sp, #32
 80075c6:	a901      	add	r1, sp, #4
 80075c8:	6800      	ldr	r0, [r0, #0]
 80075ca:	f7fc fec9 	bl	8004360 <HAL_CAN_AddTxMessage>
#endif
	return;
}
 80075ce:	b00b      	add	sp, #44	; 0x2c
 80075d0:	f85d fb04 	ldr.w	pc, [sp], #4

080075d4 <can_iface_add_take>:
 * @param	: pctl = pointer to our CAN control block
 * @return	: pointer to pointer pointing to 'take' location in circular CAN buffer
 * 			:  NULL = Failed 
*******************************************************************************/
struct CANTAKEPTR* can_iface_add_take(struct CAN_CTLBLOCK*  pctl)
{
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4605      	mov	r5, r0
	struct CANTAKEPTR* p;
	
taskENTER_CRITICAL();
 80075d8:	f7ff fd3c 	bl	8007054 <vPortEnterCritical>
	/* Get one measily pointer */
	p = (struct CANTAKEPTR*)calloc(1, sizeof(struct CANTAKEPTR));
 80075dc:	2108      	movs	r1, #8
 80075de:	2001      	movs	r0, #1
 80075e0:	f002 ffb4 	bl	800a54c <calloc>
	if (p == NULL){ taskEXIT_CRITICAL();return NULL;}
 80075e4:	b918      	cbnz	r0, 80075ee <can_iface_add_take+0x1a>
 80075e6:	f7ff fd57 	bl	8007098 <vPortExitCritical>
 80075ea:	2000      	movs	r0, #0
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
 80075ee:	4604      	mov	r4, r0

	/* Initialize the pointer to curret add location of the circular buffer. */
   /* Given 'p', the beginning, end, and location CAN msgs are being added
      can be accessed. */
	p->pcir  = &pctl->cirptrs;
 80075f0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80075f4:	6003      	str	r3, [r0, #0]

	/* Start the 'take' pointer at the position in the circular buffer where
      CAN msgs are currently being added. */
	p->ptake = pctl->cirptrs.pwork;
 80075f6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80075f8:	6043      	str	r3, [r0, #4]

taskEXIT_CRITICAL();
 80075fa:	f7ff fd4d 	bl	8007098 <vPortExitCritical>
	return p;
 80075fe:	4620      	mov	r0, r4
}
 8007600:	bd38      	pop	{r3, r4, r5, pc}
 8007602:	bf00      	nop

08007604 <can_iface_mbx_init>:
 * @param	: tskhandle = task handle that will be used for notification; NULL = use current task
 * @param	: notebit = notification bit if notifications used
 * @return	: pointer to pointer pointing to 'take' location in circular CAN buffer 
*******************************************************************************/
struct CANTAKEPTR* can_iface_mbx_init(struct CAN_CTLBLOCK* pctl, osThreadId tskhandle, uint32_t notebit)
{
 8007604:	b538      	push	{r3, r4, r5, lr}
 8007606:	4604      	mov	r4, r0
 8007608:	4615      	mov	r5, r2
	if (tskhandle == NULL)
 800760a:	4608      	mov	r0, r1
 800760c:	b909      	cbnz	r1, 8007612 <can_iface_mbx_init+0xe>
	{ // Here, use the current running Task
		tskhandle = xTaskGetCurrentTaskHandle();
 800760e:	f7fe fedf 	bl	80063d0 <xTaskGetCurrentTaskHandle>
	}

	/* Notification of CAN msgs added to the circular buffer are only for one task. */
	pctl->tsknote.tskhandle = tskhandle;
 8007612:	6660      	str	r0, [r4, #100]	; 0x64
	pctl->tsknote.notebit   = notebit;
 8007614:	66a5      	str	r5, [r4, #104]	; 0x68

	/* The 'add' pointer was setup in 'can_iface_init' below */
	
	/* Get a 'take' pointer into the circular buffer */
	return can_iface_add_take(pctl);
 8007616:	4620      	mov	r0, r4
 8007618:	f7ff ffdc 	bl	80075d4 <can_iface_add_take>
}
 800761c:	bd38      	pop	{r3, r4, r5, pc}
 800761e:	bf00      	nop

08007620 <can_iface_get_CANmsg>:
 * @brief 	: Get a pointer to the next available CAN msg and step ahead in the circular buffer
 * @brief	: p = pointer to struct with 'take' and 'add' pointers
 * @return	: pointer to CAN msg struct; NULL = no msgs available.
*******************************************************************************/
 struct CANRCVBUFN* can_iface_get_CANmsg(struct CANTAKEPTR* p)
{
 8007620:	4603      	mov	r3, r0
	struct CANRCVBUFN* ptmp = NULL;
	if (p->pcir->pwork == p->ptake) return ptmp;
 8007622:	6802      	ldr	r2, [r0, #0]
 8007624:	6891      	ldr	r1, [r2, #8]
 8007626:	6840      	ldr	r0, [r0, #4]
 8007628:	4281      	cmp	r1, r0
 800762a:	d009      	beq.n	8007640 <can_iface_get_CANmsg+0x20>
 * @brief 	: Get a pointer to the next available CAN msg and step ahead in the circular buffer
 * @brief	: p = pointer to struct with 'take' and 'add' pointers
 * @return	: pointer to CAN msg struct; NULL = no msgs available.
*******************************************************************************/
 struct CANRCVBUFN* can_iface_get_CANmsg(struct CANTAKEPTR* p)
{
 800762c:	b410      	push	{r4}
	struct CANRCVBUFN* ptmp = NULL;
	if (p->pcir->pwork == p->ptake) return ptmp;

	ptmp = p->ptake;
	p->ptake += 1;
 800762e:	f100 0118 	add.w	r1, r0, #24
 8007632:	6059      	str	r1, [r3, #4]
	if (p->ptake == p->pcir->pend) p->ptake = p->pcir->pbegin;
 8007634:	6854      	ldr	r4, [r2, #4]
 8007636:	42a1      	cmp	r1, r4
 8007638:	d104      	bne.n	8007644 <can_iface_get_CANmsg+0x24>
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	e001      	b.n	8007644 <can_iface_get_CANmsg+0x24>
 * @return	: pointer to CAN msg struct; NULL = no msgs available.
*******************************************************************************/
 struct CANRCVBUFN* can_iface_get_CANmsg(struct CANTAKEPTR* p)
{
	struct CANRCVBUFN* ptmp = NULL;
	if (p->pcir->pwork == p->ptake) return ptmp;
 8007640:	2000      	movs	r0, #0
 8007642:	4770      	bx	lr
	ptmp = p->ptake;
	p->ptake += 1;
	if (p->ptake == p->pcir->pend) p->ptake = p->pcir->pbegin;

	return ptmp;	
}
 8007644:	bc10      	pop	{r4}
 8007646:	4770      	bx	lr

08007648 <can_iface_init>:
Return is a pointer to the control block.  Since the unmodified STM32CubeMX routines only
pass their CAN module "handle" (pointer) upon interrupt a lookup is required to obtain
the pointer to the buffers.  Therefore, these pointers are also saved.
*/
struct CAN_CTLBLOCK* can_iface_init(CAN_HandleTypeDef *phcan, uint8_t canidx, uint16_t numtx, uint16_t numrx)
{
 8007648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800764c:	4604      	mov	r4, r0
 800764e:	4688      	mov	r8, r1
 8007650:	4616      	mov	r6, r2
 8007652:	461f      	mov	r7, r3
	struct CAN_POOLBLOCK* plst;
	struct CAN_POOLBLOCK* ptmp;

	struct CANRCVBUFN* pcann;

taskENTER_CRITICAL();
 8007654:	f7ff fcfe 	bl	8007054 <vPortEnterCritical>
	/* Get a control block for this CAN module. */
	pctl = (struct CAN_CTLBLOCK*)calloc(1, sizeof(struct CAN_CTLBLOCK));
 8007658:	21b8      	movs	r1, #184	; 0xb8
 800765a:	2001      	movs	r0, #1
 800765c:	f002 ff76 	bl	800a54c <calloc>
	if (pctl == NULL){ taskEXIT_CRITICAL();return NULL;}
 8007660:	b920      	cbnz	r0, 800766c <can_iface_init+0x24>
 8007662:	f7ff fd19 	bl	8007098 <vPortExitCritical>
 8007666:	2000      	movs	r0, #0
 8007668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800766c:	4605      	mov	r5, r0

	/* Add HAL CAN control block "handle" to our control block */
	pctl->phcan = phcan; 
 800766e:	6004      	str	r4, [r0, #0]

	/* Save CAN module index (CAN1 = 0). */
	pctl->canidx = canidx;
 8007670:	f880 80b1 	strb.w	r8, [r0, #177]	; 0xb1

	/* Add new control block to list of control blocks */
	if (ppctllist != NULL) // Not first time?
 8007674:	4b30      	ldr	r3, [pc, #192]	; (8007738 <can_iface_init+0xf0>)
 8007676:	6819      	ldr	r1, [r3, #0]
 8007678:	b959      	cbnz	r1, 8007692 <can_iface_init+0x4a>
 800767a:	e00e      	b.n	800769a <can_iface_init+0x52>
	{ // Yes. Check for duplicates, i.e. check for bozo programmers
		ppx = &pctllist[0];	// NOTE: don't confuse ppctllist with pctllist
		while (ppx != ppctllist)
		{
			if ( (*ppx)->phcan == phcan)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	4294      	cmp	r4, r2
 8007682:	d104      	bne.n	800768e <can_iface_init+0x46>
			{
				taskEXIT_CRITICAL();
 8007684:	f7ff fd08 	bl	8007098 <vPortExitCritical>
				return NULL; // Duplicate
 8007688:	2000      	movs	r0, #0
 800768a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			ppx++;;
 800768e:	3304      	adds	r3, #4
 8007690:	e000      	b.n	8007694 <can_iface_init+0x4c>
 8007692:	4b2a      	ldr	r3, [pc, #168]	; (800773c <can_iface_init+0xf4>)

	/* Add new control block to list of control blocks */
	if (ppctllist != NULL) // Not first time?
	{ // Yes. Check for duplicates, i.e. check for bozo programmers
		ppx = &pctllist[0];	// NOTE: don't confuse ppctllist with pctllist
		while (ppx != ppctllist)
 8007694:	428b      	cmp	r3, r1
 8007696:	d1f1      	bne.n	800767c <can_iface_init+0x34>
 8007698:	e002      	b.n	80076a0 <can_iface_init+0x58>
			ppx++;;
		}
	}
	else
	{
		ppctllist = &pctllist[0];
 800769a:	4a28      	ldr	r2, [pc, #160]	; (800773c <can_iface_init+0xf4>)
 800769c:	4b26      	ldr	r3, [pc, #152]	; (8007738 <can_iface_init+0xf0>)
 800769e:	601a      	str	r2, [r3, #0]
	}
	/* Save control block pointer on list, and advance list pointer */
	*ppctllist = pctl;	
 80076a0:	4a25      	ldr	r2, [pc, #148]	; (8007738 <can_iface_init+0xf0>)
 80076a2:	6813      	ldr	r3, [r2, #0]
 80076a4:	f843 5b04 	str.w	r5, [r3], #4
	ppctllist++;
 80076a8:	6013      	str	r3, [r2, #0]
	if (ppctllist == &pctllist[MAXCANMODULES]) { taskEXIT_CRITICAL();return NULL;} //JIC too many entries
 80076aa:	4a25      	ldr	r2, [pc, #148]	; (8007740 <can_iface_init+0xf8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d104      	bne.n	80076ba <can_iface_init+0x72>
 80076b0:	f7ff fcf2 	bl	8007098 <vPortExitCritical>
 80076b4:	2000      	movs	r0, #0
 80076b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	
	/* Now that we have control block in memory, we can use it to return errors. 
	   by setting the error code in pctl->ret. */

	/* Get CAN xmit linked list. */	
	if (numtx == 0)  {pctl->ret = -1; return pctl;} // Bogus tx buffering count
 80076ba:	b92e      	cbnz	r6, 80076c8 <can_iface_init+0x80>
 80076bc:	23ff      	movs	r3, #255	; 0xff
 80076be:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
 80076c2:	4628      	mov	r0, r5
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ptmp = (struct CAN_POOLBLOCK*)calloc(numtx, sizeof(struct CAN_POOLBLOCK));
 80076c8:	2120      	movs	r1, #32
 80076ca:	4630      	mov	r0, r6
 80076cc:	f002 ff3e 	bl	800a54c <calloc>
	if (ptmp == NULL){pctl->ret = -2; taskEXIT_CRITICAL(); return NULL;} // Get buff failed
 80076d0:	4603      	mov	r3, r0
 80076d2:	b938      	cbnz	r0, 80076e4 <can_iface_init+0x9c>
 80076d4:	23fe      	movs	r3, #254	; 0xfe
 80076d6:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
 80076da:	f7ff fcdd 	bl	8007098 <vPortExitCritical>
 80076de:	2000      	movs	r0, #0
 80076e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Initialize links.  All are in the "free" list. */
	// Item: the last block is left with NULL in plinknext
	plst = &pctl->frii;
 80076e4:	f105 0108 	add.w	r1, r5, #8
	for (i = 0; i < numtx; i++)
 80076e8:	2200      	movs	r2, #0
 80076ea:	e003      	b.n	80076f4 <can_iface_init+0xac>
	{
		plst->plinknext = ptmp;
 80076ec:	600b      	str	r3, [r1, #0]
	if (ptmp == NULL){pctl->ret = -2; taskEXIT_CRITICAL(); return NULL;} // Get buff failed

	/* Initialize links.  All are in the "free" list. */
	// Item: the last block is left with NULL in plinknext
	plst = &pctl->frii;
	for (i = 0; i < numtx; i++)
 80076ee:	3201      	adds	r2, #1
	{
		plst->plinknext = ptmp;
		plst = ptmp++;
 80076f0:	4619      	mov	r1, r3
 80076f2:	3320      	adds	r3, #32
	if (ptmp == NULL){pctl->ret = -2; taskEXIT_CRITICAL(); return NULL;} // Get buff failed

	/* Initialize links.  All are in the "free" list. */
	// Item: the last block is left with NULL in plinknext
	plst = &pctl->frii;
	for (i = 0; i < numtx; i++)
 80076f4:	42b2      	cmp	r2, r6
 80076f6:	dbf9      	blt.n	80076ec <can_iface_init+0xa4>
		plst->plinknext = ptmp;
		plst = ptmp++;
	}

	/* Setup circular buffer for receive CAN msgs */
	if (numrx == 0)  {pctl->ret = -3; return pctl;} // Bogus rx buffering count
 80076f8:	b92f      	cbnz	r7, 8007706 <can_iface_init+0xbe>
 80076fa:	23fd      	movs	r3, #253	; 0xfd
 80076fc:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
 8007700:	4628      	mov	r0, r5
 8007702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pcann = (struct CANRCVBUFN*)calloc(numrx, sizeof(struct CANRCVBUFN));
 8007706:	2118      	movs	r1, #24
 8007708:	4638      	mov	r0, r7
 800770a:	f002 ff1f 	bl	800a54c <calloc>
	if (pcann == NULL){pctl->ret = -4; taskEXIT_CRITICAL(); return NULL;} // Get buff failed
 800770e:	b938      	cbnz	r0, 8007720 <can_iface_init+0xd8>
 8007710:	23fc      	movs	r3, #252	; 0xfc
 8007712:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
 8007716:	f7ff fcbf 	bl	8007098 <vPortExitCritical>
 800771a:	2000      	movs	r0, #0
 800771c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Initialize pointers for "add"ing CAN msgs to the circular buffer */
	pctl->cirptrs.pbegin = pcann;
 8007720:	65a8      	str	r0, [r5, #88]	; 0x58
	pctl->cirptrs.pwork  = pcann;
 8007722:	6628      	str	r0, [r5, #96]	; 0x60
	pctl->cirptrs.pend   = pcann + numrx;
 8007724:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007728:	00fb      	lsls	r3, r7, #3
 800772a:	4403      	add	r3, r0
 800772c:	65eb      	str	r3, [r5, #92]	; 0x5c

	/* NOTE: pctl->tsknote gets initialized
      when 'MailboxTask' calls 'can_iface_mbx_init' */

taskEXIT_CRITICAL();
 800772e:	f7ff fcb3 	bl	8007098 <vPortExitCritical>

	return pctl;	// Return pointer to control block
 8007732:	4628      	mov	r0, r5
}
 8007734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007738:	20002ee8 	.word	0x20002ee8
 800773c:	20002eec 	.word	0x20002eec
 8007740:	20002efc 	.word	0x20002efc

08007744 <can_driver_put>:
int can_driver_put(struct CAN_CTLBLOCK* pctl,struct CANRCVBUF *pcan,uint8_t maxretryct,uint8_t bits)
{
	volatile struct CAN_POOLBLOCK* pnew;
	volatile struct CAN_POOLBLOCK* pfor; 	// Loop pointer for the 'for’ loop.

	if (pctl == NULL) return -3;
 8007744:	2800      	cmp	r0, #0
 8007746:	d067      	beq.n	8007818 <can_driver_put+0xd4>
 ******************************************************************************/

extern uint32_t debugTX1c;

int can_driver_put(struct CAN_CTLBLOCK* pctl,struct CANRCVBUF *pcan,uint8_t maxretryct,uint8_t bits)
{
 8007748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800774c:	4605      	mov	r5, r0

	if (pctl == NULL) return -3;

	/* Reject CAN msg if CAN id is "bogus". */
	// If 11b is specified && bits in extended address are present it is bogus
	if (((pcan->id & CAN_ID_EXT) == 0) && ((pcan->id & CAN_EXTENDED_MASK) != 0))
 800774e:	680c      	ldr	r4, [r1, #0]
 8007750:	f014 0f04 	tst.w	r4, #4
 8007754:	d10b      	bne.n	800776e <can_driver_put+0x2a>
 8007756:	4832      	ldr	r0, [pc, #200]	; (8007820 <can_driver_put+0xdc>)
 8007758:	4020      	ands	r0, r4
 800775a:	b140      	cbz	r0, 800776e <can_driver_put+0x2a>
	{
		pctl->bogusct += 1;
 800775c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8007760:	3301      	adds	r3, #1
 8007762:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac
		return -2;
 8007766:	f06f 0001 	mvn.w	r0, #1
 800776a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800776e:	4699      	mov	r9, r3
 8007770:	4690      	mov	r8, r2
 8007772:	460e      	mov	r6, r1
	}

	/* Get a free block from the free list. */
//	disable_TXints(pctl, save);	// TX interrupt might move a msg to the free list.
	taskENTER_CRITICAL();
 8007774:	f7ff fc6e 	bl	8007054 <vPortEnterCritical>

	pnew = pctl->frii.plinknext;
 8007778:	68ac      	ldr	r4, [r5, #8]
	if (pnew == NULL)
 800777a:	b944      	cbnz	r4, 800778e <can_driver_put+0x4a>
	{ // Here, either no free list blocks OR this TX reached its limit
//		reenable_TXints(save);
		taskEXIT_CRITICAL();
 800777c:	f7ff fc8c 	bl	8007098 <vPortExitCritical>
		pctl->can_errors.can_msgovrflow += 1;	// Count overflows
 8007780:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007782:	3301      	adds	r3, #1
 8007784:	67eb      	str	r3, [r5, #124]	; 0x7c
		return -1;	// Return failure: no space & screwed
 8007786:	f04f 30ff 	mov.w	r0, #4294967295
 800778a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}	
	pctl->frii.plinknext = pnew->plinknext;
 800778e:	4627      	mov	r7, r4
 8007790:	f857 3b08 	ldr.w	r3, [r7], #8
 8007794:	60ab      	str	r3, [r5, #8]
	/* Build struct/block for addition to the pending list. */
	// retryct    xb[0]	// Counter for number of retries for TERR errors
	// maxretryct xb[1]	// Maximum number of TERR retry counts
	// bits	      xb[2]		// Use these bits to set some conditions (see below)
	// nosend     xb[3]	// Do not send: 0 = send; 1 = do NOT send on CAN bus (internal use only)
	pnew->can     = *pcan;	// Copy CAN msg.
 8007796:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800779a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	pnew->x.xb[1] = maxretryct;	// Maximum number of TERR retry counts
 800779e:	f884 8019 	strb.w	r8, [r4, #25]
	pnew->x.xb[2] = bits;	// Use these bits to set some conditions (see .h file)
 80077a2:	f884 901a 	strb.w	r9, [r4, #26]
	pnew->x.xb[3] = 0;	// not used for now
 80077a6:	2300      	movs	r3, #0
 80077a8:	76e3      	strb	r3, [r4, #27]
	pnew->x.xb[0] = 0;	// Retry counter for TERRs
 80077aa:	7623      	strb	r3, [r4, #24]
           and when the CAN id msg to be inserted has the same CAN id as the 'pfor' one
           already in the list, then place the new one further down so that msgs with 
           the same CAN id do not get their order of transmission altered. */
//	disable_TXints(pctl, save);

	for (pfor = &pctl->pend; pfor->plinknext != NULL; pfor = pfor->plinknext)
 80077ac:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80077b0:	e005      	b.n	80077be <can_driver_put+0x7a>
	{
		if (pnew->can.id < (pfor->plinknext)->can.id) // Pay attention: "value" vs "priority"
 80077b2:	68a1      	ldr	r1, [r4, #8]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	6892      	ldr	r2, [r2, #8]
 80077b8:	4291      	cmp	r1, r2
 80077ba:	d303      	bcc.n	80077c4 <can_driver_put+0x80>
           and when the CAN id msg to be inserted has the same CAN id as the 'pfor' one
           already in the list, then place the new one further down so that msgs with 
           the same CAN id do not get their order of transmission altered. */
//	disable_TXints(pctl, save);

	for (pfor = &pctl->pend; pfor->plinknext != NULL; pfor = pfor->plinknext)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	2a00      	cmp	r2, #0
 80077c2:	d1f6      	bne.n	80077b2 <can_driver_put+0x6e>
		if (pnew->can.id < (pfor->plinknext)->can.id) // Pay attention: "value" vs "priority"
			break;
	}

	/* Add new msg to pending list. (TX interrupt is still disabled) */
	pnew->plinknext = pfor->plinknext; 	// Insert new msg into 
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	6022      	str	r2, [r4, #0]
	pfor->plinknext = pnew;			//   pending list.
 80077c8:	601c      	str	r4, [r3, #0]

	if (pctl->pxprv == NULL) // Is sending complete?
 80077ca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80077cc:	b91b      	cbnz	r3, 80077d6 <can_driver_put+0x92>
	{ // pxprv == NULL means CAN mailbox did not get loaded, so CAN is idle.
		loadmbx2(pctl); // Start sending
 80077ce:	4628      	mov	r0, r5
 80077d0:	f7ff fed6 	bl	8007580 <loadmbx2>
 80077d4:	e01b      	b.n	800780e <can_driver_put+0xca>
	}
	else
	{ // CAN sending is in progress.
		if ((pctl->pxprv)->plinknext == pnew) // Does pxprv need adjustment?
 80077d6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	429c      	cmp	r4, r3
 80077dc:	d105      	bne.n	80077ea <can_driver_put+0xa6>
		{ // Here yes. We inserted a msg between 'pxprv' and 'pxprv->linknext'
			pctl->pxprv = pnew;	// Update 'pxprv' so that it still points to msg TX using.
 80077de:	652c      	str	r4, [r5, #80]	; 0x50
			pctl->can_errors.can_pxprv_fwd_one += 1;	// Count: Instances that pxprv was adjusted in 'for' loop
 80077e0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80077e4:	3301      	adds	r3, #1
 80077e6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		}
		/* Check if new msg is higher CAN priority than msg in mailbox */
#ifdef CHEATINGONHAL
		if ( (pctl->pend.plinknext)->can.id < (pctl->phcan->Instance->sTxMailBox[0] & ~0x1)  )
#else
		if ( (pctl->pend.plinknext)->can.id < (pctl->mbx0 & ~0x1)  ) // Use mailbox shadow id
 80077ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d20a      	bcs.n	800780e <can_driver_put+0xca>
#endif
		{ // Here, new msg has higher CAN priority than msg in mailbox
/* &&&&&&&&&&&&&& BEGIN ABORT MODS &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& */
#ifdef YESABORTCODE
			pctl->abortflag = 1;	// Set flag for interrupt routine use
 80077f8:	2401      	movs	r4, #1
 80077fa:	656c      	str	r4, [r5, #84]	; 0x54
		taskEXIT_CRITICAL(); // ==> NOTE: allow interrupts before setting abort!
 80077fc:	f7ff fc4c 	bl	8007098 <vPortExitCritical>
			HAL_CAN_AbortTxRequest(pctl->phcan, CAN_TX_MAILBOX0);
 8007800:	4621      	mov	r1, r4
 8007802:	6828      	ldr	r0, [r5, #0]
 8007804:	f7fc fe20 	bl	8004448 <HAL_CAN_AbortTxRequest>
//		taskEXIT_CRITICAL(); // ==> AFTER! Which fails!
			return 0;
 8007808:	2000      	movs	r0, #0
 800780a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#endif
		}
/* &&&&&&&&&&&&&& END ABORT MODS &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& */
	}
	taskEXIT_CRITICAL(); // Re-enable interrupts
 800780e:	f7ff fc43 	bl	8007098 <vPortExitCritical>
	return 0;	// Success!
 8007812:	2000      	movs	r0, #0
 8007814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
int can_driver_put(struct CAN_CTLBLOCK* pctl,struct CANRCVBUF *pcan,uint8_t maxretryct,uint8_t bits)
{
	volatile struct CAN_POOLBLOCK* pnew;
	volatile struct CAN_POOLBLOCK* pfor; 	// Loop pointer for the 'for’ loop.

	if (pctl == NULL) return -3;
 8007818:	f06f 0002 	mvn.w	r0, #2
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	001ffff8 	.word	0x001ffff8

08007824 <getpctl>:
 * *********************************************************************/
struct CAN_CTLBLOCK* getpctl(CAN_HandleTypeDef *phcan)
{
//if (pctl == pctl1) morse_trap(73);

	struct CAN_CTLBLOCK** ppx = &pctllist[0];
 8007824:	4b06      	ldr	r3, [pc, #24]	; (8007840 <getpctl+0x1c>)
	while (ppx != ppctllist) // Step through list of pointers 
 8007826:	e004      	b.n	8007832 <getpctl+0xe>
	{
		if ( (*ppx)->phcan == phcan) break;
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	6812      	ldr	r2, [r2, #0]
 800782c:	4282      	cmp	r2, r0
 800782e:	d004      	beq.n	800783a <getpctl+0x16>
		ppx++;
 8007830:	3304      	adds	r3, #4
struct CAN_CTLBLOCK* getpctl(CAN_HandleTypeDef *phcan)
{
//if (pctl == pctl1) morse_trap(73);

	struct CAN_CTLBLOCK** ppx = &pctllist[0];
	while (ppx != ppctllist) // Step through list of pointers 
 8007832:	4a04      	ldr	r2, [pc, #16]	; (8007844 <getpctl+0x20>)
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	4293      	cmp	r3, r2
 8007838:	d1f6      	bne.n	8007828 <getpctl+0x4>
	{
		if ( (*ppx)->phcan == phcan) break;
		ppx++;
	}
	return *ppx;
}
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20002eec 	.word	0x20002eec
 8007844:	20002ee8 	.word	0x20002ee8

08007848 <unloadfifo>:
 * @return	: Pointer to our CAN control bock
 * *********************************************************************/
uint32_t dbgcanrxctr;

static void unloadfifo(CAN_HandleTypeDef *phcan, uint32_t RxFifo)
{
 8007848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784c:	b092      	sub	sp, #72	; 0x48
 800784e:	4688      	mov	r8, r1
	struct CANRCVBUFN ncan; // CAN msg plus pctl
	ncan.toa = DTWTIME;
 8007850:	4b20      	ldr	r3, [pc, #128]	; (80078d4 <unloadfifo+0x8c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	9311      	str	r3, [sp, #68]	; 0x44

	HAL_StatusTypeDef ret;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007856:	2300      	movs	r3, #0
 8007858:	930b      	str	r3, [sp, #44]	; 0x2c
	CAN_RxHeaderTypeDef header;
	uint8_t data[8];

	struct CAN_CTLBLOCK* pctl = getpctl(phcan); // Lookup pctl given phcan
 800785a:	f7ff ffe3 	bl	8007824 <getpctl>
 800785e:	4605      	mov	r5, r0

	do /* Unload hardware RX FIFO */
	{
// NOTE: this could be done directly and avoid the expand/compress overhead
// but it would become processor dependent and would cheat on HAL.
		ret = HAL_CAN_GetRxMessage(pctl->phcan, RxFifo, &header, &data[0]);
 8007860:	ab02      	add	r3, sp, #8
 8007862:	aa04      	add	r2, sp, #16
 8007864:	4641      	mov	r1, r8
 8007866:	6828      	ldr	r0, [r5, #0]
 8007868:	f7fc fe16 	bl	8004498 <HAL_CAN_GetRxMessage>
		if (ret == HAL_OK)
 800786c:	4607      	mov	r7, r0
 800786e:	bb10      	cbnz	r0, 80078b6 <unloadfifo+0x6e>
		{
			/* Setup msg with pctl for our format */
			ncan.pctl = pctl;
 8007870:	9510      	str	r5, [sp, #64]	; 0x40
			canmsg_compress(&ncan.can, &header, &data[0]);
 8007872:	aa02      	add	r2, sp, #8
 8007874:	a904      	add	r1, sp, #16
 8007876:	a80c      	add	r0, sp, #48	; 0x30
 8007878:	f7ff fe52 	bl	8007520 <canmsg_compress>

			/* Place on queue for Mailbox task to filter, distribute, notify, etc. */
			*pctl->cirptrs.pwork = ncan; // Copy struct
 800787c:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 800787e:	ac0c      	add	r4, sp, #48	; 0x30
 8007880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007882:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007884:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007888:	e886 0003 	stmia.w	r6, {r0, r1}
			pctl->cirptrs.pwork++;       // Advance 'add' pointer
 800788c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800788e:	3318      	adds	r3, #24
 8007890:	662b      	str	r3, [r5, #96]	; 0x60
			if (pctl->cirptrs.pwork == pctl->cirptrs.pend) pctl->cirptrs.pwork = pctl->cirptrs.pbegin;
 8007892:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8007894:	4293      	cmp	r3, r2
 8007896:	d101      	bne.n	800789c <unloadfifo+0x54>
 8007898:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800789a:	662b      	str	r3, [r5, #96]	; 0x60

//if (ncan.can.id == 0xe360000c) dbgcanrxctr += 1;
dbgcanrxctr += 1;
 800789c:	4a0e      	ldr	r2, [pc, #56]	; (80078d8 <unloadfifo+0x90>)
 800789e:	6813      	ldr	r3, [r2, #0]
 80078a0:	3301      	adds	r3, #1
 80078a2:	6013      	str	r3, [r2, #0]

			if (pctl->tsknote.tskhandle != NULL)
 80078a4:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80078a6:	b130      	cbz	r0, 80078b6 <unloadfifo+0x6e>
			{ // Here, notify one task a new msg added to circular buffer
				xTaskNotifyFromISR(pctl->tsknote.tskhandle,\
 80078a8:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80078aa:	ab0b      	add	r3, sp, #44	; 0x2c
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	2300      	movs	r3, #0
 80078b0:	2201      	movs	r2, #1
 80078b2:	f7fe ff1d 	bl	80066f0 <xTaskGenericNotifyFromISR>
					pctl->tsknote.notebit, eSetBits,\
					&xHigherPriorityTaskWoken );
			}
		}
	} while (ret == HAL_OK); //JIC there is more than one in the hw fifo
 80078b6:	2f00      	cmp	r7, #0
 80078b8:	d0d2      	beq.n	8007860 <unloadfifo+0x18>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken ); // Trigger scheduler
 80078ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078bc:	b13b      	cbz	r3, 80078ce <unloadfifo+0x86>
 80078be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c2:	4b06      	ldr	r3, [pc, #24]	; (80078dc <unloadfifo+0x94>)
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
}
 80078ce:	b012      	add	sp, #72	; 0x48
 80078d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d4:	e0001004 	.word	0xe0001004
 80078d8:	200032fc 	.word	0x200032fc
 80078dc:	e000ed04 	.word	0xe000ed04

080078e0 <HAL_CAN_TxMailbox0CompleteCallback>:
	return *ppx;
}

/* Transmission Mailbox 0 complete callback. */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *phcan)
{
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
	struct CAN_CTLBLOCK* pctl = getpctl(phcan); // Lookup our pointer
 80078e4:	f7ff ff9e 	bl	8007824 <getpctl>
 80078e8:	4604      	mov	r4, r0

	/* Loop back CAN =>TX<= msgs. */
volatile	struct CAN_POOLBLOCK* p = pctl->pend.plinknext;
 80078ea:	6b06      	ldr	r6, [r0, #48]	; 0x30
	struct CANRCVBUFN ncan;
	ncan.pctl = pctl;
 80078ec:	9008      	str	r0, [sp, #32]
	ncan.can = p->can;
 80078ee:	ad04      	add	r5, sp, #16
 80078f0:	f106 0308 	add.w	r3, r6, #8
 80078f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

if (p->can.id == 0xff000000) dbgcantxctr += 1;
 80078fa:	68b3      	ldr	r3, [r6, #8]
 80078fc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8007900:	d103      	bne.n	800790a <HAL_CAN_TxMailbox0CompleteCallback+0x2a>
 8007902:	4a16      	ldr	r2, [pc, #88]	; (800795c <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 8007904:	6813      	ldr	r3, [r2, #0]
 8007906:	3301      	adds	r3, #1
 8007908:	6013      	str	r3, [r2, #0]

	
	/* Either loop back all, or msg-by-msg select loopback */
#ifndef CANMSGLOOPBACKALL
	// Check of loopback bit in msg is set
	if ( (p->x.xb[2] & CANMSGLOOPBACKBIT) != 0)
 800790a:	7eb3      	ldrb	r3, [r6, #26]
 800790c:	f013 0f04 	tst.w	r3, #4
 8007910:	d01a      	beq.n	8007948 <HAL_CAN_TxMailbox0CompleteCallback+0x68>
#endif
   {
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007912:	2300      	movs	r3, #0
 8007914:	9303      	str	r3, [sp, #12]
			*pctl->cirptrs.pwork = ncan;
 8007916:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8007918:	ae04      	add	r6, sp, #16
 800791a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800791c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800791e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007922:	e885 0003 	stmia.w	r5, {r0, r1}
			pctl->cirptrs.pwork++;
 8007926:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007928:	3318      	adds	r3, #24
 800792a:	6623      	str	r3, [r4, #96]	; 0x60
			if (pctl->cirptrs.pwork == pctl->cirptrs.pend) pctl->cirptrs.pwork = pctl->cirptrs.pbegin;
 800792c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800792e:	4293      	cmp	r3, r2
 8007930:	d101      	bne.n	8007936 <HAL_CAN_TxMailbox0CompleteCallback+0x56>
 8007932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007934:	6623      	str	r3, [r4, #96]	; 0x60

			if (pctl->tsknote.tskhandle != NULL)
 8007936:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8007938:	b130      	cbz	r0, 8007948 <HAL_CAN_TxMailbox0CompleteCallback+0x68>
			{ // Here, one task will be notified a msg added to circular buffer
				xTaskNotifyFromISR(pctl->tsknote.tskhandle,\
 800793a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800793c:	ab03      	add	r3, sp, #12
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	2300      	movs	r3, #0
 8007942:	2201      	movs	r2, #1
 8007944:	f7fe fed4 	bl	80066f0 <xTaskGenericNotifyFromISR>
					pctl->tsknote.notebit, eSetBits,\
					&xHigherPriorityTaskWoken );
			}
	}

	moveremove2(pctl);	// remove from pending list, add to free list
 8007948:	4620      	mov	r0, r4
 800794a:	f7ff fe0f 	bl	800756c <moveremove2>
	pctl->abortflag = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	6563      	str	r3, [r4, #84]	; 0x54
	loadmbx2(pctl);		// Load mailbox 0.  Mailbox should be available/empty.
 8007952:	4620      	mov	r0, r4
 8007954:	f7ff fe14 	bl	8007580 <loadmbx2>
//portYIELD_FROM_ISR( xHigherPriorityTaskWoken ); // Trigger scheduler
}
 8007958:	b00a      	add	sp, #40	; 0x28
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	20003300 	.word	0x20003300

08007960 <HAL_CAN_TxMailbox0AbortCallback>:

/* Transmission Mailbox 0 Abort callback. */
void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *phcan)
{
 8007960:	b510      	push	{r4, lr}
#ifdef YESABORTCODE
	struct CAN_CTLBLOCK* pctl = getpctl(phcan);
 8007962:	f7ff ff5f 	bl	8007824 <getpctl>
 8007966:	4604      	mov	r4, r0
	loadmbx2(pctl);		// Load mailbox 0.  Mailbox should be available/empty.
 8007968:	f7ff fe0a 	bl	8007580 <loadmbx2>
	pctl->abortflag = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	6563      	str	r3, [r4, #84]	; 0x54
 8007970:	bd10      	pop	{r4, pc}
 8007972:	bf00      	nop

08007974 <HAL_CAN_ErrorCallback>:
#endif
}

/* Error callback */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *phcan)
{
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4605      	mov	r5, r0
	struct CAN_CTLBLOCK* pctl = getpctl(phcan);
 8007978:	f7ff ff54 	bl	8007824 <getpctl>
 800797c:	4604      	mov	r4, r0
	if ((phcan->ErrorCode & HAL_CAN_ERROR_TX_ALST0) != 0 )
 800797e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007980:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007984:	d00f      	beq.n	80079a6 <HAL_CAN_ErrorCallback+0x32>
	{
		pctl->can_errors.can_tx_alst0_err += 1; // Running ct of arb lost: Mostly for debugging/monitoring
 8007986:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007988:	3301      	adds	r3, #1
 800798a:	6743      	str	r3, [r0, #116]	; 0x74
		if ((pctl->pxprv->plinknext->x.xb[2] & SOFTNART) != 0)
 800798c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	7e9b      	ldrb	r3, [r3, #26]
 8007992:	f013 0f01 	tst.w	r3, #1
 8007996:	d001      	beq.n	800799c <HAL_CAN_ErrorCallback+0x28>
		{ // Here this msg was not to be re-sent, i.e. NART
			moveremove2(pctl);	// Remove msg from pending queue
 8007998:	f7ff fde8 	bl	800756c <moveremove2>
		}
debugTX1c += 1;
 800799c:	4a10      	ldr	r2, [pc, #64]	; (80079e0 <HAL_CAN_ErrorCallback+0x6c>)
 800799e:	6813      	ldr	r3, [r2, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	e018      	b.n	80079d8 <HAL_CAN_ErrorCallback+0x64>
	}
	else if ((phcan->ErrorCode & HAL_CAN_ERROR_TX_TERR0) != 0 )
 80079a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079a8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80079ac:	d014      	beq.n	80079d8 <HAL_CAN_ErrorCallback+0x64>
	{
		pctl->pxprv->plinknext->x.xb[0] += 1;	// Count errors for this msg
 80079ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	7e13      	ldrb	r3, [r2, #24]
 80079b4:	3301      	adds	r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	7613      	strb	r3, [r2, #24]
		if (pctl->pxprv->plinknext->x.xb[0] > pctl->pxprv->plinknext->x.xb[1])
 80079ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	7e1a      	ldrb	r2, [r3, #24]
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	7e5b      	ldrb	r3, [r3, #25]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d904      	bls.n	80079d8 <HAL_CAN_ErrorCallback+0x64>
		{ // Here, too many error, remove from list
			pctl->can_errors.can_tx_bombed += 1;	// Number of bombouts
 80079ce:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80079d0:	3301      	adds	r3, #1
 80079d2:	6703      	str	r3, [r0, #112]	; 0x70
			moveremove2(pctl);	// Remove msg from pending queue
 80079d4:	f7ff fdca 	bl	800756c <moveremove2>
		}
	}	
	loadmbx2(pctl);		// Load mailbox 0.  Mailbox should be available/empty.
 80079d8:	4620      	mov	r0, r4
 80079da:	f7ff fdd1 	bl	8007580 <loadmbx2>
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	2000321c 	.word	0x2000321c

080079e4 <HAL_CAN_RxFifo0MsgPendingCallback>:
	} while (ret == HAL_OK); //JIC there is more than one in the hw fifo
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken ); // Trigger scheduler
}
/* Rx FIFO 0 message pending callback. */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *phcan)
{
 80079e4:	b508      	push	{r3, lr}
	unloadfifo(phcan, CAN_RX_FIFO0);
 80079e6:	2100      	movs	r1, #0
 80079e8:	f7ff ff2e 	bl	8007848 <unloadfifo>
 80079ec:	bd08      	pop	{r3, pc}
 80079ee:	bf00      	nop

080079f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
	return;
}
/* Rx FIFO 1 message pending callback. */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *phcan)
{
 80079f0:	b508      	push	{r3, lr}
	unloadfifo(phcan, CAN_RX_FIFO1);
 80079f2:	2101      	movs	r1, #1
 80079f4:	f7ff ff28 	bl	8007848 <unloadfifo>
 80079f8:	bd08      	pop	{r3, pc}
 80079fa:	bf00      	nop

080079fc <canfilter_setup_first>:

	Some of the values in the HAL struct do not need to be updated, e.g. 'FilterActivation' hence
   the call to  'first"' sets these up.
*/
HAL_StatusTypeDef canfilter_setup_first(uint8_t cannum, CAN_HandleTypeDef *phcan, uint8_t slavebankdmarc)
{
 80079fc:	b570      	push	{r4, r5, r6, lr}
	struct CANFILTERW* p;
	HAL_StatusTypeDef ret;

	switch(cannum)
 80079fe:	2802      	cmp	r0, #2
 8007a00:	d007      	beq.n	8007a12 <canfilter_setup_first+0x16>
 8007a02:	2803      	cmp	r0, #3
 8007a04:	d003      	beq.n	8007a0e <canfilter_setup_first+0x12>
 8007a06:	2801      	cmp	r0, #1
 8007a08:	d120      	bne.n	8007a4c <canfilter_setup_first+0x50>
	{
	case 1:	p = &canfilt1; break; // CAN 1
 8007a0a:	4c11      	ldr	r4, [pc, #68]	; (8007a50 <canfilter_setup_first+0x54>)
 8007a0c:	e002      	b.n	8007a14 <canfilter_setup_first+0x18>
	case 2: 	p = &canfilt2; break; // CAN 2
	case 3:	p = &canfilt3; break; // CAN 3
 8007a0e:	4c11      	ldr	r4, [pc, #68]	; (8007a54 <canfilter_setup_first+0x58>)
 8007a10:	e000      	b.n	8007a14 <canfilter_setup_first+0x18>
	HAL_StatusTypeDef ret;

	switch(cannum)
	{
	case 1:	p = &canfilt1; break; // CAN 1
	case 2: 	p = &canfilt2; break; // CAN 2
 8007a12:	4c11      	ldr	r4, [pc, #68]	; (8007a58 <canfilter_setup_first+0x5c>)
	case 3:	p = &canfilt3; break; // CAN 3
	default:		return HAL_ERROR;
	} // CAN1 & CAN3 start at zero
	if (cannum != 2)
 8007a14:	2802      	cmp	r0, #2
 8007a16:	d002      	beq.n	8007a1e <canfilter_setup_first+0x22>
	{ // Here, CAN 1 or CAN 3
		p->filt.FilterBank = 0;  // Filter bank number
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6163      	str	r3, [r4, #20]
 8007a1c:	e000      	b.n	8007a20 <canfilter_setup_first+0x24>
	}
	else
	{ // Here, CAN2 slave filter bank is shifted
		p->filt.FilterBank = slavebankdmarc;  // CAN1-CAN2 bank demarcation
 8007a1e:	6162      	str	r2, [r4, #20]
 8007a20:	4608      	mov	r0, r1
	}
	p->filt.FilterIdHigh         = 0;
 8007a22:	2500      	movs	r5, #0
 8007a24:	6025      	str	r5, [r4, #0]
	p->filt.FilterIdLow          = 0;
 8007a26:	6065      	str	r5, [r4, #4]
	p->filt.FilterMaskIdHigh     = 0;
 8007a28:	60a5      	str	r5, [r4, #8]
	p->filt.FilterMaskIdLow      = 0;
 8007a2a:	60e5      	str	r5, [r4, #12]
	p->filt.FilterFIFOAssignment = 0;	// FIFO 0
 8007a2c:	6125      	str	r5, [r4, #16]
	p->filt.FilterMode           = CAN_FILTERMODE_IDMASK;
 8007a2e:	61a5      	str	r5, [r4, #24]
	p->filt.FilterScale          = CAN_FILTERSCALE_32BIT;
 8007a30:	2601      	movs	r6, #1
 8007a32:	61e6      	str	r6, [r4, #28]
	p->filt.FilterActivation     = ENABLE;
 8007a34:	6226      	str	r6, [r4, #32]
	p->filt.SlaveStartFilterBank = slavebankdmarc; // No meaning for CAN3
 8007a36:	6262      	str	r2, [r4, #36]	; 0x24
	ret = HAL_CAN_ConfigFilter(phcan, &p->filt); // Store in hardware
 8007a38:	4621      	mov	r1, r4
 8007a3a:	f7fc fbe3 	bl	8004204 <HAL_CAN_ConfigFilter>
	p->oto_sw = 1;
 8007a3e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
	p->banknum = 0;
 8007a42:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	p->odd     = 0;
 8007a46:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
	return ret;
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
	switch(cannum)
	{
	case 1:	p = &canfilt1; break; // CAN 1
	case 2: 	p = &canfilt2; break; // CAN 2
	case 3:	p = &canfilt3; break; // CAN 3
	default:		return HAL_ERROR;
 8007a4c:	2001      	movs	r0, #1
	ret = HAL_CAN_ConfigFilter(phcan, &p->filt); // Store in hardware
	p->oto_sw = 1;
	p->banknum = 0;
	p->odd     = 0;
	return ret;
}
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	20002efc 	.word	0x20002efc
 8007a54:	20002f54 	.word	0x20002f54
 8007a58:	20002f28 	.word	0x20002f28

08007a5c <canfilter_setup_add32b_id>:
    uint8_t  fifo )
{
	struct CANFILTERW* p;
	HAL_StatusTypeDef ret;

	if (phcan == NULL) return  HAL_ERROR;
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	d049      	beq.n	8007af4 <canfilter_setup_add32b_id+0x98>
 * @return	: HAL_ERROR or HAL_OK
 * *************************************************************************/
HAL_StatusTypeDef canfilter_setup_add32b_id(uint8_t cannum, CAN_HandleTypeDef *phcan, \
    uint32_t id,   \
    uint8_t  fifo )
{
 8007a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a64:	4688      	mov	r8, r1
	struct CANFILTERW* p;
	HAL_StatusTypeDef ret;

	if (phcan == NULL) return  HAL_ERROR;

	switch(cannum)
 8007a66:	2802      	cmp	r0, #2
 8007a68:	d007      	beq.n	8007a7a <canfilter_setup_add32b_id+0x1e>
 8007a6a:	2803      	cmp	r0, #3
 8007a6c:	d003      	beq.n	8007a76 <canfilter_setup_add32b_id+0x1a>
 8007a6e:	2801      	cmp	r0, #1
 8007a70:	d142      	bne.n	8007af8 <canfilter_setup_add32b_id+0x9c>
	{
	case 1:	p = &canfilt1; break; // CAN 1
 8007a72:	4c27      	ldr	r4, [pc, #156]	; (8007b10 <canfilter_setup_add32b_id+0xb4>)
 8007a74:	e002      	b.n	8007a7c <canfilter_setup_add32b_id+0x20>
	case 2: 	p = &canfilt2; break; // CAN 2
	case 3:	p = &canfilt3; break; // CAN 3
 8007a76:	4c27      	ldr	r4, [pc, #156]	; (8007b14 <canfilter_setup_add32b_id+0xb8>)
 8007a78:	e000      	b.n	8007a7c <canfilter_setup_add32b_id+0x20>
	if (phcan == NULL) return  HAL_ERROR;

	switch(cannum)
	{
	case 1:	p = &canfilt1; break; // CAN 1
	case 2: 	p = &canfilt2; break; // CAN 2
 8007a7a:	4c27      	ldr	r4, [pc, #156]	; (8007b18 <canfilter_setup_add32b_id+0xbc>)
 8007a7c:	461f      	mov	r7, r3
 8007a7e:	4616      	mov	r6, r2
 8007a80:	4605      	mov	r5, r0
	case 3:	p = &canfilt3; break; // CAN 3
	default:		return HAL_ERROR;
	}

	/* Make sure the first setup was made */
	if (p->oto_sw == 0)
 8007a82:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007a86:	b92b      	cbnz	r3, 8007a94 <canfilter_setup_add32b_id+0x38>
	{ // If not setup, use default for CAN2 bank demarcation
		ret = canfilter_setup_first(cannum, phcan, 14);
 8007a88:	220e      	movs	r2, #14
 8007a8a:	4641      	mov	r1, r8
 8007a8c:	f7ff ffb6 	bl	80079fc <canfilter_setup_first>
		if (ret == HAL_ERROR) return HAL_ERROR;
 8007a90:	2801      	cmp	r0, #1
 8007a92:	d034      	beq.n	8007afe <canfilter_setup_add32b_id+0xa2>
	}

	/* Check for bad CAN1,2 bank number */
	if ((cannum == 2) && (p->banknum <= p->filt.SlaveStartFilterBank))
 8007a94:	2d02      	cmp	r5, #2
 8007a96:	d104      	bne.n	8007aa2 <canfilter_setup_add32b_id+0x46>
 8007a98:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8007a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d930      	bls.n	8007b04 <canfilter_setup_add32b_id+0xa8>
	{ // Here, bank number is in CAN1 area, but CAN2 request
		return HAL_ERROR;
	}

	if (p->odd != 0)
 8007aa2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8007aa6:	b17b      	cbz	r3, 8007ac8 <canfilter_setup_add32b_id+0x6c>
	{ // Here, next available is in the odd position

		/* Advance one of ID (out of pair for one bank) */
		p->odd = 0;	// Reset to even
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		p->banknum += 1; // Advance bank number
 8007aae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (p->banknum >= 28) return HAL_ERROR; // Oops check
 8007aba:	2b1b      	cmp	r3, #27
 8007abc:	d825      	bhi.n	8007b0a <canfilter_setup_add32b_id+0xae>

		/* Setup First position of pair with ID */
		p->filt.FilterMaskIdHigh = (id >> 16) & 0xffff;
 8007abe:	0c33      	lsrs	r3, r6, #16
 8007ac0:	60a3      	str	r3, [r4, #8]
		p->filt.FilterMaskIdLow  = (id >>  0) & 0xffff;
 8007ac2:	b2b6      	uxth	r6, r6
 8007ac4:	60e6      	str	r6, [r4, #12]
 8007ac6:	e006      	b.n	8007ad6 <canfilter_setup_add32b_id+0x7a>

	}
	else
	{ // Here, next position is in the first/even of pair. */
		/* Setup 2nd position of pair with ID */
		p->filt.FilterIdHigh = (id >> 16) & 0xffff;
 8007ac8:	0c33      	lsrs	r3, r6, #16
 8007aca:	6023      	str	r3, [r4, #0]
		p->filt.FilterIdLow  = (id >>  0) & 0xffff;
 8007acc:	b2b6      	uxth	r6, r6
 8007ace:	6066      	str	r6, [r4, #4]
		p->odd = 1;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	}
	p->filt.FilterBank = p->banknum;
 8007ad6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007ada:	6163      	str	r3, [r4, #20]
	p->filt.FilterFIFOAssignment = fifo & 0x1;
 8007adc:	f007 0701 	and.w	r7, r7, #1
 8007ae0:	6127      	str	r7, [r4, #16]
	p->filt.FilterMode           = CAN_FILTERMODE_IDLIST;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	61a3      	str	r3, [r4, #24]
	p->filt.FilterActivation     = ENABLE;
 8007ae6:	6223      	str	r3, [r4, #32]
	ret = HAL_CAN_ConfigFilter(phcan, &p->filt); // Store in hardware
 8007ae8:	4621      	mov	r1, r4
 8007aea:	4640      	mov	r0, r8
 8007aec:	f7fc fb8a 	bl	8004204 <HAL_CAN_ConfigFilter>

	return ret;
 8007af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t  fifo )
{
	struct CANFILTERW* p;
	HAL_StatusTypeDef ret;

	if (phcan == NULL) return  HAL_ERROR;
 8007af4:	2001      	movs	r0, #1
	p->filt.FilterMode           = CAN_FILTERMODE_IDLIST;
	p->filt.FilterActivation     = ENABLE;
	ret = HAL_CAN_ConfigFilter(phcan, &p->filt); // Store in hardware

	return ret;
}
 8007af6:	4770      	bx	lr
	switch(cannum)
	{
	case 1:	p = &canfilt1; break; // CAN 1
	case 2: 	p = &canfilt2; break; // CAN 2
	case 3:	p = &canfilt3; break; // CAN 3
	default:		return HAL_ERROR;
 8007af8:	2001      	movs	r0, #1
 8007afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Make sure the first setup was made */
	if (p->oto_sw == 0)
	{ // If not setup, use default for CAN2 bank demarcation
		ret = canfilter_setup_first(cannum, phcan, 14);
		if (ret == HAL_ERROR) return HAL_ERROR;
 8007afe:	2001      	movs	r0, #1
 8007b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* Check for bad CAN1,2 bank number */
	if ((cannum == 2) && (p->banknum <= p->filt.SlaveStartFilterBank))
	{ // Here, bank number is in CAN1 area, but CAN2 request
		return HAL_ERROR;
 8007b04:	2001      	movs	r0, #1
 8007b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	{ // Here, next available is in the odd position

		/* Advance one of ID (out of pair for one bank) */
		p->odd = 0;	// Reset to even
		p->banknum += 1; // Advance bank number
		if (p->banknum >= 28) return HAL_ERROR; // Oops check
 8007b0a:	2001      	movs	r0, #1
	p->filt.FilterMode           = CAN_FILTERMODE_IDLIST;
	p->filt.FilterActivation     = ENABLE;
	ret = HAL_CAN_ConfigFilter(phcan, &p->filt); // Store in hardware

	return ret;
}
 8007b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b10:	20002efc 	.word	0x20002efc
 8007b14:	20002f54 	.word	0x20002f54
 8007b18:	20002f28 	.word	0x20002f28

08007b1c <getserialbuf>:

The items maintain the bit used by SerialTaskSend to notify the originating
task that the buffer has been sent and is available for reuse.
*/
struct SERIALSENDTASKBCB* getserialbuf( UART_HandleTypeDef* phuart, uint16_t maxsize)
{
 8007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460d      	mov	r5, r1
	/* BCB: Buffer control block, passed on queue to SerialTaskSend. See SerialTaskSend.h */
	struct SERIALSENDTASKBCB* pbcb; // calloc'ed bcb pointer

	uint8_t* pbuf;	// callloc'ed byte buffer

taskENTER_CRITICAL();
 8007b22:	f7ff fa97 	bl	8007054 <vPortEnterCritical>
	/* Get one BCB block */
	pbcb = (struct SERIALSENDTASKBCB*)calloc(1, sizeof(struct SERIALSENDTASKBCB));	
 8007b26:	2114      	movs	r1, #20
 8007b28:	2001      	movs	r0, #1
 8007b2a:	f002 fd0f 	bl	800a54c <calloc>
	if (pbcb == NULL){taskEXIT_CRITICAL(); return NULL;}
 8007b2e:	b918      	cbnz	r0, 8007b38 <getserialbuf+0x1c>
 8007b30:	f7ff fab2 	bl	8007098 <vPortExitCritical>
 8007b34:	2000      	movs	r0, #0
 8007b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b38:	4604      	mov	r4, r0

	/* Get byte buffer */
	pbuf = (uint8_t*)calloc(maxsize, sizeof(uint8_t));	
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f002 fd05 	bl	800a54c <calloc>
	if (pbuf == NULL) return NULL;
 8007b42:	4607      	mov	r7, r0
 8007b44:	b1c8      	cbz	r0, 8007b7a <getserialbuf+0x5e>

	/* Initialize the BCB. */
	pbcb->phuart    = phuart;  // 'MX uart handle
 8007b46:	6026      	str	r6, [r4, #0]
	pbcb->tskhandle = xTaskGetCurrentTaskHandle();
 8007b48:	f7fe fc42 	bl	80063d0 <xTaskGetCurrentTaskHandle>
 8007b4c:	6060      	str	r0, [r4, #4]
	pbcb->pbuf      = pbuf;		// Ptr to uint8_t buffer
 8007b4e:	60e7      	str	r7, [r4, #12]
	pbcb->maxsize   = maxsize;    // Size of uint8_t buffer
 8007b50:	8265      	strh	r5, [r4, #18]
	pbcb->semaphore = xSemaphoreCreateBinary(); // Semaphore for this buffer
 8007b52:	2203      	movs	r2, #3
 8007b54:	2100      	movs	r1, #0
 8007b56:	2001      	movs	r0, #1
 8007b58:	f7fd fbba 	bl	80052d0 <xQueueGenericCreate>
 8007b5c:	60a0      	str	r0, [r4, #8]

	if (pbcb->semaphore == NULL){taskEXIT_CRITICAL(); return NULL;}
 8007b5e:	b918      	cbnz	r0, 8007b68 <getserialbuf+0x4c>
 8007b60:	f7ff fa9a 	bl	8007098 <vPortExitCritical>
 8007b64:	2000      	movs	r0, #0
 8007b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	xSemaphoreGive(pbcb->semaphore); // Initialize
 8007b68:	2300      	movs	r3, #0
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	f7fd fbd7 	bl	8005320 <xQueueGenericSend>

taskEXIT_CRITICAL();
 8007b72:	f7ff fa91 	bl	8007098 <vPortExitCritical>

	return pbcb;
 8007b76:	4620      	mov	r0, r4
 8007b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pbcb = (struct SERIALSENDTASKBCB*)calloc(1, sizeof(struct SERIALSENDTASKBCB));	
	if (pbcb == NULL){taskEXIT_CRITICAL(); return NULL;}

	/* Get byte buffer */
	pbuf = (uint8_t*)calloc(maxsize, sizeof(uint8_t));	
	if (pbuf == NULL) return NULL;
 8007b7a:	2000      	movs	r0, #0
	xSemaphoreGive(pbcb->semaphore); // Initialize

taskEXIT_CRITICAL();

	return pbcb;
}
 8007b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b7e:	bf00      	nop

08007b80 <yprintf_init>:
 * @brief	: Setup semaphore
 * @return	: 0 = init executed; -1 = init already done
 * ************************************************************************************** */
int yprintf_init(void)
{
	if (sw == 0)
 8007b80:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <yprintf_init+0x34>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	b993      	cbnz	r3, 8007bac <yprintf_init+0x2c>
 *  int yprintf_init(void);
 * @brief	: Setup semaphore
 * @return	: 0 = init executed; -1 = init already done
 * ************************************************************************************** */
int yprintf_init(void)
{
 8007b86:	b500      	push	{lr}
 8007b88:	b083      	sub	sp, #12
	if (sw == 0)
	{
		sw = -1;
 8007b8a:	22ff      	movs	r2, #255	; 0xff
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <yprintf_init+0x34>)
 8007b8e:	701a      	strb	r2, [r3, #0]
		osSemaphoreDef(vsnprintfSemaphore);
 8007b90:	2300      	movs	r3, #0
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	9301      	str	r3, [sp, #4]
		vsnprintfSemaphoreHandle = osSemaphoreCreate(osSemaphore(vsnprintfSemaphore), 1);
 8007b96:	2101      	movs	r1, #1
 8007b98:	4668      	mov	r0, sp
 8007b9a:	f7ff f8c3 	bl	8006d24 <osSemaphoreCreate>
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <yprintf_init+0x38>)
 8007ba0:	6018      	str	r0, [r3, #0]
	}
	return sw;
}
 8007ba2:	4b04      	ldr	r3, [pc, #16]	; (8007bb4 <yprintf_init+0x34>)
 8007ba4:	7818      	ldrb	r0, [r3, #0]
 8007ba6:	b003      	add	sp, #12
 8007ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bac:	4b01      	ldr	r3, [pc, #4]	; (8007bb4 <yprintf_init+0x34>)
 8007bae:	7818      	ldrb	r0, [r3, #0]
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20002f80 	.word	0x20002f80
 8007bb8:	20003304 	.word	0x20003304

08007bbc <yprintf>:
 * @param	: format = usual printf format
 * @param	: ... = usual printf arguments
 * @return	: Number of chars "printed"
 * ************************************************************************************** */
int yprintf(struct SERIALSENDTASKBCB** ppbcb, const char *fmt, ...)
{
 8007bbc:	b40e      	push	{r1, r2, r3}
 8007bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	ad07      	add	r5, sp, #28
 8007bc6:	f855 7b04 	ldr.w	r7, [r5], #4
	struct SERIALSENDTASKBCB* pbcb = *ppbcb;
 8007bca:	6804      	ldr	r4, [r0, #0]
	va_list argp;

	yprintf_init();	// JIC not init'd
 8007bcc:	f7ff ffd8 	bl	8007b80 <yprintf_init>

	/* Block if this buffer is not available. SerialSendTask will 'give' the semaphore 
      when the buffer has been sent. */
	xSemaphoreTake(pbcb->semaphore, 6000);
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f241 7270 	movw	r2, #6000	; 0x1770
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68a0      	ldr	r0, [r4, #8]
 8007bda:	f7fd fd39 	bl	8005650 <xQueueGenericReceive>

	/* Block if vsnprintf is being uses by someone else. */
	xSemaphoreTake( vsnprintfSemaphoreHandle, portMAX_DELAY );
 8007bde:	2300      	movs	r3, #0
 8007be0:	f04f 32ff 	mov.w	r2, #4294967295
 8007be4:	4619      	mov	r1, r3
 8007be6:	4812      	ldr	r0, [pc, #72]	; (8007c30 <yprintf+0x74>)
 8007be8:	6800      	ldr	r0, [r0, #0]
 8007bea:	f7fd fd31 	bl	8005650 <xQueueGenericReceive>

	/* Construct line of data.  Stop filling buffer if it is full. */
	va_start(argp, fmt);
	va_start(argp, fmt);
 8007bee:	9501      	str	r5, [sp, #4]
	pbcb->size = vsnprintf((char*)(pbcb->pbuf),pbcb->maxsize, fmt, argp);
 8007bf0:	462b      	mov	r3, r5
 8007bf2:	463a      	mov	r2, r7
 8007bf4:	8a61      	ldrh	r1, [r4, #18]
 8007bf6:	68e0      	ldr	r0, [r4, #12]
 8007bf8:	f003 f87e 	bl	800acf8 <vsnprintf>
 8007bfc:	8220      	strh	r0, [r4, #16]
	va_end(argp);

	/* Limit byte count in BCB to be put on queue, from vsnprintf to max buffer sizes. */
	if (pbcb->size > pbcb->maxsize) 
 8007bfe:	b280      	uxth	r0, r0
 8007c00:	8a63      	ldrh	r3, [r4, #18]
 8007c02:	4298      	cmp	r0, r3
 8007c04:	d900      	bls.n	8007c08 <yprintf+0x4c>
			pbcb->size = pbcb->maxsize;
 8007c06:	8223      	strh	r3, [r4, #16]

	/* Release semaphore controlling vsnprintf. */
	xSemaphoreGive( vsnprintfSemaphoreHandle );
 8007c08:	2300      	movs	r3, #0
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4808      	ldr	r0, [pc, #32]	; (8007c30 <yprintf+0x74>)
 8007c10:	6800      	ldr	r0, [r0, #0]
 8007c12:	f7fd fb85 	bl	8005320 <xQueueGenericSend>

	/* JIC */
	if (pbcb->size == 0) return 0;
 8007c16:	8a23      	ldrh	r3, [r4, #16]
 8007c18:	b123      	cbz	r3, 8007c24 <yprintf+0x68>

	/* Place Buffer Control Block on queue to SerialTaskSend */
	vSerialTaskSendQueueBuf(ppbcb); // Place on queue
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff fbfc 	bl	8007418 <vSerialTaskSendQueueBuf>

	return pbcb->size;
 8007c20:	8a20      	ldrh	r0, [r4, #16]
 8007c22:	e000      	b.n	8007c26 <yprintf+0x6a>

	/* Release semaphore controlling vsnprintf. */
	xSemaphoreGive( vsnprintfSemaphoreHandle );

	/* JIC */
	if (pbcb->size == 0) return 0;
 8007c24:	2000      	movs	r0, #0

	/* Place Buffer Control Block on queue to SerialTaskSend */
	vSerialTaskSendQueueBuf(ppbcb); // Place on queue

	return pbcb->size;
}
 8007c26:	b002      	add	sp, #8
 8007c28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007c2c:	b003      	add	sp, #12
 8007c2e:	4770      	bx	lr
 8007c30:	20003304 	.word	0x20003304

08007c34 <advancebuf>:
/* *************************************************************************
 * static void advancebuf(struct SERIALRCVBCB* prtmp);
 * @brief	: Advance to next line buffer
 * *************************************************************************/
static void advancebuf(struct SERIALRCVBCB* prtmp)
{		
 8007c34:	b500      	push	{lr}
 8007c36:	b085      	sub	sp, #20
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9303      	str	r3, [sp, #12]

	/* Zero terminator addition. */
	*prtmp->pwork = 0; // Add string terminator
 8007c3c:	6942      	ldr	r2, [r0, #20]
 8007c3e:	7013      	strb	r3, [r2, #0]
	
	/* Advance to beginning of next line buffer */
	prtmp->padd += prtmp->linesize;	// Step ahead one buffer length
 8007c40:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8007c42:	68c2      	ldr	r2, [r0, #12]
 8007c44:	441a      	add	r2, r3
 8007c46:	60c2      	str	r2, [r0, #12]
	if (prtmp->padd == prtmp->pend) prtmp->padd = prtmp->pbegin;
 8007c48:	6881      	ldr	r1, [r0, #8]
 8007c4a:	428a      	cmp	r2, r1
 8007c4c:	d101      	bne.n	8007c52 <advancebuf+0x1e>
 8007c4e:	6842      	ldr	r2, [r0, #4]
 8007c50:	60c2      	str	r2, [r0, #12]

	/* Initialize working char pointers */
	prtmp->pwork = prtmp->padd;	// Begin
 8007c52:	68c2      	ldr	r2, [r0, #12]
 8007c54:	6142      	str	r2, [r0, #20]
	prtmp->pworkend = prtmp->padd + prtmp->linesize - 2; // End
 8007c56:	3b02      	subs	r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	6183      	str	r3, [r0, #24]

	/* Notify originating task know a line is ready. */
	xTaskNotifyFromISR(prtmp->tskhandle, 
 8007c5c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007c5e:	6a00      	ldr	r0, [r0, #32]
 8007c60:	ab03      	add	r3, sp, #12
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	2201      	movs	r2, #1
 8007c68:	f7fe fd42 	bl	80066f0 <xTaskGenericNotifyFromISR>
		prtmp->notebit,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken );

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	b13b      	cbz	r3, 8007c80 <advancebuf+0x4c>
 8007c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c74:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <advancebuf+0x54>)
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
	return;
}
 8007c80:	b005      	add	sp, #20
 8007c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c86:	bf00      	nop
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <advanceptr>:
/* *************************************************************************
 * static void advanceptr(struct SERIALRCVBCB* prtmp);
 * @brief	: Advance pointer within the active line buffer
 * *************************************************************************/
static void advanceptr(struct SERIALRCVBCB* prtmp, char c)
{
 8007c8c:	b508      	push	{r3, lr}
	*prtmp->pwork++ = c;
 8007c8e:	6943      	ldr	r3, [r0, #20]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	6142      	str	r2, [r0, #20]
 8007c94:	7019      	strb	r1, [r3, #0]
	if (c == LINETERMINATOR) // || (c == 0XD))
 8007c96:	290a      	cmp	r1, #10
 8007c98:	d102      	bne.n	8007ca0 <advanceptr+0x14>
	{ // Here End of Line
		advancebuf(prtmp); // Advance to new line buffer and notify originator
 8007c9a:	f7ff ffcb 	bl	8007c34 <advancebuf>
		return;
 8007c9e:	bd08      	pop	{r3, pc}
	}

	/* Here, just an ordinary char stored. */
	if (prtmp->pwork == prtmp->pworkend)
 8007ca0:	6942      	ldr	r2, [r0, #20]
 8007ca2:	6983      	ldr	r3, [r0, #24]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d101      	bne.n	8007cac <advanceptr+0x20>
	{ // Here we are at end - 1 of line buffer
		advancebuf(prtmp); // Advance to new line buffer and notify originator
 8007ca8:	f7ff ffc4 	bl	8007c34 <advancebuf>
 8007cac:	bd08      	pop	{r3, pc}
 8007cae:	bf00      	nop

08007cb0 <unloaddma>:
 * static void unloaddma(struct SERIALRCVBCB* prbcb);
 * @brief	: DMA: Check for line terminator and store; enter from task poll
 * @param	: prbcb = pointer to buffer control block for uart causing callback
 * *************************************************************************/
static void unloaddma(struct SERIALRCVBCB* prbcb)
{
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4604      	mov	r4, r0
//		Diff = ( pctl->rxbuff_end - DMA_SNDTR(pctl->idma,pctl->rxdma_stream) - pctl->rxbuff_out );
//		if (Diff < 0)
//			Diff += pctl->rxbuff_size;  // Adjust for wrap

		/* Get number of data item count in DMA buffer "now" from DMA NDTR register. */
		dmandtr = __HAL_DMA_GET_COUNTER(prbcb->phuart->hdmarx); 
 8007cb4:	69c3      	ldr	r3, [r0, #28]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685d      	ldr	r5, [r3, #4]

		/* Difference between where we are taking out chars, and where DMA is or was storing. */
		diff = prbcb->penddma - dmandtr - prbcb->ptakedma; 
 8007cbc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007cbe:	b2ad      	uxth	r5, r5
 8007cc0:	1b53      	subs	r3, r2, r5
 8007cc2:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (diff < 0)
 8007cc4:	1b5d      	subs	r5, r3, r5
 8007cc6:	d50f      	bpl.n	8007ce8 <unloaddma+0x38>
		{ // Wrap around
			diff += prbcb->dmasize;
 8007cc8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8007cca:	441d      	add	r5, r3
 8007ccc:	e00c      	b.n	8007ce8 <unloaddma+0x38>
		}

		/* Copy dma circular buffer into buffered lines */
		while (diff > 0)
		{
			diff -= 1;
 8007cce:	3d01      	subs	r5, #1
			c = *prbcb->ptakedma++; // Get char from dma buffer
 8007cd0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007cd2:	1c53      	adds	r3, r2, #1
 8007cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8007cd6:	7811      	ldrb	r1, [r2, #0]
			if (prbcb->ptakedma == prbcb->penddma) prbcb->ptakedma = prbcb->pbegindma;
 8007cd8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d101      	bne.n	8007ce2 <unloaddma+0x32>
 8007cde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ce0:	6363      	str	r3, [r4, #52]	; 0x34
			
			advanceptr(prbcb,c);
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7ff ffd2 	bl	8007c8c <advanceptr>
		{ // Wrap around
			diff += prbcb->dmasize;
		}

		/* Copy dma circular buffer into buffered lines */
		while (diff > 0)
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	dcf0      	bgt.n	8007cce <unloaddma+0x1e>
			if (prbcb->ptakedma == prbcb->penddma) prbcb->ptakedma = prbcb->pbegindma;
			
			advanceptr(prbcb,c);
		}
		return;
}
 8007cec:	bd38      	pop	{r3, r4, r5, pc}
 8007cee:	bf00      	nop

08007cf0 <StartSerialTaskReceive>:
/* *************************************************************************
 * void StartSerialTaskReceive(void* argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartSerialTaskReceive(void* argument)
{
 8007cf0:	b510      	push	{r4, lr}
	struct SERIALRCVBCB* prtmp = prbhd;
 8007cf2:	4b11      	ldr	r3, [pc, #68]	; (8007d38 <StartSerialTaskReceive+0x48>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
	
	/* Do nothing until at least one tasks calls 
      'xSerialTaskRxAdduart' and sets up the 
       uart and buffering. */

	while (prtmp == NULL)
 8007cf6:	e004      	b.n	8007d02 <StartSerialTaskReceive+0x12>
	{
		osDelay(10);
 8007cf8:	200a      	movs	r0, #10
 8007cfa:	f7ff f80b 	bl	8006d14 <osDelay>
		prtmp = prbhd;
 8007cfe:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <StartSerialTaskReceive+0x48>)
 8007d00:	681b      	ldr	r3, [r3, #0]
	
	/* Do nothing until at least one tasks calls 
      'xSerialTaskRxAdduart' and sets up the 
       uart and buffering. */

	while (prtmp == NULL)
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f8      	beq.n	8007cf8 <StartSerialTaskReceive+0x8>

  /* Infinite loop */
  for(;;)
  {
		/* Wait for one tick or notification from a dma callback */
		xTaskNotifyWait(0, 0, NULL, 2);
 8007d06:	2302      	movs	r3, #2
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f7fe fc31 	bl	8006574 <xTaskNotifyWait>

		/* Go through list of receiving uarts and unload only dma uart buffers. */
		prtmp = prbhd;
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <StartSerialTaskReceive+0x48>)
 8007d14:	681c      	ldr	r4, [r3, #0]
 8007d16:	e000      	b.n	8007d1a <StartSerialTaskReceive+0x2a>
				{ // Here, straight ascii line buffers
					unloaddma(prtmp);
				}
			}
			prtmp2 = prtmp;
			prtmp = prtmp2->pnext;
 8007d18:	461c      	mov	r4, r3

		/* Go through list of receiving uarts and unload only dma uart buffers. */
		prtmp = prbhd;
		do
		{
			if (prtmp->dmaflag != 0)
 8007d1a:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 8007d1e:	b133      	cbz	r3, 8007d2e <StartSerialTaskReceive+0x3e>
			{ // Here, dma mode
				if (prtmp->CANmode == 1)
 8007d20:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d002      	beq.n	8007d2e <StartSerialTaskReceive+0x3e>
					gateway_PCtoCAN_unloaddma(prtmp);
#endif
				}
				else
				{ // Here, straight ascii line buffers
					unloaddma(prtmp);
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f7ff ffc1 	bl	8007cb0 <unloaddma>
				}
			}
			prtmp2 = prtmp;
			prtmp = prtmp2->pnext;
 8007d2e:	6823      	ldr	r3, [r4, #0]
		} while (prtmp2->pnext != prtmp2);
 8007d30:	429c      	cmp	r4, r3
 8007d32:	d1f1      	bne.n	8007d18 <StartSerialTaskReceive+0x28>
 8007d34:	e7e7      	b.n	8007d06 <StartSerialTaskReceive+0x16>
 8007d36:	bf00      	nop
 8007d38:	20002f84 	.word	0x20002f84

08007d3c <xSerialTaskRxAdduart>:
		uint32_t* pnoteval,\
		uint8_t   numline, \
		uint8_t   linesize,\
		char      dmasize, \
		uint8_t   CANmode  )
{
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	b085      	sub	sp, #20
 8007d42:	9001      	str	r0, [sp, #4]
 8007d44:	4689      	mov	r9, r1
 8007d46:	9202      	str	r2, [sp, #8]
 8007d48:	9303      	str	r3, [sp, #12]
 8007d4a:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8007d4e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8007d52:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 8007d56:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
#ifdef USECANMODEWITHGATEWAYROUTINES
	struct GATEWAYPCTOCAN* pgptc; // Pointer to Gateway Pc To Can
#endif

	/* There can be a problem with Tasks not started if the calling task gets here first */
	osDelay(10);
 8007d5a:	200a      	movs	r0, #10
 8007d5c:	f7fe ffda 	bl	8006d14 <osDelay>

taskENTER_CRITICAL();
 8007d60:	f7ff f978 	bl	8007054 <vPortEnterCritical>
	/* Add block with circular buffer pointers for this uart/usart to list */
	ptmp1 = (struct SERIALRCVBCB*)calloc(1, sizeof(struct SERIALRCVBCB));
 8007d64:	214c      	movs	r1, #76	; 0x4c
 8007d66:	2001      	movs	r0, #1
 8007d68:	f002 fbf0 	bl	800a54c <calloc>
	if (ptmp1  == NULL) {taskEXIT_CRITICAL();morse_trap(60);}
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	b920      	cbnz	r0, 8007d7a <xSerialTaskRxAdduart+0x3e>
 8007d70:	f7ff f992 	bl	8007098 <vPortExitCritical>
 8007d74:	203c      	movs	r0, #60	; 0x3c
 8007d76:	f000 f955 	bl	8008024 <morse_trap>
	if (prbhd  == NULL) // Is this the first?
 8007d7a:	4b37      	ldr	r3, [pc, #220]	; (8007e58 <xSerialTaskRxAdduart+0x11c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	b923      	cbnz	r3, 8007d8a <xSerialTaskRxAdduart+0x4e>
	{ // Yes.  
		prbhd = ptmp1;	// Point head to first on list
 8007d80:	4b35      	ldr	r3, [pc, #212]	; (8007e58 <xSerialTaskRxAdduart+0x11c>)
 8007d82:	601c      	str	r4, [r3, #0]
		ptmp1->pnext = ptmp1; // Point first (and last) item on list to self
 8007d84:	6024      	str	r4, [r4, #0]
 8007d86:	e005      	b.n	8007d94 <xSerialTaskRxAdduart+0x58>
	}
	else
	{ // No. One or more have been added
		/* Find end of list */
		ptmp2 = prbhd;	// Start at head
		while (ptmp2 != ptmp2->pnext) ptmp2 = ptmp2->pnext;
 8007d88:	4613      	mov	r3, r2
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d1fb      	bne.n	8007d88 <xSerialTaskRxAdduart+0x4c>
		ptmp2->pnext = ptmp1; // Last block points to added block
 8007d90:	601c      	str	r4, [r3, #0]
		ptmp1->pnext = ptmp1; // Added (and last) lock points to self
 8007d92:	6024      	str	r4, [r4, #0]
	}

	/* CAN msg conversion depends on line buffer size being large enough for CAN msg. */
	if ((CANmode != 0) && (linesize < sizeof(struct CANRCVBUFPLUS))) 
 8007d94:	f1ba 0f00 	cmp.w	sl, #0
 8007d98:	d002      	beq.n	8007da0 <xSerialTaskRxAdduart+0x64>
 8007d9a:	2d17      	cmp	r5, #23
 8007d9c:	d800      	bhi.n	8007da0 <xSerialTaskRxAdduart+0x64>
	     linesize = sizeof(struct CANRCVBUFPLUS);
 8007d9e:	2518      	movs	r5, #24

	/* Get memory for an array of line buffers for this uart */	
	pbuf = (char*)calloc(numline*linesize, sizeof(char));
 8007da0:	fb05 f70b 	mul.w	r7, r5, fp
 8007da4:	2101      	movs	r1, #1
 8007da6:	4638      	mov	r0, r7
 8007da8:	f002 fbd0 	bl	800a54c <calloc>
	if ( pbuf == NULL) {taskEXIT_CRITICAL();morse_trap(61);}
 8007dac:	4606      	mov	r6, r0
 8007dae:	b920      	cbnz	r0, 8007dba <xSerialTaskRxAdduart+0x7e>
 8007db0:	f7ff f972 	bl	8007098 <vPortExitCritical>
 8007db4:	203d      	movs	r0, #61	; 0x3d
 8007db6:	f000 f935 	bl	8008024 <morse_trap>

	/* Save parameters */
	// ptmp1 points to last item on list
	ptmp1->numlinexsize = numline*linesize;
 8007dba:	63a7      	str	r7, [r4, #56]	; 0x38
	ptmp1->linesize  = linesize;
 8007dbc:	87a5      	strh	r5, [r4, #60]	; 0x3c
	ptmp1->numline   = numline;
 8007dbe:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
	ptmp1->dmaflag   = dmaflag;
 8007dc2:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
	ptmp1->pnoteval  = pnoteval;
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	62a3      	str	r3, [r4, #40]	; 0x28
	ptmp1->notebit   = notebit;
 8007dca:	9b02      	ldr	r3, [sp, #8]
 8007dcc:	6263      	str	r3, [r4, #36]	; 0x24
	ptmp1->phuart    = phuart;
 8007dce:	9b01      	ldr	r3, [sp, #4]
 8007dd0:	61e3      	str	r3, [r4, #28]
	ptmp1->tskhandle = xTaskGetCurrentTaskHandle();
 8007dd2:	f7fe fafd 	bl	80063d0 <xTaskGetCurrentTaskHandle>
 8007dd6:	6220      	str	r0, [r4, #32]
	ptmp1->errorct   = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	64a3      	str	r3, [r4, #72]	; 0x48

	/* Initialize line buffer pointers */
	ptmp1->pbegin = pbuf; // First line buffer beginning
 8007ddc:	6066      	str	r6, [r4, #4]
	ptmp1->padd   = pbuf; // Pointer to where next line will be added
 8007dde:	60e6      	str	r6, [r4, #12]
	ptmp1->ptake  = pbuf; // Pointer to where next line will be taken
 8007de0:	6126      	str	r6, [r4, #16]
	ptmp1->pwork  = pbuf; // Pointer where next char in active line will be added
 8007de2:	6166      	str	r6, [r4, #20]
	ptmp1->pworkend = pbuf + linesize - 2; // End of 1st LINE buffer (allow for zero terminator)
 8007de4:	3d02      	subs	r5, #2
 8007de6:	4435      	add	r5, r6
 8007de8:	61a5      	str	r5, [r4, #24]
	ptmp1->pend = pbuf + numline*linesize; // End of line buffers + 1 line
 8007dea:	4437      	add	r7, r6
 8007dec:	60a7      	str	r7, [r4, #8]
	ptmp1->CANmode = CANmode;
 8007dee:	f884 a042 	strb.w	sl, [r4, #66]	; 0x42

	if (dmaflag != 0)
 8007df2:	f1b9 0f00 	cmp.w	r9, #0
 8007df6:	d01c      	beq.n	8007e32 <xSerialTaskRxAdduart+0xf6>
	{ // Circular DMA buffer 
		pbuf = (char*)calloc((int)dmasize, sizeof(char));
 8007df8:	2101      	movs	r1, #1
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f002 fba6 	bl	800a54c <calloc>
		if ( pbuf == NULL) morse_trap(62);
 8007e00:	4605      	mov	r5, r0
 8007e02:	b910      	cbnz	r0, 8007e0a <xSerialTaskRxAdduart+0xce>
 8007e04:	203e      	movs	r0, #62	; 0x3e
 8007e06:	f000 f90d 	bl	8008024 <morse_trap>
		ptmp1->pbegindma = pbuf;   // Pointer to beginning of DMA circular buffer
 8007e0a:	62e5      	str	r5, [r4, #44]	; 0x2c
		ptmp1->penddma   = pbuf + dmasize; // Pointer to end + 1
 8007e0c:	eb05 0308 	add.w	r3, r5, r8
 8007e10:	6323      	str	r3, [r4, #48]	; 0x30
		ptmp1->ptakedma  = pbuf;   // "Take" Pointer into DMA buffer
 8007e12:	6365      	str	r5, [r4, #52]	; 0x34
		ptmp1->dmasize   = dmasize; // Total number of chars in DMA buffer
 8007e14:	fa1f f288 	uxth.w	r2, r8
 8007e18:	87e2      	strh	r2, [r4, #62]	; 0x3e
			ptmp1->pgptc = pgptc; // Save pointer to CAN conversion control block
		}
#endif

		/* Start uart-dma circular mode.  Start once; run forever. */
		halret = HAL_UART_Receive_DMA(ptmp1->phuart, (uint8_t*)ptmp1->pbegindma, ptmp1->dmasize);
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	69e0      	ldr	r0, [r4, #28]
 8007e1e:	f7fc ff15 	bl	8004c4c <HAL_UART_Receive_DMA>
		if (halret == HAL_ERROR)
 8007e22:	2801      	cmp	r0, #1
 8007e24:	d111      	bne.n	8007e4a <xSerialTaskRxAdduart+0x10e>
		{
			taskEXIT_CRITICAL();
 8007e26:	f7ff f937 	bl	8007098 <vPortExitCritical>
			morse_trap(64);
 8007e2a:	2040      	movs	r0, #64	; 0x40
 8007e2c:	f000 f8fa 	bl	8008024 <morse_trap>
 8007e30:	e00b      	b.n	8007e4a <xSerialTaskRxAdduart+0x10e>
//			return NULL;
		}
	}
	else
	{ // Start char-by-char mode. Restart upon each interrupt.
		halret = HAL_UART_Receive_IT(ptmp1->phuart, (uint8_t*)ptmp1->pwork, 1);
 8007e32:	2201      	movs	r2, #1
 8007e34:	4631      	mov	r1, r6
 8007e36:	69e0      	ldr	r0, [r4, #28]
 8007e38:	f7fc fe94 	bl	8004b64 <HAL_UART_Receive_IT>
		if (halret == HAL_ERROR)
 8007e3c:	2801      	cmp	r0, #1
 8007e3e:	d104      	bne.n	8007e4a <xSerialTaskRxAdduart+0x10e>
		{
			taskEXIT_CRITICAL();
 8007e40:	f7ff f92a 	bl	8007098 <vPortExitCritical>
			morse_trap(65);
 8007e44:	2041      	movs	r0, #65	; 0x41
 8007e46:	f000 f8ed 	bl	8008024 <morse_trap>
//			return NULL;
		}
	}
taskEXIT_CRITICAL();
 8007e4a:	f7ff f925 	bl	8007098 <vPortExitCritical>
	return ptmp1;	// Success return pointer to this 'BCB
}
 8007e4e:	4620      	mov	r0, r4
 8007e50:	b005      	add	sp, #20
 8007e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e56:	bf00      	nop
 8007e58:	20002f84 	.word	0x20002f84

08007e5c <xSerialTaskReceiveCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: SerialTaskReceiveHandle
 * *************************************************************************/
 osThreadId xSerialTaskReceiveCreate(uint32_t taskpriority)
{
 8007e5c:	b500      	push	{lr}
 8007e5e:	b083      	sub	sp, #12
unsigned short usStackDepth,
void *pvParameters,
UBaseType_t uxPriority,
TaskHandle_t *pxCreatedTask );
*/
	BaseType_t ret = xTaskCreate(StartSerialTaskReceive, "StartSerialTaskReceive",\
 8007e60:	4b08      	ldr	r3, [pc, #32]	; (8007e84 <xSerialTaskReceiveCreate+0x28>)
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	9000      	str	r0, [sp, #0]
 8007e66:	2300      	movs	r3, #0
 8007e68:	2260      	movs	r2, #96	; 0x60
 8007e6a:	4907      	ldr	r1, [pc, #28]	; (8007e88 <xSerialTaskReceiveCreate+0x2c>)
 8007e6c:	4807      	ldr	r0, [pc, #28]	; (8007e8c <xSerialTaskReceiveCreate+0x30>)
 8007e6e:	f7fd fe87 	bl	8005b80 <xTaskCreate>
        96, NULL, taskpriority, &SerialTaskReceiveHandle);
	if (ret != pdPASS) return NULL;
 8007e72:	2801      	cmp	r0, #1
 8007e74:	d102      	bne.n	8007e7c <xSerialTaskReceiveCreate+0x20>
	return SerialTaskReceiveHandle;
 8007e76:	4b03      	ldr	r3, [pc, #12]	; (8007e84 <xSerialTaskReceiveCreate+0x28>)
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	e000      	b.n	8007e7e <xSerialTaskReceiveCreate+0x22>
UBaseType_t uxPriority,
TaskHandle_t *pxCreatedTask );
*/
	BaseType_t ret = xTaskCreate(StartSerialTaskReceive, "StartSerialTaskReceive",\
        96, NULL, taskpriority, &SerialTaskReceiveHandle);
	if (ret != pdPASS) return NULL;
 8007e7c:	2000      	movs	r0, #0
	return SerialTaskReceiveHandle;
}
 8007e7e:	b003      	add	sp, #12
 8007e80:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e84:	20002f88 	.word	0x20002f88
 8007e88:	0800e958 	.word	0x0800e958
 8007e8c:	08007cf1 	.word	0x08007cf1

08007e90 <xSerialTaskReceiveGetline>:
 *	@brief	: Load buffer control block onto queue for sending
 * @param	: pbcb = Pointer to Buffer Control Block
 * @return	: Pointer to line buffer; NULL = no new lines
 * *************************************************************************/
char* xSerialTaskReceiveGetline(struct SERIALRCVBCB* pbcb)
{
 8007e90:	4603      	mov	r3, r0
	char* p = NULL;

	/* Check no new lines. */
	if (pbcb->ptake == pbcb->padd) return p;
 8007e92:	6900      	ldr	r0, [r0, #16]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	4290      	cmp	r0, r2
 8007e98:	d008      	beq.n	8007eac <xSerialTaskReceiveGetline+0x1c>
	p = pbcb->ptake;

	/* Advance 'take' pointer w wraparound check. */
	pbcb->ptake += pbcb->linesize;
 8007e9a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8007e9c:	4402      	add	r2, r0
 8007e9e:	611a      	str	r2, [r3, #16]
	if (pbcb->ptake >= pbcb->pend) pbcb->ptake = pbcb->pbegin;
 8007ea0:	6899      	ldr	r1, [r3, #8]
 8007ea2:	428a      	cmp	r2, r1
 8007ea4:	d303      	bcc.n	8007eae <xSerialTaskReceiveGetline+0x1e>
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	611a      	str	r2, [r3, #16]
 8007eaa:	4770      	bx	lr
char* xSerialTaskReceiveGetline(struct SERIALRCVBCB* pbcb)
{
	char* p = NULL;

	/* Check no new lines. */
	if (pbcb->ptake == pbcb->padd) return p;
 8007eac:	2000      	movs	r0, #0
	/* Advance 'take' pointer w wraparound check. */
	pbcb->ptake += pbcb->linesize;
	if (pbcb->ptake >= pbcb->pend) pbcb->ptake = pbcb->pbegin;

	return p;
}
 8007eae:	4770      	bx	lr

08007eb0 <HAL_UART_RxCpltCallback>:
 *				: OR, char-by-char completion of sending
 * *************************************************************************/
/* DMA buffer complete, => OR <= char-by-char complete */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *phuart)
{
 8007eb0:	b530      	push	{r4, r5, lr}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	4605      	mov	r5, r0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9303      	str	r3, [sp, #12]

	/* Look up buffer control block, given uart handle */
	struct SERIALRCVBCB* prtmp = prbhd;
 8007eba:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <HAL_UART_RxCpltCallback+0x60>)
 8007ebc:	681c      	ldr	r4, [r3, #0]
	while (prtmp->phuart != phuart) prtmp++;
 8007ebe:	e000      	b.n	8007ec2 <HAL_UART_RxCpltCallback+0x12>
 8007ec0:	344c      	adds	r4, #76	; 0x4c
 8007ec2:	69e3      	ldr	r3, [r4, #28]
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	d1fb      	bne.n	8007ec0 <HAL_UART_RxCpltCallback+0x10>

	/* Note char-by-char mode from dma mode. */
	if (prtmp->dmaflag == 0)
 8007ec8:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 8007ecc:	b953      	cbnz	r3, 8007ee4 <HAL_UART_RxCpltCallback+0x34>
	{ // Here char-by-char interrupt mode

		// Note: char-by-char stores directly to line buffer
		advanceptr(prtmp,*prtmp->pwork); 
 8007ece:	6963      	ldr	r3, [r4, #20]
 8007ed0:	7819      	ldrb	r1, [r3, #0]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff feda 	bl	8007c8c <advanceptr>

		/* Restart receiving one char. */
		HAL_UART_Receive_IT(phuart, (uint8_t*)prtmp->pwork, 1); // Get next char		
 8007ed8:	2201      	movs	r2, #1
 8007eda:	6961      	ldr	r1, [r4, #20]
 8007edc:	4628      	mov	r0, r5
 8007ede:	f7fc fe41 	bl	8004b64 <HAL_UART_Receive_IT>
		return;
 8007ee2:	e012      	b.n	8007f0a <HAL_UART_RxCpltCallback+0x5a>
	}

	/* Trigger Recieve Task to poll dma uarts */
	xTaskNotifyFromISR(SerialTaskReceiveHandle, 
 8007ee4:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <HAL_UART_RxCpltCallback+0x64>)
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	ab03      	add	r3, sp, #12
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	2300      	movs	r3, #0
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f7fe fbfd 	bl	80066f0 <xTaskGenericNotifyFromISR>
		0,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken ); 

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007ef6:	9b03      	ldr	r3, [sp, #12]
 8007ef8:	b13b      	cbz	r3, 8007f0a <HAL_UART_RxCpltCallback+0x5a>
 8007efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efe:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <HAL_UART_RxCpltCallback+0x68>)
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	f3bf 8f6f 	isb	sy
	return;
}
 8007f0a:	b005      	add	sp, #20
 8007f0c:	bd30      	pop	{r4, r5, pc}
 8007f0e:	bf00      	nop
 8007f10:	20002f84 	.word	0x20002f84
 8007f14:	20002f88 	.word	0x20002f88
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <HAL_UART_RxHalfCpltCallback>:
 * *************************************************************************/
/* NOTE: under interrupt from callback. */

/* DMA Half buffer complete callback (dma only) */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *phuart)
{
 8007f1c:	b508      	push	{r3, lr}
	HAL_UART_RxCpltCallback(phuart);
 8007f1e:	f7ff ffc7 	bl	8007eb0 <HAL_UART_RxCpltCallback>
 8007f22:	bd08      	pop	{r3, pc}

08007f24 <HAL_UART_ErrorCallback>:
 * *************************************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef *phuart)
{
	/* Look up buffer control block, given uart handle */
	/* Look up buffer control block, given uart handle */
	struct SERIALRCVBCB* prtmp = prbhd;
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <HAL_UART_ErrorCallback+0x18>)
 8007f26:	681b      	ldr	r3, [r3, #0]
	while (prtmp->phuart != phuart) prtmp++;
 8007f28:	e000      	b.n	8007f2c <HAL_UART_ErrorCallback+0x8>
 8007f2a:	334c      	adds	r3, #76	; 0x4c
 8007f2c:	69da      	ldr	r2, [r3, #28]
 8007f2e:	4282      	cmp	r2, r0
 8007f30:	d1fb      	bne.n	8007f2a <HAL_UART_ErrorCallback+0x6>
	prtmp->errorct += 1;
 8007f32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f34:	3201      	adds	r2, #1
 8007f36:	649a      	str	r2, [r3, #72]	; 0x48
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20002f84 	.word	0x20002f84

08007f40 <delay>:
 * @brief	: Delay based on DTW counter with LEDs ON
 * @param	: ticks = DTW count to delay
 * @param	: on = GPIO_PIN_RESET or GPIO_PIN_SET
 * *************************************************************************/
static void delay(uint32_t ticks, uint8_t on)
{
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	460d      	mov	r5, r1
	uint32_t tx = DTWTIME + ticks;
 8007f44:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <delay+0x24>)
 8007f46:	681c      	ldr	r4, [r3, #0]
 8007f48:	4404      	add	r4, r0
	while ((int32_t)(tx - DTWTIME) > 0)
 8007f4a:	e005      	b.n	8007f58 <delay+0x18>
	{
			HAL_GPIO_WritePin(GPIOC, LEDALL, on); 
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f52:	4805      	ldr	r0, [pc, #20]	; (8007f68 <delay+0x28>)
 8007f54:	f7fb fb7e 	bl	8003654 <HAL_GPIO_WritePin>
 * @param	: on = GPIO_PIN_RESET or GPIO_PIN_SET
 * *************************************************************************/
static void delay(uint32_t ticks, uint8_t on)
{
	uint32_t tx = DTWTIME + ticks;
	while ((int32_t)(tx - DTWTIME) > 0)
 8007f58:	4b02      	ldr	r3, [pc, #8]	; (8007f64 <delay+0x24>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	1ae3      	subs	r3, r4, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dcf4      	bgt.n	8007f4c <delay+0xc>
	{
			HAL_GPIO_WritePin(GPIOC, LEDALL, on); 
	}
	return;
}
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	e0001004 	.word	0xe0001004
 8007f68:	40011000 	.word	0x40011000

08007f6c <morse_generate>:
/* *************************************************************************
 * static void morse_generate(char c);
 *	@brief	: c = character to send as Morse cdoe
 * *************************************************************************/
static void morse_generate(char c)
{
 8007f6c:	b538      	push	{r3, r4, r5, lr}
	const struct MORSE_ELEMENT* ptbl = mrse;
	int i;
	uint8_t ct;
	uint8_t dd;
	
	for (i = 0; i < (74 - 16); i++)
 8007f6e:	2200      	movs	r2, #0
 * static void morse_generate(char c);
 *	@brief	: c = character to send as Morse cdoe
 * *************************************************************************/
static void morse_generate(char c)
{
	const struct MORSE_ELEMENT* ptbl = mrse;
 8007f70:	4b13      	ldr	r3, [pc, #76]	; (8007fc0 <morse_generate+0x54>)
	int i;
	uint8_t ct;
	uint8_t dd;
	
	for (i = 0; i < (74 - 16); i++)
 8007f72:	e022      	b.n	8007fba <morse_generate+0x4e>
	{
		if (ptbl->c == c)
 8007f74:	7819      	ldrb	r1, [r3, #0]
 8007f76:	4281      	cmp	r1, r0
 8007f78:	d11d      	bne.n	8007fb6 <morse_generate+0x4a>
		{
				ct = ptbl->ct;
 8007f7a:	789c      	ldrb	r4, [r3, #2]
				dd = ptbl->dd;	
 8007f7c:	785d      	ldrb	r5, [r3, #1]
				while (ct > 0)
 8007f7e:	e013      	b.n	8007fa8 <morse_generate+0x3c>
				{
					if ((dd & 0x80) == 0)
 8007f80:	f015 0f80 	tst.w	r5, #128	; 0x80
 8007f84:	d104      	bne.n	8007f90 <morse_generate+0x24>
					{ // Here, dot
						delay(TIC_DIT, GPIO_PIN_RESET);
 8007f86:	2100      	movs	r1, #0
 8007f88:	480e      	ldr	r0, [pc, #56]	; (8007fc4 <morse_generate+0x58>)
 8007f8a:	f7ff ffd9 	bl	8007f40 <delay>
 8007f8e:	e003      	b.n	8007f98 <morse_generate+0x2c>
					}
					else
					{ // Here, dash
						delay(TIC_DAH, GPIO_PIN_RESET);						
 8007f90:	2100      	movs	r1, #0
 8007f92:	480d      	ldr	r0, [pc, #52]	; (8007fc8 <morse_generate+0x5c>)
 8007f94:	f7ff ffd4 	bl	8007f40 <delay>
					}
					delay(TIC_IDIT, GPIO_PIN_SET);
 8007f98:	2101      	movs	r1, #1
 8007f9a:	480c      	ldr	r0, [pc, #48]	; (8007fcc <morse_generate+0x60>)
 8007f9c:	f7ff ffd0 	bl	8007f40 <delay>
					dd = dd << 1;
 8007fa0:	006d      	lsls	r5, r5, #1
 8007fa2:	b2ed      	uxtb	r5, r5
					ct -= 1;
 8007fa4:	3c01      	subs	r4, #1
 8007fa6:	b2e4      	uxtb	r4, r4
	{
		if (ptbl->c == c)
		{
				ct = ptbl->ct;
				dd = ptbl->dd;	
				while (ct > 0)
 8007fa8:	2c00      	cmp	r4, #0
 8007faa:	d1e9      	bne.n	8007f80 <morse_generate+0x14>
					}
					delay(TIC_IDIT, GPIO_PIN_SET);
					dd = dd << 1;
					ct -= 1;
				}
				delay(TIC_ICHAR,GPIO_PIN_SET);
 8007fac:	2101      	movs	r1, #1
 8007fae:	4808      	ldr	r0, [pc, #32]	; (8007fd0 <morse_generate+0x64>)
 8007fb0:	f7ff ffc6 	bl	8007f40 <delay>
				return;
 8007fb4:	bd38      	pop	{r3, r4, r5, pc}
		}
		ptbl++;
 8007fb6:	3303      	adds	r3, #3
	const struct MORSE_ELEMENT* ptbl = mrse;
	int i;
	uint8_t ct;
	uint8_t dd;
	
	for (i = 0; i < (74 - 16); i++)
 8007fb8:	3201      	adds	r2, #1
 8007fba:	2a39      	cmp	r2, #57	; 0x39
 8007fbc:	ddda      	ble.n	8007f74 <morse_generate+0x8>
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	0800e970 	.word	0x0800e970
 8007fc4:	00b71b00 	.word	0x00b71b00
 8007fc8:	02dc6c00 	.word	0x02dc6c00
 8007fcc:	00ee0980 	.word	0x00ee0980
 8007fd0:	03b82600 	.word	0x03b82600

08007fd4 <morse_number>:
 * void morse_number(uint32_t n);
 *	@brief	: Send a character string as Morse code
 * @param	: nx = number to send
 * *************************************************************************/
void morse_number(uint32_t nx)
{
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	b084      	sub	sp, #16
	char c[11];
	int i = 0;
 8007fd8:	2400      	movs	r4, #0
	do
	{
		c[i] = (nx % 10) + '0';
 8007fda:	4b10      	ldr	r3, [pc, #64]	; (800801c <morse_number+0x48>)
 8007fdc:	fba3 2300 	umull	r2, r3, r3, r0
 8007fe0:	08db      	lsrs	r3, r3, #3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007fe8:	0059      	lsls	r1, r3, #1
 8007fea:	1a43      	subs	r3, r0, r1
 8007fec:	a904      	add	r1, sp, #16
 8007fee:	4421      	add	r1, r4
 8007ff0:	3330      	adds	r3, #48	; 0x30
 8007ff2:	f801 3c0c 	strb.w	r3, [r1, #-12]
		nx = nx/10;
 8007ff6:	4610      	mov	r0, r2
		i += 1;
 8007ff8:	3401      	adds	r4, #1
	} while (nx != 0);
 8007ffa:	2a00      	cmp	r2, #0
 8007ffc:	d1ed      	bne.n	8007fda <morse_number+0x6>
 8007ffe:	e005      	b.n	800800c <morse_number+0x38>

	while (--i >= 0)
	{
		morse_generate(c[i]);
 8008000:	ab04      	add	r3, sp, #16
 8008002:	4423      	add	r3, r4
 8008004:	f813 0c0c 	ldrb.w	r0, [r3, #-12]
 8008008:	f7ff ffb0 	bl	8007f6c <morse_generate>
		c[i] = (nx % 10) + '0';
		nx = nx/10;
		i += 1;
	} while (nx != 0);

	while (--i >= 0)
 800800c:	3c01      	subs	r4, #1
 800800e:	d5f7      	bpl.n	8008000 <morse_number+0x2c>
	{
		morse_generate(c[i]);

	}
	delay(TIC_IWORD,GPIO_PIN_SET);
 8008010:	2101      	movs	r1, #1
 8008012:	4803      	ldr	r0, [pc, #12]	; (8008020 <morse_number+0x4c>)
 8008014:	f7ff ff94 	bl	8007f40 <delay>
	return;
}
 8008018:	b004      	add	sp, #16
 800801a:	bd10      	pop	{r4, pc}
 800801c:	cccccccd 	.word	0xcccccccd
 8008020:	0b287200 	.word	0x0b287200

08008024 <morse_trap>:
 * void morse_trap(uint16_t x);
 *	@brief	: Disable interrupts, Send 'x' and endless loop
 * @param	: x = trap number to flash
 * *************************************************************************/
void morse_trap(uint8_t x)
{
 8008024:	b508      	push	{r3, lr}
 8008026:	4604      	mov	r4, r0
	/* Disable global interrupts */
__asm__ volatile ("CPSID I");
 8008028:	b672      	cpsid	i
	while(1==1)
	{
		morse_number(x);
 800802a:	4620      	mov	r0, r4
 800802c:	f7ff ffd2 	bl	8007fd4 <morse_number>
		delay(TIC_PAUSE,GPIO_PIN_SET);	
 8008030:	2101      	movs	r1, #1
 8008032:	4802      	ldr	r0, [pc, #8]	; (800803c <morse_trap+0x18>)
 8008034:	f7ff ff84 	bl	8007f40 <delay>
 8008038:	e7f7      	b.n	800802a <morse_trap+0x6>
 800803a:	bf00      	nop
 800803c:	044aa200 	.word	0x044aa200

08008040 <payload_extract>:
 *	@brief	: Lookup CAN ID and load mailbox with extract payload reading(s)
 * @param	: pmbx  = pointer to mailbox
 * *************************************************************************/
void payload_extract(struct MAILBOXCAN* pmbx)
{
	switch (pmbx->paytype)
 8008040:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008044:	3b01      	subs	r3, #1
 8008046:	2b23      	cmp	r3, #35	; 0x23
 8008048:	f200 808c 	bhi.w	8008164 <payload_extract+0x124>
 800804c:	e8df f003 	tbb	[pc, r3]
 8008050:	7f197f19 	.word	0x7f197f19
 8008054:	407f1940 	.word	0x407f1940
 8008058:	31228a8a 	.word	0x31228a8a
 800805c:	52523131 	.word	0x52523131
 8008060:	8a8a8a52 	.word	0x8a8a8a52
 8008064:	40128a40 	.word	0x40128a40
 8008068:	8a8a678a 	.word	0x8a8a678a
 800806c:	8a8a8a8a 	.word	0x8a8a8a8a
 8008070:	128a8a8a 	.word	0x128a8a8a
	{
	case U8:
	case U8_VAR:
		if (pmbx->ncan.can.dlc >= 1)
 8008074:	6843      	ldr	r3, [r0, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d07b      	beq.n	8008172 <payload_extract+0x132>
		{
			pmbx->mbx.pre8[0] = pmbx->ncan.can.cd.uc[0];
 800807a:	7a03      	ldrb	r3, [r0, #8]
 800807c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8008080:	4770      	bx	lr
		}
		break;		
	case FF:
	case U32:
	case S32:
		if (pmbx->ncan.can.dlc >= 4)
 8008082:	6843      	ldr	r3, [r0, #4]
 8008084:	2b03      	cmp	r3, #3
 8008086:	d974      	bls.n	8008172 <payload_extract+0x132>
		{ // Place 1st four bytes of payload in union
			pmbx->mbx.u.i32[0] = pmbx->ncan.can.cd.ui[0];
 8008088:	6883      	ldr	r3, [r0, #8]
 800808a:	6183      	str	r3, [r0, #24]
			pmbx->ctr +=1 ;
 800808c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800808e:	3301      	adds	r3, #1
 8008090:	6343      	str	r3, [r0, #52]	; 0x34
 8008092:	4770      	bx	lr
		}
		break;	
	case xFF:
		if (pmbx->ncan.can.dlc >= 5)
 8008094:	6843      	ldr	r3, [r0, #4]
 8008096:	2b04      	cmp	r3, #4
 8008098:	d96b      	bls.n	8008172 <payload_extract+0x132>
		{ // Place [1]-[4] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[1];
 800809a:	7a43      	ldrb	r3, [r0, #9]
 800809c:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[2];
 800809e:	7a83      	ldrb	r3, [r0, #10]
 80080a0:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[3];
 80080a2:	7ac3      	ldrb	r3, [r0, #11]
 80080a4:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[4];
 80080a6:	7b03      	ldrb	r3, [r0, #12]
 80080a8:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;
 80080aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80080ac:	3301      	adds	r3, #1
 80080ae:	6343      	str	r3, [r0, #52]	; 0x34
 80080b0:	4770      	bx	lr
		}
		break;	
	case xxFF:
	case xxU32:
	case xxS32:
		if (pmbx->ncan.can.dlc >= 6)
 80080b2:	6843      	ldr	r3, [r0, #4]
 80080b4:	2b05      	cmp	r3, #5
 80080b6:	d95c      	bls.n	8008172 <payload_extract+0x132>
		{ // Place [2]-[5] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[2];
 80080b8:	7a83      	ldrb	r3, [r0, #10]
 80080ba:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[3];
 80080bc:	7ac3      	ldrb	r3, [r0, #11]
 80080be:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[4];
 80080c0:	7b03      	ldrb	r3, [r0, #12]
 80080c2:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[5];
 80080c4:	7b43      	ldrb	r3, [r0, #13]
 80080c6:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;
 80080c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80080ca:	3301      	adds	r3, #1
 80080cc:	6343      	str	r3, [r0, #52]	; 0x34
 80080ce:	4770      	bx	lr
		break;
	case U8_FF:
	case U8_U32:
	case U8_S32:
	case UNIXTIME:
		if (pmbx->ncan.can.dlc >= 5)
 80080d0:	6843      	ldr	r3, [r0, #4]
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d94d      	bls.n	8008172 <payload_extract+0x132>
		{ 
			pmbx->mbx.pre8[0] = pmbx->ncan.can.cd.uc[0];
 80080d6:	7a03      	ldrb	r3, [r0, #8]
 80080d8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			// Place [2]-[5] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[1];
 80080dc:	7a43      	ldrb	r3, [r0, #9]
 80080de:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[2];
 80080e0:	7a83      	ldrb	r3, [r0, #10]
 80080e2:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[3];
 80080e4:	7ac3      	ldrb	r3, [r0, #11]
 80080e6:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[4];
 80080e8:	7b03      	ldrb	r3, [r0, #12]
 80080ea:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;		
 80080ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80080ee:	3301      	adds	r3, #1
 80080f0:	6343      	str	r3, [r0, #52]	; 0x34
 80080f2:	4770      	bx	lr
		}
		break;	
	case U8_U8_FF:
	case U8_U8_U32:
	case U8_U8_S32:
		if (pmbx->ncan.can.dlc >= 6)
 80080f4:	6843      	ldr	r3, [r0, #4]
 80080f6:	2b05      	cmp	r3, #5
 80080f8:	d93b      	bls.n	8008172 <payload_extract+0x132>
		{ 
			pmbx->mbx.pre8[0] = pmbx->ncan.can.cd.uc[0];
 80080fa:	7a03      	ldrb	r3, [r0, #8]
 80080fc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			pmbx->mbx.pre8[1] = pmbx->ncan.can.cd.uc[1];
 8008100:	7a43      	ldrb	r3, [r0, #9]
 8008102:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
			// Place [2]-[5] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[2];
 8008106:	7a83      	ldrb	r3, [r0, #10]
 8008108:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[3];
 800810a:	7ac3      	ldrb	r3, [r0, #11]
 800810c:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[4];
 800810e:	7b03      	ldrb	r3, [r0, #12]
 8008110:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[5];
 8008112:	7b43      	ldrb	r3, [r0, #13]
 8008114:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;		
 8008116:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008118:	3301      	adds	r3, #1
 800811a:	6343      	str	r3, [r0, #52]	; 0x34
 800811c:	4770      	bx	lr
		}
		break;
	case U8_U8_U8_U32:
		if (pmbx->ncan.can.dlc >= 7)
 800811e:	6843      	ldr	r3, [r0, #4]
 8008120:	2b06      	cmp	r3, #6
 8008122:	d926      	bls.n	8008172 <payload_extract+0x132>
		{ 
			pmbx->mbx.pre8[0] = pmbx->ncan.can.cd.uc[0];
 8008124:	7a03      	ldrb	r3, [r0, #8]
 8008126:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			pmbx->mbx.pre8[1] = pmbx->ncan.can.cd.uc[1];
 800812a:	7a43      	ldrb	r3, [r0, #9]
 800812c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
			pmbx->mbx.pre8[2] = pmbx->ncan.can.cd.uc[2];
 8008130:	7a83      	ldrb	r3, [r0, #10]
 8008132:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
			// Place [2]-[5] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[3];
 8008136:	7ac3      	ldrb	r3, [r0, #11]
 8008138:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[4];
 800813a:	7b03      	ldrb	r3, [r0, #12]
 800813c:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[5];
 800813e:	7b43      	ldrb	r3, [r0, #13]
 8008140:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[6];
 8008142:	7b83      	ldrb	r3, [r0, #14]
 8008144:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;		
 8008146:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008148:	3301      	adds	r3, #1
 800814a:	6343      	str	r3, [r0, #52]	; 0x34
 800814c:	4770      	bx	lr
		}
		break;
	case FF_FF:		// Two four byte readings
	case U32_U32:
	case S32_S32:
		if (pmbx->ncan.can.dlc >= 8)
 800814e:	6843      	ldr	r3, [r0, #4]
 8008150:	2b07      	cmp	r3, #7
 8008152:	d90e      	bls.n	8008172 <payload_extract+0x132>
		{ // Place [0]-[7] of payload in union 
			pmbx->mbx.u.i64 = pmbx->ncan.can.cd.ull;
 8008154:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8008158:	e9c0 2306 	strd	r2, r3, [r0, #24]
			pmbx->ctr +=1 ;
 800815c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800815e:	3301      	adds	r3, #1
 8008160:	6343      	str	r3, [r0, #52]	; 0x34
 8008162:	4770      	bx	lr

	// Payload type not implemented
	case UNDEF:
	default: 
		{ // Place [0]-[7] of payload in union 
			pmbx->mbx.u.i64 = pmbx->ncan.can.cd.ull;
 8008164:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8008168:	e9c0 2306 	strd	r2, r3, [r0, #24]
			pmbx->ctr +=1 ;
 800816c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800816e:	3301      	adds	r3, #1
 8008170:	6343      	str	r3, [r0, #52]	; 0x34
 8008172:	4770      	bx	lr

08008174 <lookup>:
 *	@brief	: (Bonehead) Lookup CAN ID by a straight pass down the array of mailbox pointers
 * @param	: pmbxnum = pointer to mailbox control block
 * @param	: pncan = pointer to CAN msg in can_face.c circular buffer
 * *************************************************************************/
static struct MAILBOXCAN* lookup(struct MAILBOXCANNUM* pmbxnum, struct CANRCVBUFN* pncan)
{
 8008174:	b470      	push	{r4, r5, r6}
	struct MAILBOXCAN** ppmbx;
	struct MAILBOXCAN*   pmbx;
	int i;

	ppmbx = pmbxnum->pmbxarray;
 8008176:	6846      	ldr	r6, [r0, #4]
	for (i = 0; i < pmbxnum->arraysizecur; i++)
 8008178:	2300      	movs	r3, #0
 800817a:	e010      	b.n	800819e <lookup+0x2a>
	{
		pmbx = *(ppmbx + i); // Point to mailbox[i]
 800817c:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
		if (pmbx->ncan.can.id == pncan->can.id)
 8008180:	6825      	ldr	r5, [r4, #0]
 8008182:	680a      	ldr	r2, [r1, #0]
 8008184:	4295      	cmp	r5, r2
 8008186:	d109      	bne.n	800819c <lookup+0x28>
		{ // Here, found!
			pmbx->ncan = *pncan; // Copy CAN msg to mailbox
 8008188:	4626      	mov	r6, r4
 800818a:	460d      	mov	r5, r1
 800818c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800818e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008190:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008194:	e886 0003 	stmia.w	r6, {r0, r1}
			return pmbx;
 8008198:	4620      	mov	r0, r4
 800819a:	e004      	b.n	80081a6 <lookup+0x32>
	struct MAILBOXCAN** ppmbx;
	struct MAILBOXCAN*   pmbx;
	int i;

	ppmbx = pmbxnum->pmbxarray;
	for (i = 0; i < pmbxnum->arraysizecur; i++)
 800819c:	3301      	adds	r3, #1
 800819e:	8a42      	ldrh	r2, [r0, #18]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	dbeb      	blt.n	800817c <lookup+0x8>
		{ // Here, found!
			pmbx->ncan = *pncan; // Copy CAN msg to mailbox
			return pmbx;
		}
	}
	return NULL;
 80081a4:	2000      	movs	r0, #0
}
 80081a6:	bc70      	pop	{r4, r5, r6}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop

080081ac <loadmbx>:
 * @param	: pncan = pointer to CAN msg in can_face.c circular buffer
 * *************************************************************************/
uint32_t dbgmbxctr;

static struct MAILBOXCAN* loadmbx(struct MAILBOXCANNUM* pmbxnum, struct CANRCVBUFN* pncan)
{
 80081ac:	b538      	push	{r3, r4, r5, lr}
	struct CANNOTIFYLIST* pnotex;
//	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Check if received CAN id is in the mailbox CAN id list. */
	// 'lookup' is a straight loop; use 'lookupq' for binary search (when implemented)
	struct MAILBOXCAN* pmbx = lookup(pmbxnum, pncan);
 80081ae:	f7ff ffe1 	bl	8008174 <lookup>
	if (pmbx == NULL) return NULL; // Return: CAN id not in mailbox list
 80081b2:	b1e0      	cbz	r0, 80081ee <loadmbx+0x42>
 80081b4:	4605      	mov	r5, r0

	/* Here, this CAN msg has a mailbox. */
	// Extract payload (above 'lookup' copied ncan into mailbox)
	payload_extract(pmbx);
 80081b6:	f7ff ff43 	bl	8008040 <payload_extract>

	/* Execute notifications */
	pnotetmp = pmbx->pnote; // Get ptr to head of linked list
 80081ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	if (pnotetmp == NULL) return pmbx; // CANID found, but no notifications
 80081bc:	b1cc      	cbz	r4, 80081f2 <loadmbx+0x46>

	pmbx->ctr += 1; // Count updates
 80081be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80081c0:	3301      	adds	r3, #1
 80081c2:	636b      	str	r3, [r5, #52]	; 0x34
 80081c4:	e000      	b.n	80081c8 <loadmbx+0x1c>
			xTaskNotify(pnotetmp->tskhandle, pnotetmp->notebit, eSetBits);	
		}

		/* Step to next item in list. */
			pnotex   = pnotetmp;
			pnotetmp = pnotetmp->pnext;
 80081c6:	461c      	mov	r4, r3
	
	// Traverse linked list making notifications
	do 
	{
		/* Make a notification if "not skip" and 'taskhandle and 'notebit' were setup */
		if ((pnotetmp->skip == 0) && (pnotetmp->tskhandle != NULL) && (pnotetmp->notebit != 0))
 80081c8:	7b23      	ldrb	r3, [r4, #12]
 80081ca:	b95b      	cbnz	r3, 80081e4 <loadmbx+0x38>
 80081cc:	6860      	ldr	r0, [r4, #4]
 80081ce:	b148      	cbz	r0, 80081e4 <loadmbx+0x38>
 80081d0:	68a1      	ldr	r1, [r4, #8]
 80081d2:	b139      	cbz	r1, 80081e4 <loadmbx+0x38>
		{
dbgmbxctr += 1;
 80081d4:	4a08      	ldr	r2, [pc, #32]	; (80081f8 <loadmbx+0x4c>)
 80081d6:	6813      	ldr	r3, [r2, #0]
 80081d8:	3301      	adds	r3, #1
 80081da:	6013      	str	r3, [r2, #0]
			xTaskNotify(pnotetmp->tskhandle, pnotetmp->notebit, eSetBits);	
 80081dc:	2300      	movs	r3, #0
 80081de:	2201      	movs	r2, #1
 80081e0:	f7fe fa14 	bl	800660c <xTaskGenericNotify>
		}

		/* Step to next item in list. */
			pnotex   = pnotetmp;
			pnotetmp = pnotetmp->pnext;
 80081e4:	6823      	ldr	r3, [r4, #0]

	} while (pnotetmp != pnotex);
 80081e6:	429c      	cmp	r4, r3
 80081e8:	d1ed      	bne.n	80081c6 <loadmbx+0x1a>

	return pmbx;
 80081ea:	4628      	mov	r0, r5
 80081ec:	bd38      	pop	{r3, r4, r5, pc}
//	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Check if received CAN id is in the mailbox CAN id list. */
	// 'lookup' is a straight loop; use 'lookupq' for binary search (when implemented)
	struct MAILBOXCAN* pmbx = lookup(pmbxnum, pncan);
	if (pmbx == NULL) return NULL; // Return: CAN id not in mailbox list
 80081ee:	2000      	movs	r0, #0
 80081f0:	bd38      	pop	{r3, r4, r5, pc}
	// Extract payload (above 'lookup' copied ncan into mailbox)
	payload_extract(pmbx);

	/* Execute notifications */
	pnotetmp = pmbx->pnote; // Get ptr to head of linked list
	if (pnotetmp == NULL) return pmbx; // CANID found, but no notifications
 80081f2:	4628      	mov	r0, r5
			pnotetmp = pnotetmp->pnext;

	} while (pnotetmp != pnotex);

	return pmbx;
}
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
 80081f6:	bf00      	nop
 80081f8:	20003308 	.word	0x20003308

080081fc <StartMailboxTask>:
/* *************************************************************************
 * void StartMailboxTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartMailboxTask(void const * argument)
{
 80081fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081fe:	b083      	sub	sp, #12
//	int8_t flag;

//while(1==1) osDelay(10); // Debug: make task do nothing

	/* Get circular buffer pointers for each CAN module in list. */	
	for (i = 0; i < STM32MAXCANNUM; i++)
 8008200:	2400      	movs	r4, #0
 8008202:	e015      	b.n	8008230 <StartMailboxTask+0x34>
	{
		if (mbxcannum[i].pmbxarray != NULL)
 8008204:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008208:	0093      	lsls	r3, r2, #2
 800820a:	4a20      	ldr	r2, [pc, #128]	; (800828c <StartMailboxTask+0x90>)
 800820c:	4413      	add	r3, r2
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	b16b      	cbz	r3, 800822e <StartMailboxTask+0x32>
		{ // Here, array of pointers was initialized
			ptake[i] = can_iface_mbx_init(mbxcannum[i].pctl, NULL, (1 << i));
 8008212:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008216:	0093      	lsls	r3, r2, #2
 8008218:	2201      	movs	r2, #1
 800821a:	40a2      	lsls	r2, r4
 800821c:	2100      	movs	r1, #0
 800821e:	481b      	ldr	r0, [pc, #108]	; (800828c <StartMailboxTask+0x90>)
 8008220:	58c0      	ldr	r0, [r0, r3]
 8008222:	f7ff f9ef 	bl	8007604 <can_iface_mbx_init>
			if (ptake[i] == NULL) morse_trap(22);
 8008226:	b910      	cbnz	r0, 800822e <StartMailboxTask+0x32>
 8008228:	2016      	movs	r0, #22
 800822a:	f7ff fefb 	bl	8008024 <morse_trap>
//	int8_t flag;

//while(1==1) osDelay(10); // Debug: make task do nothing

	/* Get circular buffer pointers for each CAN module in list. */	
	for (i = 0; i < STM32MAXCANNUM; i++)
 800822e:	3401      	adds	r4, #1
 8008230:	2c00      	cmp	r4, #0
 8008232:	dde7      	ble.n	8008204 <StartMailboxTask+0x8>
			if (ptake[i] == NULL) morse_trap(22);
		}
	}

	/* A notification copies the internal notification word to this. */
	uint32_t noteval = 0;    // Receives notification word upon an API notify
 8008234:	2700      	movs	r7, #0
 8008236:	9701      	str	r7, [sp, #4]
  /* Infinite MailboxTask loop */
  for(;;)
  {
		/* Wait for a CAN module to load its circular buffer. */
		/* The notification bit identifies the CAN module. */
		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
 8008238:	f04f 33ff 	mov.w	r3, #4294967295
 800823c:	aa01      	add	r2, sp, #4
 800823e:	2100      	movs	r1, #0
 8008240:	4638      	mov	r0, r7
 8008242:	f7fe f997 	bl	8006574 <xTaskNotifyWait>
		noteused = 0;	// Accumulate bits in 'noteval' processed.
 8008246:	2700      	movs	r7, #0

		/* Step through possible notification bits */
		for (i = 0; i < STM32MAXCANNUM; i++)
 8008248:	463d      	mov	r5, r7
 800824a:	e01b      	b.n	8008284 <StartMailboxTask+0x88>
		{
//			flag = 0;
			if ((noteval & (1 << i)) != 0)
 800824c:	2301      	movs	r3, #1
 800824e:	40ab      	lsls	r3, r5
 8008250:	9a01      	ldr	r2, [sp, #4]
 8008252:	4213      	tst	r3, r2
 8008254:	d015      	beq.n	8008282 <StartMailboxTask+0x86>
			{	
				noteused |= (1 << i);
 8008256:	431f      	orrs	r7, r3
				pmbxnum = &mbxcannum[i]; // Pt to CAN module mailbox control block
 8008258:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800825c:	0093      	lsls	r3, r2, #2
 800825e:	4e0b      	ldr	r6, [pc, #44]	; (800828c <StartMailboxTask+0x90>)
 8008260:	441e      	add	r6, r3
if (pmbxnum == NULL) morse_trap(77); // Debug trap
				do
				{
					/* Get a pointer to the circular buffer w CAN msgs. */
					pncan = can_iface_get_CANmsg(pmbxnum->ptake);
 8008262:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8008266:	0093      	lsls	r3, r2, #2
 8008268:	4a08      	ldr	r2, [pc, #32]	; (800828c <StartMailboxTask+0x90>)
 800826a:	4413      	add	r3, r2
 800826c:	6898      	ldr	r0, [r3, #8]
 800826e:	f7ff f9d7 	bl	8007620 <can_iface_get_CANmsg>

					if (pncan != NULL)
 8008272:	4604      	mov	r4, r0
 8008274:	b118      	cbz	r0, 800827e <StartMailboxTask+0x82>
					{ // Here, CAN msg is available
//						flag = 1;
						loadmbx(pmbxnum, pncan); // Load mailbox. if CANID is in list
 8008276:	4601      	mov	r1, r0
 8008278:	4630      	mov	r0, r6
 800827a:	f7ff ff97 	bl	80081ac <loadmbx>
					}
				} while (pncan != NULL);
 800827e:	2c00      	cmp	r4, #0
 8008280:	d1ef      	bne.n	8008262 <StartMailboxTask+0x66>
		/* The notification bit identifies the CAN module. */
		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
		noteused = 0;	// Accumulate bits in 'noteval' processed.

		/* Step through possible notification bits */
		for (i = 0; i < STM32MAXCANNUM; i++)
 8008282:	3501      	adds	r5, #1
 8008284:	2d00      	cmp	r5, #0
 8008286:	dde1      	ble.n	800824c <StartMailboxTask+0x50>
 8008288:	e7d6      	b.n	8008238 <StartMailboxTask+0x3c>
 800828a:	bf00      	nop
 800828c:	20002f8c 	.word	0x20002f8c

08008290 <MailboxTask_add_CANlist>:
 * @param	: arraysize = max number of mailboxes in sorted list
 * @return	: Pointer which probably will not be used; NULL = failed (more important)
 * NOTE: This is normally called in 'main' before the FreeRTOS scheduler starts.
 * *************************************************************************/
struct MAILBOXCANNUM* MailboxTask_add_CANlist(struct CAN_CTLBLOCK* pctl, uint16_t arraysize)
{
 8008290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008294:	460f      	mov	r7, r1
	struct MAILBOXCAN** ppmbxarray; // Pointer to array of pointers to mailboxes

	if (pctl == NULL) morse_trap(21); // Oops
 8008296:	4604      	mov	r4, r0
 8008298:	b910      	cbnz	r0, 80082a0 <MailboxTask_add_CANlist+0x10>
 800829a:	2015      	movs	r0, #21
 800829c:	f7ff fec2 	bl	8008024 <morse_trap>

	if (arraysize == 0) morse_trap(22); // Oops
 80082a0:	b917      	cbnz	r7, 80082a8 <MailboxTask_add_CANlist+0x18>
 80082a2:	2016      	movs	r0, #22
 80082a4:	f7ff febe 	bl	8008024 <morse_trap>

taskENTER_CRITICAL();
 80082a8:	f7fe fed4 	bl	8007054 <vPortEnterCritical>

	/* Save max number of mailboxes for this CAN module */
	mbxcannum[pctl->canidx].arraysizemax = arraysize;
 80082ac:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 80082b0:	4920      	ldr	r1, [pc, #128]	; (8008334 <MailboxTask_add_CANlist+0xa4>)
 80082b2:	0098      	lsls	r0, r3, #2
 80082b4:	18c5      	adds	r5, r0, r3
 80082b6:	00aa      	lsls	r2, r5, #2
 80082b8:	4615      	mov	r5, r2
 80082ba:	440a      	add	r2, r1
 80082bc:	8217      	strh	r7, [r2, #16]

	/* This needed to find the CAN module in 'StartMailboxTask' */
	mbxcannum[pctl->canidx].pctl = pctl;
 80082be:	514c      	str	r4, [r1, r5]

	/* Get memory for the array of mailbox pointers */
	ppmbxarray = (struct MAILBOXCAN**)calloc(arraysize, sizeof(struct MAILBOXCAN*));
 80082c0:	2104      	movs	r1, #4
 80082c2:	4638      	mov	r0, r7
 80082c4:	f002 f942 	bl	800a54c <calloc>
	if (ppmbxarray == NULL) {taskEXIT_CRITICAL(); morse_trap(23);}
 80082c8:	4680      	mov	r8, r0
 80082ca:	b920      	cbnz	r0, 80082d6 <MailboxTask_add_CANlist+0x46>
 80082cc:	f7fe fee4 	bl	8007098 <vPortExitCritical>
 80082d0:	2017      	movs	r0, #23
 80082d2:	f7ff fea7 	bl	8008024 <morse_trap>

	/* xMailboxTaskCreate needs to be called before this 'add to list' */
	if (MailboxTaskHandle == NULL) {taskEXIT_CRITICAL(); morse_trap(24);}
 80082d6:	4b18      	ldr	r3, [pc, #96]	; (8008338 <MailboxTask_add_CANlist+0xa8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	b923      	cbnz	r3, 80082e6 <MailboxTask_add_CANlist+0x56>
 80082dc:	f7fe fedc 	bl	8007098 <vPortExitCritical>
 80082e0:	2018      	movs	r0, #24
 80082e2:	f7ff fe9f 	bl	8008024 <morse_trap>

	/* Get a circular buffer 'take' pointer for this CAN module. */
	// The first three notification bits are reserved for CAN modules 
	mbxcannum[pctl->canidx].ptake = can_iface_mbx_init(pctl, MailboxTaskHandle, (1 << pctl->canidx) );
 80082e6:	f894 50b1 	ldrb.w	r5, [r4, #177]	; 0xb1
 80082ea:	2201      	movs	r2, #1
 80082ec:	40aa      	lsls	r2, r5
 80082ee:	4b12      	ldr	r3, [pc, #72]	; (8008338 <MailboxTask_add_CANlist+0xa8>)
 80082f0:	6819      	ldr	r1, [r3, #0]
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7ff f986 	bl	8007604 <can_iface_mbx_init>
 80082f8:	4e0e      	ldr	r6, [pc, #56]	; (8008334 <MailboxTask_add_CANlist+0xa4>)
 80082fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80082fe:	00ab      	lsls	r3, r5, #2
 8008300:	4433      	add	r3, r6
 8008302:	6098      	str	r0, [r3, #8]

	/* Save pointer to array of pointers to mailboxes. */
	mbxcannum[pctl->canidx].pmbxarray = ppmbxarray;
 8008304:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8008308:	0099      	lsls	r1, r3, #2
 800830a:	18c8      	adds	r0, r1, r3
 800830c:	0082      	lsls	r2, r0, #2
 800830e:	4610      	mov	r0, r2
 8008310:	4432      	add	r2, r6
 8008312:	f8c2 8004 	str.w	r8, [r2, #4]

	/* Save number of mailbox pointers */
	mbxcannum[pctl->canidx].arraysizemax = arraysize; // Max
 8008316:	8217      	strh	r7, [r2, #16]

	/* Start with no mailboxes created. */
	mbxcannum[pctl->canidx].arraysizecur = 0;
 8008318:	4602      	mov	r2, r0
 800831a:	4432      	add	r2, r6
 800831c:	2300      	movs	r3, #0
 800831e:	8253      	strh	r3, [r2, #18]

	/* What is important here is to return a non-NULL pointer to show success. */
taskEXIT_CRITICAL();
 8008320:	f7fe feba 	bl	8007098 <vPortExitCritical>
	return &mbxcannum[pctl->canidx];
 8008324:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8008328:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800832c:	0098      	lsls	r0, r3, #2
}
 800832e:	4430      	add	r0, r6
 8008330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008334:	20002f8c 	.word	0x20002f8c
 8008338:	2000330c 	.word	0x2000330c

0800833c <MailboxTask_add>:
		 uint32_t canid,\
       osThreadId tskhandle,\
		 uint32_t notebit,\
		 uint8_t noteskip,\
		 uint8_t paytype)
{
 800833c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	4605      	mov	r5, r0
 8008342:	4691      	mov	r9, r2
 8008344:	4698      	mov	r8, r3
 8008346:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
	struct CANNOTIFYLIST* pnotex;
	struct CANNOTIFYLIST* pnotetmp;
	struct MAILBOXCAN** ppmbx;

	/* Check that the bozo programmer got the prior initializations done correctly. */
	if (canid == 0)    morse_trap(25); // return NULL;
 800834a:	460e      	mov	r6, r1
 800834c:	b911      	cbnz	r1, 8008354 <MailboxTask_add+0x18>
 800834e:	2019      	movs	r0, #25
 8008350:	f7ff fe68 	bl	8008024 <morse_trap>
	if (pctl  == NULL) morse_trap(26); //return NULL;
 8008354:	b915      	cbnz	r5, 800835c <MailboxTask_add+0x20>
 8008356:	201a      	movs	r0, #26
 8008358:	f7ff fe64 	bl	8008024 <morse_trap>
	if (pctl->canidx >= STM32MAXCANNUM) morse_trap(27);       //return NULL;
 800835c:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
 8008360:	b113      	cbz	r3, 8008368 <MailboxTask_add+0x2c>
 8008362:	201b      	movs	r0, #27
 8008364:	f7ff fe5e 	bl	8008024 <morse_trap>
	if (mbxcannum[pctl->canidx].pctl == NULL) morse_trap(28); //return NULL;
 8008368:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
 800836c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008370:	009a      	lsls	r2, r3, #2
 8008372:	4b5c      	ldr	r3, [pc, #368]	; (80084e4 <MailboxTask_add+0x1a8>)
 8008374:	589b      	ldr	r3, [r3, r2]
 8008376:	b913      	cbnz	r3, 800837e <MailboxTask_add+0x42>
 8008378:	201c      	movs	r0, #28
 800837a:	f7ff fe53 	bl	8008024 <morse_trap>

	if (tskhandle == NULL)
 800837e:	f1b9 0f00 	cmp.w	r9, #0
 8008382:	d102      	bne.n	800838a <MailboxTask_add+0x4e>
		tskhandle = xTaskGetCurrentTaskHandle();
 8008384:	f7fe f824 	bl	80063d0 <xTaskGetCurrentTaskHandle>
 8008388:	4681      	mov	r9, r0

	/* Pointer to beginning of array of mailbox pointers. */
	ppmbx = mbxcannum[pctl->canidx].pmbxarray;
 800838a:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
 800838e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008392:	009a      	lsls	r2, r3, #2
 8008394:	4b53      	ldr	r3, [pc, #332]	; (80084e4 <MailboxTask_add+0x1a8>)
 8008396:	441a      	add	r2, r3
 8008398:	6857      	ldr	r7, [r2, #4]

taskENTER_CRITICAL();
 800839a:	f7fe fe5b 	bl	8007054 <vPortEnterCritical>

	/* We are working with the array of pointers to mailboxes. */
	// Check if this 'canid' has a mailbox
	for (j = 0; j < mbxcannum[pctl->canidx].arraysizecur; j++)
 800839e:	2400      	movs	r4, #0
 80083a0:	e041      	b.n	8008426 <MailboxTask_add+0xea>
	{
		pmbx = *(ppmbx+j);  // Get pointer to a mailbox from array of pointers
 80083a2:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
		if (pmbx == NULL) morse_trap(23); // jic|debug
 80083a6:	f1bb 0f00 	cmp.w	fp, #0
 80083aa:	d102      	bne.n	80083b2 <MailboxTask_add+0x76>
 80083ac:	2017      	movs	r0, #23
 80083ae:	f7ff fe39 	bl	8008024 <morse_trap>
		if (pmbx->ncan.can.id == canid)
 80083b2:	f8db 3000 	ldr.w	r3, [fp]
 80083b6:	429e      	cmp	r6, r3
 80083b8:	d134      	bne.n	8008424 <MailboxTask_add+0xe8>
		{ // Here, CAN id already has a mailbox, so a notification must be wanted by this task
			if (notebit != 0)
 80083ba:	f1b8 0f00 	cmp.w	r8, #0
 80083be:	d02c      	beq.n	800841a <MailboxTask_add+0xde>
			{ // Here add a notification to the existing mailbox

				/* Get a notification block. */
				pnotex = (struct CANNOTIFYLIST*)calloc(1, sizeof(struct CANNOTIFYLIST));
 80083c0:	2110      	movs	r1, #16
 80083c2:	2001      	movs	r0, #1
 80083c4:	f002 f8c2 	bl	800a54c <calloc>
				if (pnotex == NULL){taskEXIT_CRITICAL(); morse_trap(29);}//return NULL;}
 80083c8:	4604      	mov	r4, r0
 80083ca:	b920      	cbnz	r0, 80083d6 <MailboxTask_add+0x9a>
 80083cc:	f7fe fe64 	bl	8007098 <vPortExitCritical>
 80083d0:	201d      	movs	r0, #29
 80083d2:	f7ff fe27 	bl	8008024 <morse_trap>

				/* Check if this mailbox has any notifications */
				if (pmbx->pnote == NULL)
 80083d6:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 80083da:	b973      	cbnz	r3, 80083fa <MailboxTask_add+0xbe>
				{ // This is the first notification for this mailbox.
					pmbx->pnote       = pnotex;   // Mailbox points to first notification
 80083dc:	f8cb 4030 	str.w	r4, [fp, #48]	; 0x30
					pnotex->pnext     = pnotex;	// Last on list points to self
 80083e0:	6024      	str	r4, [r4, #0]
					pnotex->tskhandle = tskhandle;
 80083e2:	f8c4 9004 	str.w	r9, [r4, #4]
 					pnotex->notebit   = notebit;  // Notification bit to use
 80083e6:	f8c4 8008 	str.w	r8, [r4, #8]
					pnotex->skip      = noteskip; // Skip notification flag
 80083ea:	f884 a00c 	strb.w	sl, [r4, #12]
					/* Here, there is no need to sort array on CANID for a binary lookup
						since a new mailbox was not added. */
					taskEXIT_CRITICAL();
 80083ee:	f7fe fe53 	bl	8007098 <vPortExitCritical>
					return pmbx;
 80083f2:	4658      	mov	r0, fp
 80083f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				}
				else
				{ // Here, one of more notifications.  Add to list.
					/* Seach end of list */
					pnotetmp = pmbx->pnote;
					while (pnotetmp != pnotetmp->pnext) pnotetmp = pnotetmp->pnext;
 80083f8:	4613      	mov	r3, r2
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d1fb      	bne.n	80083f8 <MailboxTask_add+0xbc>

					/* Add to list and initialize. */
					pnotetmp->pnext   = pnotex; // End block now points to new block
 8008400:	601c      	str	r4, [r3, #0]
					pnotex->pnext     = pnotex; // New block points to self
 8008402:	6024      	str	r4, [r4, #0]
					pnotex->tskhandle = tskhandle;
 8008404:	f8c4 9004 	str.w	r9, [r4, #4]
 					pnotex->notebit   = notebit;  // Notification bit to use
 8008408:	f8c4 8008 	str.w	r8, [r4, #8]
					pnotex->skip      = noteskip; // Skip notification flag
 800840c:	f884 a00c 	strb.w	sl, [r4, #12]
					/* Here, there is no need to sort array on CANID for a binary lookup
						since a new mailbox was not added. */
					taskEXIT_CRITICAL();
 8008410:	f7fe fe42 	bl	8007098 <vPortExitCritical>
					return pmbx;
 8008414:	4658      	mov	r0, fp
 8008416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				}
			}
			/* Here, no notification bit, but CAN id already has a mailbox!
            Either the canid is wrong, or this call was not necessary. */
			taskEXIT_CRITICAL(); morse_trap(34);//return NULL;
 800841a:	f7fe fe3d 	bl	8007098 <vPortExitCritical>
 800841e:	2022      	movs	r0, #34	; 0x22
 8008420:	f7ff fe00 	bl	8008024 <morse_trap>

taskENTER_CRITICAL();

	/* We are working with the array of pointers to mailboxes. */
	// Check if this 'canid' has a mailbox
	for (j = 0; j < mbxcannum[pctl->canidx].arraysizecur; j++)
 8008424:	3401      	adds	r4, #1
 8008426:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
 800842a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800842e:	009a      	lsls	r2, r3, #2
 8008430:	4b2c      	ldr	r3, [pc, #176]	; (80084e4 <MailboxTask_add+0x1a8>)
 8008432:	441a      	add	r2, r3
 8008434:	8a53      	ldrh	r3, [r2, #18]
 8008436:	429c      	cmp	r4, r3
 8008438:	dbb3      	blt.n	80083a2 <MailboxTask_add+0x66>
	ppmbx = mbxcannum[pctl->canidx].pmbxarray + mbxcannum[pctl->canidx].arraysizecur;



	/* Create one mailbox */
	pmbx = (struct MAILBOXCAN*)calloc(1, sizeof(struct MAILBOXCAN));
 800843a:	2140      	movs	r1, #64	; 0x40
 800843c:	2001      	movs	r0, #1
 800843e:	f002 f885 	bl	800a54c <calloc>
	if (pmbx == NULL){taskEXIT_CRITICAL();morse_trap(33);}//return NULL;}
 8008442:	4604      	mov	r4, r0
 8008444:	b920      	cbnz	r0, 8008450 <MailboxTask_add+0x114>
 8008446:	f7fe fe27 	bl	8007098 <vPortExitCritical>
 800844a:	2021      	movs	r0, #33	; 0x21
 800844c:	f7ff fdea 	bl	8008024 <morse_trap>

	pmbx->ctr          = 0;       // Redundant (calloc set it zero)
 8008450:	2300      	movs	r3, #0
 8008452:	6363      	str	r3, [r4, #52]	; 0x34
	pmbx->pnote        = NULL;    // Redundant (calloc set it zero)
 8008454:	6323      	str	r3, [r4, #48]	; 0x30
	pmbx->paytype      = paytype; // Payload layout code
 8008456:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800845a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pmbx->ncan.can.id  = canid;   // Save CAN id
 800845e:	6026      	str	r6, [r4, #0]
	pmbx->ncan.toa     = DTWTIME; // Set current time for initial time-of-arrival
 8008460:	4b21      	ldr	r3, [pc, #132]	; (80084e8 <MailboxTask_add+0x1ac>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6163      	str	r3, [r4, #20]

	if (notebit != 0)
 8008466:	f1b8 0f00 	cmp.w	r8, #0
 800846a:	d012      	beq.n	8008492 <MailboxTask_add+0x156>
	{ // Here, a notification is requested.  Add first instance of notification  
		pnotex = (struct CANNOTIFYLIST*)calloc(1, sizeof(struct CANNOTIFYLIST));
 800846c:	2110      	movs	r1, #16
 800846e:	2001      	movs	r0, #1
 8008470:	f002 f86c 	bl	800a54c <calloc>
		if (pnotex == NULL){ taskEXIT_CRITICAL();morse_trap(31);}//return NULL;}
 8008474:	4606      	mov	r6, r0
 8008476:	b920      	cbnz	r0, 8008482 <MailboxTask_add+0x146>
 8008478:	f7fe fe0e 	bl	8007098 <vPortExitCritical>
 800847c:	201f      	movs	r0, #31
 800847e:	f7ff fdd1 	bl	8008024 <morse_trap>

		pmbx->pnote       = pnotex;    // Mailbox points to first notification
 8008482:	6326      	str	r6, [r4, #48]	; 0x30
		pnotex->pnext     = pnotex;	 // Last on list points to self
 8008484:	6036      	str	r6, [r6, #0]
		pnotex->tskhandle = tskhandle; // Task to notify
 8008486:	f8c6 9004 	str.w	r9, [r6, #4]
		pnotex->notebit   = notebit;   // Notification bit to use
 800848a:	f8c6 8008 	str.w	r8, [r6, #8]
		pnotex->skip      = noteskip;  // Skip notification flag
 800848e:	f886 a00c 	strb.w	sl, [r6, #12]
	} 

	/* Save pointer to mailbox in array of pointers to mailboxes. */
	*(mbxcannum[pctl->canidx].pmbxarray+mbxcannum[pctl->canidx].arraysizecur) = pmbx;
 8008492:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
 8008496:	4813      	ldr	r0, [pc, #76]	; (80084e4 <MailboxTask_add+0x1a8>)
 8008498:	0099      	lsls	r1, r3, #2
 800849a:	18ce      	adds	r6, r1, r3
 800849c:	00b2      	lsls	r2, r6, #2
 800849e:	4402      	add	r2, r0
 80084a0:	6856      	ldr	r6, [r2, #4]
 80084a2:	440b      	add	r3, r1
 80084a4:	009a      	lsls	r2, r3, #2
 80084a6:	4402      	add	r2, r0
 80084a8:	8a53      	ldrh	r3, [r2, #18]
 80084aa:	f846 4023 	str.w	r4, [r6, r3, lsl #2]

	/* Advance current size of number of mailboxes for this CAN module. */
	    mbxcannum[pctl->canidx].arraysizecur += 1;
 80084ae:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
 80084b2:	0095      	lsls	r5, r2, #2
 80084b4:	18ab      	adds	r3, r5, r2
 80084b6:	0099      	lsls	r1, r3, #2
 80084b8:	4401      	add	r1, r0
 80084ba:	8a4b      	ldrh	r3, [r1, #18]
 80084bc:	3301      	adds	r3, #1
 80084be:	b29b      	uxth	r3, r3
 80084c0:	824b      	strh	r3, [r1, #18]
	if (mbxcannum[pctl->canidx].arraysizecur 
                             >=
		 mbxcannum[pctl->canidx].arraysizemax)
 80084c2:	442a      	add	r2, r5
 80084c4:	0091      	lsls	r1, r2, #2
 80084c6:	4401      	add	r1, r0
 80084c8:	8a0a      	ldrh	r2, [r1, #16]
	/* Save pointer to mailbox in array of pointers to mailboxes. */
	*(mbxcannum[pctl->canidx].pmbxarray+mbxcannum[pctl->canidx].arraysizecur) = pmbx;

	/* Advance current size of number of mailboxes for this CAN module. */
	    mbxcannum[pctl->canidx].arraysizecur += 1;
	if (mbxcannum[pctl->canidx].arraysizecur 
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d304      	bcc.n	80084d8 <MailboxTask_add+0x19c>
                             >=
		 mbxcannum[pctl->canidx].arraysizemax)
	{ // Here, the next addition will exceed size calloc'ed earlier!
		{taskEXIT_CRITICAL();morse_trap(31);} // Bozo programmer. We gotcha.
 80084ce:	f7fe fde3 	bl	8007098 <vPortExitCritical>
 80084d2:	201f      	movs	r0, #31
 80084d4:	f7ff fda6 	bl	8008024 <morse_trap>
	}
// TODO: Sort pointers for new Mailbox if later binary lookup on CAN ID.

taskEXIT_CRITICAL();
 80084d8:	f7fe fdde 	bl	8007098 <vPortExitCritical>
	return pmbx;
 80084dc:	4620      	mov	r0, r4
}
 80084de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e2:	bf00      	nop
 80084e4:	20002f8c 	.word	0x20002f8c
 80084e8:	e0001004 	.word	0xe0001004

080084ec <xMailboxTaskCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: QueueHandle_t = queue handle
 * *************************************************************************/
osThreadId xMailboxTaskCreate(uint32_t taskpriority)
{
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	4606      	mov	r6, r0
 /* definition and creation of CanTask */
  osThreadDef(MailboxTask, StartMailboxTask, osPriorityNormal, 0, 96);
 80084f2:	ac01      	add	r4, sp, #4
 80084f4:	4d09      	ldr	r5, [pc, #36]	; (800851c <xMailboxTaskCreate+0x30>)
 80084f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80084fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  MailboxTaskHandle = osThreadCreate(osThread(MailboxTask), NULL);
 8008502:	2100      	movs	r1, #0
 8008504:	a801      	add	r0, sp, #4
 8008506:	f7fe fbcf 	bl	8006ca8 <osThreadCreate>
 800850a:	4c05      	ldr	r4, [pc, #20]	; (8008520 <xMailboxTaskCreate+0x34>)
 800850c:	6020      	str	r0, [r4, #0]

	vTaskPrioritySet( MailboxTaskHandle, taskpriority );
 800850e:	4631      	mov	r1, r6
 8008510:	f7fd fb6a 	bl	8005be8 <vTaskPrioritySet>
	return MailboxTaskHandle;
}
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	b008      	add	sp, #32
 8008518:	bd70      	pop	{r4, r5, r6, pc}
 800851a:	bf00      	nop
 800851c:	0800e4b4 	.word	0x0800e4b4
 8008520:	2000330c 	.word	0x2000330c

08008524 <adctask_init>:

struct ADCDMATSKBLK* adctask_init(ADC_HandleTypeDef* phadc,\
	uint32_t  notebit1,\
	uint32_t  notebit2,\
	uint32_t* pnoteval)
{
 8008524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008528:	4605      	mov	r5, r0
 800852a:	468a      	mov	sl, r1
 800852c:	4691      	mov	r9, r2
 800852e:	4698      	mov	r8, r3
	uint16_t* pdma;
	struct ADCDMATSKBLK* pblk = &adc1dmatskblk[0]; // ADC1 only for now

	/* 'adcparams.h' MUST match what STM32CubeMX set up. */
	if (ADC1IDX_ADCSCANSIZE != phadc->Init.NbrOfConversion) morse_trap(61);//return NULL;
 8008530:	6903      	ldr	r3, [r0, #16]
 8008532:	2b06      	cmp	r3, #6
 8008534:	d002      	beq.n	800853c <adctask_init+0x18>
 8008536:	203d      	movs	r0, #61	; 0x3d
 8008538:	f7ff fd74 	bl	8008024 <morse_trap>

	/* ADC DMA summation length must match 1/2 DMA buffer sizing. */
	if (ADCFASTSUM16SIZE != ADC1DMANUMSEQ) morse_trap(62);

	/* length = total number of uint16_t in dma buffer */
	uint32_t length = ADC1DMANUMSEQ * 2 * phadc->Init.NbrOfConversion;
 800853c:	692e      	ldr	r6, [r5, #16]
 800853e:	0176      	lsls	r6, r6, #5

taskENTER_CRITICAL();
 8008540:	f7fe fd88 	bl	8007054 <vPortEnterCritical>

	/* Initialize params for ADC. */
	adcparams_init();
 8008544:	f000 fa4e 	bl	80089e4 <adcparams_init>

	/* Get dma buffer allocated */
	pdma = (uint16_t*)calloc(length, sizeof(uint16_t));
 8008548:	2102      	movs	r1, #2
 800854a:	4630      	mov	r0, r6
 800854c:	f001 fffe 	bl	800a54c <calloc>
	if (pdma == NULL) {taskEXIT_CRITICAL();morse_trap(63);}
 8008550:	4607      	mov	r7, r0
 8008552:	b920      	cbnz	r0, 800855e <adctask_init+0x3a>
 8008554:	f7fe fda0 	bl	8007098 <vPortExitCritical>
 8008558:	203f      	movs	r0, #63	; 0x3f
 800855a:	f7ff fd63 	bl	8008024 <morse_trap>
	uint32_t* psum;     // Pointer summed 1/2 dma buffer
	uint16_t  dmact;    // Number of sequences in 1/2 dma buffer
};

*/
	pblk->phadc    = phadc;
 800855e:	4c0e      	ldr	r4, [pc, #56]	; (8008598 <adctask_init+0x74>)
 8008560:	6065      	str	r5, [r4, #4]
	pblk->notebit1 = notebit1;
 8008562:	f8c4 a008 	str.w	sl, [r4, #8]
	pblk->notebit2 = notebit2;
 8008566:	f8c4 900c 	str.w	r9, [r4, #12]
	pblk->pnoteval = pnoteval;
 800856a:	f8c4 8010 	str.w	r8, [r4, #16]
	pblk->pdma1    = pdma;
 800856e:	6167      	str	r7, [r4, #20]
	pblk->pdma2    = pdma + (ADC1DMANUMSEQ * phadc->Init.NbrOfConversion);
 8008570:	692b      	ldr	r3, [r5, #16]
 8008572:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 8008576:	61a7      	str	r7, [r4, #24]
	pblk->adctaskHandle = ADCTaskHandle;
 8008578:	4b08      	ldr	r3, [pc, #32]	; (800859c <adctask_init+0x78>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	61e3      	str	r3, [r4, #28]
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */

taskEXIT_CRITICAL();
 800857e:	f7fe fd8b 	bl	8007098 <vPortExitCritical>
	
	HAL_ADCEx_Calibration_Start(phadc);
 8008582:	4628      	mov	r0, r5
 8008584:	f7fb fd1c 	bl	8003fc0 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(pblk->phadc, (uint32_t*)pblk->pdma1, length);
 8008588:	4632      	mov	r2, r6
 800858a:	6961      	ldr	r1, [r4, #20]
 800858c:	6860      	ldr	r0, [r4, #4]
 800858e:	f7fb fbc7 	bl	8003d20 <HAL_ADC_Start_DMA>
	return pblk;
}
 8008592:	4620      	mov	r0, r4
 8008594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008598:	20003310 	.word	0x20003310
 800859c:	20003368 	.word	0x20003368

080085a0 <HAL_ADC_ConvHalfCpltCallback>:
/* *************************************************************************
 * void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc);
 *	@brief	: Call back from stm32f4xx_hal_adc: Halfway point of dma buffer
 * *************************************************************************/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80085a0:	b500      	push	{lr}
 80085a2:	b085      	sub	sp, #20
//	adcommon.dmact += 1; // Running count
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80085a4:	2300      	movs	r3, #0
 80085a6:	9303      	str	r3, [sp, #12]
	struct ADCDMATSKBLK* ptmp = &adc1dmatskblk[0];

	/* Trigger Recieve Task to poll dma uarts */
	if( ptmp->adctaskHandle == NULL) return; // Skip task has not been created
 80085a8:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80085aa:	69d8      	ldr	r0, [r3, #28]
 80085ac:	b180      	cbz	r0, 80085d0 <HAL_ADC_ConvHalfCpltCallback+0x30>
	xTaskNotifyFromISR(ptmp->adctaskHandle, 
 80085ae:	6899      	ldr	r1, [r3, #8]
 80085b0:	ab03      	add	r3, sp, #12
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	2300      	movs	r3, #0
 80085b6:	2201      	movs	r2, #1
 80085b8:	f7fe f89a 	bl	80066f0 <xTaskGenericNotifyFromISR>
		ptmp->notebit1,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken ); 

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	b13b      	cbz	r3, 80085d0 <HAL_ADC_ConvHalfCpltCallback+0x30>
 80085c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
	return;
}
 80085d0:	b005      	add	sp, #20
 80085d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80085d6:	bf00      	nop
 80085d8:	20003310 	.word	0x20003310
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <HAL_ADC_ConvCpltCallback>:
/* *************************************************************************
 * void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc);
 *	@brief	: Call back from stm32f4xx_hal_adc: End point of dma buffer
 * *************************************************************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80085e0:	b500      	push	{lr}
 80085e2:	b085      	sub	sp, #20
//	adcommon.dmact += 1; // Running count
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80085e4:	2300      	movs	r3, #0
 80085e6:	9303      	str	r3, [sp, #12]
	struct ADCDMATSKBLK* ptmp = &adc1dmatskblk[0];

	/* Trigger Recieve Task to poll dma uarts */
	if( ptmp->adctaskHandle == NULL) return; // Skip task has not been created
 80085e8:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <HAL_ADC_ConvCpltCallback+0x38>)
 80085ea:	69d8      	ldr	r0, [r3, #28]
 80085ec:	b180      	cbz	r0, 8008610 <HAL_ADC_ConvCpltCallback+0x30>
	xTaskNotifyFromISR(ptmp->adctaskHandle, 
 80085ee:	68d9      	ldr	r1, [r3, #12]
 80085f0:	ab03      	add	r3, sp, #12
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	2300      	movs	r3, #0
 80085f6:	2201      	movs	r2, #1
 80085f8:	f7fe f87a 	bl	80066f0 <xTaskGenericNotifyFromISR>
		ptmp->notebit2,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken ); 

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	b13b      	cbz	r3, 8008610 <HAL_ADC_ConvCpltCallback+0x30>
 8008600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <HAL_ADC_ConvCpltCallback+0x3c>)
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
	return;
}
 8008610:	b005      	add	sp, #20
 8008612:	f85d fb04 	ldr.w	pc, [sp], #4
 8008616:	bf00      	nop
 8008618:	20003310 	.word	0x20003310
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <StartADCTask>:
/* *************************************************************************
 * void StartADCTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartADCTask(void const * argument)
{
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	b082      	sub	sp, #8
	#define TSK02BIT03	(1 << 1)  // Task notification bit for ADC dma end (adctask.c)

	uint16_t* pdma;

	/* A notification copies the internal notification word to this. */
	uint32_t noteval = 0;    // Receives notification word upon an API notify
 8008624:	ab02      	add	r3, sp, #8
 8008626:	2200      	movs	r2, #0
 8008628:	f843 2d04 	str.w	r2, [r3, #-4]!

	/* notification bits processed after a 'Wait. */
	uint32_t noteused = 0;

	/* Get buffers, "our" control block, and ==>START<== ADC/DMA running. */
	struct ADCDMATSKBLK* pblk = adctask_init(&hadc1,TSK02BIT02,TSK02BIT03,&noteval);
 800862c:	2202      	movs	r2, #2
 800862e:	2101      	movs	r1, #1
 8008630:	4827      	ldr	r0, [pc, #156]	; (80086d0 <StartADCTask+0xb0>)
 8008632:	f7ff ff77 	bl	8008524 <adctask_init>
	if (pblk == NULL) {morse_trap(15);}
 8008636:	4605      	mov	r5, r0
 8008638:	b910      	cbnz	r0, 8008640 <StartADCTask+0x20>
 800863a:	200f      	movs	r0, #15
 800863c:	f7ff fcf2 	bl	8008024 <morse_trap>
/* *************************************************************************
 * void StartADCTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartADCTask(void const * argument)
{
 8008640:	2400      	movs	r4, #0

  /* Infinite loop */
  for(;;)
  {
		/* Wait for DMA interrupt notification from adctask.c */
		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
 8008642:	f04f 33ff 	mov.w	r3, #4294967295
 8008646:	aa01      	add	r2, sp, #4
 8008648:	2100      	movs	r1, #0
 800864a:	4620      	mov	r0, r4
 800864c:	f7fd ff92 	bl	8006574 <xTaskNotifyWait>
		noteused = 0;	// Accumulate bits in 'noteval' processed.

		/* We handled one, or both, noteval bits */
		noteused |= (pblk->notebit1 | pblk->notebit2);
 8008650:	68ac      	ldr	r4, [r5, #8]
 8008652:	68eb      	ldr	r3, [r5, #12]
 8008654:	431c      	orrs	r4, r3

		if (noteval & TSK02BIT02)
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	f013 0f01 	tst.w	r3, #1
 800865c:	d002      	beq.n	8008664 <StartADCTask+0x44>
		{
			pdma = adc1dmatskblk[0].pdma1; // [0] = adc1
 800865e:	4b1d      	ldr	r3, [pc, #116]	; (80086d4 <StartADCTask+0xb4>)
 8008660:	6959      	ldr	r1, [r3, #20]
 8008662:	e001      	b.n	8008668 <StartADCTask+0x48>
		}
		else
		{
			pdma = adc1dmatskblk[0].pdma2;
 8008664:	4b1b      	ldr	r3, [pc, #108]	; (80086d4 <StartADCTask+0xb4>)
 8008666:	6999      	ldr	r1, [r3, #24]
		}

		/* Sum the readings 1/2 of DMA buffer to an array. */
		adcfastsum16(&adc1.chan[0], pdma); // Fast in-line addition
 8008668:	4e1b      	ldr	r6, [pc, #108]	; (80086d8 <StartADCTask+0xb8>)
 800866a:	4630      	mov	r0, r6
 800866c:	f000 f866 	bl	800873c <adcfastsum16>
		adc1.ctr += 1; // Update count
 8008670:	f5a6 7006 	sub.w	r0, r6, #536	; 0x218
 8008674:	f8d0 33f8 	ldr.w	r3, [r0, #1016]	; 0x3f8
 8008678:	3301      	adds	r3, #1
 800867a:	f8c0 33f8 	str.w	r3, [r0, #1016]	; 0x3f8

#define DEBUGGINGADCREADINGS
#ifdef DEBUGGINGADCREADINGS
		/* Save sum for defaultTask printout for debugging */
		adcsumdb[0] = adc1.chan[0].sum;
 800867e:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
 8008682:	4b16      	ldr	r3, [pc, #88]	; (80086dc <StartADCTask+0xbc>)
 8008684:	601a      	str	r2, [r3, #0]
		adcsumdb[1] = adc1.chan[1].sum;
 8008686:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
 800868a:	605a      	str	r2, [r3, #4]
		adcsumdb[2] = adc1.chan[2].sum;
 800868c:	f8b0 22c4 	ldrh.w	r2, [r0, #708]	; 0x2c4
 8008690:	609a      	str	r2, [r3, #8]
		adcsumdb[3] = adc1.chan[3].sum;
 8008692:	f8b0 2314 	ldrh.w	r2, [r0, #788]	; 0x314
 8008696:	60da      	str	r2, [r3, #12]
		adcsumdb[4] = adc1.chan[4].sum;
 8008698:	f8b0 2364 	ldrh.w	r2, [r0, #868]	; 0x364
 800869c:	611a      	str	r2, [r3, #16]
		adcsumdb[5] = adc1.chan[5].sum;
 800869e:	f8b0 23b4 	ldrh.w	r2, [r0, #948]	; 0x3b4
 80086a2:	615a      	str	r2, [r3, #20]
		adcdbctr += 1;
 80086a4:	4a0e      	ldr	r2, [pc, #56]	; (80086e0 <StartADCTask+0xc0>)
 80086a6:	6813      	ldr	r3, [r2, #0]
 80086a8:	3301      	adds	r3, #1
 80086aa:	6013      	str	r3, [r2, #0]
#endif

		/* Extended sum for smoothing and display. */
		adcextendsum(&adc1);
 80086ac:	f001 fed2 	bl	800a454 <adcextendsum>

		/* Calibrate and filter ADC readings. */
		adcparams_cal();
 80086b0:	f000 f9a4 	bl	80089fc <adcparams_cal>

		/* Notify ContactorTask that new readings are ready. */
		if( ContactorTaskHandle == NULL) morse_trap(51); // JIC task has not been created
 80086b4:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <StartADCTask+0xc4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	b913      	cbnz	r3, 80086c0 <StartADCTask+0xa0>
 80086ba:	2033      	movs	r0, #51	; 0x33
 80086bc:	f7ff fcb2 	bl	8008024 <morse_trap>
		
		xTaskNotify(ContactorTaskHandle, CNCTBIT00, eSetBits);
 80086c0:	2300      	movs	r3, #0
 80086c2:	2201      	movs	r2, #1
 80086c4:	4611      	mov	r1, r2
 80086c6:	4807      	ldr	r0, [pc, #28]	; (80086e4 <StartADCTask+0xc4>)
 80086c8:	6800      	ldr	r0, [r0, #0]
 80086ca:	f7fd ff9f 	bl	800660c <xTaskGenericNotify>
  }
 80086ce:	e7b8      	b.n	8008642 <StartADCTask+0x22>
 80086d0:	2000311c 	.word	0x2000311c
 80086d4:	20003310 	.word	0x20003310
 80086d8:	20003590 	.word	0x20003590
 80086dc:	20003350 	.word	0x20003350
 80086e0:	20002fa0 	.word	0x20002fa0
 80086e4:	20003aa8 	.word	0x20003aa8

080086e8 <xADCTaskCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: ADCTaskHandle
 * *************************************************************************/
osThreadId xADCTaskCreate(uint32_t taskpriority)
{
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	b088      	sub	sp, #32
 80086ec:	4606      	mov	r6, r0
 	osThreadDef(ADCTask, StartADCTask, osPriorityNormal, 0, 128);
 80086ee:	ac01      	add	r4, sp, #4
 80086f0:	4d09      	ldr	r5, [pc, #36]	; (8008718 <xADCTaskCreate+0x30>)
 80086f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80086fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ADCTaskHandle = osThreadCreate(osThread(ADCTask), NULL);
 80086fe:	2100      	movs	r1, #0
 8008700:	a801      	add	r0, sp, #4
 8008702:	f7fe fad1 	bl	8006ca8 <osThreadCreate>
 8008706:	4c05      	ldr	r4, [pc, #20]	; (800871c <xADCTaskCreate+0x34>)
 8008708:	6020      	str	r0, [r4, #0]
	vTaskPrioritySet( ADCTaskHandle, taskpriority );
 800870a:	4631      	mov	r1, r6
 800870c:	f7fd fa6c 	bl	8005be8 <vTaskPrioritySet>
	return ADCTaskHandle;

}
 8008710:	6820      	ldr	r0, [r4, #0]
 8008712:	b008      	add	sp, #32
 8008714:	bd70      	pop	{r4, r5, r6, pc}
 8008716:	bf00      	nop
 8008718:	0800e4d0 	.word	0x0800e4d0
 800871c:	20003368 	.word	0x20003368

08008720 <stackwatermark_show>:
 * @param	: TaskHandle = task handle for stackwatermark check  
 * @param	: pycb = pointer to stuct to pointer with uart pointers and buffer parameters
 * @param	: pchar = pointer to text string to precede stack value number
 * *************************************************************************/
void stackwatermark_show(osThreadId TaskHandle, struct SERIALSENDTASKBCB** ppbcb, char* pchar)
{
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	460c      	mov	r4, r1
 8008724:	4615      	mov	r5, r2
	UBaseType_t stackwatermark; // For unused task stack space

		/* Get stack high water mark for tasks of interest. */
		stackwatermark = uxTaskGetStackHighWaterMark( TaskHandle );
 8008726:	f7fd fe47 	bl	80063b8 <uxTaskGetStackHighWaterMark>

		yprintf(ppbcb, "\n\r#Stack: %s %3d",pchar, (int)stackwatermark);
 800872a:	4603      	mov	r3, r0
 800872c:	462a      	mov	r2, r5
 800872e:	4902      	ldr	r1, [pc, #8]	; (8008738 <stackwatermark_show+0x18>)
 8008730:	4620      	mov	r0, r4
 8008732:	f7ff fa43 	bl	8007bbc <yprintf>
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	0800eb14 	.word	0x0800eb14

0800873c <adcfastsum16>:
 *	@brief	: Inline fast summation: ASSUMES 16 ADC sequences: channels: ADC1IDX_ADCSCANSIZE
 * @param	: pchan = pointer to stuct array for adc1 channels
 * @param	: pdma  = pointer to dma buffer
 * *************************************************************************/
void adcfastsum16(struct ADCCHANNEL* pchan, uint16_t* pdma)
{
 800873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	b087      	sub	sp, #28
 8008742:	4686      	mov	lr, r0
 8008744:	468c      	mov	ip, r1
	struct ADCCHANNEL* pend = pchan + ADC1IDX_ADCSCANSIZE;
 8008746:	f500 73f0 	add.w	r3, r0, #480	; 0x1e0
 800874a:	9305      	str	r3, [sp, #20]
	do
	{
		pchan->sum = *pdma
 800874c:	f8bc b000 	ldrh.w	fp, [ip]
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 1)
 8008750:	f8bc 300c 	ldrh.w	r3, [ip, #12]
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 2)
 8008754:	f8bc a018 	ldrh.w	sl, [ip, #24]
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 3)
 8008758:	f8bc 9024 	ldrh.w	r9, [ip, #36]	; 0x24
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 4)
 800875c:	f8bc 8030 	ldrh.w	r8, [ip, #48]	; 0x30
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 5)
 8008760:	f8bc 703c 	ldrh.w	r7, [ip, #60]	; 0x3c
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 6)
 8008764:	f8bc 6048 	ldrh.w	r6, [ip, #72]	; 0x48
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 7)
 8008768:	f8bc 5054 	ldrh.w	r5, [ip, #84]	; 0x54
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 8)
 800876c:	f8bc 2060 	ldrh.w	r2, [ip, #96]	; 0x60
 8008770:	9201      	str	r2, [sp, #4]
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 9)
 8008772:	f8bc 106c 	ldrh.w	r1, [ip, #108]	; 0x6c
 8008776:	9102      	str	r1, [sp, #8]
		 + *(pdma + ADC1IDX_ADCSCANSIZE *10)
 8008778:	f8bc 0078 	ldrh.w	r0, [ip, #120]	; 0x78
 800877c:	9003      	str	r0, [sp, #12]
		 + *(pdma + ADC1IDX_ADCSCANSIZE *11)
 800877e:	f8bc 4084 	ldrh.w	r4, [ip, #132]	; 0x84
 8008782:	9404      	str	r4, [sp, #16]
		 + *(pdma + ADC1IDX_ADCSCANSIZE *12)
 8008784:	f8bc 4090 	ldrh.w	r4, [ip, #144]	; 0x90
		 + *(pdma + ADC1IDX_ADCSCANSIZE *13)
 8008788:	f8bc 009c 	ldrh.w	r0, [ip, #156]	; 0x9c
		 + *(pdma + ADC1IDX_ADCSCANSIZE *14)
 800878c:	f8bc 10a8 	ldrh.w	r1, [ip, #168]	; 0xa8
		 + *(pdma + ADC1IDX_ADCSCANSIZE *15);
 8008790:	f8bc 20b4 	ldrh.w	r2, [ip, #180]	; 0xb4
void adcfastsum16(struct ADCCHANNEL* pchan, uint16_t* pdma)
{
	struct ADCCHANNEL* pend = pchan + ADC1IDX_ADCSCANSIZE;
	do
	{
		pchan->sum = *pdma
 8008794:	445b      	add	r3, fp
 8008796:	4453      	add	r3, sl
 8008798:	444b      	add	r3, r9
 800879a:	4443      	add	r3, r8
 800879c:	443b      	add	r3, r7
 800879e:	4433      	add	r3, r6
 80087a0:	442b      	add	r3, r5
 80087a2:	9d01      	ldr	r5, [sp, #4]
 80087a4:	442b      	add	r3, r5
 80087a6:	9d02      	ldr	r5, [sp, #8]
 80087a8:	442b      	add	r3, r5
 80087aa:	9d03      	ldr	r5, [sp, #12]
 80087ac:	442b      	add	r3, r5
 80087ae:	9d04      	ldr	r5, [sp, #16]
 80087b0:	442b      	add	r3, r5
 80087b2:	441c      	add	r4, r3
 80087b4:	4420      	add	r0, r4
 80087b6:	4401      	add	r1, r0
 80087b8:	440a      	add	r2, r1
 80087ba:	f8ae 200c 	strh.w	r2, [lr, #12]
		 + *(pdma + ADC1IDX_ADCSCANSIZE *12)
		 + *(pdma + ADC1IDX_ADCSCANSIZE *13)
		 + *(pdma + ADC1IDX_ADCSCANSIZE *14)
		 + *(pdma + ADC1IDX_ADCSCANSIZE *15);

		pchan += 1;
 80087be:	f10e 0e50 	add.w	lr, lr, #80	; 0x50
		pdma  += 1;
 80087c2:	f10c 0c02 	add.w	ip, ip, #2
	} while (pchan != pend);
 80087c6:	9b05      	ldr	r3, [sp, #20]
 80087c8:	4573      	cmp	r3, lr
 80087ca:	d1bf      	bne.n	800874c <adcfastsum16+0x10>
	return;
}
 80087cc:	b007      	add	sp, #28
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	bf00      	nop
 80087d4:	0000      	movs	r0, r0
	...

080087d8 <adc_idx_v_struct_hardcode_params>:
 * int adc_idx_v_struct_hardcode_params(struct ADCCONTACTORLC* p);
 * @brief	: Hard-code load local copy with parameters
 * @return	: 0
 * ************************************************************************************** */
int adc_idx_v_struct_hardcode_params(struct ADCCONTACTORLC* p)
{
 80087d8:	b4f0      	push	{r4, r5, r6, r7}
 80087da:	4603      	mov	r3, r0
	struct ADCCALHE cal_cur2; // Hall-effect current calibration, spare 
	struct ADCCALABS cal_5v;  // 5v regulated voltage 
	struct ADCCALABS cal_12v; // 12v raw CAN voltage
 };
*/
	p->size     = 37; // Number of items in list
 80087dc:	2225      	movs	r2, #37	; 0x25
 80087de:	6002      	str	r2, [r0, #0]
	p->crc      = 0;  // TODO
 80087e0:	2000      	movs	r0, #0
 80087e2:	6058      	str	r0, [r3, #4]
   p->version  = 1;
 80087e4:	2201      	movs	r2, #1
 80087e6:	609a      	str	r2, [r3, #8]
	p->hbct     = 1000;  // Time (ms) between HB msg
 80087e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087ec:	60da      	str	r2, [r3, #12]
	uint32_t rmtmp;    // Room temp for reading (deg C)
	double dvdd;       // (double) measured Vdd (volts)
	double dslope;     // (double) mv/degC temperature sensor slope
};
*/
	p->calintern.iiradcvref.k     = 20;    // Filter time constant
 80087ee:	2214      	movs	r2, #20
 80087f0:	611a      	str	r2, [r3, #16]
	p->calintern.iiradcvref.scale = 64;
 80087f2:	2240      	movs	r2, #64	; 0x40
 80087f4:	615a      	str	r2, [r3, #20]

	p->calintern.iiradctemp.k     = 100;    // Filter time constant
 80087f6:	2264      	movs	r2, #100	; 0x64
 80087f8:	619a      	str	r2, [r3, #24]
	p->calintern.iiradctemp.scale = 4;
 80087fa:	2204      	movs	r2, #4
 80087fc:	61da      	str	r2, [r3, #28]

	// Internal voltage ref: ADC1IDX_INTERNALVREF  5   // IN18     - Internal voltage reference
	p->calintern.dvdd   = 3.29;	// Vdd for following Vref ADC reading
 80087fe:	a52e      	add	r5, pc, #184	; (adr r5, 80088b8 <adc_idx_v_struct_hardcode_params+0xe0>)
 8008800:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008804:	e9c3 450c 	strd	r4, r5, [r3, #48]	; 0x30
	p->calintern.adcvdd = 23928;  //(16*1495.5) ADC reading (DMA sum) for above Vdd
 8008808:	f645 5278 	movw	r2, #23928	; 0x5d78
 800880c:	649a      	str	r2, [r3, #72]	; 0x48

	// Internal temperature: ADC1IDX_INTERNALTEMP  4   // IN17     - Internal temperature sensor
	p->calintern.adcrmtmp  = 26990; // Room temp ADC (DMA sum) reading
 800880e:	f646 126e 	movw	r2, #26990	; 0x696e
 8008812:	64da      	str	r2, [r3, #76]	; 0x4c
	p->calintern.drmtemp   = 25.0;  // Room temp for ADC reading     
 8008814:	2400      	movs	r4, #0
 8008816:	4d36      	ldr	r5, [pc, #216]	; (80088f0 <adc_idx_v_struct_hardcode_params+0x118>)
 8008818:	e9c3 4508 	strd	r4, r5, [r3, #32]
	p->calintern.dslope    = 4.3;   // mv/degC slope of temperature sensor
 800881c:	a528      	add	r5, pc, #160	; (adr r5, 80088c0 <adc_idx_v_struct_hardcode_params+0xe8>)
 800881e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008822:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
	p->calintern.dvreftmpco= 15;    // Vref temp coefficient (15 is based on similar parts)
 8008826:	2400      	movs	r4, #0
 8008828:	4d32      	ldr	r5, [pc, #200]	; (80088f4 <adc_idx_v_struct_hardcode_params+0x11c>)
 800882a:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
	p->calintern.dvtemp    = 1.40;  // Vtemp voltage at 25 degC
 800882e:	a526      	add	r5, pc, #152	; (adr r5, 80088c8 <adc_idx_v_struct_hardcode_params+0xf0>)
 8008830:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008834:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	uint32_t caladcve;  // connected, cal current: adc reading
	double   dcalcur;   // connected, cal current: current
};
*/
	// Battery current: ADC1IDX_CURRENTTOTAL  1   // PA5 IN5  - Current sensor: total battery current
	p->cal_cur1.iir.k     = 10;    // Filter time constant
 8008838:	210a      	movs	r1, #10
 800883a:	6519      	str	r1, [r3, #80]	; 0x50
	p->cal_cur1.iir.scale = 2;     // Filter integer scaling
 800883c:	2202      	movs	r2, #2
 800883e:	655a      	str	r2, [r3, #84]	; 0x54
	p->cal_cur1.zeroadcve = 27082; // connected, no current: HE adc reading
 8008840:	f646 14ca 	movw	r4, #27082	; 0x69ca
 8008844:	661c      	str	r4, [r3, #96]	; 0x60
	p->cal_cur1.zeroadc5  = 63969; // connected, no current: 5v adc reading 
 8008846:	f64f 14e1 	movw	r4, #63969	; 0xf9e1
 800884a:	665c      	str	r4, [r3, #100]	; 0x64
	p->cal_cur1.caladcve  = 29880; // connected, cal current: adc reading
 800884c:	f247 45b8 	movw	r5, #29880	; 0x74b8
 8008850:	669d      	str	r5, [r3, #104]	; 0x68
	p->cal_cur1.dcalcur   = 16.03;  // connected, cal current: current * turns
 8008852:	a71f      	add	r7, pc, #124	; (adr r7, 80088d0 <adc_idx_v_struct_hardcode_params+0xf8>)
 8008854:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008858:	e9c3 671c 	strd	r6, r7, [r3, #112]	; 0x70

	// Spare current: ADC1IDX_CURRENTMOTOR  2   // PA6 IN6  - Current sensor: motor
	p->cal_cur2.iir.k     = 10;    // Filter time constant
 800885c:	6799      	str	r1, [r3, #120]	; 0x78
	p->cal_cur2.iir.scale = 2;     // Filter integer scaling
 800885e:	67da      	str	r2, [r3, #124]	; 0x7c
	p->cal_cur2.zeroadcve = 27183; // connected, no current: HE adc reading
 8008860:	f646 252f 	movw	r5, #27183	; 0x6a2f
 8008864:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	p->cal_cur2.zeroadc5  = 63969; // connected, no current: 5v adc reading 
 8008868:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
	p->cal_cur2.caladcve  = 30186; // connected, cal current:
 800886c:	f247 54ea 	movw	r4, #30186	; 0x75ea
 8008870:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	p->cal_cur2.dcalcur   = 9.373; // connected, cal current: current * turns
 8008874:	a518      	add	r5, pc, #96	; (adr r5, 80088d8 <adc_idx_v_struct_hardcode_params+0x100>)
 8008876:	e9d5 4500 	ldrd	r4, r5, [r5]
 800887a:	e9c3 4526 	strd	r4, r5, [r3, #152]	; 0x98
	uint32_t adcvn;    // (ADC reading) vn 
   double   dvn;      // (double) measured vn (volts)
};
*/
	// 5v supply: ADC1IDX_5VOLTSUPPLY   0   // PA0 IN0  - 5V sensor supply
	p->cal_5v.iir.k     = 10;    // Filter time constant
 800887e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	p->cal_5v.iir.scale = 2;     // Filter integer scaling
 8008882:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	p->cal_5v.adcvn     = 64480; // (ADC reading) v5
 8008886:	f64f 34e0 	movw	r4, #64480	; 0xfbe0
 800888a:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	p->cal_5v.dvn       = 5.03;  // (double) measured v5 (volts)
 800888e:	a514      	add	r5, pc, #80	; (adr r5, 80088e0 <adc_idx_v_struct_hardcode_params+0x108>)
 8008890:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008894:	e9c3 452c 	strd	r4, r5, [r3, #176]	; 0xb0

	// Raw 12v CAN bus supply: ADC1IDX_12VRAWSUPPLY  3   // PA7 IN7  - +12 Raw power to board
	p->cal_12v.iir.k     = 10;    // Filter time constant
 8008898:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	p->cal_12v.iir.scale = 2;     // Filter integer scaling
 800889c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	p->cal_12v.adcvn     = 24023; // (4095*1502); // (ADC reading) v12 
 80088a0:	f645 52d7 	movw	r2, #24023	; 0x5dd7
 80088a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	p->cal_12v.dvn       = 13.68;  // (double) measured v12 (volts)
 80088a8:	a50f      	add	r5, pc, #60	; (adr r5, 80088e8 <adc_idx_v_struct_hardcode_params+0x110>)
 80088aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088ae:	e9c3 4532 	strd	r4, r5, [r3, #200]	; 0xc8

	return 0;	
}
 80088b2:	bcf0      	pop	{r4, r5, r6, r7}
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	851eb852 	.word	0x851eb852
 80088bc:	400a51eb 	.word	0x400a51eb
 80088c0:	33333333 	.word	0x33333333
 80088c4:	40113333 	.word	0x40113333
 80088c8:	66666666 	.word	0x66666666
 80088cc:	3ff66666 	.word	0x3ff66666
 80088d0:	147ae148 	.word	0x147ae148
 80088d4:	403007ae 	.word	0x403007ae
 80088d8:	db22d0e5 	.word	0xdb22d0e5
 80088dc:	4022bef9 	.word	0x4022bef9
 80088e0:	51eb851f 	.word	0x51eb851f
 80088e4:	40141eb8 	.word	0x40141eb8
 80088e8:	f5c28f5c 	.word	0xf5c28f5c
 80088ec:	402b5c28 	.word	0x402b5c28
 80088f0:	40390000 	.word	0x40390000
 80088f4:	402e0000 	.word	0x402e0000

080088f8 <internal>:
 * *************************************************************************/
uint32_t adcdbg1;
uint32_t adcdbg2;

static void internal(struct ADCFUNCTION* p)
{
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4604      	mov	r4, r0
Average slope     4.0  4.3  4.6  mV/°C
Voltage at 25 °C  1.34 1.43 1.52 V

*/
	/* IIR filter internal adc sensor readings. */
	p->intern.adcfiltemp = iir_filter_lx_do(&p->intern.iiradctemp, &p->chan[ADC1IDX_INTERNALTEMP].sum);
 80088fc:	f500 7159 	add.w	r1, r0, #868	; 0x364
 8008900:	30e8      	adds	r0, #232	; 0xe8
 8008902:	f001 fd8d 	bl	800a420 <iir_filter_lx_do>
 8008906:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
	p->intern.adcfilvref = iir_filter_lx_do(&p->intern.iiradcvref, &p->chan[ADC1IDX_INTERNALVREF].sum);
 800890a:	f504 716d 	add.w	r1, r4, #948	; 0x3b4
 800890e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008912:	f001 fd85 	bl	800a420 <iir_filter_lx_do>
 8008916:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100

	/* Skip temperature compensation for now. */
	p->intern.adccmpvref = p->intern.adcfilvref;
 800891a:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c

adcdbg1 = DTWTIME;
 800891e:	4e11      	ldr	r6, [pc, #68]	; (8008964 <internal+0x6c>)
 8008920:	6835      	ldr	r5, [r6, #0]
 8008922:	4b11      	ldr	r3, [pc, #68]	; (8008968 <internal+0x70>)
 8008924:	601d      	str	r5, [r3, #0]
	/* Compute temperature */
	itmp = (p->intern.iv25 * p->intern.adcfilvref) - ((p->intern.vref * p->intern.adcfiltemp) >> (ADCSCALEbits-ADCSCALEbitsy));
 8008926:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800892a:	fb03 f200 	mul.w	r2, r3, r0
 800892e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8008932:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 8008936:	fb01 f303 	mul.w	r3, r1, r3
 800893a:	eba2 2313 	sub.w	r3, r2, r3, lsr #8

	itmp = ((itmp >> ADCSCALEbitsitmp) * p->intern.yRs) / p->intern.adcfilvref;
 800893e:	10db      	asrs	r3, r3, #3
 8008940:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 8008944:	fb02 f303 	mul.w	r3, r2, r3
 8008948:	fbb3 f0f0 	udiv	r0, r3, r0

	p->intern.itemp = (itmp << ADCSCALEbitsitmp) + p->intern.irmtemp;
 800894c:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8008950:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8008954:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
adcdbg2 = DTWTIME - adcdbg1;
 8008958:	6833      	ldr	r3, [r6, #0]
 800895a:	1b5b      	subs	r3, r3, r5
 800895c:	4a03      	ldr	r2, [pc, #12]	; (800896c <internal+0x74>)
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	bf00      	nop
 8008964:	e0001004 	.word	0xe0001004
 8008968:	2000377c 	.word	0x2000377c
 800896c:	20003778 	.word	0x20003778

08008970 <absolute>:
/*
Vn = Vref * (ADC[n]/ADC[vref]) * ((R1+R2)/R2);
  Where: ((R1+R2)/R2) is resistor divider scale factor 
*/
static void absolute(struct ADCFUNCTION* p, struct ADCABSOLUTE* pa,uint8_t idx)
{
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4605      	mov	r5, r0
 8008974:	460c      	mov	r4, r1
	/* IIR filter adc reading. */
	pa->adcfil = iir_filter_lx_do(&pa->iir, &p->chan[idx].sum);
 8008976:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800897a:	0111      	lsls	r1, r2, #4
 800897c:	f501 7108 	add.w	r1, r1, #544	; 0x220
 8008980:	4401      	add	r1, r0
 8008982:	3104      	adds	r1, #4
 8008984:	4620      	mov	r0, r4
 8008986:	f001 fd4b 	bl	800a420 <iir_filter_lx_do>
 800898a:	62a0      	str	r0, [r4, #40]	; 0x28

	pa->ival = ((1<<ADCSCALEbits) * pa->adcfil) / p->intern.adccmpvref;
 800898c:	03c0      	lsls	r0, r0, #15
 800898e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8008992:	fbb0 f0f3 	udiv	r0, r0, r3
 8008996:	62e0      	str	r0, [r4, #44]	; 0x2c
 8008998:	bd38      	pop	{r3, r4, r5, pc}
 800899a:	bf00      	nop

0800899c <ratiometric5v>:

uint32_t dbgadcfil;
uint32_t dbgadcratio;

static void ratiometric5v(struct ADCFUNCTION* p, struct ADCRATIOMETRIC* pr, uint8_t idx)
{
 800899c:	b510      	push	{r4, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	460c      	mov	r4, r1
*/
	/* IIR filter adc reading. */
//$	pr->adcfil = iir_filter_lx_do(&pr->iir, &p->chan[idx].sum);

	/* Compute ratio of sensor reading to 5v supply reading. */
	uint16_t adcratio = (p->chan[idx].sum << ADCSCALEbits) / p->chan[ADC1IDX_5VOLTSUPPLY].sum;
 80089a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80089a6:	0113      	lsls	r3, r2, #4
 80089a8:	4403      	add	r3, r0
 80089aa:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 80089ae:	03db      	lsls	r3, r3, #15
 80089b0:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
 80089b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80089b8:	a902      	add	r1, sp, #8
 80089ba:	f821 3d02 	strh.w	r3, [r1, #-2]!

	/* Filter the ratio */
	pr->adcfil = iir_filter_lx_do(&pr->iir, &adcratio);
 80089be:	4620      	mov	r0, r4
 80089c0:	f001 fd2e 	bl	800a420 <iir_filter_lx_do>
 80089c4:	62a0      	str	r0, [r4, #40]	; 0x28

	/* Subtract offset (note result is now signed). */
	pr->iI = (pr->adcfil - pr->irko); 
 80089c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089c8:	1ac3      	subs	r3, r0, r3
 80089ca:	6323      	str	r3, [r4, #48]	; 0x30


dbgadcfil=pr->adcfil;
 80089cc:	4b03      	ldr	r3, [pc, #12]	; (80089dc <ratiometric5v+0x40>)
 80089ce:	6018      	str	r0, [r3, #0]
dbgadcratio=adcratio;
 80089d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80089d4:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <ratiometric5v+0x44>)
 80089d6:	601a      	str	r2, [r3, #0]

	return;
}
 80089d8:	b002      	add	sp, #8
 80089da:	bd10      	pop	{r4, pc}
 80089dc:	20003780 	.word	0x20003780
 80089e0:	20003370 	.word	0x20003370

080089e4 <adcparams_init>:
 * void adcparams_init(void);
 *	@brief	: Copy parameters into structs
 * NOTE: => ASSUMES ADC1 ONLY <==
 * *************************************************************************/
void adcparams_init(void)
{
 80089e4:	b510      	push	{r4, lr}
	/* Load parameters, either hard coded, (or later implement from high flash). */
	adc_idx_v_struct_hardcode_params(&adc1.lc);
 80089e6:	4c04      	ldr	r4, [pc, #16]	; (80089f8 <adcparams_init+0x14>)
 80089e8:	4620      	mov	r0, r4
 80089ea:	f7ff fef5 	bl	80087d8 <adc_idx_v_struct_hardcode_params>

	/* Init working struct for ADC function. */
	adcparamsinit_init(&adc1);
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 f8b6 	bl	8008b60 <adcparamsinit_init>
 80089f4:	bd10      	pop	{r4, pc}
 80089f6:	bf00      	nop
 80089f8:	20003378 	.word	0x20003378

080089fc <adcparams_cal>:
/* *************************************************************************
 * void adcparams_cal(void);
 *	@brief	: calibrate and filter ADC readings
 * *************************************************************************/
void adcparams_cal(void)
{
 80089fc:	b510      	push	{r4, lr}
	struct ADCFUNCTION* p = &adc1; // Convenience pointer

	/* First: Update Vref used in subsequent computations. */
	internal(p); // Update Vref for temperature
 80089fe:	4c0b      	ldr	r4, [pc, #44]	; (8008a2c <adcparams_cal+0x30>)
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7ff ff79 	bl	80088f8 <internal>

	absolute(p, &p->v5 ,ADC1IDX_5VOLTSUPPLY); // 5v supplying Blue Pill, and sensors.
 8008a06:	2200      	movs	r2, #0
 8008a08:	f504 71bc 	add.w	r1, r4, #376	; 0x178
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f7ff ffaf 	bl	8008970 <absolute>
  
	absolute(p, &p->v12 ,ADC1IDX_12VRAWSUPPLY); // Raw CAN bus supply to board
 8008a12:	2203      	movs	r2, #3
 8008a14:	f504 71a4 	add.w	r1, r4, #328	; 0x148
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f7ff ffa9 	bl	8008970 <absolute>

/* Note: 5v supply should be processed before ratiometrics.  Otherwise,
   old readings will be used which is not a big deal for a slowly 
   changing 5v supply. */

	ratiometric5v(p, &p->cur1, ADC1IDX_CURRENTTOTAL); // Battery string sensor
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7ff ffb9 	bl	800899c <ratiometric5v>
 8008a2a:	bd10      	pop	{r4, pc}
 8008a2c:	20003378 	.word	0x20003378

08008a30 <ratiometric_cal_zero>:
 * @param	: pcur = Pointer to struct with values for the ratiometric sensor
 * @param	: idx = index into ADC sum array for the sensor measurement
 * @return	: 0 = no fault; -1 = out of tolerance
 * *************************************************************************/
static int16_t ratiometric_cal_zero(struct ADCFUNCTION* p, struct ADCRATIOMETRIC* pcur, uint16_t idx)
{
 8008a30:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8008a34:	4604      	mov	r4, r0
 8008a36:	460e      	mov	r6, r1
	double dtmp;

	// Check that re-zero'ing is not some crazy value
	dtmp  = ((double)p->chan[idx].sum / (double)p->chan[ADC1IDX_5VOLTSUPPLY].sum) ;
 8008a38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008a3c:	0113      	lsls	r3, r2, #4
 8008a3e:	4403      	add	r3, r0
 8008a40:	f8b3 0224 	ldrh.w	r0, [r3, #548]	; 0x224
 8008a44:	f7f7 fd4a 	bl	80004dc <__aeabi_ui2d>
 8008a48:	4680      	mov	r8, r0
 8008a4a:	4689      	mov	r9, r1
 8008a4c:	f8b4 0224 	ldrh.w	r0, [r4, #548]	; 0x224
 8008a50:	f7f7 fd44 	bl	80004dc <__aeabi_ui2d>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	4640      	mov	r0, r8
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	f7f7 fede 	bl	800081c <__aeabi_ddiv>
 8008a60:	4604      	mov	r4, r0
 8008a62:	460d      	mov	r5, r1
	if ( (dtmp > (pcur->drko * (1+ZTOLERANCE))) || (dtmp < (pcur->drko * (1-ZTOLERANCE))) )
 8008a64:	e9d6 8906 	ldrd	r8, r9, [r6, #24]
 8008a68:	a319      	add	r3, pc, #100	; (adr r3, 8008ad0 <ratiometric_cal_zero+0xa0>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	4640      	mov	r0, r8
 8008a70:	4649      	mov	r1, r9
 8008a72:	f7f7 fda9 	bl	80005c8 <__aeabi_dmul>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	f7f8 f833 	bl	8000ae8 <__aeabi_dcmpgt>
 8008a82:	b9d8      	cbnz	r0, 8008abc <ratiometric_cal_zero+0x8c>
 8008a84:	a314      	add	r3, pc, #80	; (adr r3, 8008ad8 <ratiometric_cal_zero+0xa8>)
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	f7f7 fd9b 	bl	80005c8 <__aeabi_dmul>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f8 f807 	bl	8000aac <__aeabi_dcmplt>
 8008a9e:	b988      	cbnz	r0, 8008ac4 <ratiometric_cal_zero+0x94>
	{
		return -1;
	}
	else
	{ // Here adjustment is considered reasonable.
		pcur->drko = dtmp;
 8008aa0:	e9c6 4506 	strd	r4, r5, [r6, #24]
		pcur->irko  =dtmp * (1 << ADCSCALEbits);
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <ratiometric_cal_zero+0xb0>)
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f7f7 fd8c 	bl	80005c8 <__aeabi_dmul>
 8008ab0:	f7f8 f83a 	bl	8000b28 <__aeabi_d2iz>
 8008ab4:	62f0      	str	r0, [r6, #44]	; 0x2c
	}
	return 0;
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

	// Check that re-zero'ing is not some crazy value
	dtmp  = ((double)p->chan[idx].sum / (double)p->chan[ADC1IDX_5VOLTSUPPLY].sum) ;
	if ( (dtmp > (pcur->drko * (1+ZTOLERANCE))) || (dtmp < (pcur->drko * (1-ZTOLERANCE))) )
	{
		return -1;
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
	{ // Here adjustment is considered reasonable.
		pcur->drko = dtmp;
		pcur->irko  =dtmp * (1 << ADCSCALEbits);
	}
	return 0;
}
 8008ac8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008acc:	f3af 8000 	nop.w
 8008ad0:	cccccccd 	.word	0xcccccccd
 8008ad4:	3ff0cccc 	.word	0x3ff0cccc
 8008ad8:	66666666 	.word	0x66666666
 8008adc:	3fee6666 	.word	0x3fee6666
 8008ae0:	40e00000 	.word	0x40e00000

08008ae4 <ratiometric_cal>:
 *	@brief	: Compute calibration constants for ratiometric sensor
 * @param	: p = points to struct with computed results
 * @param	: plc = points to parameter struct for this sensor
 * *************************************************************************/
static void ratiometric_cal(struct ADCRATIOMETRIC* p, struct ADCCALHE* plc)
{
 8008ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae8:	4605      	mov	r5, r0
 8008aea:	460c      	mov	r4, r1
	uint32_t adcfil;  // Filtered ADC reading
	int32_t irko;     // Offset ratio: scale int (~32768)
	int32_t iI;       // integer result w offset, not final scaling
}; */

	p->iir.pprm = &plc->iir; // Filter param pointer
 8008aec:	6129      	str	r1, [r5, #16]
	
	// Sensor connected, no current -> offset ratio (~ 0.50)
	p->drko  = ((double)plc->zeroadcve / (double)plc->zeroadc5) ;
 8008aee:	6908      	ldr	r0, [r1, #16]
 8008af0:	f7f7 fcf4 	bl	80004dc <__aeabi_ui2d>
 8008af4:	4606      	mov	r6, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	6960      	ldr	r0, [r4, #20]
 8008afa:	f7f7 fcef 	bl	80004dc <__aeabi_ui2d>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4630      	mov	r0, r6
 8008b04:	4639      	mov	r1, r7
 8008b06:	f7f7 fe89 	bl	800081c <__aeabi_ddiv>
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	460f      	mov	r7, r1
 8008b0e:	e9c5 6706 	strd	r6, r7, [r5, #24]
	p->irko  = (p->drko * (1 << ADCSCALEbits) );
 8008b12:	2200      	movs	r2, #0
 8008b14:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <ratiometric_cal+0x74>)
 8008b16:	f7f7 fd57 	bl	80005c8 <__aeabi_dmul>
 8008b1a:	f7f8 f805 	bl	8000b28 <__aeabi_d2iz>
 8008b1e:	62e8      	str	r0, [r5, #44]	; 0x2c

	// Sensor connected, test current applied with maybe more than one turn through sensor
	// dscale = amp-turns / ((calibration ADC ratio - offset ratio) * divider ratio);
	double dtmp = ( (double)plc->caladcve / (double)plc->zeroadc5 ) - p->drko ;
 8008b20:	69a0      	ldr	r0, [r4, #24]
 8008b22:	f7f7 fcdb 	bl	80004dc <__aeabi_ui2d>
 8008b26:	4680      	mov	r8, r0
 8008b28:	4689      	mov	r9, r1
 8008b2a:	6960      	ldr	r0, [r4, #20]
 8008b2c:	f7f7 fcd6 	bl	80004dc <__aeabi_ui2d>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4640      	mov	r0, r8
 8008b36:	4649      	mov	r1, r9
 8008b38:	f7f7 fe70 	bl	800081c <__aeabi_ddiv>
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	f7f7 fb8e 	bl	8000260 <__aeabi_dsub>
	p->dscale = plc->dcalcur / dtmp;
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8008b4c:	f7f7 fe66 	bl	800081c <__aeabi_ddiv>
 8008b50:	e9c5 0108 	strd	r0, r1, [r5, #32]
 8008b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b58:	40e00000 	.word	0x40e00000
 8008b5c:	00000000 	.word	0x00000000

08008b60 <adcparamsinit_init>:
#define ADC1PARAM_CALIBTYPE_RAW_UI 4    // No calibration applied: UNSIGNED INT
*/
double adcdtmp;

void adcparamsinit_init(struct ADCFUNCTION* p)
{
 8008b60:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	4604      	mov	r4, r0
};
*/

/* Internal sensors. */
	// Pointers to filter constants 
	p->intern.iiradcvref.pprm = &p->lc.calintern.iiradcvref;
 8008b66:	f100 0310 	add.w	r3, r0, #16
 8008b6a:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
	p->intern.iiradctemp.pprm = &p->lc.calintern.iiradctemp;
 8008b6e:	f100 0318 	add.w	r3, r0, #24
 8008b72:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8

	// Compute a scaled integer vref from measurements
	double dadc  = p->lc.calintern.adcvdd; // ADC reading (~27360)
 8008b76:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8008b78:	f7f7 fcb0 	bl	80004dc <__aeabi_ui2d>
 8008b7c:	4682      	mov	sl, r0
 8008b7e:	468b      	mov	fp, r1
	p->intern.dvref = p->lc.calintern.dvdd * (dadc / 65520.0);
 8008b80:	e9d4 890c 	ldrd	r8, r9, [r4, #48]	; 0x30
 8008b84:	a388      	add	r3, pc, #544	; (adr r3, 8008da8 <adcparamsinit_init+0x248>)
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fe47 	bl	800081c <__aeabi_ddiv>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4640      	mov	r0, r8
 8008b94:	4649      	mov	r1, r9
 8008b96:	f7f7 fd17 	bl	80005c8 <__aeabi_dmul>
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	f504 7388 	add.w	r3, r4, #272	; 0x110
 8008ba2:	e9c3 6700 	strd	r6, r7, [r3]
	p->intern.vref  = (p->intern.dvref * (1 << ADCSCALEbits) ); // Scaled uint32_t; 
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	4b89      	ldr	r3, [pc, #548]	; (8008dd0 <adcparamsinit_init+0x270>)
 8008baa:	f7f7 fd0d 	bl	80005c8 <__aeabi_dmul>
 8008bae:	f7f7 ffe3 	bl	8000b78 <__aeabi_d2uiz>
 8008bb2:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
	p->intern.adcvref = (65520.0 * p->intern.dvref) / p->lc.calintern.dvdd;
 8008bb6:	a37c      	add	r3, pc, #496	; (adr r3, 8008da8 <adcparamsinit_init+0x248>)
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 fd02 	bl	80005c8 <__aeabi_dmul>
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	464b      	mov	r3, r9
 8008bc8:	f7f7 fe28 	bl	800081c <__aeabi_ddiv>
 8008bcc:	f7f7 ffd4 	bl	8000b78 <__aeabi_d2uiz>
 8008bd0:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

	// Check for out-of-datasheet Vref spec 
	if ((p->intern.dvref < (VREFMIN)) || (p->intern.dvref > (VREFMAX))) 
 8008bd4:	a376      	add	r3, pc, #472	; (adr r3, 8008db0 <adcparamsinit_init+0x250>)
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	4630      	mov	r0, r6
 8008bdc:	4639      	mov	r1, r7
 8008bde:	f7f7 ff65 	bl	8000aac <__aeabi_dcmplt>
 8008be2:	b938      	cbnz	r0, 8008bf4 <adcparamsinit_init+0x94>
 8008be4:	a374      	add	r3, pc, #464	; (adr r3, 8008db8 <adcparamsinit_init+0x258>)
 8008be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bea:	4630      	mov	r0, r6
 8008bec:	4639      	mov	r1, r7
 8008bee:	f7f7 ff7b 	bl	8000ae8 <__aeabi_dcmpgt>
 8008bf2:	b110      	cbz	r0, 8008bfa <adcparamsinit_init+0x9a>
	{
		morse_trap(81);
 8008bf4:	2051      	movs	r0, #81	; 0x51
 8008bf6:	f7ff fa15 	bl	8008024 <morse_trap>
	}
	p->chan[ADC1IDX_INTERNALTEMP].dscale = p->lc.calintern.dvdd / 65520.0;
 8008bfa:	a36b      	add	r3, pc, #428	; (adr r3, 8008da8 <adcparamsinit_init+0x248>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8008c04:	f7f7 fe0a 	bl	800081c <__aeabi_ddiv>
 8008c08:	f504 7356 	add.w	r3, r4, #856	; 0x358
 8008c0c:	e9c3 0100 	strd	r0, r1, [r3]
	p->chan[ADC1IDX_INTERNALVREF].dscale = 1.0;
 8008c10:	f504 736a 	add.w	r3, r4, #936	; 0x3a8
 8008c14:	2000      	movs	r0, #0
 8008c16:	496f      	ldr	r1, [pc, #444]	; (8008dd4 <adcparamsinit_init+0x274>)
 8008c18:	e9c3 0100 	strd	r0, r1, [r3]

	// Reciprocal of temperature sensor slope ( ~65536/4.3E-3 = (232.55 << 16) )
	p->intern.iRslope  = (double)((1 << ADCSCALEbits) * (1000)) / p->lc.calintern.dslope;
 8008c1c:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
 8008c20:	4632      	mov	r2, r6
 8008c22:	463b      	mov	r3, r7
 8008c24:	a166      	add	r1, pc, #408	; (adr r1, 8008dc0 <adcparamsinit_init+0x260>)
 8008c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c2a:	f7f7 fdf7 	bl	800081c <__aeabi_ddiv>
 8008c2e:	f7f7 ffa3 	bl	8000b78 <__aeabi_d2uiz>
 8008c32:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
//	dtmp = ((1 << ADCSCALEbits) * (1000)) * p->intern.dvref / p->lc.calintern.dslope;
//	p->intern.vrefRs = dtmp;
//adcdtmp = dtmp;

	// Room temp calibration offset (7/17/19) Is this needed?)
	p->intern.irmtemp = ((double)(1 << ADCSCALEbits) * (double)(p->lc.calintern.drmtemp));// / p->lc.calintern.adcrmtmp);
 8008c36:	2200      	movs	r2, #0
 8008c38:	4b65      	ldr	r3, [pc, #404]	; (8008dd0 <adcparamsinit_init+0x270>)
 8008c3a:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8008c3e:	f7f7 fcc3 	bl	80005c8 <__aeabi_dmul>
 8008c42:	f7f7 ff99 	bl	8000b78 <__aeabi_d2uiz>
 8008c46:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
	
	p->intern.yRs = ((double)((1 << ADCSCALEbitsy) * 1000) / p->lc.calintern.dslope);
 8008c4a:	4632      	mov	r2, r6
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	2000      	movs	r0, #0
 8008c50:	4961      	ldr	r1, [pc, #388]	; (8008dd8 <adcparamsinit_init+0x278>)
 8008c52:	f7f7 fde3 	bl	800081c <__aeabi_ddiv>
 8008c56:	f7f7 ff8f 	bl	8000b78 <__aeabi_d2uiz>
 8008c5a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

	p->intern.iv25 = (uint32_t)((double)(1 << ADCSCALEbitsy) * p->lc.calintern.dvtemp);
 8008c5e:	e9d4 670a 	ldrd	r6, r7, [r4, #40]	; 0x28
 8008c62:	2200      	movs	r2, #0
 8008c64:	4b5d      	ldr	r3, [pc, #372]	; (8008ddc <adcparamsinit_init+0x27c>)
 8008c66:	4630      	mov	r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 fcad 	bl	80005c8 <__aeabi_dmul>
 8008c6e:	f7f7 ff83 	bl	8000b78 <__aeabi_d2uiz>
 8008c72:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144

	p->intern.dx25 = p->lc.calintern.dvtemp * (1.0/4.3E-3);
 8008c76:	a354      	add	r3, pc, #336	; (adr r3, 8008dc8 <adcparamsinit_init+0x268>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 fca2 	bl	80005c8 <__aeabi_dmul>
 8008c84:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8008c88:	e9c3 0100 	strd	r0, r1, [r3]

	p->intern.dxdvref = p->intern.dvref * (1.0/4.3E-3);
 8008c8c:	f504 7388 	add.w	r3, r4, #272	; 0x110
 8008c90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c94:	a34c      	add	r3, pc, #304	; (adr r3, 8008dc8 <adcparamsinit_init+0x268>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	f7f7 fc93 	bl	80005c8 <__aeabi_dmul>
 8008ca2:	f504 7398 	add.w	r3, r4, #304	; 0x130
 8008ca6:	e9c3 0100 	strd	r0, r1, [r3]
	uint32_t adcfil;      // Filtered ADC reading
	uint32_t ival;        // scaled int computed value (not divider scaled)
}; */	

/* Absolute: 12v supply. */
	p->v12.iir.pprm = &p->lc.cal_12v.iir; // Filter param pointer
 8008caa:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8008cae:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	p->v12.k   = (p->lc.cal_12v.dvn / p->intern.dvref) * (dadc / p->lc.cal_12v.adcvn);
 8008cb2:	4632      	mov	r2, r6
 8008cb4:	463b      	mov	r3, r7
 8008cb6:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
 8008cba:	f7f7 fdaf 	bl	800081c <__aeabi_ddiv>
 8008cbe:	4680      	mov	r8, r0
 8008cc0:	4689      	mov	r9, r1
 8008cc2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8008cc6:	f7f7 fc09 	bl	80004dc <__aeabi_ui2d>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4650      	mov	r0, sl
 8008cd0:	4659      	mov	r1, fp
 8008cd2:	f7f7 fda3 	bl	800081c <__aeabi_ddiv>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4640      	mov	r0, r8
 8008cdc:	4649      	mov	r1, r9
 8008cde:	f7f7 fc73 	bl	80005c8 <__aeabi_dmul>
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	4689      	mov	r9, r1
 8008ce6:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8008cea:	e9c3 8900 	strd	r8, r9, [r3]
	p->v12.dscale = p->v12.k * p->intern.dvref;
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	f7f7 fc67 	bl	80005c8 <__aeabi_dmul>
 8008cfa:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 8008cfe:	e9c3 0100 	strd	r0, r1, [r3]
	p->chan[ADC1IDX_12VRAWSUPPLY].dscale = p->v12.k;
 8008d02:	f504 7342 	add.w	r3, r4, #776	; 0x308
 8008d06:	e9c3 8900 	strd	r8, r9, [r3]

/* Absolute:  5v supply. */
	p->v5.iir.pprm = &p->lc.cal_5v.iir; // Filter param pointer
 8008d0a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8008d0e:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
	p->v5.k   = (p->lc.cal_5v.dvn / p->intern.dvref) * (dadc / p->lc.cal_5v.adcvn);
 8008d12:	4632      	mov	r2, r6
 8008d14:	463b      	mov	r3, r7
 8008d16:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
 8008d1a:	f7f7 fd7f 	bl	800081c <__aeabi_ddiv>
 8008d1e:	4680      	mov	r8, r0
 8008d20:	4689      	mov	r9, r1
 8008d22:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8008d26:	f7f7 fbd9 	bl	80004dc <__aeabi_ui2d>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4650      	mov	r0, sl
 8008d30:	4659      	mov	r1, fp
 8008d32:	f7f7 fd73 	bl	800081c <__aeabi_ddiv>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	4649      	mov	r1, r9
 8008d3e:	f7f7 fc43 	bl	80005c8 <__aeabi_dmul>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	f504 71cc 	add.w	r1, r4, #408	; 0x198
 8008d4a:	e9c1 2300 	strd	r2, r3, [r1]
	p->v5.dscale = p->v5.k * p->intern.dvref;
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	f7f7 fc39 	bl	80005c8 <__aeabi_dmul>
 8008d56:	f504 73c8 	add.w	r3, r4, #400	; 0x190
 8008d5a:	e9c3 0100 	strd	r0, r1, [r3]
	p->chan[ADC1IDX_5VOLTSUPPLY].dscale = p->v5.dscale;
 8008d5e:	f504 7306 	add.w	r3, r4, #536	; 0x218
 8008d62:	e9c3 0100 	strd	r0, r1, [r3]

/* Ratiometric: battery string current. */
	ratiometric_cal(&p->cur1, &p->lc.cal_cur1);
 8008d66:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8008d6a:	f504 70d4 	add.w	r0, r4, #424	; 0x1a8
 8008d6e:	f7ff feb9 	bl	8008ae4 <ratiometric_cal>
	p->chan[ADC1IDX_CURRENTTOTAL].dscale = p->cur1.dscale; // For convenient access
 8008d72:	f504 73e4 	add.w	r3, r4, #456	; 0x1c8
 8008d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d7a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008d7e:	e9c3 0100 	strd	r0, r1, [r3]

/* Ratiometric: spare current. */
	ratiometric_cal(&p->cur2, &p->lc.cal_cur2);
 8008d82:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8008d86:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 8008d8a:	f7ff feab 	bl	8008ae4 <ratiometric_cal>
	p->chan[ADC1IDX_CURRENTMOTOR].dscale = p->cur2.dscale; // For convenient access
 8008d8e:	f504 7300 	add.w	r3, r4, #512	; 0x200
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f504 742e 	add.w	r4, r4, #696	; 0x2b8
 8008d9a:	e9c4 2300 	strd	r2, r3, [r4]
 8008d9e:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8008da2:	bf00      	nop
 8008da4:	f3af 8000 	nop.w
 8008da8:	00000000 	.word	0x00000000
 8008dac:	40effe00 	.word	0x40effe00
 8008db0:	66666666 	.word	0x66666666
 8008db4:	3ff26666 	.word	0x3ff26666
 8008db8:	851eb852 	.word	0x851eb852
 8008dbc:	3ff451eb 	.word	0x3ff451eb
 8008dc0:	00000000 	.word	0x00000000
 8008dc4:	417f4000 	.word	0x417f4000
 8008dc8:	47711dc4 	.word	0x47711dc4
 8008dcc:	406d11dc 	.word	0x406d11dc
 8008dd0:	40e00000 	.word	0x40e00000
 8008dd4:	3ff00000 	.word	0x3ff00000
 8008dd8:	40ff4000 	.word	0x40ff4000
 8008ddc:	40600000 	.word	0x40600000

08008de0 <ratiometric_cal_zero_CURRENTTOTAL>:
 *	@brief	: Adjust no-current ratio for Hall-effect sensors
 * @param	: p = Pointer to struct "everything" for this ADC module
 * @return	: 0 = no fault; -1 = out of tolerance
 * *************************************************************************/
int16_t ratiometric_cal_zero_CURRENTTOTAL(struct ADCFUNCTION* p)
{
 8008de0:	b508      	push	{r3, lr}
	return ratiometric_cal_zero(p, &p->cur1, ADC1IDX_CURRENTTOTAL);
 8008de2:	2201      	movs	r2, #1
 8008de4:	f500 71d4 	add.w	r1, r0, #424	; 0x1a8
 8008de8:	f7ff fe22 	bl	8008a30 <ratiometric_cal_zero>
}
 8008dec:	bd08      	pop	{r3, pc}
 8008dee:	bf00      	nop

08008df0 <load4>:
 * static void load4(uint8_t *po, uint32_t n);
 *	@brief	: Copy uint32 into byte array (not aligned)
 * *************************************************************************/
static void load4(uint8_t *po, uint32_t n)
{
	*(po + 0) = (n >>  0);
 8008df0:	7001      	strb	r1, [r0, #0]
	*(po + 1) = (n >>  8);
 8008df2:	0a0b      	lsrs	r3, r1, #8
 8008df4:	7043      	strb	r3, [r0, #1]
	*(po + 2) = (n >> 16);
 8008df6:	0c0b      	lsrs	r3, r1, #16
 8008df8:	7083      	strb	r3, [r0, #2]
	*(po + 3) = (n >> 24);
 8008dfa:	0e09      	lsrs	r1, r1, #24
 8008dfc:	70c1      	strb	r1, [r0, #3]
 8008dfe:	4770      	bx	lr

08008e00 <loadadc>:
/* *************************************************************************
 * static void loadadc(struct CONTACTORFUNCTION* pcf, uint8_t idx);
 *	@brief	: Load high voltage readings and send CAN msg
 * *************************************************************************/
static void loadadc(struct CONTACTORFUNCTION* pcf, double dx, uint8_t idx)
{
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4604      	mov	r4, r0
 8008e04:	f89d 1010 	ldrb.w	r1, [sp, #16]
		uint32_t ui;
		float    f;
	}tmp;

	// Raw integer readings (sum of 1/2 DMA buffer)
	uint16_t tmp16 = pcf->padc->chan[idx].sum; // Get raw sum reading
 8008e08:	f8d0 50e8 	ldr.w	r5, [r0, #232]	; 0xe8
 8008e0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008e10:	0108      	lsls	r0, r1, #4
 8008e12:	4428      	add	r0, r5
 8008e14:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
	pcf->canmsg[CID_CMD_R].can.cd.uc[1] = (tmp16 >> 0);
 8008e18:	f884 12b9 	strb.w	r1, [r4, #697]	; 0x2b9
	pcf->canmsg[CID_CMD_R].can.cd.uc[2] = (tmp16 >> 8);
 8008e1c:	0a09      	lsrs	r1, r1, #8
 8008e1e:	f884 12ba 	strb.w	r1, [r4, #698]	; 0x2ba

	// Calibrated 
	// Load reading as a float into payload
//	double dtmp  = pcf->padc->chan[idx].ival;  // Convert int to float
//	       dtmp *= pcf->padc->chan[idx].dscale; // Final scaling
	tmp.f = dx;  // Convert double to float
 8008e22:	4610      	mov	r0, r2
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7f7 fec7 	bl	8000bb8 <__aeabi_d2f>
	load4(&pcf->canmsg[CID_CMD_R].can.cd.uc[3],tmp.ui); // Load payload
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	f204 20bb 	addw	r0, r4, #699	; 0x2bb
 8008e30:	f7ff ffde 	bl	8008df0 <load4>

	pcf->canmsg[CID_CMD_R].can.dlc = 7; // Number of payload bytes
 8008e34:	2307      	movs	r3, #7
 8008e36:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}

08008e3c <loadhv>:
/* *************************************************************************
 * static void loadhv(struct CONTACTORFUNCTION* pcf, uint8_t idx);
 *	@brief	: Load high voltage readings and send CAN msg
 * *************************************************************************/
static void loadhv(struct CONTACTORFUNCTION* pcf, uint8_t idx)
{
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4604      	mov	r4, r0
 8008e40:	460e      	mov	r6, r1
		uint32_t ui;
		float    f;
	}tmp;

	// Raw integer reading
	pcf->canmsg[CID_CMD_R].can.cd.uc[1] = (pcf->hv[idx].hv >> 0);
 8008e42:	00cd      	lsls	r5, r1, #3
 8008e44:	1a6a      	subs	r2, r5, r1
 8008e46:	00d3      	lsls	r3, r2, #3
 8008e48:	4403      	add	r3, r0
 8008e4a:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8008e4e:	f880 22b9 	strb.w	r2, [r0, #697]	; 0x2b9
	pcf->canmsg[CID_CMD_R].can.cd.uc[2] = (pcf->hv[idx].hv >> 8);
 8008e52:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8008e56:	0a12      	lsrs	r2, r2, #8
 8008e58:	f880 22ba 	strb.w	r2, [r0, #698]	; 0x2ba

	// Load reading as a float into payload
	double dtmp = pcf->hv[idx].hv; // Convert uint16_t to float
 8008e5c:	f8b3 0198 	ldrh.w	r0, [r3, #408]	; 0x198
 8008e60:	f7f7 fb3c 	bl	80004dc <__aeabi_ui2d>
	       dtmp *= pcf->hv[idx].dscale;
 8008e64:	1bad      	subs	r5, r5, r6
 8008e66:	00eb      	lsls	r3, r5, #3
 8008e68:	4423      	add	r3, r4
 8008e6a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f7f7 fba9 	bl	80005c8 <__aeabi_dmul>
   tmp.f = dtmp;
 8008e76:	f7f7 fe9f 	bl	8000bb8 <__aeabi_d2f>
	load4(&pcf->canmsg[CID_CMD_R].can.cd.uc[3],tmp.ui);
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	f204 20bb 	addw	r0, r4, #699	; 0x2bb
 8008e80:	f7ff ffb6 	bl	8008df0 <load4>

	pcf->canmsg[CID_CMD_R].can.dlc = 7; // Number of payload bytes
 8008e84:	2307      	movs	r3, #7
 8008e86:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}

08008e8c <contactor_cmd_msg_i>:
/* *************************************************************************
 * void contactor_cmd_msg_i(struct CONTACTORFUNCTION* pcf);
 *	@brief	: Given the Mailbox pointer (within CONTACTORFUNCTION) handle request
 * *************************************************************************/
void contactor_cmd_msg_i(struct CONTACTORFUNCTION* pcf)
{
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	4604      	mov	r4, r0
};

*/
	int i;
	double dt1;
	uint8_t pay0 = pcf->pmbx_cid_cmd_i->ncan.can.cd.uc[0];
 8008e94:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008e98:	7a1d      	ldrb	r5, [r3, #8]

	// Return payload request code
	pcf->canmsg[CID_CMD_R].can.cd.uc[0] = pcf->pmbx_cid_cmd_i->ncan.can.cd.uc[0];	
 8008e9a:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8

	/* Switch on first payload byte response code */
	switch (pay0)
 8008e9e:	2d08      	cmp	r5, #8
 8008ea0:	f200 80bc 	bhi.w	800901c <contactor_cmd_msg_i+0x190>
 8008ea4:	e8df f005 	tbb	[pc, r5]
 8008ea8:	1e5c4105 	.word	0x1e5c4105
 8008eac:	aca83777 	.word	0xaca83777
 8008eb0:	b0          	.byte	0xb0
 8008eb1:	00          	.byte	0x00
	{
	/* ADC readings */
	case ADCRAW5V:         // PA0 IN0  - 5V sensor supply
		dt1 = ((double)pcf->padc->v5.ival * (1.0/(1<<ADCSCALEbits)) * pcf->padc->v5.dscale);
 8008eb2:	f8d0 50e8 	ldr.w	r5, [r0, #232]	; 0xe8
 8008eb6:	f8d5 01a4 	ldr.w	r0, [r5, #420]	; 0x1a4
 8008eba:	f7f7 fb0f 	bl	80004dc <__aeabi_ui2d>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8008ec4:	f7f7 fb80 	bl	80005c8 <__aeabi_dmul>
 8008ec8:	f505 75c8 	add.w	r5, r5, #400	; 0x190
 8008ecc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ed0:	f7f7 fb7a 	bl	80005c8 <__aeabi_dmul>
		loadadc(pcf,dt1,ADC1IDX_5VOLTSUPPLY); 
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4620      	mov	r0, r4
 8008ede:	f7ff ff8f 	bl	8008e00 <loadadc>
		break;
 8008ee2:	e0a1      	b.n	8009028 <contactor_cmd_msg_i+0x19c>

	case ADCRAW12V:        // PA7 IN7  - +12 Raw power to board
		dt1 = ((double)pcf->padc->v12.ival * (1.0/(1<<ADCSCALEbits)) * pcf->padc->v12.dscale);
 8008ee4:	f8d0 50e8 	ldr.w	r5, [r0, #232]	; 0xe8
 8008ee8:	f8d5 0174 	ldr.w	r0, [r5, #372]	; 0x174
 8008eec:	f7f7 faf6 	bl	80004dc <__aeabi_ui2d>
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8008ef6:	f7f7 fb67 	bl	80005c8 <__aeabi_dmul>
 8008efa:	f505 75b0 	add.w	r5, r5, #352	; 0x160
 8008efe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f02:	f7f7 fb61 	bl	80005c8 <__aeabi_dmul>
		loadadc(pcf,dt1,ADC1IDX_12VRAWSUPPLY); 
 8008f06:	2303      	movs	r3, #3
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f7ff ff76 	bl	8008e00 <loadadc>
		break;
 8008f14:	e088      	b.n	8009028 <contactor_cmd_msg_i+0x19c>

	case ADCINTERNALVREF:  // IN18     - Internal voltage reference
		loadadc(pcf,pcf->padc->intern.dvref,pay0); 
 8008f16:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8008f1a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	9500      	str	r5, [sp, #0]
 8008f24:	f7ff ff6c 	bl	8008e00 <loadadc>
		break;
 8008f28:	e07e      	b.n	8009028 <contactor_cmd_msg_i+0x19c>

	case ADCRAWCUR1:       // PA5 IN5  - Current sensor: total battery current
		dt1 = (pcf->padc->cur1.iI * pcf->padc->cur1.dscale) / (1<<ADCSCALEbits);
 8008f2a:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8008f2e:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
 8008f32:	e9d2 6700 	ldrd	r6, r7, [r2]
 8008f36:	f8d3 01d8 	ldr.w	r0, [r3, #472]	; 0x1d8
 8008f3a:	f7f7 fadf 	bl	80004fc <__aeabi_i2d>
 8008f3e:	4632      	mov	r2, r6
 8008f40:	463b      	mov	r3, r7
 8008f42:	f7f7 fb41 	bl	80005c8 <__aeabi_dmul>
 8008f46:	2200      	movs	r2, #0
 8008f48:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8008f4c:	f7f7 fb3c 	bl	80005c8 <__aeabi_dmul>
		loadadc(pcf,dt1,ADCRAWCUR1); 
 8008f50:	2301      	movs	r3, #1
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f7ff ff51 	bl	8008e00 <loadadc>
		break;
 8008f5e:	e063      	b.n	8009028 <contactor_cmd_msg_i+0x19c>

	case ADCRAWCUR2:       // PA6 IN6  - Current sensor: motor
		dt1 = (pcf->padc->cur2.iI * pcf->padc->cur2.dscale) / (1<<ADCSCALEbits);
 8008f60:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8008f64:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8008f68:	e9d2 6700 	ldrd	r6, r7, [r2]
 8008f6c:	f8d3 0210 	ldr.w	r0, [r3, #528]	; 0x210
 8008f70:	f7f7 fac4 	bl	80004fc <__aeabi_i2d>
 8008f74:	4632      	mov	r2, r6
 8008f76:	463b      	mov	r3, r7
 8008f78:	f7f7 fb26 	bl	80005c8 <__aeabi_dmul>
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8008f82:	f7f7 fb21 	bl	80005c8 <__aeabi_dmul>
		loadadc(pcf,dt1,ADCRAWCUR2); 
 8008f86:	2302      	movs	r3, #2
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7ff ff36 	bl	8008e00 <loadadc>
		break;
 8008f94:	e048      	b.n	8009028 <contactor_cmd_msg_i+0x19c>

	case ADCINTERNALTEMP:  // IN17     - Internal temperature sensor
		// Convert readings to degC
		dt1 = (pcf->padc->intern.dx25 - (pcf->padc->intern.dxdvref * 
 8008f96:	f8d0 a0e8 	ldr.w	sl, [r0, #232]	; 0xe8
 8008f9a:	f50a 7394 	add.w	r3, sl, #296	; 0x128
 8008f9e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008fa2:	f50a 7398 	add.w	r3, sl, #304	; 0x130
 8008fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
         ((double)pcf->padc->intern.adcfiltemp / (double)pcf->padc->intern.adcfilvref ))) + 
 8008faa:	f8da 0104 	ldr.w	r0, [sl, #260]	; 0x104
 8008fae:	f7f7 fa95 	bl	80004dc <__aeabi_ui2d>
 8008fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fb6:	f8da 0100 	ldr.w	r0, [sl, #256]	; 0x100
 8008fba:	f7f7 fa8f 	bl	80004dc <__aeabi_ui2d>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fc6:	f7f7 fc29 	bl	800081c <__aeabi_ddiv>
		loadadc(pcf,dt1,ADCRAWCUR2); 
		break;

	case ADCINTERNALTEMP:  // IN17     - Internal temperature sensor
		// Convert readings to degC
		dt1 = (pcf->padc->intern.dx25 - (pcf->padc->intern.dxdvref * 
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4640      	mov	r0, r8
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	f7f7 faf9 	bl	80005c8 <__aeabi_dmul>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4630      	mov	r0, r6
 8008fdc:	4639      	mov	r1, r7
 8008fde:	f7f7 f93f 	bl	8000260 <__aeabi_dsub>
 8008fe2:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 8008fe6:	f7f7 f93d 	bl	8000264 <__adddf3>
         ((double)pcf->padc->intern.adcfiltemp / (double)pcf->padc->intern.adcfilvref ))) + 
            pcf->padc->lc.calintern.drmtemp;
		loadadc(pcf,dt1,pay0);
 8008fea:	9500      	str	r5, [sp, #0]
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f7ff ff05 	bl	8008e00 <loadadc>
		break;
 8008ff6:	e017      	b.n	8009028 <contactor_cmd_msg_i+0x19c>
	
	/* External uart high voltage sensor readings. */
	case UARTWHV1: loadhv(pcf,IDXHV1); break;
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	f7ff ff1f 	bl	8008e3c <loadhv>
 8008ffe:	e013      	b.n	8009028 <contactor_cmd_msg_i+0x19c>
	case UARTWHV2: loadhv(pcf,IDXHV2); break;
 8009000:	2101      	movs	r1, #1
 8009002:	f7ff ff1b 	bl	8008e3c <loadhv>
 8009006:	e00f      	b.n	8009028 <contactor_cmd_msg_i+0x19c>
	case UARTWHV3: loadhv(pcf,IDXHV3); break;
 8009008:	2102      	movs	r1, #2
 800900a:	f7ff ff17 	bl	8008e3c <loadhv>
 800900e:	e00b      	b.n	8009028 <contactor_cmd_msg_i+0x19c>

	/* Bogus code */
	default:
		for (i = 1; i < 7; i++) pcf->canmsg[CID_CMD_R].can.cd.uc[i] = 0;
 8009010:	18e2      	adds	r2, r4, r3
 8009012:	2100      	movs	r1, #0
 8009014:	f882 12b8 	strb.w	r1, [r2, #696]	; 0x2b8
 8009018:	3301      	adds	r3, #1
 800901a:	e000      	b.n	800901e <contactor_cmd_msg_i+0x192>

	// Return payload request code
	pcf->canmsg[CID_CMD_R].can.cd.uc[0] = pcf->pmbx_cid_cmd_i->ncan.can.cd.uc[0];	

	/* Switch on first payload byte response code */
	switch (pay0)
 800901c:	2301      	movs	r3, #1
	case UARTWHV2: loadhv(pcf,IDXHV2); break;
	case UARTWHV3: loadhv(pcf,IDXHV3); break;

	/* Bogus code */
	default:
		for (i = 1; i < 7; i++) pcf->canmsg[CID_CMD_R].can.cd.uc[i] = 0;
 800901e:	2b06      	cmp	r3, #6
 8009020:	ddf6      	ble.n	8009010 <contactor_cmd_msg_i+0x184>
		pcf->canmsg[CID_CMD_R].can.dlc = 7; // Number of payload bytes
 8009022:	2307      	movs	r3, #7
 8009024:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
		
	}
	// Queue CAN msg
	xQueueSendToBack(CanTxQHandle,&pcf->canmsg[CID_CMD_R],portMAX_DELAY);
 8009028:	2300      	movs	r3, #0
 800902a:	f04f 32ff 	mov.w	r2, #4294967295
 800902e:	f504 712a 	add.w	r1, r4, #680	; 0x2a8
 8009032:	4803      	ldr	r0, [pc, #12]	; (8009040 <contactor_cmd_msg_i+0x1b4>)
 8009034:	6800      	ldr	r0, [r0, #0]
 8009036:	f7fc f973 	bl	8005320 <xQueueGenericSend>

}
 800903a:	b004      	add	sp, #16
 800903c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009040:	200032ec 	.word	0x200032ec

08009044 <ContactorEvents_00>:
 * void ContactorEvents_00(struct CONTACTORFUNCTION* pcf);
 * @brief	: ADC readings available
 * *************************************************************************/
void ContactorEvents_00(struct CONTACTORFUNCTION* pcf)
{
	pcf->evstat |= CNCTEVADC; // Show new readings ready
 8009044:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8009048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800904c:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop

08009054 <ContactorEvents_01>:
 * void ContactorEvents_01(struct CONTACTORFUNCTION* pcf);
 * @brief	: HV sensors usart RX line ready
 * *************************************************************************/
uint32_t dbgCE1;
void ContactorEvents_01(struct CONTACTORFUNCTION* pcf)
{
 8009054:	b530      	push	{r4, r5, lr}
 8009056:	b083      	sub	sp, #12
 8009058:	4604      	mov	r4, r0
dbgCE1 += 1;
 800905a:	4a12      	ldr	r2, [pc, #72]	; (80090a4 <ContactorEvents_01+0x50>)
 800905c:	6813      	ldr	r3, [r2, #0]
 800905e:	3301      	adds	r3, #1
 8009060:	6013      	str	r3, [r2, #0]
	contactor_hv_uartline(pcf);  // Extract readings from received line
 8009062:	f000 fa6d 	bl	8009540 <contactor_hv_uartline>
	contactor_hv_calibrate(pcf); // Calibrate raw ADC ticks to scale int volts
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fa96 	bl	8009598 <contactor_hv_calibrate>
	
	xTimerReset(pcf->swtimer3,1); // Reset keep-alive timer
 800906c:	f8d4 5164 	ldr.w	r5, [r4, #356]	; 0x164
 8009070:	f7fc fe86 	bl	8005d80 <xTaskGetTickCount>
 8009074:	2301      	movs	r3, #1
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	2300      	movs	r3, #0
 800907a:	4602      	mov	r2, r0
 800907c:	2102      	movs	r1, #2
 800907e:	4628      	mov	r0, r5
 8009080:	f7fd fca6 	bl	80069d0 <xTimerGenericCommand>
	pcf->evstat &= ~CNCTEVTIMER3;	// Clear timeout bit 
 8009084:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009088:	f023 0304 	bic.w	r3, r3, #4
	pcf->evstat |= CNCTEVHV;      // Show new HV readings available
 800908c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009090:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	pcf->hvuartctr += 1;		// Running count of lines received
 8009094:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009098:	3301      	adds	r3, #1
 800909a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
	return;
}
 800909e:	b003      	add	sp, #12
 80090a0:	bd30      	pop	{r4, r5, pc}
 80090a2:	bf00      	nop
 80090a4:	2000378c 	.word	0x2000378c

080090a8 <ContactorEvents_03>:
 * void ContactorEvents_03(struct CONTACTORFUNCTION* pcf);
 * @brief	: TIMER3: uart RX keep alive failed
 * *************************************************************************/
void ContactorEvents_03(struct CONTACTORFUNCTION* pcf)
{  // Readings failed to come in before timer timed out.
	pcf->evstat |= CNCTEVTIMER3;	// Set timeout bit 
 80090a8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80090ac:	f043 0304 	orr.w	r3, r3, #4

	pcf->evstat &= ~CNCTEVHV;      // Show new HV readings NOT available
 80090b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b4:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec

	/* Show uart RX timer timed out, i.e. no readings. */
	pcf->outstat |= CNCTOUTUART3;
 80090b8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 80090bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c0:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop

080090c8 <ContactorEvents_04>:
 * @brief	: TIMER1: Command Keep Alive failed (loss of command control)
 * *************************************************************************/
uint32_t dbgev04;

void ContactorEvents_04(struct CONTACTORFUNCTION* pcf)
{
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4604      	mov	r4, r0
dbgev04 += 1;
 80090cc:	4a0b      	ldr	r2, [pc, #44]	; (80090fc <ContactorEvents_04+0x34>)
 80090ce:	6813      	ldr	r3, [r2, #0]
 80090d0:	3301      	adds	r3, #1
 80090d2:	6013      	str	r3, [r2, #0]
	pcf->evstat |= CNCTEVTIMER1;	// Set to show that TIMER1 timed out
 80090d4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80090d8:	f043 0301 	orr.w	r3, r3, #1
 80090dc:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
// Let ContactorStates go to faulting state
//	pcf->evstat &= ~(CNCTEVCMDCN | CNCTEVCMDRS);

	/* Send status msg as a status heartbeat. */
//	contactor_msg_ka(pcf);
	pcf->outstat |=  CNCTOUT05KA;  // Output status bit: Show keep-alive
 80090e0:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 80090e4:	f043 0320 	orr.w	r3, r3, #32
 80090e8:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0

	/* Send with CAN id for heartbeat. */
	contactor_msg1(pcf, 0); // Send battery string voltage and current
 80090ec:	2100      	movs	r1, #0
 80090ee:	f000 fb31 	bl	8009754 <contactor_msg1>
	contactor_msg2(pcf, 0); // Send DMOC+ and DMOC- voltages
 80090f2:	2100      	movs	r1, #0
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 fb6d 	bl	80097d4 <contactor_msg2>
 80090fa:	bd10      	pop	{r4, pc}
 80090fc:	20003790 	.word	0x20003790

08009100 <ContactorEvents_05>:
 * void ContactorEvents_05(struct CONTACTORFUNCTION* pcf);
 * @brief	: TIMER2: delay ended
 * *************************************************************************/
void ContactorEvents_05(struct CONTACTORFUNCTION* pcf)
{
	pcf->evstat |= CNCTEVTIMER2;	// Set timeout bit 	
 8009100:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8009104:	f043 0302 	orr.w	r3, r3, #2
 8009108:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop

08009110 <ContactorEvents_06>:
/* *************************************************************************
 * void ContactorEvents_06(struct CONTACTORFUNCTION* pcf);
 * @brief	: CAN: cid_cmd_i (function/diagnostic command/poll)
 * *************************************************************************/
void ContactorEvents_06(struct CONTACTORFUNCTION* pcf)
{
 8009110:	b508      	push	{r3, lr}
	contactor_cmd_msg_i(pcf); // Build and send CAN msg with data requested
 8009112:	f7ff febb 	bl	8008e8c <contactor_cmd_msg_i>
 8009116:	bd08      	pop	{r3, pc}

08009118 <ContactorEvents_07>:
 * @brief	: CAN: cid_keepalive_i 
 * *************************************************************************/
uint8_t dbgevcmd;

void ContactorEvents_07(struct CONTACTORFUNCTION* pcf)
{
 8009118:	b530      	push	{r4, r5, lr}
 800911a:	b083      	sub	sp, #12
 800911c:	4604      	mov	r4, r0
	BaseType_t bret = xTimerReset(pcf->swtimer1, 10);
 800911e:	f8d0 515c 	ldr.w	r5, [r0, #348]	; 0x15c
 8009122:	f7fc fe2d 	bl	8005d80 <xTaskGetTickCount>
 8009126:	230a      	movs	r3, #10
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	2300      	movs	r3, #0
 800912c:	4602      	mov	r2, r0
 800912e:	2102      	movs	r1, #2
 8009130:	4628      	mov	r0, r5
 8009132:	f7fd fc4d 	bl	80069d0 <xTimerGenericCommand>
	if (bret != pdPASS) {morse_trap(44);}
 8009136:	2801      	cmp	r0, #1
 8009138:	d002      	beq.n	8009140 <ContactorEvents_07+0x28>
 800913a:	202c      	movs	r0, #44	; 0x2c
 800913c:	f7fe ff72 	bl	8008024 <morse_trap>

	pcf->outstat |=  CNCTOUT05KA;  // Output status bit: Show keep-alive
 8009140:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009144:	f043 0320 	orr.w	r3, r3, #32
 8009148:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	pcf->evstat  &= ~CNCTEVTIMER1; // Reset timer1 keep-alive timed-out bit
 800914c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009150:	f023 0301 	bic.w	r3, r3, #1
 8009154:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

	/* Incoming command byte with command bits */
	uint8_t cmd = pcf->pmbx_cid_keepalive_i->ncan.can.cd.uc[0];
 8009158:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800915c:	7a12      	ldrb	r2, [r2, #8]
dbgevcmd = cmd;
 800915e:	4910      	ldr	r1, [pc, #64]	; (80091a0 <ContactorEvents_07+0x88>)
 8009160:	700a      	strb	r2, [r1, #0]

	/* Update connect request status bits */
	if ( (cmd & CMDCONNECT) != 0) // Command to connect
 8009162:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009166:	d004      	beq.n	8009172 <ContactorEvents_07+0x5a>
	{ // Here, request to connect
		pcf->evstat |= CNCTEVCMDCN;		
 8009168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800916c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8009170:	e003      	b.n	800917a <ContactorEvents_07+0x62>
	}
	else
	{
		pcf->evstat &= ~CNCTEVCMDCN;		
 8009172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009176:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	}
	/* Update reset status */
	if ( (cmd & CMDRESET ) != 0) // Command to reset
 800917a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800917e:	d006      	beq.n	800918e <ContactorEvents_07+0x76>
	{ // Here, request to reset
		pcf->evstat |= CNCTEVCMDRS;		
 8009180:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009188:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800918c:	e005      	b.n	800919a <ContactorEvents_07+0x82>
	}
	else
	{
		pcf->evstat &= ~CNCTEVCMDRS;		
 800918e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009196:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	}
	return;
}	
 800919a:	b003      	add	sp, #12
 800919c:	bd30      	pop	{r4, r5, pc}
 800919e:	bf00      	nop
 80091a0:	20003788 	.word	0x20003788

080091a4 <ContactorEvents_08>:
 * @brief	: CAN: cid_gps_sync: send response CAN msgs
 * *************************************************************************/
uint32_t dbggpsflag;

void ContactorEvents_08(struct CONTACTORFUNCTION* pcf)
{
 80091a4:	b510      	push	{r4, lr}
 80091a6:	4604      	mov	r4, r0

/* Testing: use incoming gps msg to time defaultTask loop. */
struct CANRCVBUF* pcan = &pcf->pmbx_cid_gps_sync->ncan.can;
 80091a8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
if (pcan->id == 0x00400000)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80091b2:	d105      	bne.n	80091c0 <ContactorEvents_08+0x1c>
{
	if (pcan->cd.uc[0] == 0)
 80091b4:	7a1b      	ldrb	r3, [r3, #8]
 80091b6:	b91b      	cbnz	r3, 80091c0 <ContactorEvents_08+0x1c>
      dbggpsflag += 1;
 80091b8:	4a06      	ldr	r2, [pc, #24]	; (80091d4 <ContactorEvents_08+0x30>)
 80091ba:	6813      	ldr	r3, [r2, #0]
 80091bc:	3301      	adds	r3, #1
 80091be:	6013      	str	r3, [r2, #0]
}
	/* Send with regular polled CAN ID */
	contactor_msg1(pcf, 1); // Send battery string voltage and current
 80091c0:	2101      	movs	r1, #1
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fac6 	bl	8009754 <contactor_msg1>
	contactor_msg2(pcf, 1); // Send DMOC+ and DMOC- voltages
 80091c8:	2101      	movs	r1, #1
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 fb02 	bl	80097d4 <contactor_msg2>
 80091d0:	bd10      	pop	{r4, pc}
 80091d2:	bf00      	nop
 80091d4:	20003784 	.word	0x20003784

080091d8 <contactor_func_init_init>:
 * @param	: p    = pointer to ContactorTask
 * @param	: padc = pointer to ADC working struct
 * *************************************************************************/

void contactor_func_init_init(struct CONTACTORFUNCTION* p, struct ADCFUNCTION* padc)
{
 80091d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	4682      	mov	sl, r0
 80091e0:	4688      	mov	r8, r1
	int i;

	/* Pointer to ADC working parameters. */
	p->padc = padc;
 80091e2:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8

	/* For each HV */
	for (i = 0; i < NUMHV; i++)
 80091e6:	2400      	movs	r4, #0
 80091e8:	e028      	b.n	800923c <contactor_func_init_init+0x64>
	{
		// Pointer to filter parameters
		p->hv[i].iir.pprm = &p->lc.calhv[i].iir;
 80091ea:	0062      	lsls	r2, r4, #1
 80091ec:	1911      	adds	r1, r2, r4
 80091ee:	00cb      	lsls	r3, r1, #3
 80091f0:	3368      	adds	r3, #104	; 0x68
 80091f2:	4453      	add	r3, sl
 80091f4:	00e1      	lsls	r1, r4, #3
 80091f6:	1b09      	subs	r1, r1, r4
 80091f8:	00cd      	lsls	r5, r1, #3
 80091fa:	4455      	add	r5, sl
 80091fc:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178

		// Calibration volts per adc ct
		p->hv[i].dscale = p->lc.calhv[i].dvcal / (p->lc.calhv[i].adchv - p->lc.calhv[i].offset);
 8009200:	4422      	add	r2, r4
 8009202:	00d3      	lsls	r3, r2, #3
 8009204:	4453      	add	r3, sl
 8009206:	e9d3 671c 	ldrd	r6, r7, [r3, #112]	; 0x70
 800920a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800920c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800920e:	1ac0      	subs	r0, r0, r3
 8009210:	f7f7 f964 	bl	80004dc <__aeabi_ui2d>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4630      	mov	r0, r6
 800921a:	4639      	mov	r1, r7
 800921c:	f7f7 fafe 	bl	800081c <__aeabi_ddiv>
 8009220:	f505 73c0 	add.w	r3, r5, #384	; 0x180
 8009224:	e9c3 0100 	strd	r0, r1, [r3]

		// Calibration volts per adc ct scaled up for integers
		p->hv[i].hvcal = ((double)HVSCALE * p->hv[i].dscale);
 8009228:	2200      	movs	r2, #0
 800922a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800922e:	f7f7 f9cb 	bl	80005c8 <__aeabi_dmul>
 8009232:	f7f7 fca1 	bl	8000b78 <__aeabi_d2uiz>
 8009236:	f8c5 0190 	str.w	r0, [r5, #400]	; 0x190

	/* Pointer to ADC working parameters. */
	p->padc = padc;

	/* For each HV */
	for (i = 0; i < NUMHV; i++)
 800923a:	3401      	adds	r4, #1
 800923c:	2c02      	cmp	r4, #2
 800923e:	ddd4      	ble.n	80091ea <contactor_func_init_init+0x12>
		// Calibration volts per adc ct scaled up for integers
		p->hv[i].hvcal = ((double)HVSCALE * p->hv[i].dscale);
	}

	/* Battery low voltage as scaled uint32_t. */
	p->ibattlow = p->lc.fbattlow / p->hv[IDXHV1].dscale;
 8009240:	f50a 73c0 	add.w	r3, sl, #384	; 0x180
 8009244:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009248:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 800924c:	f7f7 f968 	bl	8000520 <__aeabi_f2d>
 8009250:	4622      	mov	r2, r4
 8009252:	462b      	mov	r3, r5
 8009254:	f7f7 fae2 	bl	800081c <__aeabi_ddiv>
 8009258:	f7f7 fc8e 	bl	8000b78 <__aeabi_d2uiz>
 800925c:	f8ca 0100 	str.w	r0, [sl, #256]	; 0x100

	/* Battery string current above which disconnecting is prevented. */
	p->icurrentdisconnect = ((p->lc.dcurrentdisconnect * (double)(1 << ADCSCALEbits)) / p->padc->cur1.dscale);
 8009260:	2200      	movs	r2, #0
 8009262:	4b9d      	ldr	r3, [pc, #628]	; (80094d8 <contactor_func_init_init+0x300>)
 8009264:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8009268:	f7f7 f9ae 	bl	80005c8 <__aeabi_dmul>
 800926c:	f508 78e4 	add.w	r8, r8, #456	; 0x1c8
 8009270:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009274:	f7f7 fad2 	bl	800081c <__aeabi_ddiv>
 8009278:	f7f7 fc56 	bl	8000b28 <__aeabi_d2iz>
 800927c:	f8ca 0104 	str.w	r0, [sl, #260]	; 0x104

	/* Prep-charge end volts threshold */

	// Two contactor mode uses HV3 (voltage across pre-chg resistor)
	p->iprechgendv  = (p->lc.ddiffb4 / p->hv[IDXHV3].dscale);
 8009280:	e9da 8904 	ldrd	r8, r9, [sl, #16]
 8009284:	f50a 73f8 	add.w	r3, sl, #496	; 0x1f0
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	4640      	mov	r0, r8
 800928e:	4649      	mov	r1, r9
 8009290:	f7f7 fac4 	bl	800081c <__aeabi_ddiv>
 8009294:	f7f7 fc70 	bl	8000b78 <__aeabi_d2uiz>
 8009298:	f8ca 010c 	str.w	r0, [sl, #268]	; 0x10c

	// One contactor mode uses (HV1-HV2) (voltage across pre-chg resistor)
	p->iprechgendvb = ((p->lc.ddiffb4 * (double)p->hv[IDXHV1].hvcal) / p->hv[IDXHV1].dscale);
 800929c:	f8da 0190 	ldr.w	r0, [sl, #400]	; 0x190
 80092a0:	f7f7 f91c 	bl	80004dc <__aeabi_ui2d>
 80092a4:	4606      	mov	r6, r0
 80092a6:	460f      	mov	r7, r1
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4640      	mov	r0, r8
 80092ae:	4649      	mov	r1, r9
 80092b0:	f7f7 f98a 	bl	80005c8 <__aeabi_dmul>
 80092b4:	4622      	mov	r2, r4
 80092b6:	462b      	mov	r3, r5
 80092b8:	f7f7 fab0 	bl	800081c <__aeabi_ddiv>
 80092bc:	f7f7 fc5c 	bl	8000b78 <__aeabi_d2uiz>
 80092c0:	f8ca 0110 	str.w	r0, [sl, #272]	; 0x110

	/* Voltage across contactor #1 after expected closure. */
	p->idiffafter   = ((p->lc.fdiffafter * (double)p->hv[IDXHV1].hvcal) / p->hv[IDXHV1].dscale);
 80092c4:	f8da 0048 	ldr.w	r0, [sl, #72]	; 0x48
 80092c8:	f7f7 f92a 	bl	8000520 <__aeabi_f2d>
 80092cc:	4632      	mov	r2, r6
 80092ce:	463b      	mov	r3, r7
 80092d0:	f7f7 f97a 	bl	80005c8 <__aeabi_dmul>
 80092d4:	4622      	mov	r2, r4
 80092d6:	462b      	mov	r3, r5
 80092d8:	f7f7 faa0 	bl	800081c <__aeabi_ddiv>
 80092dc:	f7f7 fc4c 	bl	8000b78 <__aeabi_d2uiz>
 80092e0:	f8ca 0118 	str.w	r0, [sl, #280]	; 0x118

	/* Convert ms to timer ticks. */
p->ka_k        = pdMS_TO_TICKS(p->lc.ka_t);        // Command/Keep-alive CAN msg timeout duration.
 80092e4:	f8da 201c 	ldr.w	r2, [sl, #28]
 80092e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092ec:	fb03 f102 	mul.w	r1, r3, r2
 80092f0:	4a7a      	ldr	r2, [pc, #488]	; (80094dc <contactor_func_init_init+0x304>)
 80092f2:	fba2 0101 	umull	r0, r1, r2, r1
 80092f6:	0989      	lsrs	r1, r1, #6
 80092f8:	f8ca 111c 	str.w	r1, [sl, #284]	; 0x11c
p->prechgmin_k = pdMS_TO_TICKS(p->lc.prechgmin_t); // Minimum pre-charge duration
 80092fc:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 8009300:	fb03 f101 	mul.w	r1, r3, r1
 8009304:	fba2 0101 	umull	r0, r1, r2, r1
 8009308:	0989      	lsrs	r1, r1, #6
 800930a:	f8ca 1114 	str.w	r1, [sl, #276]	; 0x114
p->prechgmax_k = pdMS_TO_TICKS(p->lc.prechgmax_t); // Maximum allowed for voltage to reach threshold
 800930e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8009312:	fb03 f101 	mul.w	r1, r3, r1
 8009316:	fba2 0101 	umull	r0, r1, r2, r1
 800931a:	0989      	lsrs	r1, r1, #6
 800931c:	f8ca 1120 	str.w	r1, [sl, #288]	; 0x120
p->close1_k    = pdMS_TO_TICKS(p->lc.close1_t);    // contactor #1 coil energize-closure (timeout delay ticks)
 8009320:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 8009324:	fb03 f101 	mul.w	r1, r3, r1
 8009328:	fba2 0101 	umull	r0, r1, r2, r1
 800932c:	0989      	lsrs	r1, r1, #6
 800932e:	f8ca 1124 	str.w	r1, [sl, #292]	; 0x124
p->close2_k    = pdMS_TO_TICKS(p->lc.close2_t);    // contactor #2 coil energize-closure (timeout delay ticks)
 8009332:	f8da 1034 	ldr.w	r1, [sl, #52]	; 0x34
 8009336:	fb03 f101 	mul.w	r1, r3, r1
 800933a:	fba2 0101 	umull	r0, r1, r2, r1
 800933e:	0989      	lsrs	r1, r1, #6
 8009340:	f8ca 1128 	str.w	r1, [sl, #296]	; 0x128
p->open1_k     = pdMS_TO_TICKS(p->lc.open1_t);     // contactor #1 coil de-energize-open (timeout delay ticks)
 8009344:	f8da 1038 	ldr.w	r1, [sl, #56]	; 0x38
 8009348:	fb03 f101 	mul.w	r1, r3, r1
 800934c:	fba2 0101 	umull	r0, r1, r2, r1
 8009350:	0989      	lsrs	r1, r1, #6
 8009352:	f8ca 112c 	str.w	r1, [sl, #300]	; 0x12c
p->open2_k     = pdMS_TO_TICKS(p->lc.open2_t);     // contactor #2 coil de-energize-open (timeout delay ticks)
 8009356:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
 800935a:	fb03 f101 	mul.w	r1, r3, r1
 800935e:	fba2 0101 	umull	r0, r1, r2, r1
 8009362:	0989      	lsrs	r1, r1, #6
 8009364:	f8ca 1130 	str.w	r1, [sl, #304]	; 0x130
p->keepalive_k = pdMS_TO_TICKS(p->lc.keepalive_t); // keep-alive timeout (timeout delay ticks)
 8009368:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
 800936c:	fb03 f101 	mul.w	r1, r3, r1
 8009370:	fba2 0101 	umull	r0, r1, r2, r1
 8009374:	0989      	lsrs	r1, r1, #6
 8009376:	f8ca 1134 	str.w	r1, [sl, #308]	; 0x134
p->hbct1_k     = pdMS_TO_TICKS(p->lc.hbct1_t);     // Heartbeat ct: ticks between sending msgs hv1:cur1
 800937a:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 800937e:	fb03 f101 	mul.w	r1, r3, r1
 8009382:	fba2 0101 	umull	r0, r1, r2, r1
 8009386:	0989      	lsrs	r1, r1, #6
 8009388:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
p->hbct2_k     = pdMS_TO_TICKS(p->lc.hbct2_t);     // Heartbeat ct: ticks between sending msgs hv2:cur2
 800938c:	f8da 1060 	ldr.w	r1, [sl, #96]	; 0x60
 8009390:	fb03 f301 	mul.w	r3, r3, r1
 8009394:	fba2 2303 	umull	r2, r3, r2, r3
 8009398:	099b      	lsrs	r3, r3, #6
 800939a:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c

	/* Add CAN Mailboxes                         CAN           CAN ID              Notify bit   Paytype */
	p->pmbx_cid_cmd_i       =  MailboxTask_add(pctl0,p->lc.cid_cmd_i,      NULL,CNCTBIT06,0,36);
 800939e:	4c50      	ldr	r4, [pc, #320]	; (80094e0 <contactor_func_init_init+0x308>)
 80093a0:	2324      	movs	r3, #36	; 0x24
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	2600      	movs	r6, #0
 80093a6:	9600      	str	r6, [sp, #0]
 80093a8:	2340      	movs	r3, #64	; 0x40
 80093aa:	4632      	mov	r2, r6
 80093ac:	f8da 10c8 	ldr.w	r1, [sl, #200]	; 0xc8
 80093b0:	6820      	ldr	r0, [r4, #0]
 80093b2:	f7fe ffc3 	bl	800833c <MailboxTask_add>
 80093b6:	f8ca 0214 	str.w	r0, [sl, #532]	; 0x214
	p->pmbx_cid_keepalive_i =  MailboxTask_add(pctl0,p->lc.cid_keepalive_i,NULL,CNCTBIT07,0,23);
 80093ba:	2517      	movs	r5, #23
 80093bc:	9501      	str	r5, [sp, #4]
 80093be:	9600      	str	r6, [sp, #0]
 80093c0:	2380      	movs	r3, #128	; 0x80
 80093c2:	4632      	mov	r2, r6
 80093c4:	f8da 10cc 	ldr.w	r1, [sl, #204]	; 0xcc
 80093c8:	6820      	ldr	r0, [r4, #0]
 80093ca:	f7fe ffb7 	bl	800833c <MailboxTask_add>
 80093ce:	f8ca 0218 	str.w	r0, [sl, #536]	; 0x218
	p->pmbx_cid_gps_sync    =  MailboxTask_add(pctl0,p->lc.cid_gps_sync,   NULL,CNCTBIT08,0,23);
 80093d2:	6820      	ldr	r0, [r4, #0]
 80093d4:	9501      	str	r5, [sp, #4]
 80093d6:	9600      	str	r6, [sp, #0]
 80093d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093dc:	4632      	mov	r2, r6
 80093de:	f8da 10d0 	ldr.w	r1, [sl, #208]	; 0xd0
 80093e2:	f7fe ffab 	bl	800833c <MailboxTask_add>
 80093e6:	f8ca 021c 	str.w	r0, [sl, #540]	; 0x21c

	/* PWM working struct for switching PWM values */
	p->sConfigOCn.OCMode = TIM_OCMODE_PWM1;
 80093ea:	2360      	movs	r3, #96	; 0x60
 80093ec:	f8ca 3228 	str.w	r3, [sl, #552]	; 0x228
	p->sConfigOCn.Pulse = 0;	// New PWM value inserted here during execution
 80093f0:	f8ca 622c 	str.w	r6, [sl, #556]	; 0x22c
	p->sConfigOCn.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093f4:	f8ca 6230 	str.w	r6, [sl, #560]	; 0x230
	p->sConfigOCn.OCFastMode = TIM_OCFAST_DISABLE;
 80093f8:	f8ca 6238 	str.w	r6, [sl, #568]	; 0x238

	// Convert PWM as percent to timer count used in HAL setup struct
   p->ipwmpct1 = p->lc.fpwmpct1 * 0.01 * (htim4.Init.Period + 1) - 1;
 80093fc:	f8da 0050 	ldr.w	r0, [sl, #80]	; 0x50
 8009400:	f7f7 f88e 	bl	8000520 <__aeabi_f2d>
 8009404:	a332      	add	r3, pc, #200	; (adr r3, 80094d0 <contactor_func_init_init+0x2f8>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7f7 f8dd 	bl	80005c8 <__aeabi_dmul>
 800940e:	4680      	mov	r8, r0
 8009410:	4689      	mov	r9, r1
 8009412:	4b34      	ldr	r3, [pc, #208]	; (80094e4 <contactor_func_init_init+0x30c>)
 8009414:	68d8      	ldr	r0, [r3, #12]
 8009416:	3001      	adds	r0, #1
 8009418:	f7f7 f860 	bl	80004dc <__aeabi_ui2d>
 800941c:	4604      	mov	r4, r0
 800941e:	460d      	mov	r5, r1
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f7 f8ce 	bl	80005c8 <__aeabi_dmul>
 800942c:	2200      	movs	r2, #0
 800942e:	4b2e      	ldr	r3, [pc, #184]	; (80094e8 <contactor_func_init_init+0x310>)
 8009430:	f7f6 ff16 	bl	8000260 <__aeabi_dsub>
 8009434:	f7f7 fba0 	bl	8000b78 <__aeabi_d2uiz>
 8009438:	f8ca 0220 	str.w	r0, [sl, #544]	; 0x220
   p->ipwmpct2 = p->lc.fpwmpct2 * 0.01 * (htim4.Init.Period + 1) - 1;
 800943c:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 8009440:	f7f7 f86e 	bl	8000520 <__aeabi_f2d>
 8009444:	a322      	add	r3, pc, #136	; (adr r3, 80094d0 <contactor_func_init_init+0x2f8>)
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f7 f8bd 	bl	80005c8 <__aeabi_dmul>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4620      	mov	r0, r4
 8009454:	4629      	mov	r1, r5
 8009456:	f7f7 f8b7 	bl	80005c8 <__aeabi_dmul>
 800945a:	2200      	movs	r2, #0
 800945c:	4b22      	ldr	r3, [pc, #136]	; (80094e8 <contactor_func_init_init+0x310>)
 800945e:	f7f6 feff 	bl	8000260 <__aeabi_dsub>
 8009462:	f7f7 fb89 	bl	8000b78 <__aeabi_d2uiz>
 8009466:	f8ca 0224 	str.w	r0, [sl, #548]	; 0x224

	/* Pre-load fixed data in CAN msgs */
	for (i = 0; i < NUMCANMSGS; i++)
 800946a:	4632      	mov	r2, r6
 800946c:	e012      	b.n	8009494 <contactor_func_init_init+0x2bc>
	{
		p->canmsg[i].pctl = pctl0;   // Control block for CAN module (CAN 1)
 800946e:	eb0a 1142 	add.w	r1, sl, r2, lsl #5
 8009472:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <contactor_func_init_init+0x308>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f8c1 3248 	str.w	r3, [r1, #584]	; 0x248
		p->canmsg[i].maxretryct = 8; //
 800947a:	f102 0313 	add.w	r3, r2, #19
 800947e:	015b      	lsls	r3, r3, #5
 8009480:	eb0a 0403 	add.w	r4, sl, r3
 8009484:	2008      	movs	r0, #8
 8009486:	f80a 0003 	strb.w	r0, [sl, r3]
		p->canmsg[i].bits = 0;       //
 800948a:	2300      	movs	r3, #0
 800948c:	7063      	strb	r3, [r4, #1]
		p->canmsg[i].can.dlc = 8;    // Default payload size (might be modified when loaded and sent)
 800948e:	f8c1 0254 	str.w	r0, [r1, #596]	; 0x254
	// Convert PWM as percent to timer count used in HAL setup struct
   p->ipwmpct1 = p->lc.fpwmpct1 * 0.01 * (htim4.Init.Period + 1) - 1;
   p->ipwmpct2 = p->lc.fpwmpct2 * 0.01 * (htim4.Init.Period + 1) - 1;

	/* Pre-load fixed data in CAN msgs */
	for (i = 0; i < NUMCANMSGS; i++)
 8009492:	3201      	adds	r2, #1
 8009494:	2a05      	cmp	r2, #5
 8009496:	ddea      	ble.n	800946e <contactor_func_init_init+0x296>
		p->canmsg[i].bits = 0;       //
		p->canmsg[i].can.dlc = 8;    // Default payload size (might be modified when loaded and sent)
	}

	// Pre-load CAN ids
	p->canmsg[CID_KA_R ].can.id  = p->lc.cid_keepalive_r;
 8009498:	f8da 30c4 	ldr.w	r3, [sl, #196]	; 0xc4
 800949c:	f8ca 3250 	str.w	r3, [sl, #592]	; 0x250
	p->canmsg[CID_MSG1 ].can.id  = p->lc.cid_msg1;
 80094a0:	f8da 30b8 	ldr.w	r3, [sl, #184]	; 0xb8
 80094a4:	f8ca 3270 	str.w	r3, [sl, #624]	; 0x270
	p->canmsg[CID_MSG2 ].can.id  = p->lc.cid_msg2;
 80094a8:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
 80094ac:	f8ca 3290 	str.w	r3, [sl, #656]	; 0x290
	p->canmsg[CID_CMD_R].can.id  = p->lc.cid_cmd_r;
 80094b0:	f8da 30c0 	ldr.w	r3, [sl, #192]	; 0xc0
 80094b4:	f8ca 32b0 	str.w	r3, [sl, #688]	; 0x2b0
	p->canmsg[CID_HB1  ].can.id  = p->lc.cid_hb1;
 80094b8:	f8da 30b0 	ldr.w	r3, [sl, #176]	; 0xb0
 80094bc:	f8ca 32d0 	str.w	r3, [sl, #720]	; 0x2d0
	p->canmsg[CID_HB2  ].can.id  = p->lc.cid_hb2;
 80094c0:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 80094c4:	f8ca 32f0 	str.w	r3, [sl, #752]	; 0x2f0

	return;
}
 80094c8:	b002      	add	sp, #8
 80094ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ce:	bf00      	nop
 80094d0:	47ae147b 	.word	0x47ae147b
 80094d4:	3f847ae1 	.word	0x3f847ae1
 80094d8:	40e00000 	.word	0x40e00000
 80094dc:	10624dd3 	.word	0x10624dd3
 80094e0:	200031d4 	.word	0x200031d4
 80094e4:	20002fe8 	.word	0x20002fe8
 80094e8:	3ff00000 	.word	0x3ff00000

080094ec <contactor_func_init_canfilter>:
 * void contactor_func_init_canfilter(struct CONTACTORFUNCTION* p);
 *	@brief	: Setup CAN hardware filter with CAN addresses to receive
 * @param	: p    = pointer to ContactorTask
 * *************************************************************************/
void contactor_func_init_canfilter(struct CONTACTORFUNCTION* p)
{
 80094ec:	b510      	push	{r4, lr}
 80094ee:	4604      	mov	r4, r0
 * @return	: HAL_ERROR or HAL_OK
*/
	HAL_StatusTypeDef ret;

	// CANID_CMD_CNTCTR1I: U8_VAR: Contactor1: I: Command CANID incoming
	ret = canfilter_setup_add32b_id(1,&hcan,p->lc.cid_cmd_i,0);
 80094f0:	2300      	movs	r3, #0
 80094f2:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 80094f6:	4911      	ldr	r1, [pc, #68]	; (800953c <contactor_func_init_canfilter+0x50>)
 80094f8:	2001      	movs	r0, #1
 80094fa:	f7fe faaf 	bl	8007a5c <canfilter_setup_add32b_id>
	if (ret == HAL_ERROR) morse_trap(61);	
 80094fe:	2801      	cmp	r0, #1
 8009500:	d102      	bne.n	8009508 <contactor_func_init_canfilter+0x1c>
 8009502:	203d      	movs	r0, #61	; 0x3d
 8009504:	f7fe fd8e 	bl	8008024 <morse_trap>

	// CANID_CMD_CNTCTRKAI:U8',    Contactor1: I KeepAlive and connect command
	ret = canfilter_setup_add32b_id(1,&hcan,p->lc.cid_keepalive_i,0);
 8009508:	2300      	movs	r3, #0
 800950a:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 800950e:	490b      	ldr	r1, [pc, #44]	; (800953c <contactor_func_init_canfilter+0x50>)
 8009510:	2001      	movs	r0, #1
 8009512:	f7fe faa3 	bl	8007a5c <canfilter_setup_add32b_id>
	if (ret == HAL_ERROR) morse_trap(62);	
 8009516:	2801      	cmp	r0, #1
 8009518:	d102      	bne.n	8009520 <contactor_func_init_canfilter+0x34>
 800951a:	203e      	movs	r0, #62	; 0x3e
 800951c:	f7fe fd82 	bl	8008024 <morse_trap>

	// CANID_HB_TIMESYNC:  U8 : GPS_1: U8 GPS time sync distribution msg-GPS time sync msg
	ret = canfilter_setup_add32b_id(1,&hcan,p->lc.cid_gps_sync,0);
 8009520:	2300      	movs	r3, #0
 8009522:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 8009526:	4905      	ldr	r1, [pc, #20]	; (800953c <contactor_func_init_canfilter+0x50>)
 8009528:	2001      	movs	r0, #1
 800952a:	f7fe fa97 	bl	8007a5c <canfilter_setup_add32b_id>
	if (ret == HAL_ERROR) morse_trap(63);	
 800952e:	2801      	cmp	r0, #1
 8009530:	d102      	bne.n	8009538 <contactor_func_init_canfilter+0x4c>
 8009532:	203f      	movs	r0, #63	; 0x3f
 8009534:	f7fe fd76 	bl	8008024 <morse_trap>
 8009538:	bd10      	pop	{r4, pc}
 800953a:	bf00      	nop
 800953c:	2000306c 	.word	0x2000306c

08009540 <contactor_hv_uartline>:
	uint32_t ihv;  // Calibrated: Scaled
	uint16_t hv;   // Raw reading as received from uart
};
*/
void contactor_hv_uartline(struct CONTACTORFUNCTION* pcf)
{
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	4605      	mov	r5, r0
	int i;
	uint8_t* pline;	// Pointer to line buffer
	do
	{
		/* Get pointer of next completed line. */
		pline = (uint8_t*)xSerialTaskReceiveGetline(pcf->prbcb3);
 8009544:	f8d5 0158 	ldr.w	r0, [r5, #344]	; 0x158
 8009548:	f7fe fca2 	bl	8007e90 <xSerialTaskReceiveGetline>
		if (pline != NULL)
 800954c:	4601      	mov	r1, r0
 800954e:	b1f0      	cbz	r0, 800958e <contactor_hv_uartline+0x4e>
		{ // Here, a line is ready.
			if (*(pline+12) != '\n') return; // Not correct line
 8009550:	7b03      	ldrb	r3, [r0, #12]
 8009552:	2b0a      	cmp	r3, #10
 8009554:	d11d      	bne.n	8009592 <contactor_hv_uartline+0x52>
 8009556:	2000      	movs	r0, #0
 8009558:	e017      	b.n	800958a <contactor_hv_uartline+0x4a>

			for (i = 0; i < NUMHV; i++)
			{ 
				/* Table lookup ASCII to binary: 4 asci -> uint16_t */
				pcf->hv[i].hv  = \
                (hxbn[*(pline+0)] <<  4) | \
 800955a:	780b      	ldrb	r3, [r1, #0]
 800955c:	4c0d      	ldr	r4, [pc, #52]	; (8009594 <contactor_hv_uartline+0x54>)
 800955e:	f814 e003 	ldrb.w	lr, [r4, r3]
                (hxbn[*(pline+1)] <<  0) | \
 8009562:	784b      	ldrb	r3, [r1, #1]
 8009564:	5ce2      	ldrb	r2, [r4, r3]
				    (hxbn[*(pline+2)] << 12) | \
 8009566:	788b      	ldrb	r3, [r1, #2]
 8009568:	5ce3      	ldrb	r3, [r4, r3]
                (hxbn[*(pline+3)] <<  8);
 800956a:	78ce      	ldrb	r6, [r1, #3]
 800956c:	5da7      	ldrb	r7, [r4, r6]
			if (*(pline+12) != '\n') return; // Not correct line

			for (i = 0; i < NUMHV; i++)
			{ 
				/* Table lookup ASCII to binary: 4 asci -> uint16_t */
				pcf->hv[i].hv  = \
 800956e:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
 8009572:	00f4      	lsls	r4, r6, #3
 8009574:	442c      	add	r4, r5
 8009576:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 800957a:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
 800957e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8009582:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
                (hxbn[*(pline+0)] <<  4) | \
                (hxbn[*(pline+1)] <<  0) | \
				    (hxbn[*(pline+2)] << 12) | \
                (hxbn[*(pline+3)] <<  8);
				pline += 4;
 8009586:	3104      	adds	r1, #4
		pline = (uint8_t*)xSerialTaskReceiveGetline(pcf->prbcb3);
		if (pline != NULL)
		{ // Here, a line is ready.
			if (*(pline+12) != '\n') return; // Not correct line

			for (i = 0; i < NUMHV; i++)
 8009588:	3001      	adds	r0, #1
 800958a:	2802      	cmp	r0, #2
 800958c:	dde5      	ble.n	800955a <contactor_hv_uartline+0x1a>
				    (hxbn[*(pline+2)] << 12) | \
                (hxbn[*(pline+3)] <<  8);
				pline += 4;
			}
		}
	} while (pline != NULL); // Catchup jic we got behind
 800958e:	2900      	cmp	r1, #0
 8009590:	d1d8      	bne.n	8009544 <contactor_hv_uartline+0x4>
 8009592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009594:	0800ea14 	.word	0x0800ea14

08009598 <contactor_hv_calibrate>:
 * void contactor_hv_calibrate(struct CONTACTORFUNCTION* pcf);
 * @brief	: Apply calibration to raw readings
 * @return	: readings stored in contactor function struct
 * *************************************************************************/
void contactor_hv_calibrate(struct CONTACTORFUNCTION* pcf)
{
 8009598:	b410      	push	{r4}
	int i;
	for (i = 0; i < NUMHV; i++)
 800959a:	2200      	movs	r2, #0
 800959c:	e00c      	b.n	80095b8 <contactor_hv_calibrate+0x20>
	{
		/* Volts = Volts per ADC ct * Raw ADC ticks (16b) from uart */
		pcf->hv[i].hvc = pcf->hv[i].hvcal * pcf->hv[i].hv;
 800959e:	00d1      	lsls	r1, r2, #3
 80095a0:	1a89      	subs	r1, r1, r2
 80095a2:	00cb      	lsls	r3, r1, #3
 80095a4:	4403      	add	r3, r0
 80095a6:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
 80095aa:	f8b3 4198 	ldrh.w	r4, [r3, #408]	; 0x198
 80095ae:	fb01 f104 	mul.w	r1, r1, r4
 80095b2:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
 * @return	: readings stored in contactor function struct
 * *************************************************************************/
void contactor_hv_calibrate(struct CONTACTORFUNCTION* pcf)
{
	int i;
	for (i = 0; i < NUMHV; i++)
 80095b6:	3201      	adds	r2, #1
 80095b8:	2a02      	cmp	r2, #2
 80095ba:	ddf0      	ble.n	800959e <contactor_hv_calibrate+0x6>
	{
		/* Volts = Volts per ADC ct * Raw ADC ticks (16b) from uart */
		pcf->hv[i].hvc = pcf->hv[i].hvcal * pcf->hv[i].hv;
	}
	return;
}
 80095bc:	bc10      	pop	{r4}
 80095be:	4770      	bx	lr

080095c0 <contactor_idx_v_struct_hardcode_params>:
 * void contactor_idx_v_struct_hardcode_params(struct struct CONTACTORLC* p);
 * @brief	: Init struct from hard-coded parameters (rather than database params in highflash)
 * @return	: 0
 * *************************************************************************/
void contactor_idx_v_struct_hardcode_params(struct CONTACTORLC* p)
{
 80095c0:	b430      	push	{r4, r5}
	p->size       = 47;
 80095c2:	232f      	movs	r3, #47	; 0x2f
 80095c4:	6003      	str	r3, [r0, #0]
	p->crc        = 0;   // TBD
 80095c6:	2300      	movs	r3, #0
 80095c8:	6043      	str	r3, [r0, #4]
        p->version    = 1;   // 
 80095ca:	2301      	movs	r3, #1
 80095cc:	6083      	str	r3, [r0, #8]

	/* Bits that define the hw configuration and features. */
	p->hwconfig   = 0; // Default configuration
//	p->hwconfig  |= ONECONTACTOR;   // One contactor w Pre-chg relay
	p->hwconfig  |= PWMCONTACTOR1;  // PWM coil #1
	p->hwconfig  |= PWMCONTACTOR2;  // PWM coil #2
 80095ce:	2360      	movs	r3, #96	; 0x60
 80095d0:	6183      	str	r3, [r0, #24]

	/* Threshold for minimum battery voltage. */
	p->fbattlow   = 30.0;  // Battery string low voltage (volts)
 80095d2:	4b3d      	ldr	r3, [pc, #244]	; (80096c8 <contactor_idx_v_struct_hardcode_params+0x108>)
 80095d4:	6243      	str	r3, [r0, #36]	; 0x24
	// p->fbattlow   = 270.0;  // Battery string low voltage (volts)

/* Battery string current above which disconnecting is prevented. */
	p->dcurrentdisconnect = 5.5; // Disconnect threshold (amps)
 80095d6:	2200      	movs	r2, #0
 80095d8:	4b3c      	ldr	r3, [pc, #240]	; (80096cc <contactor_idx_v_struct_hardcode_params+0x10c>)
 80095da:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28

	/* Timings in milliseconds. Converted later to timer ticks. */
	p->ka_t       = 1500; // Command/Keep-alive CAN msg timeout duration.
 80095de:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80095e2:	61c3      	str	r3, [r0, #28]
	p->ddiffb4    = 3.0;  // hv3, or (hv1-hv2) voltage across pre-charge resistor before allowing clousure of #2 contactor
 80095e4:	2200      	movs	r2, #0
 80095e6:	4b3a      	ldr	r3, [pc, #232]	; (80096d0 <contactor_idx_v_struct_hardcode_params+0x110>)
 80095e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
	p->fdiffafter = 3.0;  // allowable (hv1-hv2) voltage difference after closure (volts)
 80095ec:	4b39      	ldr	r3, [pc, #228]	; (80096d4 <contactor_idx_v_struct_hardcode_params+0x114>)
 80095ee:	6483      	str	r3, [r0, #72]	; 0x48
	p->prechgmin_t= 4000; // always allow this amount of time after closing contactor #1 (timeout delay ms)
 80095f0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80095f4:	6403      	str	r3, [r0, #64]	; 0x40
	p->prechgmax_t= 6000; // allowable delay for diffafter to reach closure point (timeout delay ms)
 80095f6:	f241 7370 	movw	r3, #6000	; 0x1770
 80095fa:	6443      	str	r3, [r0, #68]	; 0x44
	p->close1_t   = 100;  // contactor #1 coil energize-closure (timeout delay ms)
 80095fc:	2364      	movs	r3, #100	; 0x64
 80095fe:	6303      	str	r3, [r0, #48]	; 0x30
	p->close2_t   = 100;  // contactor #2 coil energize-closure (timeout delay ms)
 8009600:	6343      	str	r3, [r0, #52]	; 0x34
	p->open1_t    = 50;   // contactor #1 coil de-energize-open (timeout delay ms)
 8009602:	2332      	movs	r3, #50	; 0x32
 8009604:	6383      	str	r3, [r0, #56]	; 0x38
	p->open2_t    = 50;   // contactor #2 coil de-energize-open (timeout delay ms)
 8009606:	63c3      	str	r3, [r0, #60]	; 0x3c
	//p->hv2stable_t= 30;   // hv 2 reading stable after closure (duration ms); possibly not used and could be removed
	//p->keepalive_t= 2555; // keep-alive timeout (timeout delay ms); possibly not used and could be removed
	p->hbct1_t    = 1000; // Heartbeat ct: ticks between sending msgs hv1:cur1
 8009608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800960c:	65c3      	str	r3, [r0, #92]	; 0x5c
	p->hbct2_t    = 1000; // Heartbeat ct: ticks between sending msgs hv2:cur2
 800960e:	6603      	str	r3, [r0, #96]	; 0x60

/* PWM durations as percent (0.0- 100.0) */
	p->fpwmpct1  = 100.0;  // Percent PWM after closure delay at 100% coil #1
 8009610:	4b31      	ldr	r3, [pc, #196]	; (80096d8 <contactor_idx_v_struct_hardcode_params+0x118>)
 8009612:	6503      	str	r3, [r0, #80]	; 0x50
	p->fpwmpct2  = 100.0;  // Percent PWM after closure delay at 100% coil #2
 8009614:	6543      	str	r3, [r0, #84]	; 0x54
/*	present system uses k to divide IIR difference into integrator. The IIR sample rate is 499 Hz. Consider computing k to give set bandwidth
	where the IIR sample is computed based on the processor and its setup.	*/ 
	// Battery_minus-to-contactor #1
	p->calhv[IDXHV1].iir.k     = 3;
 8009616:	2303      	movs	r3, #3
 8009618:	6683      	str	r3, [r0, #104]	; 0x68
	p->calhv[IDXHV1].iir.scale = 2;
 800961a:	2202      	movs	r2, #2
 800961c:	66c2      	str	r2, [r0, #108]	; 0x6c
 	p->calhv[IDXHV1].dvcal  = 159.7; // Applied voltage; update; GSM 200319
 800961e:	a528      	add	r5, pc, #160	; (adr r5, 80096c0 <contactor_idx_v_struct_hardcode_params+0x100>)
 8009620:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009624:	e9c0 451c 	strd	r4, r5, [r0, #112]	; 0x70
	p->calhv[IDXHV1].adchv  = 19632; // 
 8009628:	f644 41b0 	movw	r1, #19632	; 0x4cb0
 800962c:	6781      	str	r1, [r0, #120]	; 0x78
	p->calhv[IDXHV1].offset =  3;    // ADC reading zero volts (Not actually calibrated)
 800962e:	67c3      	str	r3, [r0, #124]	; 0x7c
        
	// Battery_minus-to-contactor #1 DMOC_plus
	p->calhv[IDXHV2].iir.k     = 3;
 8009630:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	p->calhv[IDXHV2].iir.scale = 2;
 8009634:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 	p->calhv[IDXHV2].dvcal  = 159.7; // Applied voltage
 8009638:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
        p->calhv[IDXHV2].adchv  = 19500;  // ratiometric update; GSM 200319
 800963c:	f644 412c 	movw	r1, #19500	; 0x4c2c
 8009640:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
	p->calhv[IDXHV2].offset =  3;    // ADC reading zero volts (Not actually calibrated)
 8009644:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
        
	// Battery_minus-to-contactor #1 DMOC_minus
	p->calhv[IDXHV3].iir.k     = 3;
 8009648:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	p->calhv[IDXHV3].iir.scale = 2;
 800964c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
 	p->calhv[IDXHV3].dvcal  = 159.7; // Applied voltage
 8009650:	e9c0 4528 	strd	r4, r5, [r0, #160]	; 0xa0
        p->calhv[IDXHV3].adchv  = 19507;  // GSM update to set nominal gain 200319 (just using value from HV2)
 8009654:	f644 4233 	movw	r2, #19507	; 0x4c33
 8009658:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
	p->calhv[IDXHV3].offset =  3;    // ADC reading zero volts (Not actually calibrated)
 800965c:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac

   //                 CANID_HEX      CANID_NAME       CAN_MSG_FMT     DESCRIPTION
	p->cid_hb1        = 0xFF800000; // CANID_HB_CNTCTR1V  : FF_FF : Contactor1: Heartbeat: High voltage1:Current sensor1
 8009660:	4b1e      	ldr	r3, [pc, #120]	; (80096dc <contactor_idx_v_struct_hardcode_params+0x11c>)
 8009662:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	p->cid_hb2        = 0xFF000000; // CANID_HB_CNTCTR1A  : FF_FF : Contactor1: Heartbeat: High voltage2:Current sensor2
 8009666:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800966a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        p->cid_msg1       = 0x50400000; // CANID_MSG_CNTCTR1V : FF_FF : Contactor1: poll response: High voltage1:Current sensor1
 800966e:	4b1c      	ldr	r3, [pc, #112]	; (80096e0 <contactor_idx_v_struct_hardcode_params+0x120>)
 8009670:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
        p->cid_msg2       = 0x50600000; // CANID_MSG_CNTCTR1A : FF_FF : Contactor1: poll response: battery gnd to: DMOC+, DMOC-
 8009674:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009678:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	p->cid_cmd_r      = 0xE3600000; // CANID_CMD_CNTCTR1R : U8_VAR: Contactor1: R: Command response
 800967c:	f103 4313 	add.w	r3, r3, #2466250752	; 0x93000000
 8009680:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	p->cid_keepalive_r= 0xE3C00000; // CANID_CMD_CNTCTRKAR: U8_U8 : Contactor1: R KeepAlive response
 8009684:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8009688:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4

	// List of CAN ID's for setting up hw filter for incoming msgs
	p->cid_cmd_i        = 0xE360000C; // CANID_CMD_CNTCTR1I: U8_VAR: Contactor1: I: Command CANID incoming
 800968c:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <contactor_idx_v_struct_hardcode_params+0x124>)
 800968e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	p->cid_keepalive_i  = 0xE3800000; // CANID_CMD_CNTCTRKAI:U8',    Contactor1: I KeepAlive and connect command
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <contactor_idx_v_struct_hardcode_params+0x128>)
 8009694:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	p->cid_gps_sync     = 0x00400000; // CANID_HB_TIMESYNC:  U8 : GPS_1: U8 GPS time sync distribution msg-GPS time sync msg
 8009698:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800969c:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	p->code_CAN_filt[0] = 0xFFFFFFFC; // CANID_DUMMY: UNDEF: Dummy ID: Lowest priority possible (Not Used)
 80096a0:	f06f 0303 	mvn.w	r3, #3
 80096a4:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	p->code_CAN_filt[1] = 0xFFFFFFFC; // CANID_DUMMY: UNDEF: Dummy ID: Lowest priority possible (Not Used)
 80096a8:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
	p->code_CAN_filt[2] = 0xFFFFFFFC; // CANID_DUMMY: UNDEF: Dummy ID: Lowest priority possible (Not Used)
 80096ac:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	p->code_CAN_filt[3] = 0xFFFFFFFC; // CANID_DUMMY: UNDEF: Dummy ID: Lowest priority possible (Not Used)
 80096b0:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
	p->code_CAN_filt[4] = 0xFFFFFFFC; // CANID_DUMMY: UNDEF: Dummy ID: Lowest priority possible (Not Used)
 80096b4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

	return;
}
 80096b8:	bc30      	pop	{r4, r5}
 80096ba:	4770      	bx	lr
 80096bc:	f3af 8000 	nop.w
 80096c0:	66666666 	.word	0x66666666
 80096c4:	4063f666 	.word	0x4063f666
 80096c8:	41f00000 	.word	0x41f00000
 80096cc:	40160000 	.word	0x40160000
 80096d0:	40080000 	.word	0x40080000
 80096d4:	40400000 	.word	0x40400000
 80096d8:	42c80000 	.word	0x42c80000
 80096dc:	ff800000 	.word	0xff800000
 80096e0:	50400000 	.word	0x50400000
 80096e4:	e360000c 	.word	0xe360000c
 80096e8:	e3800000 	.word	0xe3800000

080096ec <load4>:
 * static void load4(uint8_t *po, uint32_t n);
 *	@brief	: Copy uint32_t into byte array (not aligned)
 * *************************************************************************/
static void load4(uint8_t *po, uint32_t n)
{
	*(po + 0) = (n >>  0);
 80096ec:	7001      	strb	r1, [r0, #0]
	*(po + 1) = (n >>  8);
 80096ee:	0a0b      	lsrs	r3, r1, #8
 80096f0:	7043      	strb	r3, [r0, #1]
	*(po + 2) = (n >> 16);
 80096f2:	0c0b      	lsrs	r3, r1, #16
 80096f4:	7083      	strb	r3, [r0, #2]
	*(po + 3) = (n >> 24);
 80096f6:	0e09      	lsrs	r1, r1, #24
 80096f8:	70c1      	strb	r1, [r0, #3]
 80096fa:	4770      	bx	lr

080096fc <hvpayload>:
 * @param	: idx1 = index into hv array (0-(NUMHV-1))
 * @param	: idx2 = index into ncan msg (0-(NUMCANMSGS-1))
 * @param	: idx3 = index into payload byte array
 * *************************************************************************/
static void hvpayload(struct CONTACTORFUNCTION* pcf, uint8_t idx1,uint8_t idx2,uint8_t idx3)
{
 80096fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009700:	4605      	mov	r5, r0
 8009702:	468a      	mov	sl, r1
 8009704:	4616      	mov	r6, r2
 8009706:	461c      	mov	r4, r3
		uint32_t ui;
		float    f;
	}tmp;

	// Load high voltage [idx1] as a float into payload msg [idx2] payload byte [idx3]
	pcf->hv[idx1].dhvc = (double)pcf->hv[idx1].dscale * (double)pcf->hv[idx1].hv;
 8009708:	00cf      	lsls	r7, r1, #3
 800970a:	1a7a      	subs	r2, r7, r1
 800970c:	00d3      	lsls	r3, r2, #3
 800970e:	4403      	add	r3, r0
 8009710:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 8009714:	e9d2 8900 	ldrd	r8, r9, [r2]
 8009718:	f8b3 0198 	ldrh.w	r0, [r3, #408]	; 0x198
 800971c:	f7f6 fede 	bl	80004dc <__aeabi_ui2d>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4640      	mov	r0, r8
 8009726:	4649      	mov	r1, r9
 8009728:	f7f6 ff4e 	bl	80005c8 <__aeabi_dmul>
 800972c:	ebca 0707 	rsb	r7, sl, r7
 8009730:	00fb      	lsls	r3, r7, #3
 8009732:	442b      	add	r3, r5
 8009734:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009738:	e9c3 0100 	strd	r0, r1, [r3]
	tmp.f = pcf->hv[idx1].dhvc;                       // Convert to float
 800973c:	f7f7 fa3c 	bl	8000bb8 <__aeabi_d2f>
	load4(&pcf->canmsg[idx2].can.cd.uc[idx3],tmp.ui); // Load payload
 8009740:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 8009744:	f504 7416 	add.w	r4, r4, #600	; 0x258
 8009748:	4601      	mov	r1, r0
 800974a:	1928      	adds	r0, r5, r4
 800974c:	f7ff ffce 	bl	80096ec <load4>
 8009750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009754 <contactor_msg1>:
 * @param	: w = switch for CID_HB1 (0) or CID_MSG1 CAN ids (1)
 * *************************************************************************/
uint32_t dbgmsg1ctr;

void contactor_msg1(struct CONTACTORFUNCTION* pcf, uint8_t w)
{
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	4605      	mov	r5, r0
	}tmp;

	uint8_t idx2;

	/* Use heartbeat or polled msg CAN id */
	if (w == 0) 
 8009758:	b909      	cbnz	r1, 800975e <contactor_msg1+0xa>
		idx2 = CID_HB1;
 800975a:	2404      	movs	r4, #4
 800975c:	e000      	b.n	8009760 <contactor_msg1+0xc>
	else
		idx2 = CID_MSG1;
 800975e:	2401      	movs	r4, #1

	// Load Battery string voltage (IDXHV1) as first float in payload
	hvpayload(pcf, IDXHV1, idx2, 0);
 8009760:	2300      	movs	r3, #0
 8009762:	4622      	mov	r2, r4
 8009764:	4619      	mov	r1, r3
 8009766:	4628      	mov	r0, r5
 8009768:	f7ff ffc8 	bl	80096fc <hvpayload>

	// Battery string current as second float in payload
	double dI = (pcf->padc->cur1.iI * pcf->padc->cur1.dscale) / (1<<ADCSCALEbits);
 800976c:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8009770:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
 8009774:	e9d2 6700 	ldrd	r6, r7, [r2]
 8009778:	f8d3 01d8 	ldr.w	r0, [r3, #472]	; 0x1d8
 800977c:	f7f6 febe 	bl	80004fc <__aeabi_i2d>
 8009780:	4632      	mov	r2, r6
 8009782:	463b      	mov	r3, r7
 8009784:	f7f6 ff20 	bl	80005c8 <__aeabi_dmul>
 8009788:	2200      	movs	r2, #0
 800978a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800978e:	f7f6 ff1b 	bl	80005c8 <__aeabi_dmul>
	tmp.f = dI; // Convert to float
 8009792:	f7f7 fa11 	bl	8000bb8 <__aeabi_d2f>
	load4(&pcf->canmsg[idx2].can.cd.uc[4],tmp.ui); // Load float
 8009796:	0164      	lsls	r4, r4, #5
 8009798:	f504 7317 	add.w	r3, r4, #604	; 0x25c
 800979c:	4601      	mov	r1, r0
 800979e:	18e8      	adds	r0, r5, r3
 80097a0:	f7ff ffa4 	bl	80096ec <load4>

	pcf->canmsg[idx2].can.dlc = 8;
 80097a4:	192b      	adds	r3, r5, r4
 80097a6:	2208      	movs	r2, #8
 80097a8:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254

dbgmsg1ctr += 1;
 80097ac:	4a07      	ldr	r2, [pc, #28]	; (80097cc <contactor_msg1+0x78>)
 80097ae:	6813      	ldr	r3, [r2, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	6013      	str	r3, [r2, #0]

	// Queue CAN msg
	xQueueSendToBack(CanTxQHandle,&pcf->canmsg[idx2],portMAX_DELAY);
 80097b4:	f504 7112 	add.w	r1, r4, #584	; 0x248
 80097b8:	2300      	movs	r3, #0
 80097ba:	f04f 32ff 	mov.w	r2, #4294967295
 80097be:	4429      	add	r1, r5
 80097c0:	4803      	ldr	r0, [pc, #12]	; (80097d0 <contactor_msg1+0x7c>)
 80097c2:	6800      	ldr	r0, [r0, #0]
 80097c4:	f7fb fdac 	bl	8005320 <xQueueGenericSend>
 80097c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20003794 	.word	0x20003794
 80097d0:	200032ec 	.word	0x200032ec

080097d4 <contactor_msg2>:
 *	@brief	: Setup and send responses: voltages: DMOC+, DMOC-
 * @param	: pcf = Pointer to working struct for Contactor function
 * @param	: w = switch for CID_HB1 (0) or CID_MSG1 CAN ids (1)
 * *************************************************************************/
void contactor_msg2(struct CONTACTORFUNCTION* pcf, uint8_t w)
{
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4605      	mov	r5, r0
	uint8_t idx2;
dbgmsg1ctr += 1;
 80097d8:	4a0f      	ldr	r2, [pc, #60]	; (8009818 <contactor_msg2+0x44>)
 80097da:	6813      	ldr	r3, [r2, #0]
 80097dc:	3301      	adds	r3, #1
 80097de:	6013      	str	r3, [r2, #0]

	if (w == 0) 
 80097e0:	b909      	cbnz	r1, 80097e6 <contactor_msg2+0x12>
		idx2 = CID_HB2;
 80097e2:	2405      	movs	r4, #5
 80097e4:	e000      	b.n	80097e8 <contactor_msg2+0x14>
	else
		idx2 = CID_MSG2;
 80097e6:	2402      	movs	r4, #2

	// Load high voltage 2 as a float into payload
	hvpayload(pcf, IDXHV2, idx2, 0);
 80097e8:	2300      	movs	r3, #0
 80097ea:	4622      	mov	r2, r4
 80097ec:	2101      	movs	r1, #1
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7ff ff84 	bl	80096fc <hvpayload>

	// Load high voltage 3 as a float into payload
	hvpayload(pcf, IDXHV3, idx2, 4);
 80097f4:	2304      	movs	r3, #4
 80097f6:	4622      	mov	r2, r4
 80097f8:	2102      	movs	r1, #2
 80097fa:	4628      	mov	r0, r5
 80097fc:	f7ff ff7e 	bl	80096fc <hvpayload>

	// Queue CAN msg
	xQueueSendToBack(CanTxQHandle,&pcf->canmsg[idx2],portMAX_DELAY);
 8009800:	0161      	lsls	r1, r4, #5
 8009802:	f501 7112 	add.w	r1, r1, #584	; 0x248
 8009806:	2300      	movs	r3, #0
 8009808:	f04f 32ff 	mov.w	r2, #4294967295
 800980c:	4429      	add	r1, r5
 800980e:	4803      	ldr	r0, [pc, #12]	; (800981c <contactor_msg2+0x48>)
 8009810:	6800      	ldr	r0, [r0, #0]
 8009812:	f7fb fd85 	bl	8005320 <xQueueGenericSend>
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	20003794 	.word	0x20003794
 800981c:	200032ec 	.word	0x200032ec

08009820 <contactor_msg_ka>:
 *	@brief	: Setup and send Keep-alive response
 * @param	: pcf = Pointer to working struct for Contactor function
 * *************************************************************************/
uint32_t dbgkactr;
void contactor_msg_ka(struct CONTACTORFUNCTION* pcf)
{
 8009820:	b508      	push	{r3, lr}
dbgkactr += 1;
 8009822:	4a15      	ldr	r2, [pc, #84]	; (8009878 <contactor_msg_ka+0x58>)
 8009824:	6813      	ldr	r3, [r2, #0]
 8009826:	3301      	adds	r3, #1
 8009828:	6013      	str	r3, [r2, #0]
	/* Return command byte w primary state code */
	pcf->canmsg[CID_KA_R].can.cd.uc[0]  = 
     (pcf->pmbx_cid_keepalive_i->ncan.can.cd.uc[0] & 0xf0) |
 800982a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 800982e:	7a1a      	ldrb	r2, [r3, #8]
     (pcf->state & 0xf);
 8009830:	f890 3244 	ldrb.w	r3, [r0, #580]	; 0x244
uint32_t dbgkactr;
void contactor_msg_ka(struct CONTACTORFUNCTION* pcf)
{
dbgkactr += 1;
	/* Return command byte w primary state code */
	pcf->canmsg[CID_KA_R].can.cd.uc[0]  = 
 8009834:	f022 020f 	bic.w	r2, r2, #15
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	4313      	orrs	r3, r2
 800983e:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
     (pcf->pmbx_cid_keepalive_i->ncan.can.cd.uc[0] & 0xf0) |
     (pcf->state & 0xf);

	/* Fault code */
	pcf->canmsg[CID_KA_R].can.cd.uc[1] = pcf->faultcode;
 8009842:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 8009846:	f880 3259 	strb.w	r3, [r0, #601]	; 0x259

	/* substate codes */
	pcf->canmsg[CID_KA_R].can.cd.uc[2]  = (pcf->substateC << 0) & 0xf;
 800984a:	f890 3245 	ldrb.w	r3, [r0, #581]	; 0x245
 800984e:	f003 030f 	and.w	r3, r3, #15
	pcf->canmsg[CID_KA_R].can.cd.uc[2] |= (pcf->substateX << 4);
 8009852:	f890 2246 	ldrb.w	r2, [r0, #582]	; 0x246
 8009856:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800985a:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a

	pcf->canmsg[CID_KA_R].can.dlc = 3; // Payload size
 800985e:	2303      	movs	r3, #3
 8009860:	f8c0 3254 	str.w	r3, [r0, #596]	; 0x254

	// Queue CAN msg
	xQueueSendToBack(CanTxQHandle,&pcf->canmsg[CID_KA_R],portMAX_DELAY);
 8009864:	2300      	movs	r3, #0
 8009866:	f04f 32ff 	mov.w	r2, #4294967295
 800986a:	f500 7112 	add.w	r1, r0, #584	; 0x248
 800986e:	4803      	ldr	r0, [pc, #12]	; (800987c <contactor_msg_ka+0x5c>)
 8009870:	6800      	ldr	r0, [r0, #0]
 8009872:	f7fb fd55 	bl	8005320 <xQueueGenericSend>
 8009876:	bd08      	pop	{r3, pc}
 8009878:	20003798 	.word	0x20003798
 800987c:	200032ec 	.word	0x200032ec

08009880 <new_state>:
 * @param	: pcf = pointer to struct with "everything" for this function
 * @param	: newstate = code number for the new state
 * *************************************************************************/
static void new_state(struct CONTACTORFUNCTION* pcf, uint32_t newstate)
{
	if (pcf->faultcode != pcf->faultcode_prev)
 8009880:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 8009884:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
 8009888:	4293      	cmp	r3, r2
 800988a:	d007      	beq.n	800989c <new_state+0x1c>
	{
		pcf->faultcode_prev = pcf->faultcode;
 800988c:	f880 30f9 	strb.w	r3, [r0, #249]	; 0xf9
		pcf->outstat |= CNCTOUT05KA;	// Queue keep-alive status CAN msg
 8009890:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 8009894:	f043 0320 	orr.w	r3, r3, #32
 8009898:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
	}
	pcf->state = newstate;
 800989c:	f880 1244 	strb.w	r1, [r0, #580]	; 0x244
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop

080098a4 <open_contactors>:
 * static void open_contactors(struct CONTACTORFUNCTION* pcf);
 * @brief	: De-energize contactors and set time delay for opening
 * @param	: pcf = pointer to struct with "everything" for this function
 * *************************************************************************/
static void open_contactors(struct CONTACTORFUNCTION* pcf)
{
 80098a4:	b510      	push	{r4, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	4604      	mov	r4, r0
	/* Set one-shot timer for contactors opening duration. */
	if (pcf->open2_k > pcf->open1_k)
 80098aa:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 80098ae:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d914      	bls.n	80098e0 <open_contactors+0x3c>
	{
		if (pcf->open2_k == 0) morse_trap(86);
 80098b6:	b912      	cbnz	r2, 80098be <open_contactors+0x1a>
 80098b8:	2056      	movs	r0, #86	; 0x56
 80098ba:	f7fe fbb3 	bl	8008024 <morse_trap>
		xTimerChangePeriod(pcf->swtimer2,pcf->open2_k, 2);
 80098be:	2302      	movs	r3, #2
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	2300      	movs	r3, #0
 80098c4:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 80098c8:	2104      	movs	r1, #4
 80098ca:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 80098ce:	f7fd f87f 	bl	80069d0 <xTimerGenericCommand>
		pcf->evstat &= ~CNCTEVTIMER2;	// Clear timedout status bit 
 80098d2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80098d6:	f023 0302 	bic.w	r3, r3, #2
 80098da:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80098de:	e013      	b.n	8009908 <open_contactors+0x64>
	} 
	else
	{
		if (pcf->open1_k == 0) morse_trap(87);
 80098e0:	b913      	cbnz	r3, 80098e8 <open_contactors+0x44>
 80098e2:	2057      	movs	r0, #87	; 0x57
 80098e4:	f7fe fb9e 	bl	8008024 <morse_trap>
		xTimerChangePeriod(pcf->swtimer2,pcf->open1_k, 2); 
 80098e8:	2302      	movs	r3, #2
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 80098f2:	2104      	movs	r1, #4
 80098f4:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 80098f8:	f7fd f86a 	bl	80069d0 <xTimerGenericCommand>
		pcf->evstat &= ~CNCTEVTIMER2;	// Clear timedout status bit 
 80098fc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009900:	f023 0302 	bic.w	r3, r3, #2
 8009904:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	}

	pcf->evstat &= ~CNCTEVTIMER2;	// Reset timeout bit 
 8009908:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800990c:	f023 0302 	bic.w	r3, r3, #2
 8009910:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

	/* De-engerize both contactors and pwm'ing if on */
	pcf->outstat      &= ~(CNCTOUT00K1 | CNCTOUT01K2 | CNCTOUT06KAw | CNCTOUT07KAw);
 8009914:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009918:	f023 03c3 	bic.w	r3, r3, #195	; 0xc3
 800991c:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	pcf->outstat_prev |= (CNCTOUT00K1 | CNCTOUT01K2); // jic
 8009920:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8009924:	f043 0303 	orr.w	r3, r3, #3
 8009928:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	return;
}
 800992c:	b002      	add	sp, #8
 800992e:	bd10      	pop	{r4, pc}

08009930 <transition_disconnecting>:
	pcf->outstat |= CNCTOUT04EN; // DMOC enabled
	return;
}
/* ===== xDISCONNECTING ================================================= */
static void transition_disconnecting(struct CONTACTORFUNCTION* pcf)
{
 8009930:	b510      	push	{r4, lr}
 8009932:	4604      	mov	r4, r0
				if (pcf->padc->cur1.iI > -pcf->padc->cur1.irk0) // ***
				return;
			}
		}
#endif
		open_contactors(pcf);
 8009934:	f7ff ffb6 	bl	80098a4 <open_contactors>
		new_state(pcf,DISCONNECTING);	
 8009938:	2106      	movs	r1, #6
 800993a:	4620      	mov	r0, r4
 800993c:	f7ff ffa0 	bl	8009880 <new_state>
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop

08009944 <transition_connecting>:
 * void ContactorStates_connecting(struct CONTACTORFUNCTION* pcf);
 * @brief	: CONNECTING state
 * *************************************************************************/
/* ===== xCONNECTING ==================================================== */
static void transition_connecting(struct CONTACTORFUNCTION* pcf)
{ // Intialize disconnected state
 8009944:	b510      	push	{r4, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	4604      	mov	r4, r0

	/* Contactor configuration modes handled differently. */
	if ((pcf->lc.hwconfig & ONECONTACTOR) == 0)
 800994a:	6983      	ldr	r3, [r0, #24]
 800994c:	f013 0f10 	tst.w	r3, #16
 8009950:	d11b      	bne.n	800998a <transition_connecting+0x46>
	{ // Here, TWO CONTACTOR mode

		/* Reset sub-states for connecting in this mode */
		pcf->substateC = CONNECT_C1;
 8009952:	2300      	movs	r3, #0
 8009954:	f880 3245 	strb.w	r3, [r0, #581]	; 0x245

		/* Set one-shot timer for contactor #1 closure delay */
		if (pcf->close1_k == 0) morse_trap(81);
 8009958:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 800995c:	b913      	cbnz	r3, 8009964 <transition_connecting+0x20>
 800995e:	2051      	movs	r0, #81	; 0x51
 8009960:	f7fe fb60 	bl	8008024 <morse_trap>
		xTimerChangePeriod(pcf->swtimer2,pcf->close1_k, 2); 
 8009964:	2302      	movs	r3, #2
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	2300      	movs	r3, #0
 800996a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800996e:	2104      	movs	r1, #4
 8009970:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8009974:	f7fd f82c 	bl	80069d0 <xTimerGenericCommand>

		/* Energize coil #1: Battery_string-to-DMOC+ */
		pcf->outstat |= CNCTOUT00K1; // Energize coil during update section
 8009978:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800997c:	f043 0301 	orr.w	r3, r3, #1
		pcf->outstat &= ~CNCTOUT06KAw; // No pwm, JIC
 8009980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009984:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8009988:	e01a      	b.n	80099c0 <transition_connecting+0x7c>
	}
	else
	{ // Here, ONE CONTACTOR W PRE-CHG RELAY mode

		/* Reset sub-states for connecting in this mode */
		pcf->substateC = CONNECT_C1B;
 800998a:	2304      	movs	r3, #4
 800998c:	f880 3245 	strb.w	r3, [r0, #581]	; 0x245

		/* Set one-shot timer for pre-chg relay (#2) closure delay */
		if (pcf->close2_k == 0) morse_trap(81);
 8009990:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8009994:	b913      	cbnz	r3, 800999c <transition_connecting+0x58>
 8009996:	2051      	movs	r0, #81	; 0x51
 8009998:	f7fe fb44 	bl	8008024 <morse_trap>
		xTimerChangePeriod(pcf->swtimer2,pcf->close2_k, 2); 
 800999c:	2302      	movs	r3, #2
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80099a6:	2104      	movs	r1, #4
 80099a8:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 80099ac:	f7fd f810 	bl	80069d0 <xTimerGenericCommand>

		/* Energize coil #2: (Pre-charge relay) */
		pcf->outstat |= CNCTOUT01K2; // Energize coil during update section
 80099b0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 80099b4:	f043 0302 	orr.w	r3, r3, #2
		pcf->outstat &= ~CNCTOUT07KAw; // No pwm, JIC
 80099b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099bc:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	}
	pcf->evstat &= ~CNCTEVTIMER2; // Reset sw2 timer timeout bit
 80099c0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80099c4:	f023 0302 	bic.w	r3, r3, #2
 80099c8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

	/* Update main state */
	new_state(pcf,CONNECTING);
 80099cc:	2101      	movs	r1, #1
 80099ce:	4620      	mov	r0, r4
 80099d0:	f7ff ff56 	bl	8009880 <new_state>
	return;
}
 80099d4:	b002      	add	sp, #8
 80099d6:	bd10      	pop	{r4, pc}

080099d8 <ContactorStates_disconnecting>:
		return;	
}
/* ===== DISCONNECTING ================================================== */
void ContactorStates_disconnecting(struct CONTACTORFUNCTION* pcf)
{
	if ((pcf->evstat & CNCTEVTIMER2) != 0)
 80099d8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80099dc:	f013 0f02 	tst.w	r3, #2
 80099e0:	d002      	beq.n	80099e8 <ContactorStates_disconnecting+0x10>
	{
			pcf->state = DISCONNECTED;
 80099e2:	2300      	movs	r3, #0
 80099e4:	f880 3244 	strb.w	r3, [r0, #580]	; 0x244
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop

080099ec <transition_faulting>:
	/* Here, still waiting for TIMER2 to time out. */
	return;
}
/* ===== xFAULTING ====================================================== */
void transition_faulting(struct CONTACTORFUNCTION* pcf, uint8_t fc)
{
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4604      	mov	r4, r0
 80099f0:	460d      	mov	r5, r1
		open_contactors(pcf);     // Be sure to open contactors, set timer2
 80099f2:	f7ff ff57 	bl	80098a4 <open_contactors>
		pcf->faultcode = fc;	     // Set fault code
 80099f6:	f884 50f8 	strb.w	r5, [r4, #248]	; 0xf8
		new_state(pcf,FAULTING);	
 80099fa:	2103      	movs	r1, #3
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7ff ff3f 	bl	8009880 <new_state>
 8009a02:	bd38      	pop	{r3, r4, r5, pc}

08009a04 <ContactorStates_otosettling_init>:
/* *************************************************************************
 * @brief	: 
 * *************************************************************************/

void ContactorStates_otosettling_init(struct CONTACTORFUNCTION* pcf)
{
 8009a04:	b508      	push	{r3, lr}
	/* Check if uart hv readings timer timed out. */
	if ((pcf->evstat & CNCTEVTIMER3) != 0)
 8009a06:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8009a0a:	f013 0f04 	tst.w	r3, #4
 8009a0e:	d003      	beq.n	8009a18 <ContactorStates_otosettling_init+0x14>
	{ // Here, keep-alive uart rx timer timed out
		transition_faulting(pcf, NO_UART3_HV_READINGS);
 8009a10:	210b      	movs	r1, #11
 8009a12:	f7ff ffeb 	bl	80099ec <transition_faulting>
		return;
 8009a16:	bd08      	pop	{r3, pc}
	}

	/* Delay using data for a few cycles of readings. */
	if (pcf->hvuartctr < 50) return;
 8009a18:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009a1c:	2b31      	cmp	r3, #49	; 0x31
 8009a1e:	d901      	bls.n	8009a24 <ContactorStates_otosettling_init+0x20>

	transition_disconnecting(pcf);
 8009a20:	f7ff ff86 	bl	8009930 <transition_disconnecting>
 8009a24:	bd08      	pop	{r3, pc}
 8009a26:	bf00      	nop

08009a28 <ContactorStates_disconnected>:
}


/* ==== DISCONNECTED ======================================== */
void ContactorStates_disconnected(struct CONTACTORFUNCTION* pcf)
{
 8009a28:	b510      	push	{r4, lr}
 8009a2a:	4604      	mov	r4, r0
	uint32_t tmp;
	int16_t ret;

	if ((pcf->evstat & CNCTEVTIMER1) != 0)
 8009a2c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8009a30:	f013 0f01 	tst.w	r3, #1
 8009a34:	d003      	beq.n	8009a3e <ContactorStates_disconnected+0x16>
	{ // Keep-alive timer timout
		transition_faulting(pcf,KEEP_ALIVE_TIMER_TIMEOUT);	
 8009a36:	210a      	movs	r1, #10
 8009a38:	f7ff ffd8 	bl	80099ec <transition_faulting>
		return;	
 8009a3c:	bd10      	pop	{r4, pc}
	}

	/* Get rid of prior fault codes, mostly for display purposes. */
	pcf->faultcode = NOFAULT; // Reset code
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f880 20f8 	strb.w	r2, [r0, #248]	; 0xf8

	/* Update zero offset for Hall-effect current sensor. */
	if ((pcf->evstat & CNCTEVADC) != 0)
 8009a44:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009a48:	d008      	beq.n	8009a5c <ContactorStates_disconnected+0x34>
	{ // Here, new set of ADC readings
		ret = ratiometric_cal_zero_CURRENTTOTAL(pcf->padc);
 8009a4a:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 8009a4e:	f7ff f9c7 	bl	8008de0 <ratiometric_cal_zero_CURRENTTOTAL>
		if (ret != 0)// morse_trap(55);
 8009a52:	b118      	cbz	r0, 8009a5c <ContactorStates_disconnected+0x34>
		{
			transition_faulting(pcf,HE_AUTO_ZERO_TOLERANCE_ERR);
 8009a54:	210c      	movs	r1, #12
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7ff ffc8 	bl	80099ec <transition_faulting>
		}
	}

	/* Install jumper to ignore HV readings. */
	// I/O pin shows '1' when jumper removed; '0' when present.
	if (HAL_GPIO_ReadPin(HVBYPASSPINPORT,  HVBYPASSPINPIN) != GPIO_PIN_SET)
 8009a5c:	2108      	movs	r1, #8
 8009a5e:	4834      	ldr	r0, [pc, #208]	; (8009b30 <ContactorStates_disconnected+0x108>)
 8009a60:	f7f9 fdf0 	bl	8003644 <HAL_GPIO_ReadPin>
 8009a64:	2801      	cmp	r0, #1
 8009a66:	d004      	beq.n	8009a72 <ContactorStates_disconnected+0x4a>
	{ // Set configuration bit to skip HV reading logic
		pcf->lc.hwconfig |= PWMNOHVSENSOR;
 8009a68:	69a3      	ldr	r3, [r4, #24]
 8009a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6e:	61a3      	str	r3, [r4, #24]
 8009a70:	e003      	b.n	8009a7a <ContactorStates_disconnected+0x52>
	}
	else
	{
		pcf->lc.hwconfig &= ~PWMNOHVSENSOR;
 8009a72:	69a3      	ldr	r3, [r4, #24]
 8009a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a78:	61a3      	str	r3, [r4, #24]
	}

	/* Skip HV readings and battery string voltage check if no sensor. */
	if ((pcf->lc.hwconfig & PWMNOHVSENSOR) == 0)
 8009a7a:	69a3      	ldr	r3, [r4, #24]
 8009a7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009a80:	d114      	bne.n	8009aac <ContactorStates_disconnected+0x84>
	{ // Here, configuration: HV sensor is present

		if ((pcf->evstat & CNCTEVTIMER3) != 0)
 8009a82:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 8009a86:	f012 0f04 	tst.w	r2, #4
 8009a8a:	d004      	beq.n	8009a96 <ContactorStates_disconnected+0x6e>
		{ // Here: Not receiving readings from uart3 sensor
			transition_faulting(pcf,NO_UART3_HV_READINGS);
 8009a8c:	210b      	movs	r1, #11
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7ff ffac 	bl	80099ec <transition_faulting>
			return;
 8009a94:	bd10      	pop	{r4, pc}
		}

		/* Check for battery string below threshold. */
		if (pcf->hv[IDXHV1].hv < pcf->ibattlow)
 8009a96:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
 8009a9a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8009a9e:	4291      	cmp	r1, r2
 8009aa0:	d204      	bcs.n	8009aac <ContactorStates_disconnected+0x84>
		{ // Here, battery voltage is too low (or readings missing!)
			transition_faulting(pcf,BATTERYLOW);
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f7ff ffa1 	bl	80099ec <transition_faulting>
			return;
 8009aaa:	bd10      	pop	{r4, pc}
		}
	}

	/* Check if aux contacts match, if aux contacts present. */
	if ((pcf->lc.hwconfig & AUX1PRESENT) != 0)
 8009aac:	f013 0f01 	tst.w	r3, #1
 8009ab0:	d011      	beq.n	8009ad6 <ContactorStates_disconnected+0xae>
	{ // Aux contacts are present
		tmp = HAL_GPIO_ReadPin(AUX1_GPIO_REG,AUX1_GPIO_IN);// read i/o pin
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	481e      	ldr	r0, [pc, #120]	; (8009b30 <ContactorStates_disconnected+0x108>)
 8009ab6:	f7f9 fdc5 	bl	8003644 <HAL_GPIO_ReadPin>
 8009aba:	4603      	mov	r3, r0
		if ((pcf->lc.hwconfig & AUX1SENSE) != 0)
 8009abc:	69a2      	ldr	r2, [r4, #24]
 8009abe:	f012 0f02 	tst.w	r2, #2
 8009ac2:	d002      	beq.n	8009aca <ContactorStates_disconnected+0xa2>
		{ // Reverse sense of bit
			tmp ^= 0x1;
 8009ac4:	f080 0001 	eor.w	r0, r0, #1
 8009ac8:	b2c3      	uxtb	r3, r0
		}
		if (tmp != GPIO_PIN_RESET)
 8009aca:	b123      	cbz	r3, 8009ad6 <ContactorStates_disconnected+0xae>
		{ // Transition to fault state; set fault code
			transition_faulting(pcf,CONTACTOR1_OFF_AUX1_ON);
 8009acc:	2102      	movs	r1, #2
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f7ff ff8c 	bl	80099ec <transition_faulting>
			return;			
 8009ad4:	bd10      	pop	{r4, pc}
		}
	}
	/* Check if aux contacts match, if aux contacts present. */
	if ((pcf->lc.hwconfig & AUX2PRESENT) != 0)
 8009ad6:	69a3      	ldr	r3, [r4, #24]
 8009ad8:	f013 0f04 	tst.w	r3, #4
 8009adc:	d011      	beq.n	8009b02 <ContactorStates_disconnected+0xda>
	{ // Aux contacts are present
		tmp = HAL_GPIO_ReadPin(AUX2_GPIO_REG,AUX2_GPIO_IN);// read i/o pin
 8009ade:	2120      	movs	r1, #32
 8009ae0:	4813      	ldr	r0, [pc, #76]	; (8009b30 <ContactorStates_disconnected+0x108>)
 8009ae2:	f7f9 fdaf 	bl	8003644 <HAL_GPIO_ReadPin>
 8009ae6:	4603      	mov	r3, r0
		if ((pcf->lc.hwconfig & AUX2SENSE) != 0)
 8009ae8:	69a2      	ldr	r2, [r4, #24]
 8009aea:	f012 0f08 	tst.w	r2, #8
 8009aee:	d002      	beq.n	8009af6 <ContactorStates_disconnected+0xce>
		{ // Reverse sense of bit
			tmp ^= 0x1;
 8009af0:	f080 0001 	eor.w	r0, r0, #1
 8009af4:	b2c3      	uxtb	r3, r0
		}
		if (tmp != GPIO_PIN_RESET)
 8009af6:	b123      	cbz	r3, 8009b02 <ContactorStates_disconnected+0xda>
		{ // Transition to fault state; set fault code
			transition_faulting(pcf,CONTACTOR2_OFF_AUX2_ON); 
 8009af8:	2103      	movs	r1, #3
 8009afa:	4620      	mov	r0, r4
 8009afc:	f7ff ff76 	bl	80099ec <transition_faulting>
			return;			
 8009b00:	bd10      	pop	{r4, pc}
		}
	}
	/* Keep-alive CAN msgs carry commands. */
	if ((pcf->evstat & CNCTEVCMDCN) != 0)
 8009b02:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009b06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b0a:	d003      	beq.n	8009b14 <ContactorStates_disconnected+0xec>
	{ // Here, ==> request to CONNECT <==
		transition_connecting(pcf);
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f7ff ff19 	bl	8009944 <transition_connecting>
		return;
 8009b12:	bd10      	pop	{r4, pc}
	}
	/* JIC.  Be sure Updates have both coils de-energized. DMOC hw disabled */
	pcf->outstat &= ~(CNCTOUT00K1 | CNCTOUT01K2 | CNCTOUT06KAw | CNCTOUT07KAw |
 8009b14:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009b18:	f023 03d3 	bic.w	r3, r3, #211	; 0xd3
 8009b1c:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
        CNCTOUT04EN);
	pcf->outstat_prev |= (CNCTOUT00K1 | CNCTOUT01K2); // jic
 8009b20:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8009b24:	f043 0303 	orr.w	r3, r3, #3
 8009b28:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8009b2c:	bd10      	pop	{r4, pc}
 8009b2e:	bf00      	nop
 8009b30:	40010800 	.word	0x40010800

08009b34 <ContactorStates_connecting>:
	new_state(pcf,CONNECTING);
	return;
}
/* ====== CONNECTING ==================================================== */
void ContactorStates_connecting(struct CONTACTORFUNCTION* pcf)
{
 8009b34:	b530      	push	{r4, r5, lr}
 8009b36:	b083      	sub	sp, #12
 8009b38:	4604      	mov	r4, r0
	uint32_t tmp;
	int32_t stmp;

	/* Terminate CONNECTED if commands are disconnect or reset. */
	if ( ((pcf->evstat & CNCTEVCMDCN) == 0) | ((pcf->evstat & CMDRESET) != 0) ) 
 8009b3a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8009b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b42:	2b80      	cmp	r3, #128	; 0x80
 8009b44:	d001      	beq.n	8009b4a <ContactorStates_connecting+0x16>
	{ // 
		transition_disconnecting(pcf);
 8009b46:	f7ff fef3 	bl	8009930 <transition_disconnecting>
	}

	switch(pcf->substateC)
 8009b4a:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 8009b4e:	2b07      	cmp	r3, #7
 8009b50:	f200 8235 	bhi.w	8009fbe <ContactorStates_connecting+0x48a>
 8009b54:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009b58:	00670008 	.word	0x00670008
 8009b5c:	01010096 	.word	0x01010096
 8009b60:	0165012c 	.word	0x0165012c
 8009b64:	01fe018d 	.word	0x01fe018d
	{
/* ============= TWO CONTACTOR MODE ===================================== */
	case CONNECT_C1:  // Contactor #1 closure delay
		if ((pcf->evstat & CNCTEVTIMER2) == 0) break;
 8009b68:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009b6c:	f013 0f02 	tst.w	r3, #2
 8009b70:	f000 8228 	beq.w	8009fc4 <ContactorStates_connecting+0x490>

		/* Here, timer timed out, so contactor #1 should be closed. */

		/* Check if aux contacts match, if aux contacts present. */
		if ((pcf->lc.hwconfig & AUX1PRESENT) != 0)
 8009b74:	69a3      	ldr	r3, [r4, #24]
 8009b76:	f013 0f01 	tst.w	r3, #1
 8009b7a:	d00a      	beq.n	8009b92 <ContactorStates_connecting+0x5e>
		{ // Aux contacts are present
			tmp = HAL_GPIO_ReadPin(AUX1_GPIO_REG,AUX1_GPIO_IN);// read i/o pin
 8009b7c:	2102      	movs	r1, #2
 8009b7e:	48cc      	ldr	r0, [pc, #816]	; (8009eb0 <ContactorStates_connecting+0x37c>)
 8009b80:	f7f9 fd60 	bl	8003644 <HAL_GPIO_ReadPin>
			if ((pcf->lc.hwconfig & AUX1SENSE) == 1)
			{ // Reverse sense of bit
				tmp ^= 0x1;
			}
			if (tmp != GPIO_PIN_SET)
 8009b84:	2801      	cmp	r0, #1
 8009b86:	d004      	beq.n	8009b92 <ContactorStates_connecting+0x5e>
			{ // Transition to fault state; set fault code
				/* Aux contact says it did not close. */
				transition_faulting(pcf,CONTACTOR1_ON_AUX1_OFF);
 8009b88:	2104      	movs	r1, #4
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f7ff ff2e 	bl	80099ec <transition_faulting>
//morse_trap(66);
				return;			
 8009b90:	e218      	b.n	8009fc4 <ContactorStates_connecting+0x490>
			}
		}

		/* For two contactor config, we can check if it looks closed. */
		if ((pcf->lc.hwconfig & PWMNOHVSENSOR) == 0)
 8009b92:	69a3      	ldr	r3, [r4, #24]
 8009b94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b98:	d122      	bne.n	8009be0 <ContactorStates_connecting+0xac>
		{ // Here, configuration: HV sensor is present

			if ((pcf->lc.hwconfig & ONECONTACTOR) == 0)
 8009b9a:	f013 0f10 	tst.w	r3, #16
 8009b9e:	d10f      	bne.n	8009bc0 <ContactorStates_connecting+0x8c>
			{ // Here, two contactor config, so voltage should jump up
//				if ((pcf->hv[IDXHV1].hvc - pcf->hv[IDXHV2].hvc) < pcf->ihv1mhv2max) // 
				stmp = (pcf->hv[IDXHV1].hvc - pcf->hv[IDXHV2].hvc);
 8009ba0:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
 8009ba4:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
				if (stmp < 0) stmp = -stmp;
 8009ba8:	1a52      	subs	r2, r2, r1
 8009baa:	d500      	bpl.n	8009bae <ContactorStates_connecting+0x7a>
 8009bac:	4252      	negs	r2, r2
				if ( stmp > pcf->idiffafter ) 
 8009bae:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
 8009bb2:	4291      	cmp	r1, r2
 8009bb4:	d214      	bcs.n	8009be0 <ContactorStates_connecting+0xac>
				{
					transition_faulting(pcf,CONTACTOR1_DOES_NOT_APPEAR_CLOSED); 
 8009bb6:	2106      	movs	r1, #6
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7ff ff17 	bl	80099ec <transition_faulting>
//morse_trap(67);
					return;
 8009bbe:	e201      	b.n	8009fc4 <ContactorStates_connecting+0x490>
			}
			else
			{ // One contactor configuration
				// Voltage across contacts should be very small unless it didn't close
				// In case calibration makes diff negative, use absolute diff
				stmp = (pcf->hv[IDXHV1].hvc - pcf->hv[IDXHV2].hvc);
 8009bc0:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
 8009bc4:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
				if (stmp < 0) stmp = -stmp;
 8009bc8:	1a52      	subs	r2, r2, r1
 8009bca:	d500      	bpl.n	8009bce <ContactorStates_connecting+0x9a>
 8009bcc:	4252      	negs	r2, r2
				if ( stmp > pcf->idiffafter ) 
 8009bce:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
 8009bd2:	4291      	cmp	r1, r2
 8009bd4:	d204      	bcs.n	8009be0 <ContactorStates_connecting+0xac>
				{ // Here, something not right with contactor closing
					transition_faulting(pcf,CONTACTOR1_CLOSED_VOLTSTOOBIG);
 8009bd6:	2108      	movs	r1, #8
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7ff ff07 	bl	80099ec <transition_faulting>
					break;
 8009bde:	e1f1      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}

		/* Here, looks good, so start a minimum pre-charge delay. */

		/* If this contactor is to be PWM'ed drop down from 100%. */
		if ((pcf->lc.hwconfig & PWMCONTACTOR1) != 0)
 8009be0:	f013 0f20 	tst.w	r3, #32
 8009be4:	d005      	beq.n	8009bf2 <ContactorStates_connecting+0xbe>
		{ // TIM4 CH3 Lower PWM from 100%
			pcf->outstat |= CNCTOUT06KAw; // Switch pwm during update section
 8009be6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bee:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		}

		/* Set one-shot timer for a minimum pre-charge duration. */
if (pcf->prechgmin_k == 0) morse_trap(82); // Oops! Bad initialization
 8009bf2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009bf6:	b913      	cbnz	r3, 8009bfe <ContactorStates_connecting+0xca>
 8009bf8:	2052      	movs	r0, #82	; 0x52
 8009bfa:	f7fe fa13 	bl	8008024 <morse_trap>
		xTimerChangePeriod(pcf->swtimer2, pcf->prechgmin_k, 2); 
 8009bfe:	2302      	movs	r3, #2
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	2300      	movs	r3, #0
 8009c04:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8009c08:	2104      	movs	r1, #4
 8009c0a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8009c0e:	f7fc fedf 	bl	80069d0 <xTimerGenericCommand>
		pcf->evstat &= ~CNCTEVTIMER2;	// Clear timedout status bit 
 8009c12:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009c16:	f023 0302 	bic.w	r3, r3, #2
 8009c1a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

		pcf->substateC = CONNECT_C2;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
		break;
 8009c24:	e1ce      	b.n	8009fc4 <ContactorStates_connecting+0x490>
/* ...................................................................... */
	case CONNECT_C2:  // Minimum pre-charge duration delay
		if ((pcf->evstat & CNCTEVTIMER2) != 0)
 8009c26:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009c2a:	f013 0f02 	tst.w	r3, #2
 8009c2e:	d018      	beq.n	8009c62 <ContactorStates_connecting+0x12e>
		{ // Minimum pre-charge time has expired.
			if (pcf->prechgmax_k == 0) morse_trap(83); // Oops! Bad initialization
 8009c30:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009c34:	b913      	cbnz	r3, 8009c3c <ContactorStates_connecting+0x108>
 8009c36:	2053      	movs	r0, #83	; 0x53
 8009c38:	f7fe f9f4 	bl	8008024 <morse_trap>
			xTimerChangePeriod(pcf->swtimer2, pcf->prechgmax_k, 2); 
 8009c3c:	2502      	movs	r5, #2
 8009c3e:	9500      	str	r5, [sp, #0]
 8009c40:	2300      	movs	r3, #0
 8009c42:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009c46:	2104      	movs	r1, #4
 8009c48:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8009c4c:	f7fc fec0 	bl	80069d0 <xTimerGenericCommand>
			pcf->evstat &= ~CNCTEVTIMER2;	// Clear timedout status bit 
 8009c50:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009c54:	f023 0302 	bic.w	r3, r3, #2
 8009c58:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			pcf->substateC = CONNECT_C3;
 8009c5c:	f884 5245 	strb.w	r5, [r4, #581]	; 0x245
			break;
 8009c60:	e1b0      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}
		/* Check that we are getting new hv readings. */
		if ((pcf->evstat & CNCTEVTIMER3) != 0)
 8009c62:	f013 0f04 	tst.w	r3, #4
 8009c66:	d004      	beq.n	8009c72 <ContactorStates_connecting+0x13e>
		{ // Here, not receiving readings from uart3 sensor
			transition_faulting(pcf,NO_UART3_HV_READINGS);
 8009c68:	210b      	movs	r1, #11
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f7ff febe 	bl	80099ec <transition_faulting>
			return;
 8009c70:	e1a8      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}

		/* Check that we are still getting keep-alive msgs. */
		if ((pcf->evstat & CNCTEVTIMER1) != 0)
 8009c72:	f013 0f01 	tst.w	r3, #1
 8009c76:	f000 81a5 	beq.w	8009fc4 <ContactorStates_connecting+0x490>
		{ // Keep-alive timer timout
			transition_faulting(pcf,KEEP_ALIVE_TIMER_TIMEOUT);	
 8009c7a:	210a      	movs	r1, #10
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f7ff feb5 	bl	80099ec <transition_faulting>
			return;	
 8009c82:	e19f      	b.n	8009fc4 <ContactorStates_connecting+0x490>

/* ...................................................................... */
	case CONNECT_C3: /* Check if voltage has reached cutoff. */

		/* Check that we are still getting keep-alive msgs. */
		if ((pcf->evstat & CNCTEVTIMER1) != 0)
 8009c84:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009c88:	f013 0f01 	tst.w	r3, #1
 8009c8c:	d004      	beq.n	8009c98 <ContactorStates_connecting+0x164>
		{ // Keep-alive timer timout
			transition_faulting(pcf,KEEP_ALIVE_TIMER_TIMEOUT);	
 8009c8e:	210a      	movs	r1, #10
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7ff feab 	bl	80099ec <transition_faulting>
			return;	
 8009c96:	e195      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}

// This may not be useful.
		if ((pcf->evstat & CNCTEVHV) != 0)
 8009c98:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009c9c:	d003      	beq.n	8009ca6 <ContactorStates_connecting+0x172>
		{ // Here, new readings available
			pcf->evstat &= ~CNCTEVHV; // Clear new reading bit
 8009c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ca2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		}

		/* Check timeout waiting for voltage to reach threshold */
		if ((pcf->evstat & CNCTEVTIMER2) != 0)
 8009ca6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009caa:	f013 0f02 	tst.w	r3, #2
 8009cae:	d028      	beq.n	8009d02 <ContactorStates_connecting+0x1ce>
		{ // Maximum pre-charge time has expired.
			if ((pcf->lc.hwconfig & PWMNOHVSENSOR) == 0)
 8009cb0:	69a3      	ldr	r3, [r4, #24]
 8009cb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009cb6:	d104      	bne.n	8009cc2 <ContactorStates_connecting+0x18e>
			{ // Here, configuration: HV sensor is present
				transition_faulting(pcf,PRECHGVOLT_NOTREACHED);
 8009cb8:	2107      	movs	r1, #7
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff fe96 	bl	80099ec <transition_faulting>
				return;
 8009cc0:	e180      	b.n	8009fc4 <ContactorStates_connecting+0x490>
			}
			else
			{ // Here, no HV sensor and timer timere out. Continue
if (pcf->close2_k == 0) morse_trap(88); // Initialization mistake
 8009cc2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009cc6:	b913      	cbnz	r3, 8009cce <ContactorStates_connecting+0x19a>
 8009cc8:	2058      	movs	r0, #88	; 0x58
 8009cca:	f7fe f9ab 	bl	8008024 <morse_trap>
				xTimerChangePeriod(pcf->swtimer2,pcf->close2_k, 2); 
 8009cce:	2302      	movs	r3, #2
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8009cd8:	2104      	movs	r1, #4
 8009cda:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8009cde:	f7fc fe77 	bl	80069d0 <xTimerGenericCommand>
				pcf->evstat &= ~CNCTEVTIMER2;	// Clear timedout status bit 
 8009ce2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009ce6:	f023 0302 	bic.w	r3, r3, #2
 8009cea:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				pcf->outstat |= CNCTOUT01K2;  // Energize #2 during update section
 8009cee:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009cf2:	f043 0302 	orr.w	r3, r3, #2
 8009cf6:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
				pcf->substateC = CONNECT_C4;  // Next substate
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
				return;
 8009d00:	e160      	b.n	8009fc4 <ContactorStates_connecting+0x490>
			}
		}

		/* Here, timer is still timing. Check if cutoff voltage reached */
		if ((pcf->lc.hwconfig & PWMNOHVSENSOR) != 0)
 8009d02:	69a3      	ldr	r3, [r4, #24]
 8009d04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d08:	f040 815c 	bne.w	8009fc4 <ContactorStates_connecting+0x490>
		{ // Here, configuration: HV sensor is NOT present
			return; // Run until timer times out
		}

		if (pcf->hv[IDXHV3].hv < pcf->iprechgendv)
 8009d0c:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
 8009d10:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8009d14:	429a      	cmp	r2, r3
 8009d16:	f080 8155 	bcs.w	8009fc4 <ContactorStates_connecting+0x490>
		{ // Here, end of pre-charge. Energize contactor 2
			pcf->outstat |= CNCTOUT01K2; // Energize #2 during update section
 8009d1a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009d1e:	f043 0302 	orr.w	r3, r3, #2
 8009d22:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

			/* Set one-shot timer for contactor 2 closure duration. */
if (pcf->close2_k == 0) morse_trap(88); // Initialization mistake
 8009d26:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009d2a:	b913      	cbnz	r3, 8009d32 <ContactorStates_connecting+0x1fe>
 8009d2c:	2058      	movs	r0, #88	; 0x58
 8009d2e:	f7fe f979 	bl	8008024 <morse_trap>
			xTimerChangePeriod(pcf->swtimer2,pcf->close2_k, 2); 
 8009d32:	2302      	movs	r3, #2
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	2300      	movs	r3, #0
 8009d38:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8009d3c:	2104      	movs	r1, #4
 8009d3e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8009d42:	f7fc fe45 	bl	80069d0 <xTimerGenericCommand>
			pcf->evstat &= ~CNCTEVTIMER2;	 // Clear timedout status bit 
 8009d46:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009d4a:	f023 0302 	bic.w	r3, r3, #2
 8009d4e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			pcf->substateC = CONNECT_C4;   // Next substate
 8009d52:	2303      	movs	r3, #3
 8009d54:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
			return;
 8009d58:	e134      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		break;
/* ...................................................................... */
	case CONNECT_C4:  // Contactor #2 close

		/* Check that we are still getting keep-alive msgs. */
		if ((pcf->evstat & CNCTEVTIMER1) != 0)
 8009d5a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009d5e:	f013 0f01 	tst.w	r3, #1
 8009d62:	d004      	beq.n	8009d6e <ContactorStates_connecting+0x23a>
		{ // Keep-alive timer timout
			transition_faulting(pcf,KEEP_ALIVE_TIMER_TIMEOUT);	
 8009d64:	210a      	movs	r1, #10
 8009d66:	4620      	mov	r0, r4
 8009d68:	f7ff fe40 	bl	80099ec <transition_faulting>
			return;	
 8009d6c:	e12a      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}

		if ((pcf->evstat & CNCTEVTIMER2) != 0)
 8009d6e:	f013 0f02 	tst.w	r3, #2
 8009d72:	f000 8127 	beq.w	8009fc4 <ContactorStates_connecting+0x490>
		{ // Timer2 timed out: Contactor #2 should be closed

			if ((pcf->lc.hwconfig & PWMNOHVSENSOR) == 0)
 8009d76:	69a3      	ldr	r3, [r4, #24]
 8009d78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d7c:	d10a      	bne.n	8009d94 <ContactorStates_connecting+0x260>
			{ // Here, configuration: HV sensor is present

				// Voltage across contacts should be very small unless it didn't close
				if ( pcf->hv[IDXHV3].hvc > pcf->idiffafter ) 
 8009d7e:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 8009d82:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8009d86:	4291      	cmp	r1, r2
 8009d88:	d904      	bls.n	8009d94 <ContactorStates_connecting+0x260>
				{ // Here, something not right with contactor closing
					transition_faulting(pcf,CONTACTOR2_CLOSED_VOLTSTOOBIG);
 8009d8a:	2109      	movs	r1, #9
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f7ff fe2d 	bl	80099ec <transition_faulting>
					break;
 8009d92:	e117      	b.n	8009fc4 <ContactorStates_connecting+0x490>
				}
			}
					
			/* If this contactor is to be PWM'ed drop down from 100%. */
			if ((pcf->lc.hwconfig & PWMCONTACTOR1) != 0)
 8009d94:	f013 0f20 	tst.w	r3, #32
 8009d98:	d005      	beq.n	8009da6 <ContactorStates_connecting+0x272>
			{ // TIM4 CH3 Lower PWM from 100%
				pcf->outstat |= CNCTOUT07KAw; // Switch to lower pwm in update section
 8009d9a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da2:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
			}

			new_state(pcf,CONNECTED);
 8009da6:	2102      	movs	r1, #2
 8009da8:	4620      	mov	r0, r4
 8009daa:	f7ff fd69 	bl	8009880 <new_state>
 8009dae:	e109      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}
		/* event not relevant. Continue waiting for timer2 */
		break;
/* ============= ONE CONTACTOR MODE ===================================== */
	case CONNECT_C1B:  // Pre-charge relay (#2) closure delay
		if ((pcf->evstat & CNCTEVTIMER2) == 0) break;
 8009db0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009db4:	f013 0f02 	tst.w	r3, #2
 8009db8:	f000 8104 	beq.w	8009fc4 <ContactorStates_connecting+0x490>

		/* Here, timer timed out, so pre-chg relay #2 is assumed closed. */

		/* Check if aux contacts match, if aux contacts present. */
		if ((pcf->lc.hwconfig & AUX2PRESENT) != 0)
 8009dbc:	69a3      	ldr	r3, [r4, #24]
 8009dbe:	f013 0f04 	tst.w	r3, #4
 8009dc2:	d00a      	beq.n	8009dda <ContactorStates_connecting+0x2a6>
		{ // Aux contacts are present
			tmp = HAL_GPIO_ReadPin(AUX2_GPIO_REG,AUX2_GPIO_IN);// read i/o pin
 8009dc4:	2120      	movs	r1, #32
 8009dc6:	483a      	ldr	r0, [pc, #232]	; (8009eb0 <ContactorStates_connecting+0x37c>)
 8009dc8:	f7f9 fc3c 	bl	8003644 <HAL_GPIO_ReadPin>
			if ((pcf->lc.hwconfig & AUX2SENSE) == 1)
			{ // Reverse sense of bit
				tmp ^= 0x1;
			}
			if (tmp != GPIO_PIN_SET)
 8009dcc:	2801      	cmp	r0, #1
 8009dce:	d004      	beq.n	8009dda <ContactorStates_connecting+0x2a6>
			{ // Transition to fault state; set fault code
				/* Aux contact says it did not close. */
				transition_faulting(pcf,CONTACTOR2_ON_AUX2_OFF);
 8009dd0:	2105      	movs	r1, #5
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f7ff fe0a 	bl	80099ec <transition_faulting>
//morse_trap(66);
				return;			
 8009dd8:	e0f4      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}

		/* Start a minimum pre-charge delay. */

		/* If this relay is to be PWM'ed, drop down from 100%. */
		if ((pcf->lc.hwconfig & PWMCONTACTOR2) != 0)
 8009dda:	69a3      	ldr	r3, [r4, #24]
 8009ddc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009de0:	d005      	beq.n	8009dee <ContactorStates_connecting+0x2ba>
		{ // TIM4 CH2 Lower PWM from 100%
			pcf->outstat |= CNCTOUT07KAw; // Switch pwm during update section
 8009de2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dea:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		}

		/* Set one-shot timer for a minimum pre-charge duration. */
if (pcf->prechgmin_k == 0) morse_trap(82); // Oops! Bad initialization
 8009dee:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009df2:	b913      	cbnz	r3, 8009dfa <ContactorStates_connecting+0x2c6>
 8009df4:	2052      	movs	r0, #82	; 0x52
 8009df6:	f7fe f915 	bl	8008024 <morse_trap>
		xTimerChangePeriod(pcf->swtimer2, pcf->prechgmin_k, 2); 
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8009e04:	2104      	movs	r1, #4
 8009e06:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8009e0a:	f7fc fde1 	bl	80069d0 <xTimerGenericCommand>
		pcf->evstat &= ~CNCTEVTIMER2;	// Clear timedout status bit 
 8009e0e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009e12:	f023 0302 	bic.w	r3, r3, #2
 8009e16:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

		pcf->substateC = CONNECT_C2B;
 8009e1a:	2305      	movs	r3, #5
 8009e1c:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
		break;
 8009e20:	e0d0      	b.n	8009fc4 <ContactorStates_connecting+0x490>
/* ...................................................................... */
	case CONNECT_C2B:  // Minimum pre-charge duration delay
		if ((pcf->evstat & CNCTEVTIMER2) != 0)
 8009e22:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009e26:	f013 0f02 	tst.w	r3, #2
 8009e2a:	d019      	beq.n	8009e60 <ContactorStates_connecting+0x32c>
		{ // Minimum pre-charge time has expired.
if (pcf->prechgmax_k == 0) morse_trap(83); // Oops! Bad initialization
 8009e2c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009e30:	b913      	cbnz	r3, 8009e38 <ContactorStates_connecting+0x304>
 8009e32:	2053      	movs	r0, #83	; 0x53
 8009e34:	f7fe f8f6 	bl	8008024 <morse_trap>
			xTimerChangePeriod(pcf->swtimer2, pcf->prechgmax_k, 2); 
 8009e38:	2302      	movs	r3, #2
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009e42:	2104      	movs	r1, #4
 8009e44:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8009e48:	f7fc fdc2 	bl	80069d0 <xTimerGenericCommand>
			pcf->evstat &= ~CNCTEVTIMER2;	// Clear timedout status bit 
 8009e4c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009e50:	f023 0302 	bic.w	r3, r3, #2
 8009e54:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			pcf->substateC = CONNECT_C3B;
 8009e58:	2306      	movs	r3, #6
 8009e5a:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
			break;
 8009e5e:	e0b1      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}
		/* Check that we are getting new hv readings. */
		if ((pcf->evstat & CNCTEVTIMER3) != 0)
 8009e60:	f013 0f04 	tst.w	r3, #4
 8009e64:	f000 80ae 	beq.w	8009fc4 <ContactorStates_connecting+0x490>
		{ // Here, not receiving readings from uart3 sensor
			transition_faulting(pcf,NO_UART3_HV_READINGS);
 8009e68:	210b      	movs	r1, #11
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f7ff fdbe 	bl	80099ec <transition_faulting>
			return;
 8009e70:	e0a8      	b.n	8009fc4 <ContactorStates_connecting+0x490>

/* ...................................................................... */
	case CONNECT_C3B: /* Check if voltage has reached cutoff. */

		/* Check that we are still getting keep-alive msgs. */
		if ((pcf->evstat & CNCTEVTIMER1) != 0)
 8009e72:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009e76:	f013 0f01 	tst.w	r3, #1
 8009e7a:	d004      	beq.n	8009e86 <ContactorStates_connecting+0x352>
		{ // Keep-alive timer timout
			transition_faulting(pcf,KEEP_ALIVE_TIMER_TIMEOUT);	
 8009e7c:	210a      	movs	r1, #10
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff fdb4 	bl	80099ec <transition_faulting>
			return;	
 8009e84:	e09e      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}

// This may not be useful.
		if ((pcf->evstat & CNCTEVHV) != 0)
 8009e86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009e8a:	d003      	beq.n	8009e94 <ContactorStates_connecting+0x360>
		{ // Here, new readings available
			pcf->evstat &= ~CNCTEVHV; // Clear new reading bit
 8009e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e90:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		}

		/* Check timeout waiting for voltage to reach threshold */
		if ((pcf->evstat & CNCTEVTIMER2) != 0)
 8009e94:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009e98:	f013 0f02 	tst.w	r3, #2
 8009e9c:	d029      	beq.n	8009ef2 <ContactorStates_connecting+0x3be>
		{ // Maximum pre-charge time has expired.
			if ((pcf->lc.hwconfig & PWMNOHVSENSOR) == 0)
 8009e9e:	69a3      	ldr	r3, [r4, #24]
 8009ea0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ea4:	d106      	bne.n	8009eb4 <ContactorStates_connecting+0x380>
			{ // Here, configuration: HV sensor is present
				transition_faulting(pcf,PRECHGVOLT_NOTREACHED);
 8009ea6:	2107      	movs	r1, #7
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f7ff fd9f 	bl	80099ec <transition_faulting>
				return;
 8009eae:	e089      	b.n	8009fc4 <ContactorStates_connecting+0x490>
 8009eb0:	40010800 	.word	0x40010800
			}
			else
			{
if (pcf->close1_k == 0) morse_trap(85); // Initialization mistake
 8009eb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8009eb8:	b913      	cbnz	r3, 8009ec0 <ContactorStates_connecting+0x38c>
 8009eba:	2055      	movs	r0, #85	; 0x55
 8009ebc:	f7fe f8b2 	bl	8008024 <morse_trap>
				xTimerChangePeriod(pcf->swtimer2,pcf->close1_k, 2); 
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8009eca:	2104      	movs	r1, #4
 8009ecc:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8009ed0:	f7fc fd7e 	bl	80069d0 <xTimerGenericCommand>
				pcf->evstat &= ~CNCTEVTIMER2;	// Clear timedout status bit 
 8009ed4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009ed8:	f023 0302 	bic.w	r3, r3, #2
 8009edc:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				pcf->outstat |= CNCTOUT00K1; // Energize #1 during update section
 8009ee0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009ee4:	f043 0301 	orr.w	r3, r3, #1
 8009ee8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
				pcf->substateC = CONNECT_C4B; // Next substate
 8009eec:	2307      	movs	r3, #7
 8009eee:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
			}
		}

		/* Here, timer is still timing. Check if cutoff voltage reached */
		if ((pcf->lc.hwconfig & PWMNOHVSENSOR) != 0)
 8009ef2:	69a3      	ldr	r3, [r4, #24]
 8009ef4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ef8:	d164      	bne.n	8009fc4 <ContactorStates_connecting+0x490>
		{ // Here, configuration: HV sensor is NOT present
			return; // Run until timer times out
		}

		stmp = (pcf->hv[IDXHV1].hvc - pcf->hv[IDXHV2].hvc);
 8009efa:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8009efe:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
		if (stmp < 0) stmp = -stmp; // JIC HV2 calibration makes difference negative
 8009f02:	1a9b      	subs	r3, r3, r2
 8009f04:	d500      	bpl.n	8009f08 <ContactorStates_connecting+0x3d4>
 8009f06:	425b      	negs	r3, r3
dbgstmp = stmp;
 8009f08:	4a2f      	ldr	r2, [pc, #188]	; (8009fc8 <ContactorStates_connecting+0x494>)
 8009f0a:	6013      	str	r3, [r2, #0]
		if (stmp < pcf->iprechgendvb)
 8009f0c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d957      	bls.n	8009fc4 <ContactorStates_connecting+0x490>
		{ // Here, end of pre-charge.  Energize contactor 1
			pcf->outstat |= CNCTOUT00K1; // Energize #1 during update section
 8009f14:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009f18:	f043 0301 	orr.w	r3, r3, #1
 8009f1c:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

			/* Set one-shot timer for contactor #1 closure duration. */
if (pcf->close1_k == 0) morse_trap(85); // Initialization mistake
 8009f20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8009f24:	b913      	cbnz	r3, 8009f2c <ContactorStates_connecting+0x3f8>
 8009f26:	2055      	movs	r0, #85	; 0x55
 8009f28:	f7fe f87c 	bl	8008024 <morse_trap>
			xTimerChangePeriod(pcf->swtimer2,pcf->close1_k, 2); 
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	2300      	movs	r3, #0
 8009f32:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8009f36:	2104      	movs	r1, #4
 8009f38:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8009f3c:	f7fc fd48 	bl	80069d0 <xTimerGenericCommand>
			pcf->evstat &= ~CNCTEVTIMER2;	// Clear timedout status bit 
 8009f40:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009f44:	f023 0302 	bic.w	r3, r3, #2
 8009f48:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

			pcf->substateC = CONNECT_C4B; // Next substate
 8009f4c:	2307      	movs	r3, #7
 8009f4e:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
			return;			
 8009f52:	e037      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		break;
/* ...................................................................... */
	case CONNECT_C4B:  // Contactor #1 close

		/* Check that we are still getting keep-alive msgs. */
		if ((pcf->evstat & CNCTEVTIMER1) != 0)
 8009f54:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8009f58:	f013 0f01 	tst.w	r3, #1
 8009f5c:	d004      	beq.n	8009f68 <ContactorStates_connecting+0x434>
		{ // Keep-alive timer timout
			transition_faulting(pcf,KEEP_ALIVE_TIMER_TIMEOUT);	
 8009f5e:	210a      	movs	r1, #10
 8009f60:	4620      	mov	r0, r4
 8009f62:	f7ff fd43 	bl	80099ec <transition_faulting>
			return;	
 8009f66:	e02d      	b.n	8009fc4 <ContactorStates_connecting+0x490>
		}

		if ((pcf->evstat & CNCTEVTIMER2) == 0) break;
 8009f68:	f013 0f02 	tst.w	r3, #2
 8009f6c:	d02a      	beq.n	8009fc4 <ContactorStates_connecting+0x490>

		// Timer2 timed out: Contactor #1 assumed to be closed

		if ((pcf->lc.hwconfig & PWMNOHVSENSOR) == 0)
 8009f6e:	69a3      	ldr	r3, [r4, #24]
 8009f70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f74:	d10e      	bne.n	8009f94 <ContactorStates_connecting+0x460>
		{ // Here, configuration: HV sensor is present

			// Voltage across contacts should be very small unless it didn't close
			// In case calibration makes diff negative, use absolute diff
			stmp = (pcf->hv[IDXHV1].hvc - pcf->hv[IDXHV2].hvc);
 8009f76:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8009f7a:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
			if (stmp < 0) stmp = -stmp; // jic HV2 slightly larger than HV1
 8009f7e:	1a9b      	subs	r3, r3, r2
 8009f80:	d500      	bpl.n	8009f84 <ContactorStates_connecting+0x450>
 8009f82:	425b      	negs	r3, r3
			if ( stmp > pcf->idiffafter ) 
 8009f84:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d203      	bcs.n	8009f94 <ContactorStates_connecting+0x460>
			{ // Here, something not right with contactor closing
				transition_faulting(pcf,CONTACTOR1_CLOSED_VOLTSTOOBIG);
 8009f8c:	2108      	movs	r1, #8
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7ff fd2c 	bl	80099ec <transition_faulting>
			}
		}
					
		/* If this contactor is to be PWM'ed drop down from 100%. */
		if ((pcf->lc.hwconfig & PWMCONTACTOR1) != 0)
 8009f94:	69a3      	ldr	r3, [r4, #24]
 8009f96:	f013 0f20 	tst.w	r3, #32
 8009f9a:	d005      	beq.n	8009fa8 <ContactorStates_connecting+0x474>
		{ // TIM4 CH3 Lower PWM from 100%
			pcf->outstat |= CNCTOUT06KAw; // Switch to lower pwm in update section
 8009f9c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa4:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		}

		/* Open pre-chg relay, to prevent failure from toasting pre-chg resistor. */
		pcf->outstat &= ~CNCTOUT01K2;  // De-energize coil during update section
 8009fa8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		pcf->outstat &= ~CNCTOUT07KAw; // No pwm, JIC			
 8009fac:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8009fb0:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

		new_state(pcf,CONNECTED);
 8009fb4:	2102      	movs	r1, #2
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f7ff fc62 	bl	8009880 <new_state>
		break;
 8009fbc:	e002      	b.n	8009fc4 <ContactorStates_connecting+0x490>

/* LAST OF SWITCH STATEMENT */
default: morse_trap(69);break; // JIC bug trap
 8009fbe:	2045      	movs	r0, #69	; 0x45
 8009fc0:	f7fe f830 	bl	8008024 <morse_trap>
	}
}
 8009fc4:	b003      	add	sp, #12
 8009fc6:	bd30      	pop	{r4, r5, pc}
 8009fc8:	2000379c 	.word	0x2000379c

08009fcc <ContactorStates_connected>:
		
/* ======= CONNECTED ==================================================== */
void ContactorStates_connected(struct CONTACTORFUNCTION* pcf)
{
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	4604      	mov	r4, r0
	/* Check that we are still getting keep-alive msgs. */
	if ((pcf->evstat & CNCTEVTIMER1) != 0)
 8009fd0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8009fd4:	f013 0f01 	tst.w	r3, #1
 8009fd8:	d003      	beq.n	8009fe2 <ContactorStates_connected+0x16>
	{ // Keep-alive timer timout
		transition_faulting(pcf,KEEP_ALIVE_TIMER_TIMEOUT);	
 8009fda:	210a      	movs	r1, #10
 8009fdc:	f7ff fd06 	bl	80099ec <transition_faulting>
		return;	
 8009fe0:	bd10      	pop	{r4, pc}
	}

	/* Terminate CONNECTED if commands are disconnect or reset. */
	if ( ((pcf->evstat & CNCTEVCMDCN) == 0) | ((pcf->evstat & CMDRESET) != 0) ) 
 8009fe2:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8009fe6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fea:	2b80      	cmp	r3, #128	; 0x80
 8009fec:	d001      	beq.n	8009ff2 <ContactorStates_connected+0x26>
	{ // 
		transition_disconnecting(pcf);
 8009fee:	f7ff fc9f 	bl	8009930 <transition_disconnecting>
	}
	/* Continue connection. */
	pcf->outstat |= CNCTOUT04EN; // DMOC enabled
 8009ff2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8009ff6:	f043 0310 	orr.w	r3, r3, #16
 8009ffa:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8009ffe:	bd10      	pop	{r4, pc}

0800a000 <ContactorStates_faulting>:
		new_state(pcf,FAULTING);	
		return;	
}
/* ===== FAULTING ======================================================= */
void ContactorStates_faulting(struct CONTACTORFUNCTION* pcf)
{
 800a000:	b508      	push	{r3, lr}
	if ((pcf->evstat & CNCTEVTIMER2) != 0)
 800a002:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800a006:	f013 0f02 	tst.w	r3, #2
 800a00a:	d002      	beq.n	800a012 <ContactorStates_faulting+0x12>
	{ // Timer 2 timed out, and contactors should be open
			new_state(pcf,FAULTED);
 800a00c:	2104      	movs	r1, #4
 800a00e:	f7ff fc37 	bl	8009880 <new_state>
 800a012:	bd08      	pop	{r3, pc}

0800a014 <ContactorStates_faulted>:
	/* Here, still waiting for TIMER2 to time out. */
	return;
}
/* ===== FAULTED ======================================================= */
void ContactorStates_faulted(struct CONTACTORFUNCTION* pcf)
{
 800a014:	b508      	push	{r3, lr}
	if ((pcf->evstat & CNCTEVCMDRS) != 0)
 800a016:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800a01a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a01e:	d001      	beq.n	800a024 <ContactorStates_faulted+0x10>
	{ // Command to RESET
		transition_disconnecting(pcf);
 800a020:	f7ff fc86 	bl	8009930 <transition_disconnecting>
 800a024:	bd08      	pop	{r3, pc}
 800a026:	bf00      	nop

0800a028 <ContactorStates_reset>:
	/* Stuck in this state until Command to Reset */
	return;
}
/* ===== RESET ========================================================= */
void ContactorStates_reset(struct CONTACTORFUNCTION* pcf)
{
 800a028:	b508      	push	{r3, lr}
	if ((pcf->evstat & CNCTEVCMDRS) != 0)
 800a02a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800a02e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a032:	d004      	beq.n	800a03e <ContactorStates_reset+0x16>
	{ // Command to RESET
		pcf->faultcode = NOFAULT; // Clear fault code.
 800a034:	2300      	movs	r3, #0
 800a036:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
		transition_disconnecting(pcf);
 800a03a:	f7ff fc79 	bl	8009930 <transition_disconnecting>
 800a03e:	bd08      	pop	{r3, pc}

0800a040 <StartContactorTask>:
/* *************************************************************************
 * void StartContactorTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartContactorTask(void const * argument)
{
 800a040:	b510      	push	{r4, lr}
 800a042:	b086      	sub	sp, #24
	/* Convenience pointer. */
	struct CONTACTORFUNCTION* pcf = &contactorfunction;

	/* A notification copies the internal notification word to this. */
	uint32_t noteval = 0;    // Receives notification word upon an API notify
 800a044:	2100      	movs	r1, #0
 800a046:	ab06      	add	r3, sp, #24
 800a048:	f843 1d04 	str.w	r1, [r3, #-4]!
	uint32_t noteuse = 0xffffffff;

	/* Setup serial receive for uart (HV sensing) */
	/* Get buffer control block for incoming uart lines. */
	// 8 line buffers of 16 chars, no dma buff, char-by-char line mode
	pcf->prbcb3  = xSerialTaskRxAdduart(&huart3,0,CNCTBIT01,&noteval,8,16,0,0);
 800a04c:	9103      	str	r1, [sp, #12]
 800a04e:	9102      	str	r1, [sp, #8]
 800a050:	2210      	movs	r2, #16
 800a052:	9201      	str	r2, [sp, #4]
 800a054:	2208      	movs	r2, #8
 800a056:	9200      	str	r2, [sp, #0]
 800a058:	2202      	movs	r2, #2
 800a05a:	4865      	ldr	r0, [pc, #404]	; (800a1f0 <StartContactorTask+0x1b0>)
 800a05c:	f7fd fe6e 	bl	8007d3c <xSerialTaskRxAdduart>
 800a060:	4b64      	ldr	r3, [pc, #400]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a062:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (pcf->prbcb3 == NULL) morse_trap(47);
 800a066:	b910      	cbnz	r0, 800a06e <StartContactorTask+0x2e>
 800a068:	202f      	movs	r0, #47	; 0x2f
 800a06a:	f7fd ffdb 	bl	8008024 <morse_trap>

	/* Init struct with working params */
	contactor_idx_v_struct_hardcode_params(&contactorfunction.lc);
 800a06e:	4c61      	ldr	r4, [pc, #388]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a070:	4620      	mov	r0, r4
 800a072:	f7ff faa5 	bl	80095c0 <contactor_idx_v_struct_hardcode_params>

	/* Initialize working struc for ContactorTask. */
	extern struct ADCFUNCTION adc1;
	contactor_func_init_init(pcf, &adc1);
 800a076:	4960      	ldr	r1, [pc, #384]	; (800a1f8 <StartContactorTask+0x1b8>)
 800a078:	4620      	mov	r0, r4
 800a07a:	f7ff f8ad 	bl	80091d8 <contactor_func_init_init>

	/* CAN hardware filter: restrict incoming to necessary CAN msgs. */
	contactor_func_init_canfilter(pcf);
 800a07e:	4620      	mov	r0, r4
 800a080:	f7ff fa34 	bl	80094ec <contactor_func_init_canfilter>
      
	/* Create timer for keep-alive.  Auto-reload/periodic */
	pcf->swtimer1 = xTimerCreate("swtim1",pcf->ka_k,pdTRUE,\
 800a084:	4b5d      	ldr	r3, [pc, #372]	; (800a1fc <StartContactorTask+0x1bc>)
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	2300      	movs	r3, #0
 800a08a:	2201      	movs	r2, #1
 800a08c:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800a090:	485b      	ldr	r0, [pc, #364]	; (800a200 <StartContactorTask+0x1c0>)
 800a092:	f7fc fc81 	bl	8006998 <xTimerCreate>
 800a096:	f8c4 015c 	str.w	r0, [r4, #348]	; 0x15c
		(void *) 0, swtim1_callback);
	if (pcf->swtimer1 == NULL) {morse_trap(41);}
 800a09a:	b910      	cbnz	r0, 800a0a2 <StartContactorTask+0x62>
 800a09c:	2029      	movs	r0, #41	; 0x29
 800a09e:	f7fd ffc1 	bl	8008024 <morse_trap>

	/* Create timer for other delays. One-shot */
	pcf->swtimer2 = xTimerCreate("swtim2",10,pdFALSE,\
 800a0a2:	4b58      	ldr	r3, [pc, #352]	; (800a204 <StartContactorTask+0x1c4>)
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	210a      	movs	r1, #10
 800a0ac:	4856      	ldr	r0, [pc, #344]	; (800a208 <StartContactorTask+0x1c8>)
 800a0ae:	f7fc fc73 	bl	8006998 <xTimerCreate>
 800a0b2:	4b50      	ldr	r3, [pc, #320]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a0b4:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
		(void *) 0, &swtim2_callback);
	if (pcf->swtimer2 == NULL) {morse_trap(42);}
 800a0b8:	b910      	cbnz	r0, 800a0c0 <StartContactorTask+0x80>
 800a0ba:	202a      	movs	r0, #42	; 0x2a
 800a0bc:	f7fd ffb2 	bl	8008024 <morse_trap>

	/* Create timer uart RX keep-alive. One-shot */
	pcf->swtimer3 = xTimerCreate("swtim3",30,pdFALSE,\
 800a0c0:	4b52      	ldr	r3, [pc, #328]	; (800a20c <StartContactorTask+0x1cc>)
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	211e      	movs	r1, #30
 800a0ca:	4851      	ldr	r0, [pc, #324]	; (800a210 <StartContactorTask+0x1d0>)
 800a0cc:	f7fc fc64 	bl	8006998 <xTimerCreate>
 800a0d0:	4b48      	ldr	r3, [pc, #288]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a0d2:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
		(void *) 0, &swtim3_callback);
	if (pcf->swtimer3 == NULL) {morse_trap(43);}
 800a0d6:	b910      	cbnz	r0, 800a0de <StartContactorTask+0x9e>
 800a0d8:	202b      	movs	r0, #43	; 0x2b
 800a0da:	f7fd ffa3 	bl	8008024 <morse_trap>

	/* Start command/keep-alive timer */
	BaseType_t bret = xTimerReset(pcf->swtimer1, 10);
 800a0de:	4b45      	ldr	r3, [pc, #276]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a0e0:	f8d3 415c 	ldr.w	r4, [r3, #348]	; 0x15c
 800a0e4:	f7fb fe4c 	bl	8005d80 <xTaskGetTickCount>
 800a0e8:	230a      	movs	r3, #10
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	2102      	movs	r1, #2
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f7fc fc6c 	bl	80069d0 <xTimerGenericCommand>
	if (bret != pdPASS) {morse_trap(44);}
 800a0f8:	2801      	cmp	r0, #1
 800a0fa:	d002      	beq.n	800a102 <StartContactorTask+0xc2>
 800a0fc:	202c      	movs	r0, #44	; 0x2c
 800a0fe:	f7fd ff91 	bl	8008024 <morse_trap>

	/* Upon startup allow some sensor readings to settle. */
	pcf->state = OTOSETTLING;
 800a102:	4b3c      	ldr	r3, [pc, #240]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a104:	2207      	movs	r2, #7
 800a106:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244

if (pcf->evstat != 0) morse_trap(46); // Debugging check
 800a10a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a10e:	b113      	cbz	r3, 800a116 <StartContactorTask+0xd6>
 800a110:	202e      	movs	r0, #46	; 0x2e
 800a112:	f7fd ff87 	bl	8008024 <morse_trap>

  /* Infinite loop */
  for(;;)
  {
		/* Wait for notifications */
		xTaskNotifyWait(0,0xffffffff, &noteval, portMAX_DELAY);
 800a116:	f04f 33ff 	mov.w	r3, #4294967295
 800a11a:	aa05      	add	r2, sp, #20
 800a11c:	4619      	mov	r1, r3
 800a11e:	2000      	movs	r0, #0
 800a120:	f7fc fa28 	bl	8006574 <xTaskNotifyWait>
// and calls from table of addresses.  This would have an advantage
// if the high rate bits are shifted out first since a test for
// no bits left could end the testing early.
		// Check notification and deal with it if set.
		noteuse = 0;
		if ((noteval & CNCTBIT00) != 0)
 800a124:	9b05      	ldr	r3, [sp, #20]
 800a126:	f013 0f01 	tst.w	r3, #1
 800a12a:	d002      	beq.n	800a132 <StartContactorTask+0xf2>
		{ // ADC readings ready
			ContactorEvents_00(pcf);
 800a12c:	4831      	ldr	r0, [pc, #196]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a12e:	f7fe ff89 	bl	8009044 <ContactorEvents_00>
			noteuse |= CNCTBIT00;
		}
		if ((noteval & CNCTBIT01) != 0)
 800a132:	9b05      	ldr	r3, [sp, #20]
 800a134:	f013 0f02 	tst.w	r3, #2
 800a138:	d002      	beq.n	800a140 <StartContactorTask+0x100>
		{ // uart RX line ready
			ContactorEvents_01(pcf);
 800a13a:	482e      	ldr	r0, [pc, #184]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a13c:	f7fe ff8a 	bl	8009054 <ContactorEvents_01>
		}
		if ((noteval & CNCTBIT02) != 0)
		{ // (spare)
			noteuse |= CNCTBIT02;
		}
		if ((noteval & CNCTBIT03) != 0)
 800a140:	9b05      	ldr	r3, [sp, #20]
 800a142:	f013 0f08 	tst.w	r3, #8
 800a146:	d002      	beq.n	800a14e <StartContactorTask+0x10e>
		{ // TIMER3: uart RX keep alive timed out
			ContactorEvents_03(pcf);			
 800a148:	482a      	ldr	r0, [pc, #168]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a14a:	f7fe ffad 	bl	80090a8 <ContactorEvents_03>
			noteuse |= CNCTBIT03;
		}
		if ((noteval & CNCTBIT04) != 0)
 800a14e:	9b05      	ldr	r3, [sp, #20]
 800a150:	f013 0f10 	tst.w	r3, #16
 800a154:	d002      	beq.n	800a15c <StartContactorTask+0x11c>
		{ // TIMER1: Command Keep Alive time out (periodic)
			ContactorEvents_04(pcf);
 800a156:	4827      	ldr	r0, [pc, #156]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a158:	f7fe ffb6 	bl	80090c8 <ContactorEvents_04>
			noteuse |= CNCTBIT04;
		}
		if ((noteval & CNCTBIT05) != 0)
 800a15c:	9b05      	ldr	r3, [sp, #20]
 800a15e:	f013 0f20 	tst.w	r3, #32
 800a162:	d002      	beq.n	800a16a <StartContactorTask+0x12a>
		{ // TIMER2: Multiple use Delay timed out
			ContactorEvents_05(pcf);
 800a164:	4823      	ldr	r0, [pc, #140]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a166:	f7fe ffcb 	bl	8009100 <ContactorEvents_05>
			noteuse |= CNCTBIT05;
		}
		if ((noteval & CNCTBIT06) != 0) 
 800a16a:	9b05      	ldr	r3, [sp, #20]
 800a16c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a170:	d002      	beq.n	800a178 <StartContactorTask+0x138>
		{ // CAN: cid_cmd_i 
			ContactorEvents_06(pcf);
 800a172:	4820      	ldr	r0, [pc, #128]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a174:	f7fe ffcc 	bl	8009110 <ContactorEvents_06>
			noteuse |= CNCTBIT06;
		}
		if ((noteval & CNCTBIT07) != 0) 
 800a178:	9b05      	ldr	r3, [sp, #20]
 800a17a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a17e:	d002      	beq.n	800a186 <StartContactorTask+0x146>
		{ // CAN: cid_keepalive_i received
			ContactorEvents_07(pcf);
 800a180:	481c      	ldr	r0, [pc, #112]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a182:	f7fe ffc9 	bl	8009118 <ContactorEvents_07>
			noteuse |= CNCTBIT07;
		}
		if ((noteval & CNCTBIT08) != 0) 
 800a186:	9b05      	ldr	r3, [sp, #20]
 800a188:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a18c:	d002      	beq.n	800a194 <StartContactorTask+0x154>
		{ // CAN: cid_gps_sync 
			ContactorEvents_08(pcf);
 800a18e:	4819      	ldr	r0, [pc, #100]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a190:	f7ff f808 	bl	80091a4 <ContactorEvents_08>
			noteuse |= CNCTBIT08;
		}
  /* ========= States =============================== */

		switch (pcf->state)
 800a194:	4b17      	ldr	r3, [pc, #92]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a196:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800a19a:	2b07      	cmp	r3, #7
 800a19c:	d824      	bhi.n	800a1e8 <StartContactorTask+0x1a8>
 800a19e:	e8df f003 	tbb	[pc, r3]
 800a1a2:	0804      	.short	0x0804
 800a1a4:	1814100c 	.word	0x1814100c
 800a1a8:	201c      	.short	0x201c
		{
		case DISCONNECTED:
			ContactorStates_disconnected(pcf);
 800a1aa:	4812      	ldr	r0, [pc, #72]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a1ac:	f7ff fc3c 	bl	8009a28 <ContactorStates_disconnected>
			break;
 800a1b0:	e01a      	b.n	800a1e8 <StartContactorTask+0x1a8>
		case CONNECTING:
			ContactorStates_connecting(pcf);
 800a1b2:	4810      	ldr	r0, [pc, #64]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a1b4:	f7ff fcbe 	bl	8009b34 <ContactorStates_connecting>
			break;
 800a1b8:	e016      	b.n	800a1e8 <StartContactorTask+0x1a8>
		case CONNECTED:
			ContactorStates_connected(pcf);
 800a1ba:	480e      	ldr	r0, [pc, #56]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a1bc:	f7ff ff06 	bl	8009fcc <ContactorStates_connected>
			break;
 800a1c0:	e012      	b.n	800a1e8 <StartContactorTask+0x1a8>
		case FAULTING:
			ContactorStates_faulting(pcf);
 800a1c2:	480c      	ldr	r0, [pc, #48]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a1c4:	f7ff ff1c 	bl	800a000 <ContactorStates_faulting>
			break;
 800a1c8:	e00e      	b.n	800a1e8 <StartContactorTask+0x1a8>
		case FAULTED:
			ContactorStates_faulted(pcf);
 800a1ca:	480a      	ldr	r0, [pc, #40]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a1cc:	f7ff ff22 	bl	800a014 <ContactorStates_faulted>
			break;
 800a1d0:	e00a      	b.n	800a1e8 <StartContactorTask+0x1a8>
		case RESETTING:
			ContactorStates_reset(pcf);
 800a1d2:	4808      	ldr	r0, [pc, #32]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a1d4:	f7ff ff28 	bl	800a028 <ContactorStates_reset>
			break;
 800a1d8:	e006      	b.n	800a1e8 <StartContactorTask+0x1a8>
		case DISCONNECTING:
			ContactorStates_disconnecting(pcf);
 800a1da:	4806      	ldr	r0, [pc, #24]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a1dc:	f7ff fbfc 	bl	80099d8 <ContactorStates_disconnecting>
			break;
 800a1e0:	e002      	b.n	800a1e8 <StartContactorTask+0x1a8>
		case OTOSETTLING:
			ContactorStates_otosettling_init(pcf);
 800a1e2:	4804      	ldr	r0, [pc, #16]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a1e4:	f7ff fc0e 	bl	8009a04 <ContactorStates_otosettling_init>
			break;
		}
  /* ========= Update outputs ======================= */
		ContactorUpdates(pcf);
 800a1e8:	4802      	ldr	r0, [pc, #8]	; (800a1f4 <StartContactorTask+0x1b4>)
 800a1ea:	f000 f853 	bl	800a294 <ContactorUpdates>
  }
 800a1ee:	e792      	b.n	800a116 <StartContactorTask+0xd6>
 800a1f0:	20003028 	.word	0x20003028
 800a1f4:	200037a0 	.word	0x200037a0
 800a1f8:	20003378 	.word	0x20003378
 800a1fc:	0800a245 	.word	0x0800a245
 800a200:	0800eb28 	.word	0x0800eb28
 800a204:	0800a22d 	.word	0x0800a22d
 800a208:	0800eb30 	.word	0x0800eb30
 800a20c:	0800a215 	.word	0x0800a215
 800a210:	0800eb38 	.word	0x0800eb38

0800a214 <swtim3_callback>:
/* *************************************************************************
 * void swtim3_callback(TimerHandle_t tm);
 * @brief	: Software timer 3 timeout callback
 * *************************************************************************/
static void swtim3_callback(TimerHandle_t tm)
{
 800a214:	b508      	push	{r3, lr}
	xTaskNotify(ContactorTaskHandle, CNCTBIT03, eSetBits);
 800a216:	2300      	movs	r3, #0
 800a218:	2201      	movs	r2, #1
 800a21a:	2108      	movs	r1, #8
 800a21c:	4802      	ldr	r0, [pc, #8]	; (800a228 <swtim3_callback+0x14>)
 800a21e:	6800      	ldr	r0, [r0, #0]
 800a220:	f7fc f9f4 	bl	800660c <xTaskGenericNotify>
 800a224:	bd08      	pop	{r3, pc}
 800a226:	bf00      	nop
 800a228:	20003aa8 	.word	0x20003aa8

0800a22c <swtim2_callback>:
/* *************************************************************************
 * void swtim2_callback(TimerHandle_t tm);
 * @brief	: Software timer 2 timeout callback
 * *************************************************************************/
static void swtim2_callback(TimerHandle_t tm)
{
 800a22c:	b508      	push	{r3, lr}
	xTaskNotify(ContactorTaskHandle, CNCTBIT05, eSetBits);
 800a22e:	2300      	movs	r3, #0
 800a230:	2201      	movs	r2, #1
 800a232:	2120      	movs	r1, #32
 800a234:	4802      	ldr	r0, [pc, #8]	; (800a240 <swtim2_callback+0x14>)
 800a236:	6800      	ldr	r0, [r0, #0]
 800a238:	f7fc f9e8 	bl	800660c <xTaskGenericNotify>
 800a23c:	bd08      	pop	{r3, pc}
 800a23e:	bf00      	nop
 800a240:	20003aa8 	.word	0x20003aa8

0800a244 <swtim1_callback>:
/* *************************************************************************
 * void swtim1_callback(TimerHandle_t tm);
 * @brief	: Software timer 1 timeout callback
 * *************************************************************************/
static void swtim1_callback(TimerHandle_t tm)
{
 800a244:	b508      	push	{r3, lr}
	xTaskNotify(ContactorTaskHandle, CNCTBIT04, eSetBits);
 800a246:	2300      	movs	r3, #0
 800a248:	2201      	movs	r2, #1
 800a24a:	2110      	movs	r1, #16
 800a24c:	4802      	ldr	r0, [pc, #8]	; (800a258 <swtim1_callback+0x14>)
 800a24e:	6800      	ldr	r0, [r0, #0]
 800a250:	f7fc f9dc 	bl	800660c <xTaskGenericNotify>
 800a254:	bd08      	pop	{r3, pc}
 800a256:	bf00      	nop
 800a258:	20003aa8 	.word	0x20003aa8

0800a25c <xContactorTaskCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: ContactorTaskHandle
 * *************************************************************************/
osThreadId xContactorTaskCreate(uint32_t taskpriority)
{
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	4606      	mov	r6, r0
 	osThreadDef(ContactorTask, StartContactorTask, osPriorityNormal, 0, 128);
 800a262:	ac01      	add	r4, sp, #4
 800a264:	4d09      	ldr	r5, [pc, #36]	; (800a28c <xContactorTaskCreate+0x30>)
 800a266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a26a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a26e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ContactorTaskHandle = osThreadCreate(osThread(ContactorTask), NULL);
 800a272:	2100      	movs	r1, #0
 800a274:	a801      	add	r0, sp, #4
 800a276:	f7fc fd17 	bl	8006ca8 <osThreadCreate>
 800a27a:	4c05      	ldr	r4, [pc, #20]	; (800a290 <xContactorTaskCreate+0x34>)
 800a27c:	6020      	str	r0, [r4, #0]
	vTaskPrioritySet( ContactorTaskHandle, taskpriority );
 800a27e:	4631      	mov	r1, r6
 800a280:	f7fb fcb2 	bl	8005be8 <vTaskPrioritySet>
	return ContactorTaskHandle;
}
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	b008      	add	sp, #32
 800a288:	bd70      	pop	{r4, r5, r6, pc}
 800a28a:	bf00      	nop
 800a28c:	0800e4ec 	.word	0x0800e4ec
 800a290:	20003aa8 	.word	0x20003aa8

0800a294 <ContactorUpdates>:
/* *************************************************************************
 * void ContactorUpdates(struct CONTACTORFUNCTION* pcf);
 * @brief	: Update outputs based on bits set
 * *************************************************************************/
void ContactorUpdates(struct CONTACTORFUNCTION* pcf)
{
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4604      	mov	r4, r0
	/* Reset new ADC readings flag. */
	if ((pcf->evstat & CNCTEVADC) != 0)
 800a298:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800a29c:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a2a0:	d003      	beq.n	800a2aa <ContactorUpdates+0x16>
	{
			pcf->evstat &= ~CNCTEVADC;
 800a2a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2a6:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	}

	/* Queue keep-alive status CAN msg */
	if ((pcf->outstat & CNCTOUT05KA) != 0)
 800a2aa:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800a2ae:	f013 0f20 	tst.w	r3, #32
 800a2b2:	d006      	beq.n	800a2c2 <ContactorUpdates+0x2e>
	{
		pcf->outstat &= ~CNCTOUT05KA;	
 800a2b4:	f023 0320 	bic.w	r3, r3, #32
 800a2b8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		contactor_msg_ka(pcf);
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f7ff faaf 	bl	8009820 <contactor_msg_ka>
	}

	/* Contactor #1 energization */
	if ( ((pcf->outstat & (CNCTOUT00K1 | CNCTOUT06KAw)) ^ (pcf->outstat_prev & (CNCTOUT00K1 | CNCTOUT06KAw))) != 0)
 800a2c2:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 800a2c6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800a2ca:	ea82 0103 	eor.w	r1, r2, r3
 800a2ce:	f011 0f41 	tst.w	r1, #65	; 0x41
 800a2d2:	d037      	beq.n	800a344 <ContactorUpdates+0xb0>
	{ // Either/both energize or pwm coil requested
		if ((pcf->outstat & CNCTOUT00K1) != 0)
 800a2d4:	f012 0f01 	tst.w	r2, #1
 800a2d8:	d020      	beq.n	800a31c <ContactorUpdates+0x88>
		{ // Here, contactor off-->on
			if ((pcf->outstat & CNCTOUT06KAw) == 0)
 800a2da:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a2de:	d109      	bne.n	800a2f4 <ContactorUpdates+0x60>
			{ // Contactor ON, PWM OFF
				pcf->sConfigOCn.Pulse = (htim4.Init.Period+2); // Max+1 PWM period
 800a2e0:	4a42      	ldr	r2, [pc, #264]	; (800a3ec <ContactorUpdates+0x158>)
 800a2e2:	68d2      	ldr	r2, [r2, #12]
 800a2e4:	3202      	adds	r2, #2
 800a2e6:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
				pcf->outstat_prev |= CNCTOUT00K1;
 800a2ea:	f043 0301 	orr.w	r3, r3, #1
 800a2ee:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800a2f2:	e007      	b.n	800a304 <ContactorUpdates+0x70>
			}
			else
			{ // Contactor was on, switch to pwm
				pcf->sConfigOCn.Pulse = pcf->ipwmpct1; // PWM period for #1
 800a2f4:	f8d4 2220 	ldr.w	r2, [r4, #544]	; 0x220
 800a2f8:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
				pcf->outstat_prev |= CNCTOUT06KAw;
 800a2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a300:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
			}
			HAL_TIM_PWM_ConfigChannel(&htim4, &pcf->sConfigOCn, TIM_CHANNEL_3);
 800a304:	4d39      	ldr	r5, [pc, #228]	; (800a3ec <ContactorUpdates+0x158>)
 800a306:	2208      	movs	r2, #8
 800a308:	f504 710a 	add.w	r1, r4, #552	; 0x228
 800a30c:	4628      	mov	r0, r5
 800a30e:	f7f8 fb27 	bl	8002960 <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  
 800a312:	2108      	movs	r1, #8
 800a314:	4628      	mov	r0, r5
 800a316:	f7f8 fb9f 	bl	8002a58 <HAL_TIM_PWM_Start>
 800a31a:	e013      	b.n	800a344 <ContactorUpdates+0xb0>
		}
		else
		{ // Contactor OFF; 
			pcf->sConfigOCn.Pulse = 0; // Period = 0 is OFF
 800a31c:	2300      	movs	r3, #0
 800a31e:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
			HAL_TIM_PWM_ConfigChannel(&htim4, &pcf->sConfigOCn, TIM_CHANNEL_3);
 800a322:	4d32      	ldr	r5, [pc, #200]	; (800a3ec <ContactorUpdates+0x158>)
 800a324:	2208      	movs	r2, #8
 800a326:	f504 710a 	add.w	r1, r4, #552	; 0x228
 800a32a:	4628      	mov	r0, r5
 800a32c:	f7f8 fb18 	bl	8002960 <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  
 800a330:	2108      	movs	r1, #8
 800a332:	4628      	mov	r0, r5
 800a334:	f7f8 fb90 	bl	8002a58 <HAL_TIM_PWM_Start>
			pcf->outstat_prev &= ~(CNCTOUT00K1 | CNCTOUT06KAw); // Reset requests
 800a338:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800a33c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800a340:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		}
	}

	/* Contactor #2 energization */
	if ( ((pcf->outstat & (CNCTOUT01K2 | CNCTOUT07KAw)) ^ (pcf->outstat_prev & (CNCTOUT01K2 | CNCTOUT07KAw))) != 0)
 800a344:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 800a348:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800a34c:	ea82 0103 	eor.w	r1, r2, r3
 800a350:	f011 0f82 	tst.w	r1, #130	; 0x82
 800a354:	d037      	beq.n	800a3c6 <ContactorUpdates+0x132>
	{ // Either/both energize or pwm coil requested
		if ((pcf->outstat & CNCTOUT01K2) != 0)
 800a356:	f012 0f02 	tst.w	r2, #2
 800a35a:	d020      	beq.n	800a39e <ContactorUpdates+0x10a>
		{  // Here, contactor off-->on
			if ((pcf->outstat & CNCTOUT07KAw) == 0)
 800a35c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a360:	d109      	bne.n	800a376 <ContactorUpdates+0xe2>
			{ // Contactor ON, PWM OFF
				pcf->sConfigOCn.Pulse = (htim3.Init.Period+2); // Max+1 PWM period
 800a362:	4a23      	ldr	r2, [pc, #140]	; (800a3f0 <ContactorUpdates+0x15c>)
 800a364:	68d2      	ldr	r2, [r2, #12]
 800a366:	3202      	adds	r2, #2
 800a368:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
				pcf->outstat_prev |= CNCTOUT01K2;
 800a36c:	f043 0302 	orr.w	r3, r3, #2
 800a370:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800a374:	e007      	b.n	800a386 <ContactorUpdates+0xf2>
			}
			else
			{ // Contactor was on, switch to pwm
				pcf->sConfigOCn.Pulse = pcf->ipwmpct2; // PWM period for #2
 800a376:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 800a37a:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
				pcf->outstat_prev |= CNCTOUT07KAw;
 800a37e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a382:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
			}
			HAL_TIM_PWM_ConfigChannel(&htim3, &pcf->sConfigOCn, TIM_CHANNEL_2);
 800a386:	4d1a      	ldr	r5, [pc, #104]	; (800a3f0 <ContactorUpdates+0x15c>)
 800a388:	2204      	movs	r2, #4
 800a38a:	f504 710a 	add.w	r1, r4, #552	; 0x228
 800a38e:	4628      	mov	r0, r5
 800a390:	f7f8 fae6 	bl	8002960 <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  
 800a394:	2104      	movs	r1, #4
 800a396:	4628      	mov	r0, r5
 800a398:	f7f8 fb5e 	bl	8002a58 <HAL_TIM_PWM_Start>
 800a39c:	e013      	b.n	800a3c6 <ContactorUpdates+0x132>
		}
		else
		{ // Contactor OFF; 
			pcf->sConfigOCn.Pulse = 0; // Period = 0
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
			HAL_TIM_PWM_ConfigChannel(&htim3, &pcf->sConfigOCn, TIM_CHANNEL_2);
 800a3a4:	4d12      	ldr	r5, [pc, #72]	; (800a3f0 <ContactorUpdates+0x15c>)
 800a3a6:	2204      	movs	r2, #4
 800a3a8:	f504 710a 	add.w	r1, r4, #552	; 0x228
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f7f8 fad7 	bl	8002960 <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  
 800a3b2:	2104      	movs	r1, #4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f7f8 fb4f 	bl	8002a58 <HAL_TIM_PWM_Start>
			pcf->outstat_prev &= ~(CNCTOUT01K2 | CNCTOUT07KAw);
 800a3ba:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800a3be:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800a3c2:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		}
	}

	/* DMOC FET enabling. */
	if ((pcf->outstat & CNCTOUT04EN) != 0)
 800a3c6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800a3ca:	f013 0f10 	tst.w	r3, #16
 800a3ce:	d006      	beq.n	800a3de <ContactorUpdates+0x14a>
	{ // Turn on FET for DMOC hardware enable
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a3d6:	4807      	ldr	r0, [pc, #28]	; (800a3f4 <ContactorUpdates+0x160>)
 800a3d8:	f7f9 f93c 	bl	8003654 <HAL_GPIO_WritePin>
 800a3dc:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{ // Turn FET off.
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a3e4:	4803      	ldr	r0, [pc, #12]	; (800a3f4 <ContactorUpdates+0x160>)
 800a3e6:	f7f9 f935 	bl	8003654 <HAL_GPIO_WritePin>
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	20002fe8 	.word	0x20002fe8
 800a3f0:	20003098 	.word	0x20003098
 800a3f4:	40011000 	.word	0x40011000

0800a3f8 <iir_filter_lx_init>:
 * @param	: pval = pointer to reading
*******************************************************************************/
static void iir_filter_lx_init(struct IIRFILTERL* pfil, uint16_t* pval)
{
	/* Crazy results if scale or k is bogus. */
	if (pfil->pprm->scale <= 0) pfil->pprm->scale = 1;
 800a3f8:	6903      	ldr	r3, [r0, #16]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	2a00      	cmp	r2, #0
 800a3fe:	dc01      	bgt.n	800a404 <iir_filter_lx_init+0xc>
 800a400:	2201      	movs	r2, #1
 800a402:	605a      	str	r2, [r3, #4]
	if (pfil->pprm->k <= 0) pfil->pprm->k = 1;
 800a404:	6903      	ldr	r3, [r0, #16]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	2a00      	cmp	r2, #0
 800a40a:	dc01      	bgt.n	800a410 <iir_filter_lx_init+0x18>
 800a40c:	2201      	movs	r2, #1
 800a40e:	601a      	str	r2, [r3, #0]

	/* Set initial value with the first reading. */
	pfil->z = (*pval) * (pfil->pprm->scale);
 800a410:	880a      	ldrh	r2, [r1, #0]
 800a412:	6903      	ldr	r3, [r0, #16]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	fb03 f302 	mul.w	r3, r3, r2
 800a41a:	6083      	str	r3, [r0, #8]
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop

0800a420 <iir_filter_lx_do>:
*******************************************************************************/
/*
NOTE: It is expected that pfil-z has been initialized.
*/
int32_t iir_filter_lx_do(struct IIRFILTERL* pfil, uint16_t* pval)
{
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4604      	mov	r4, r0
 800a424:	460d      	mov	r5, r1
	/* First time with reading. */
	if (pfil->sw == 0)
 800a426:	7d03      	ldrb	r3, [r0, #20]
 800a428:	b91b      	cbnz	r3, 800a432 <iir_filter_lx_do+0x12>
	{
		pfil->sw = 1;
 800a42a:	2301      	movs	r3, #1
 800a42c:	7503      	strb	r3, [r0, #20]
		iir_filter_lx_init(pfil, pval);
 800a42e:	f7ff ffe3 	bl	800a3f8 <iir_filter_lx_init>
	}

	/* Filter computation */
   pfil->z = pfil->z + ( (*pval) * (pfil->pprm->scale) - pfil->z) / (pfil->pprm->k); 
 800a432:	882a      	ldrh	r2, [r5, #0]
 800a434:	6921      	ldr	r1, [r4, #16]
 800a436:	684b      	ldr	r3, [r1, #4]
 800a438:	fb03 f302 	mul.w	r3, r3, r2
 800a43c:	68a5      	ldr	r5, [r4, #8]
 800a43e:	1b5a      	subs	r2, r3, r5
 800a440:	680b      	ldr	r3, [r1, #0]
 800a442:	fb92 f3f3 	sdiv	r3, r2, r3
 800a446:	442b      	add	r3, r5
 800a448:	60a3      	str	r3, [r4, #8]
	return (pfil->z / pfil->pprm->scale);
 800a44a:	6848      	ldr	r0, [r1, #4]
}
 800a44c:	fb93 f0f0 	sdiv	r0, r3, r0
 800a450:	bd38      	pop	{r3, r4, r5, pc}
 800a452:	bf00      	nop

0800a454 <adcextendsum>:
 * void adcextendsum(struct ADCFUNCTION* p);
 *	@brief	: Sum the 1/2 DMA sums for greater averaging
 * @param	: pcf = pointer to stuct array for ADCs
 * *************************************************************************/
void adcextendsum(struct ADCFUNCTION* p)
{
 800a454:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ADCCHANNEL* pchan = &p->chan[0];

	(pchan+0)->xsum[0] += (pchan+0)->sum;
 800a456:	f8b0 e224 	ldrh.w	lr, [r0, #548]	; 0x224
 800a45a:	f8d0 3228 	ldr.w	r3, [r0, #552]	; 0x228
 800a45e:	449e      	add	lr, r3
 800a460:	f8c0 e228 	str.w	lr, [r0, #552]	; 0x228
	(pchan+1)->xsum[0] += (pchan+1)->sum;
 800a464:	f8b0 6274 	ldrh.w	r6, [r0, #628]	; 0x274
 800a468:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
 800a46c:	441e      	add	r6, r3
 800a46e:	f8c0 6278 	str.w	r6, [r0, #632]	; 0x278
	(pchan+2)->xsum[0] += (pchan+2)->sum;
 800a472:	f8b0 52c4 	ldrh.w	r5, [r0, #708]	; 0x2c4
 800a476:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
 800a47a:	441d      	add	r5, r3
 800a47c:	f8c0 52c8 	str.w	r5, [r0, #712]	; 0x2c8
	(pchan+3)->xsum[0] += (pchan+3)->sum;
 800a480:	f8b0 4314 	ldrh.w	r4, [r0, #788]	; 0x314
 800a484:	f8d0 3318 	ldr.w	r3, [r0, #792]	; 0x318
 800a488:	441c      	add	r4, r3
 800a48a:	f8c0 4318 	str.w	r4, [r0, #792]	; 0x318
	(pchan+4)->xsum[0] += (pchan+4)->sum;
 800a48e:	f8b0 1364 	ldrh.w	r1, [r0, #868]	; 0x364
 800a492:	f8d0 3368 	ldr.w	r3, [r0, #872]	; 0x368
 800a496:	4419      	add	r1, r3
 800a498:	f8c0 1368 	str.w	r1, [r0, #872]	; 0x368
	(pchan+5)->xsum[0] += (pchan+5)->sum;
 800a49c:	f8b0 23b4 	ldrh.w	r2, [r0, #948]	; 0x3b4
 800a4a0:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
 800a4a4:	441a      	add	r2, r3
 800a4a6:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8

	ctr += 1;
 800a4aa:	4f14      	ldr	r7, [pc, #80]	; (800a4fc <adcextendsum+0xa8>)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	603b      	str	r3, [r7, #0]
	if (ctr >= ADCEXTENDSUMCT)
 800a4b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4b6:	d31f      	bcc.n	800a4f8 <adcextendsum+0xa4>
	{
		ctr = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	603b      	str	r3, [r7, #0]
		p->idx_xsum ^= 0x1;
 800a4bc:	f8d0 73fc 	ldr.w	r7, [r0, #1020]	; 0x3fc
 800a4c0:	f087 0701 	eor.w	r7, r7, #1
 800a4c4:	f8c0 73fc 	str.w	r7, [r0, #1020]	; 0x3fc

		(pchan+0)->xsum[1] = (pchan+0)->xsum[0];
 800a4c8:	f8c0 e22c 	str.w	lr, [r0, #556]	; 0x22c
		(pchan+1)->xsum[1] = (pchan+1)->xsum[0];
 800a4cc:	f8c0 627c 	str.w	r6, [r0, #636]	; 0x27c
		(pchan+2)->xsum[1] = (pchan+2)->xsum[0];
 800a4d0:	f8c0 52cc 	str.w	r5, [r0, #716]	; 0x2cc
		(pchan+3)->xsum[1] = (pchan+3)->xsum[0];
 800a4d4:	f8c0 431c 	str.w	r4, [r0, #796]	; 0x31c
		(pchan+4)->xsum[1] = (pchan+4)->xsum[0];
 800a4d8:	f8c0 136c 	str.w	r1, [r0, #876]	; 0x36c
		(pchan+5)->xsum[1] = (pchan+5)->xsum[0];
 800a4dc:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
		
		(pchan+0)->xsum[0] = 0;
 800a4e0:	f8c0 3228 	str.w	r3, [r0, #552]	; 0x228
		(pchan+1)->xsum[0] = 0;
 800a4e4:	f8c0 3278 	str.w	r3, [r0, #632]	; 0x278
		(pchan+2)->xsum[0] = 0;
 800a4e8:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
		(pchan+3)->xsum[0] = 0;
 800a4ec:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
		(pchan+4)->xsum[0] = 0;
 800a4f0:	f8c0 3368 	str.w	r3, [r0, #872]	; 0x368
		(pchan+5)->xsum[0] = 0;
 800a4f4:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
 800a4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20002fa4 	.word	0x20002fa4

0800a500 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800a500:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800a502:	e003      	b.n	800a50c <LoopCopyDataInit>

0800a504 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800a504:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800a506:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800a508:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800a50a:	3104      	adds	r1, #4

0800a50c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800a50c:	480a      	ldr	r0, [pc, #40]	; (800a538 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800a50e:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800a510:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800a512:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800a514:	d3f6      	bcc.n	800a504 <CopyDataInit>
  ldr r2, =_sbss
 800a516:	4a0a      	ldr	r2, [pc, #40]	; (800a540 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800a518:	e002      	b.n	800a520 <LoopFillZerobss>

0800a51a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800a51a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800a51c:	f842 3b04 	str.w	r3, [r2], #4

0800a520 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800a520:	4b08      	ldr	r3, [pc, #32]	; (800a544 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800a522:	429a      	cmp	r2, r3
  bcc FillZerobss
 800a524:	d3f9      	bcc.n	800a51a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a526:	f7f9 fa65 	bl	80039f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a52a:	f000 f847 	bl	800a5bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a52e:	f7f7 fc0b 	bl	8001d48 <main>
  bx lr
 800a532:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 800a534:	0800edf0 	.word	0x0800edf0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800a538:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800a53c:	200009b8 	.word	0x200009b8
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800a540:	200009b8 	.word	0x200009b8
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 800a544:	20003ab0 	.word	0x20003ab0

0800a548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a548:	e7fe      	b.n	800a548 <ADC1_2_IRQHandler>
	...

0800a54c <calloc>:
 800a54c:	4b02      	ldr	r3, [pc, #8]	; (800a558 <calloc+0xc>)
 800a54e:	460a      	mov	r2, r1
 800a550:	4601      	mov	r1, r0
 800a552:	6818      	ldr	r0, [r3, #0]
 800a554:	f000 b802 	b.w	800a55c <_calloc_r>
 800a558:	20000438 	.word	0x20000438

0800a55c <_calloc_r>:
 800a55c:	b510      	push	{r4, lr}
 800a55e:	fb02 f101 	mul.w	r1, r2, r1
 800a562:	f000 f853 	bl	800a60c <_malloc_r>
 800a566:	4604      	mov	r4, r0
 800a568:	b1d8      	cbz	r0, 800a5a2 <_calloc_r+0x46>
 800a56a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a56e:	f022 0203 	bic.w	r2, r2, #3
 800a572:	3a04      	subs	r2, #4
 800a574:	2a24      	cmp	r2, #36	; 0x24
 800a576:	d818      	bhi.n	800a5aa <_calloc_r+0x4e>
 800a578:	2a13      	cmp	r2, #19
 800a57a:	d914      	bls.n	800a5a6 <_calloc_r+0x4a>
 800a57c:	2300      	movs	r3, #0
 800a57e:	2a1b      	cmp	r2, #27
 800a580:	6003      	str	r3, [r0, #0]
 800a582:	6043      	str	r3, [r0, #4]
 800a584:	d916      	bls.n	800a5b4 <_calloc_r+0x58>
 800a586:	2a24      	cmp	r2, #36	; 0x24
 800a588:	6083      	str	r3, [r0, #8]
 800a58a:	60c3      	str	r3, [r0, #12]
 800a58c:	bf11      	iteee	ne
 800a58e:	f100 0210 	addne.w	r2, r0, #16
 800a592:	6103      	streq	r3, [r0, #16]
 800a594:	6143      	streq	r3, [r0, #20]
 800a596:	f100 0218 	addeq.w	r2, r0, #24
 800a59a:	2300      	movs	r3, #0
 800a59c:	6013      	str	r3, [r2, #0]
 800a59e:	6053      	str	r3, [r2, #4]
 800a5a0:	6093      	str	r3, [r2, #8]
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	bd10      	pop	{r4, pc}
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	e7f7      	b.n	800a59a <_calloc_r+0x3e>
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	f000 fada 	bl	800ab64 <memset>
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	bd10      	pop	{r4, pc}
 800a5b4:	f100 0208 	add.w	r2, r0, #8
 800a5b8:	e7ef      	b.n	800a59a <_calloc_r+0x3e>
 800a5ba:	bf00      	nop

0800a5bc <__libc_init_array>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	4e0f      	ldr	r6, [pc, #60]	; (800a5fc <__libc_init_array+0x40>)
 800a5c0:	4d0f      	ldr	r5, [pc, #60]	; (800a600 <__libc_init_array+0x44>)
 800a5c2:	1b76      	subs	r6, r6, r5
 800a5c4:	10b6      	asrs	r6, r6, #2
 800a5c6:	bf18      	it	ne
 800a5c8:	2400      	movne	r4, #0
 800a5ca:	d005      	beq.n	800a5d8 <__libc_init_array+0x1c>
 800a5cc:	3401      	adds	r4, #1
 800a5ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d2:	4798      	blx	r3
 800a5d4:	42a6      	cmp	r6, r4
 800a5d6:	d1f9      	bne.n	800a5cc <__libc_init_array+0x10>
 800a5d8:	4e0a      	ldr	r6, [pc, #40]	; (800a604 <__libc_init_array+0x48>)
 800a5da:	4d0b      	ldr	r5, [pc, #44]	; (800a608 <__libc_init_array+0x4c>)
 800a5dc:	f003 ff20 	bl	800e420 <_init>
 800a5e0:	1b76      	subs	r6, r6, r5
 800a5e2:	10b6      	asrs	r6, r6, #2
 800a5e4:	bf18      	it	ne
 800a5e6:	2400      	movne	r4, #0
 800a5e8:	d006      	beq.n	800a5f8 <__libc_init_array+0x3c>
 800a5ea:	3401      	adds	r4, #1
 800a5ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f0:	4798      	blx	r3
 800a5f2:	42a6      	cmp	r6, r4
 800a5f4:	d1f9      	bne.n	800a5ea <__libc_init_array+0x2e>
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}
 800a5f8:	bd70      	pop	{r4, r5, r6, pc}
 800a5fa:	bf00      	nop
 800a5fc:	0800ede4 	.word	0x0800ede4
 800a600:	0800ede4 	.word	0x0800ede4
 800a604:	0800edec 	.word	0x0800edec
 800a608:	0800ede4 	.word	0x0800ede4

0800a60c <_malloc_r>:
 800a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	f101 050b 	add.w	r5, r1, #11
 800a614:	2d16      	cmp	r5, #22
 800a616:	b083      	sub	sp, #12
 800a618:	4606      	mov	r6, r0
 800a61a:	f240 80a0 	bls.w	800a75e <_malloc_r+0x152>
 800a61e:	f035 0507 	bics.w	r5, r5, #7
 800a622:	f100 80c0 	bmi.w	800a7a6 <_malloc_r+0x19a>
 800a626:	42a9      	cmp	r1, r5
 800a628:	f200 80bd 	bhi.w	800a7a6 <_malloc_r+0x19a>
 800a62c:	f000 fae8 	bl	800ac00 <__malloc_lock>
 800a630:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800a634:	f0c0 8290 	bcc.w	800ab58 <_malloc_r+0x54c>
 800a638:	0a6b      	lsrs	r3, r5, #9
 800a63a:	f000 80bb 	beq.w	800a7b4 <_malloc_r+0x1a8>
 800a63e:	2b04      	cmp	r3, #4
 800a640:	f200 8177 	bhi.w	800a932 <_malloc_r+0x326>
 800a644:	09a8      	lsrs	r0, r5, #6
 800a646:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800a64a:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800a64e:	3038      	adds	r0, #56	; 0x38
 800a650:	4fbe      	ldr	r7, [pc, #760]	; (800a94c <_malloc_r+0x340>)
 800a652:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800a656:	684c      	ldr	r4, [r1, #4]
 800a658:	3908      	subs	r1, #8
 800a65a:	42a1      	cmp	r1, r4
 800a65c:	d107      	bne.n	800a66e <_malloc_r+0x62>
 800a65e:	e0ae      	b.n	800a7be <_malloc_r+0x1b2>
 800a660:	2a00      	cmp	r2, #0
 800a662:	f280 80ae 	bge.w	800a7c2 <_malloc_r+0x1b6>
 800a666:	68e4      	ldr	r4, [r4, #12]
 800a668:	42a1      	cmp	r1, r4
 800a66a:	f000 80a8 	beq.w	800a7be <_malloc_r+0x1b2>
 800a66e:	6863      	ldr	r3, [r4, #4]
 800a670:	f023 0303 	bic.w	r3, r3, #3
 800a674:	1b5a      	subs	r2, r3, r5
 800a676:	2a0f      	cmp	r2, #15
 800a678:	ddf2      	ble.n	800a660 <_malloc_r+0x54>
 800a67a:	49b4      	ldr	r1, [pc, #720]	; (800a94c <_malloc_r+0x340>)
 800a67c:	693c      	ldr	r4, [r7, #16]
 800a67e:	f101 0e08 	add.w	lr, r1, #8
 800a682:	4574      	cmp	r4, lr
 800a684:	f000 81a8 	beq.w	800a9d8 <_malloc_r+0x3cc>
 800a688:	6863      	ldr	r3, [r4, #4]
 800a68a:	f023 0303 	bic.w	r3, r3, #3
 800a68e:	1b5a      	subs	r2, r3, r5
 800a690:	2a0f      	cmp	r2, #15
 800a692:	f300 818e 	bgt.w	800a9b2 <_malloc_r+0x3a6>
 800a696:	2a00      	cmp	r2, #0
 800a698:	f8c1 e014 	str.w	lr, [r1, #20]
 800a69c:	f8c1 e010 	str.w	lr, [r1, #16]
 800a6a0:	f280 8093 	bge.w	800a7ca <_malloc_r+0x1be>
 800a6a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a8:	f080 815c 	bcs.w	800a964 <_malloc_r+0x358>
 800a6ac:	08db      	lsrs	r3, r3, #3
 800a6ae:	684a      	ldr	r2, [r1, #4]
 800a6b0:	ea4f 09a3 	mov.w	r9, r3, asr #2
 800a6b4:	f04f 0c01 	mov.w	ip, #1
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
 800a6be:	fa0c f909 	lsl.w	r9, ip, r9
 800a6c2:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
 800a6c6:	ea49 0202 	orr.w	r2, r9, r2
 800a6ca:	f1ac 0c08 	sub.w	ip, ip, #8
 800a6ce:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a6d2:	f8c4 8008 	str.w	r8, [r4, #8]
 800a6d6:	604a      	str	r2, [r1, #4]
 800a6d8:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
 800a6dc:	f8c8 400c 	str.w	r4, [r8, #12]
 800a6e0:	1083      	asrs	r3, r0, #2
 800a6e2:	2401      	movs	r4, #1
 800a6e4:	409c      	lsls	r4, r3
 800a6e6:	4294      	cmp	r4, r2
 800a6e8:	d87c      	bhi.n	800a7e4 <_malloc_r+0x1d8>
 800a6ea:	4214      	tst	r4, r2
 800a6ec:	d106      	bne.n	800a6fc <_malloc_r+0xf0>
 800a6ee:	f020 0003 	bic.w	r0, r0, #3
 800a6f2:	0064      	lsls	r4, r4, #1
 800a6f4:	4214      	tst	r4, r2
 800a6f6:	f100 0004 	add.w	r0, r0, #4
 800a6fa:	d0fa      	beq.n	800a6f2 <_malloc_r+0xe6>
 800a6fc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800a700:	46cc      	mov	ip, r9
 800a702:	4680      	mov	r8, r0
 800a704:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a708:	458c      	cmp	ip, r1
 800a70a:	d107      	bne.n	800a71c <_malloc_r+0x110>
 800a70c:	e166      	b.n	800a9dc <_malloc_r+0x3d0>
 800a70e:	2a00      	cmp	r2, #0
 800a710:	f280 8174 	bge.w	800a9fc <_malloc_r+0x3f0>
 800a714:	68c9      	ldr	r1, [r1, #12]
 800a716:	458c      	cmp	ip, r1
 800a718:	f000 8160 	beq.w	800a9dc <_malloc_r+0x3d0>
 800a71c:	684b      	ldr	r3, [r1, #4]
 800a71e:	f023 0303 	bic.w	r3, r3, #3
 800a722:	1b5a      	subs	r2, r3, r5
 800a724:	2a0f      	cmp	r2, #15
 800a726:	ddf2      	ble.n	800a70e <_malloc_r+0x102>
 800a728:	460c      	mov	r4, r1
 800a72a:	68cb      	ldr	r3, [r1, #12]
 800a72c:	f854 cf08 	ldr.w	ip, [r4, #8]!
 800a730:	f045 0801 	orr.w	r8, r5, #1
 800a734:	f8c1 8004 	str.w	r8, [r1, #4]
 800a738:	440d      	add	r5, r1
 800a73a:	f042 0101 	orr.w	r1, r2, #1
 800a73e:	f8cc 300c 	str.w	r3, [ip, #12]
 800a742:	4630      	mov	r0, r6
 800a744:	f8c3 c008 	str.w	ip, [r3, #8]
 800a748:	617d      	str	r5, [r7, #20]
 800a74a:	613d      	str	r5, [r7, #16]
 800a74c:	f8c5 e00c 	str.w	lr, [r5, #12]
 800a750:	f8c5 e008 	str.w	lr, [r5, #8]
 800a754:	6069      	str	r1, [r5, #4]
 800a756:	50aa      	str	r2, [r5, r2]
 800a758:	f000 fa54 	bl	800ac04 <__malloc_unlock>
 800a75c:	e01f      	b.n	800a79e <_malloc_r+0x192>
 800a75e:	2910      	cmp	r1, #16
 800a760:	d821      	bhi.n	800a7a6 <_malloc_r+0x19a>
 800a762:	f000 fa4d 	bl	800ac00 <__malloc_lock>
 800a766:	2510      	movs	r5, #16
 800a768:	2306      	movs	r3, #6
 800a76a:	2002      	movs	r0, #2
 800a76c:	4f77      	ldr	r7, [pc, #476]	; (800a94c <_malloc_r+0x340>)
 800a76e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a772:	685c      	ldr	r4, [r3, #4]
 800a774:	f1a3 0208 	sub.w	r2, r3, #8
 800a778:	4294      	cmp	r4, r2
 800a77a:	f000 8138 	beq.w	800a9ee <_malloc_r+0x3e2>
 800a77e:	6863      	ldr	r3, [r4, #4]
 800a780:	68e1      	ldr	r1, [r4, #12]
 800a782:	f023 0303 	bic.w	r3, r3, #3
 800a786:	4423      	add	r3, r4
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	68a5      	ldr	r5, [r4, #8]
 800a78c:	f042 0201 	orr.w	r2, r2, #1
 800a790:	60e9      	str	r1, [r5, #12]
 800a792:	4630      	mov	r0, r6
 800a794:	608d      	str	r5, [r1, #8]
 800a796:	605a      	str	r2, [r3, #4]
 800a798:	f000 fa34 	bl	800ac04 <__malloc_unlock>
 800a79c:	3408      	adds	r4, #8
 800a79e:	4620      	mov	r0, r4
 800a7a0:	b003      	add	sp, #12
 800a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a6:	2400      	movs	r4, #0
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	230c      	movs	r3, #12
 800a7ac:	6033      	str	r3, [r6, #0]
 800a7ae:	b003      	add	sp, #12
 800a7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b4:	2180      	movs	r1, #128	; 0x80
 800a7b6:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800a7ba:	203f      	movs	r0, #63	; 0x3f
 800a7bc:	e748      	b.n	800a650 <_malloc_r+0x44>
 800a7be:	4670      	mov	r0, lr
 800a7c0:	e75b      	b.n	800a67a <_malloc_r+0x6e>
 800a7c2:	4423      	add	r3, r4
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	68e1      	ldr	r1, [r4, #12]
 800a7c8:	e7df      	b.n	800a78a <_malloc_r+0x17e>
 800a7ca:	4423      	add	r3, r4
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	f042 0201 	orr.w	r2, r2, #1
 800a7d4:	605a      	str	r2, [r3, #4]
 800a7d6:	3408      	adds	r4, #8
 800a7d8:	f000 fa14 	bl	800ac04 <__malloc_unlock>
 800a7dc:	4620      	mov	r0, r4
 800a7de:	b003      	add	sp, #12
 800a7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e4:	68bc      	ldr	r4, [r7, #8]
 800a7e6:	6863      	ldr	r3, [r4, #4]
 800a7e8:	f023 0803 	bic.w	r8, r3, #3
 800a7ec:	45a8      	cmp	r8, r5
 800a7ee:	d304      	bcc.n	800a7fa <_malloc_r+0x1ee>
 800a7f0:	ebc5 0308 	rsb	r3, r5, r8
 800a7f4:	2b0f      	cmp	r3, #15
 800a7f6:	f300 808c 	bgt.w	800a912 <_malloc_r+0x306>
 800a7fa:	4b55      	ldr	r3, [pc, #340]	; (800a950 <_malloc_r+0x344>)
 800a7fc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800a960 <_malloc_r+0x354>
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	f8d9 3000 	ldr.w	r3, [r9]
 800a806:	442a      	add	r2, r5
 800a808:	3301      	adds	r3, #1
 800a80a:	eb04 0a08 	add.w	sl, r4, r8
 800a80e:	f000 8160 	beq.w	800aad2 <_malloc_r+0x4c6>
 800a812:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a816:	320f      	adds	r2, #15
 800a818:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800a81c:	f022 020f 	bic.w	r2, r2, #15
 800a820:	4611      	mov	r1, r2
 800a822:	4630      	mov	r0, r6
 800a824:	9201      	str	r2, [sp, #4]
 800a826:	f000 f9ef 	bl	800ac08 <_sbrk_r>
 800a82a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a82e:	4683      	mov	fp, r0
 800a830:	9a01      	ldr	r2, [sp, #4]
 800a832:	f000 8158 	beq.w	800aae6 <_malloc_r+0x4da>
 800a836:	4582      	cmp	sl, r0
 800a838:	f200 80fc 	bhi.w	800aa34 <_malloc_r+0x428>
 800a83c:	4b45      	ldr	r3, [pc, #276]	; (800a954 <_malloc_r+0x348>)
 800a83e:	45da      	cmp	sl, fp
 800a840:	6819      	ldr	r1, [r3, #0]
 800a842:	4411      	add	r1, r2
 800a844:	6019      	str	r1, [r3, #0]
 800a846:	f000 8153 	beq.w	800aaf0 <_malloc_r+0x4e4>
 800a84a:	f8d9 0000 	ldr.w	r0, [r9]
 800a84e:	f8df e110 	ldr.w	lr, [pc, #272]	; 800a960 <_malloc_r+0x354>
 800a852:	3001      	adds	r0, #1
 800a854:	bf1b      	ittet	ne
 800a856:	ebca 0a0b 	rsbne	sl, sl, fp
 800a85a:	4451      	addne	r1, sl
 800a85c:	f8ce b000 	streq.w	fp, [lr]
 800a860:	6019      	strne	r1, [r3, #0]
 800a862:	f01b 0107 	ands.w	r1, fp, #7
 800a866:	f000 8117 	beq.w	800aa98 <_malloc_r+0x48c>
 800a86a:	f1c1 0008 	rsb	r0, r1, #8
 800a86e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800a872:	4483      	add	fp, r0
 800a874:	3108      	adds	r1, #8
 800a876:	445a      	add	r2, fp
 800a878:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800a87c:	ebc2 0901 	rsb	r9, r2, r1
 800a880:	4649      	mov	r1, r9
 800a882:	4630      	mov	r0, r6
 800a884:	9301      	str	r3, [sp, #4]
 800a886:	f000 f9bf 	bl	800ac08 <_sbrk_r>
 800a88a:	1c43      	adds	r3, r0, #1
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	f000 813f 	beq.w	800ab10 <_malloc_r+0x504>
 800a892:	ebcb 0200 	rsb	r2, fp, r0
 800a896:	444a      	add	r2, r9
 800a898:	f042 0201 	orr.w	r2, r2, #1
 800a89c:	6819      	ldr	r1, [r3, #0]
 800a89e:	42bc      	cmp	r4, r7
 800a8a0:	4449      	add	r1, r9
 800a8a2:	f8c7 b008 	str.w	fp, [r7, #8]
 800a8a6:	6019      	str	r1, [r3, #0]
 800a8a8:	f8cb 2004 	str.w	r2, [fp, #4]
 800a8ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800a954 <_malloc_r+0x348>
 800a8b0:	d016      	beq.n	800a8e0 <_malloc_r+0x2d4>
 800a8b2:	f1b8 0f0f 	cmp.w	r8, #15
 800a8b6:	f240 80fd 	bls.w	800aab4 <_malloc_r+0x4a8>
 800a8ba:	6862      	ldr	r2, [r4, #4]
 800a8bc:	f1a8 030c 	sub.w	r3, r8, #12
 800a8c0:	f023 0307 	bic.w	r3, r3, #7
 800a8c4:	f002 0201 	and.w	r2, r2, #1
 800a8c8:	18e0      	adds	r0, r4, r3
 800a8ca:	f04f 0e05 	mov.w	lr, #5
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	2b0f      	cmp	r3, #15
 800a8d2:	6062      	str	r2, [r4, #4]
 800a8d4:	f8c0 e004 	str.w	lr, [r0, #4]
 800a8d8:	f8c0 e008 	str.w	lr, [r0, #8]
 800a8dc:	f200 811c 	bhi.w	800ab18 <_malloc_r+0x50c>
 800a8e0:	4b1d      	ldr	r3, [pc, #116]	; (800a958 <_malloc_r+0x34c>)
 800a8e2:	68bc      	ldr	r4, [r7, #8]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	4291      	cmp	r1, r2
 800a8e8:	bf88      	it	hi
 800a8ea:	6019      	strhi	r1, [r3, #0]
 800a8ec:	4b1b      	ldr	r3, [pc, #108]	; (800a95c <_malloc_r+0x350>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	4291      	cmp	r1, r2
 800a8f2:	6862      	ldr	r2, [r4, #4]
 800a8f4:	bf88      	it	hi
 800a8f6:	6019      	strhi	r1, [r3, #0]
 800a8f8:	f022 0203 	bic.w	r2, r2, #3
 800a8fc:	4295      	cmp	r5, r2
 800a8fe:	eba2 0305 	sub.w	r3, r2, r5
 800a902:	d801      	bhi.n	800a908 <_malloc_r+0x2fc>
 800a904:	2b0f      	cmp	r3, #15
 800a906:	dc04      	bgt.n	800a912 <_malloc_r+0x306>
 800a908:	4630      	mov	r0, r6
 800a90a:	f000 f97b 	bl	800ac04 <__malloc_unlock>
 800a90e:	2400      	movs	r4, #0
 800a910:	e745      	b.n	800a79e <_malloc_r+0x192>
 800a912:	f045 0201 	orr.w	r2, r5, #1
 800a916:	f043 0301 	orr.w	r3, r3, #1
 800a91a:	4425      	add	r5, r4
 800a91c:	6062      	str	r2, [r4, #4]
 800a91e:	4630      	mov	r0, r6
 800a920:	60bd      	str	r5, [r7, #8]
 800a922:	3408      	adds	r4, #8
 800a924:	606b      	str	r3, [r5, #4]
 800a926:	f000 f96d 	bl	800ac04 <__malloc_unlock>
 800a92a:	4620      	mov	r0, r4
 800a92c:	b003      	add	sp, #12
 800a92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a932:	2b14      	cmp	r3, #20
 800a934:	d971      	bls.n	800aa1a <_malloc_r+0x40e>
 800a936:	2b54      	cmp	r3, #84	; 0x54
 800a938:	f200 80a4 	bhi.w	800aa84 <_malloc_r+0x478>
 800a93c:	0b28      	lsrs	r0, r5, #12
 800a93e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800a942:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800a946:	306e      	adds	r0, #110	; 0x6e
 800a948:	e682      	b.n	800a650 <_malloc_r+0x44>
 800a94a:	bf00      	nop
 800a94c:	2000043c 	.word	0x2000043c
 800a950:	20002fb0 	.word	0x20002fb0
 800a954:	20002fb4 	.word	0x20002fb4
 800a958:	20002fac 	.word	0x20002fac
 800a95c:	20002fa8 	.word	0x20002fa8
 800a960:	20000848 	.word	0x20000848
 800a964:	0a5a      	lsrs	r2, r3, #9
 800a966:	2a04      	cmp	r2, #4
 800a968:	d95e      	bls.n	800aa28 <_malloc_r+0x41c>
 800a96a:	2a14      	cmp	r2, #20
 800a96c:	f200 80b3 	bhi.w	800aad6 <_malloc_r+0x4ca>
 800a970:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800a974:	0049      	lsls	r1, r1, #1
 800a976:	325b      	adds	r2, #91	; 0x5b
 800a978:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 800a97c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a980:	f1ac 0c08 	sub.w	ip, ip, #8
 800a984:	458c      	cmp	ip, r1
 800a986:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800ab60 <_malloc_r+0x554>
 800a98a:	f000 8088 	beq.w	800aa9e <_malloc_r+0x492>
 800a98e:	684a      	ldr	r2, [r1, #4]
 800a990:	f022 0203 	bic.w	r2, r2, #3
 800a994:	4293      	cmp	r3, r2
 800a996:	d202      	bcs.n	800a99e <_malloc_r+0x392>
 800a998:	6889      	ldr	r1, [r1, #8]
 800a99a:	458c      	cmp	ip, r1
 800a99c:	d1f7      	bne.n	800a98e <_malloc_r+0x382>
 800a99e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a9a8:	60a1      	str	r1, [r4, #8]
 800a9aa:	f8cc 4008 	str.w	r4, [ip, #8]
 800a9ae:	60cc      	str	r4, [r1, #12]
 800a9b0:	e696      	b.n	800a6e0 <_malloc_r+0xd4>
 800a9b2:	f045 0701 	orr.w	r7, r5, #1
 800a9b6:	f042 0301 	orr.w	r3, r2, #1
 800a9ba:	4425      	add	r5, r4
 800a9bc:	6067      	str	r7, [r4, #4]
 800a9be:	4630      	mov	r0, r6
 800a9c0:	614d      	str	r5, [r1, #20]
 800a9c2:	610d      	str	r5, [r1, #16]
 800a9c4:	f8c5 e00c 	str.w	lr, [r5, #12]
 800a9c8:	f8c5 e008 	str.w	lr, [r5, #8]
 800a9cc:	606b      	str	r3, [r5, #4]
 800a9ce:	50aa      	str	r2, [r5, r2]
 800a9d0:	3408      	adds	r4, #8
 800a9d2:	f000 f917 	bl	800ac04 <__malloc_unlock>
 800a9d6:	e6e2      	b.n	800a79e <_malloc_r+0x192>
 800a9d8:	684a      	ldr	r2, [r1, #4]
 800a9da:	e681      	b.n	800a6e0 <_malloc_r+0xd4>
 800a9dc:	f108 0801 	add.w	r8, r8, #1
 800a9e0:	f018 0f03 	tst.w	r8, #3
 800a9e4:	f10c 0c08 	add.w	ip, ip, #8
 800a9e8:	f47f ae8c 	bne.w	800a704 <_malloc_r+0xf8>
 800a9ec:	e030      	b.n	800aa50 <_malloc_r+0x444>
 800a9ee:	68dc      	ldr	r4, [r3, #12]
 800a9f0:	42a3      	cmp	r3, r4
 800a9f2:	bf08      	it	eq
 800a9f4:	3002      	addeq	r0, #2
 800a9f6:	f43f ae40 	beq.w	800a67a <_malloc_r+0x6e>
 800a9fa:	e6c0      	b.n	800a77e <_malloc_r+0x172>
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	440b      	add	r3, r1
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	68c9      	ldr	r1, [r1, #12]
 800aa04:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800aa08:	f042 0201 	orr.w	r2, r2, #1
 800aa0c:	605a      	str	r2, [r3, #4]
 800aa0e:	4630      	mov	r0, r6
 800aa10:	60e9      	str	r1, [r5, #12]
 800aa12:	608d      	str	r5, [r1, #8]
 800aa14:	f000 f8f6 	bl	800ac04 <__malloc_unlock>
 800aa18:	e6c1      	b.n	800a79e <_malloc_r+0x192>
 800aa1a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 800aa1e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800aa22:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800aa26:	e613      	b.n	800a650 <_malloc_r+0x44>
 800aa28:	099a      	lsrs	r2, r3, #6
 800aa2a:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800aa2e:	0049      	lsls	r1, r1, #1
 800aa30:	3238      	adds	r2, #56	; 0x38
 800aa32:	e7a1      	b.n	800a978 <_malloc_r+0x36c>
 800aa34:	42bc      	cmp	r4, r7
 800aa36:	4b4a      	ldr	r3, [pc, #296]	; (800ab60 <_malloc_r+0x554>)
 800aa38:	f43f af00 	beq.w	800a83c <_malloc_r+0x230>
 800aa3c:	689c      	ldr	r4, [r3, #8]
 800aa3e:	6862      	ldr	r2, [r4, #4]
 800aa40:	f022 0203 	bic.w	r2, r2, #3
 800aa44:	e75a      	b.n	800a8fc <_malloc_r+0x2f0>
 800aa46:	f859 3908 	ldr.w	r3, [r9], #-8
 800aa4a:	4599      	cmp	r9, r3
 800aa4c:	f040 8082 	bne.w	800ab54 <_malloc_r+0x548>
 800aa50:	f010 0f03 	tst.w	r0, #3
 800aa54:	f100 30ff 	add.w	r0, r0, #4294967295
 800aa58:	d1f5      	bne.n	800aa46 <_malloc_r+0x43a>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	ea23 0304 	bic.w	r3, r3, r4
 800aa60:	607b      	str	r3, [r7, #4]
 800aa62:	0064      	lsls	r4, r4, #1
 800aa64:	429c      	cmp	r4, r3
 800aa66:	f63f aebd 	bhi.w	800a7e4 <_malloc_r+0x1d8>
 800aa6a:	2c00      	cmp	r4, #0
 800aa6c:	f43f aeba 	beq.w	800a7e4 <_malloc_r+0x1d8>
 800aa70:	421c      	tst	r4, r3
 800aa72:	4640      	mov	r0, r8
 800aa74:	f47f ae42 	bne.w	800a6fc <_malloc_r+0xf0>
 800aa78:	0064      	lsls	r4, r4, #1
 800aa7a:	421c      	tst	r4, r3
 800aa7c:	f100 0004 	add.w	r0, r0, #4
 800aa80:	d0fa      	beq.n	800aa78 <_malloc_r+0x46c>
 800aa82:	e63b      	b.n	800a6fc <_malloc_r+0xf0>
 800aa84:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800aa88:	d818      	bhi.n	800aabc <_malloc_r+0x4b0>
 800aa8a:	0be8      	lsrs	r0, r5, #15
 800aa8c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800aa90:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800aa94:	3077      	adds	r0, #119	; 0x77
 800aa96:	e5db      	b.n	800a650 <_malloc_r+0x44>
 800aa98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aa9c:	e6eb      	b.n	800a876 <_malloc_r+0x26a>
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aaa4:	1092      	asrs	r2, r2, #2
 800aaa6:	fa01 f202 	lsl.w	r2, r1, r2
 800aaaa:	431a      	orrs	r2, r3
 800aaac:	f8c8 2004 	str.w	r2, [r8, #4]
 800aab0:	4661      	mov	r1, ip
 800aab2:	e777      	b.n	800a9a4 <_malloc_r+0x398>
 800aab4:	2301      	movs	r3, #1
 800aab6:	f8cb 3004 	str.w	r3, [fp, #4]
 800aaba:	e725      	b.n	800a908 <_malloc_r+0x2fc>
 800aabc:	f240 5254 	movw	r2, #1364	; 0x554
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d820      	bhi.n	800ab06 <_malloc_r+0x4fa>
 800aac4:	0ca8      	lsrs	r0, r5, #18
 800aac6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800aaca:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800aace:	307c      	adds	r0, #124	; 0x7c
 800aad0:	e5be      	b.n	800a650 <_malloc_r+0x44>
 800aad2:	3210      	adds	r2, #16
 800aad4:	e6a4      	b.n	800a820 <_malloc_r+0x214>
 800aad6:	2a54      	cmp	r2, #84	; 0x54
 800aad8:	d826      	bhi.n	800ab28 <_malloc_r+0x51c>
 800aada:	0b1a      	lsrs	r2, r3, #12
 800aadc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800aae0:	0049      	lsls	r1, r1, #1
 800aae2:	326e      	adds	r2, #110	; 0x6e
 800aae4:	e748      	b.n	800a978 <_malloc_r+0x36c>
 800aae6:	68bc      	ldr	r4, [r7, #8]
 800aae8:	6862      	ldr	r2, [r4, #4]
 800aaea:	f022 0203 	bic.w	r2, r2, #3
 800aaee:	e705      	b.n	800a8fc <_malloc_r+0x2f0>
 800aaf0:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	f47f aea8 	bne.w	800a84a <_malloc_r+0x23e>
 800aafa:	4442      	add	r2, r8
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f042 0201 	orr.w	r2, r2, #1
 800ab02:	605a      	str	r2, [r3, #4]
 800ab04:	e6ec      	b.n	800a8e0 <_malloc_r+0x2d4>
 800ab06:	21fe      	movs	r1, #254	; 0xfe
 800ab08:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800ab0c:	207e      	movs	r0, #126	; 0x7e
 800ab0e:	e59f      	b.n	800a650 <_malloc_r+0x44>
 800ab10:	2201      	movs	r2, #1
 800ab12:	f04f 0900 	mov.w	r9, #0
 800ab16:	e6c1      	b.n	800a89c <_malloc_r+0x290>
 800ab18:	f104 0108 	add.w	r1, r4, #8
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f000 f96d 	bl	800adfc <_free_r>
 800ab22:	f8d9 1000 	ldr.w	r1, [r9]
 800ab26:	e6db      	b.n	800a8e0 <_malloc_r+0x2d4>
 800ab28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ab2c:	d805      	bhi.n	800ab3a <_malloc_r+0x52e>
 800ab2e:	0bda      	lsrs	r2, r3, #15
 800ab30:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800ab34:	0049      	lsls	r1, r1, #1
 800ab36:	3277      	adds	r2, #119	; 0x77
 800ab38:	e71e      	b.n	800a978 <_malloc_r+0x36c>
 800ab3a:	f240 5154 	movw	r1, #1364	; 0x554
 800ab3e:	428a      	cmp	r2, r1
 800ab40:	d805      	bhi.n	800ab4e <_malloc_r+0x542>
 800ab42:	0c9a      	lsrs	r2, r3, #18
 800ab44:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800ab48:	0049      	lsls	r1, r1, #1
 800ab4a:	327c      	adds	r2, #124	; 0x7c
 800ab4c:	e714      	b.n	800a978 <_malloc_r+0x36c>
 800ab4e:	21fe      	movs	r1, #254	; 0xfe
 800ab50:	227e      	movs	r2, #126	; 0x7e
 800ab52:	e711      	b.n	800a978 <_malloc_r+0x36c>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	e784      	b.n	800aa62 <_malloc_r+0x456>
 800ab58:	08e8      	lsrs	r0, r5, #3
 800ab5a:	1c43      	adds	r3, r0, #1
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	e605      	b.n	800a76c <_malloc_r+0x160>
 800ab60:	2000043c 	.word	0x2000043c

0800ab64 <memset>:
 800ab64:	b470      	push	{r4, r5, r6}
 800ab66:	0784      	lsls	r4, r0, #30
 800ab68:	d046      	beq.n	800abf8 <memset+0x94>
 800ab6a:	1e54      	subs	r4, r2, #1
 800ab6c:	2a00      	cmp	r2, #0
 800ab6e:	d041      	beq.n	800abf4 <memset+0x90>
 800ab70:	b2cd      	uxtb	r5, r1
 800ab72:	4603      	mov	r3, r0
 800ab74:	e002      	b.n	800ab7c <memset+0x18>
 800ab76:	1e62      	subs	r2, r4, #1
 800ab78:	b3e4      	cbz	r4, 800abf4 <memset+0x90>
 800ab7a:	4614      	mov	r4, r2
 800ab7c:	f803 5b01 	strb.w	r5, [r3], #1
 800ab80:	079a      	lsls	r2, r3, #30
 800ab82:	d1f8      	bne.n	800ab76 <memset+0x12>
 800ab84:	2c03      	cmp	r4, #3
 800ab86:	d92e      	bls.n	800abe6 <memset+0x82>
 800ab88:	b2cd      	uxtb	r5, r1
 800ab8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800ab8e:	2c0f      	cmp	r4, #15
 800ab90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800ab94:	d919      	bls.n	800abca <memset+0x66>
 800ab96:	4626      	mov	r6, r4
 800ab98:	f103 0210 	add.w	r2, r3, #16
 800ab9c:	3e10      	subs	r6, #16
 800ab9e:	2e0f      	cmp	r6, #15
 800aba0:	f842 5c10 	str.w	r5, [r2, #-16]
 800aba4:	f842 5c0c 	str.w	r5, [r2, #-12]
 800aba8:	f842 5c08 	str.w	r5, [r2, #-8]
 800abac:	f842 5c04 	str.w	r5, [r2, #-4]
 800abb0:	f102 0210 	add.w	r2, r2, #16
 800abb4:	d8f2      	bhi.n	800ab9c <memset+0x38>
 800abb6:	f1a4 0210 	sub.w	r2, r4, #16
 800abba:	f022 020f 	bic.w	r2, r2, #15
 800abbe:	f004 040f 	and.w	r4, r4, #15
 800abc2:	3210      	adds	r2, #16
 800abc4:	2c03      	cmp	r4, #3
 800abc6:	4413      	add	r3, r2
 800abc8:	d90d      	bls.n	800abe6 <memset+0x82>
 800abca:	461e      	mov	r6, r3
 800abcc:	4622      	mov	r2, r4
 800abce:	3a04      	subs	r2, #4
 800abd0:	2a03      	cmp	r2, #3
 800abd2:	f846 5b04 	str.w	r5, [r6], #4
 800abd6:	d8fa      	bhi.n	800abce <memset+0x6a>
 800abd8:	1f22      	subs	r2, r4, #4
 800abda:	f022 0203 	bic.w	r2, r2, #3
 800abde:	3204      	adds	r2, #4
 800abe0:	4413      	add	r3, r2
 800abe2:	f004 0403 	and.w	r4, r4, #3
 800abe6:	b12c      	cbz	r4, 800abf4 <memset+0x90>
 800abe8:	b2c9      	uxtb	r1, r1
 800abea:	441c      	add	r4, r3
 800abec:	f803 1b01 	strb.w	r1, [r3], #1
 800abf0:	42a3      	cmp	r3, r4
 800abf2:	d1fb      	bne.n	800abec <memset+0x88>
 800abf4:	bc70      	pop	{r4, r5, r6}
 800abf6:	4770      	bx	lr
 800abf8:	4614      	mov	r4, r2
 800abfa:	4603      	mov	r3, r0
 800abfc:	e7c2      	b.n	800ab84 <memset+0x20>
 800abfe:	bf00      	nop

0800ac00 <__malloc_lock>:
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop

0800ac04 <__malloc_unlock>:
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop

0800ac08 <_sbrk_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4c07      	ldr	r4, [pc, #28]	; (800ac28 <_sbrk_r+0x20>)
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	4605      	mov	r5, r0
 800ac10:	4608      	mov	r0, r1
 800ac12:	6023      	str	r3, [r4, #0]
 800ac14:	f003 fbf6 	bl	800e404 <_sbrk>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d000      	beq.n	800ac1e <_sbrk_r+0x16>
 800ac1c:	bd38      	pop	{r3, r4, r5, pc}
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0fb      	beq.n	800ac1c <_sbrk_r+0x14>
 800ac24:	602b      	str	r3, [r5, #0]
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	20003aac 	.word	0x20003aac

0800ac2c <strlen>:
 800ac2c:	f020 0103 	bic.w	r1, r0, #3
 800ac30:	f010 0003 	ands.w	r0, r0, #3
 800ac34:	f1c0 0000 	rsb	r0, r0, #0
 800ac38:	f851 3b04 	ldr.w	r3, [r1], #4
 800ac3c:	f100 0c04 	add.w	ip, r0, #4
 800ac40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ac44:	f06f 0200 	mvn.w	r2, #0
 800ac48:	bf1c      	itt	ne
 800ac4a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800ac4e:	4313      	orrne	r3, r2
 800ac50:	f04f 0c01 	mov.w	ip, #1
 800ac54:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800ac58:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800ac5c:	eba3 020c 	sub.w	r2, r3, ip
 800ac60:	ea22 0203 	bic.w	r2, r2, r3
 800ac64:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800ac68:	bf04      	itt	eq
 800ac6a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800ac6e:	3004      	addeq	r0, #4
 800ac70:	d0f4      	beq.n	800ac5c <strlen+0x30>
 800ac72:	f1c2 0100 	rsb	r1, r2, #0
 800ac76:	ea02 0201 	and.w	r2, r2, r1
 800ac7a:	fab2 f282 	clz	r2, r2
 800ac7e:	f1c2 021f 	rsb	r2, r2, #31
 800ac82:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800ac86:	4770      	bx	lr

0800ac88 <_vsnprintf_r>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	2a00      	cmp	r2, #0
 800ac8c:	b09a      	sub	sp, #104	; 0x68
 800ac8e:	4605      	mov	r5, r0
 800ac90:	db2d      	blt.n	800acee <_vsnprintf_r+0x66>
 800ac92:	4614      	mov	r4, r2
 800ac94:	461a      	mov	r2, r3
 800ac96:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac9a:	9100      	str	r1, [sp, #0]
 800ac9c:	9104      	str	r1, [sp, #16]
 800ac9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aca2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800aca6:	d00f      	beq.n	800acc8 <_vsnprintf_r+0x40>
 800aca8:	3c01      	subs	r4, #1
 800acaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800acac:	4669      	mov	r1, sp
 800acae:	9402      	str	r4, [sp, #8]
 800acb0:	9405      	str	r4, [sp, #20]
 800acb2:	f8ad 600e 	strh.w	r6, [sp, #14]
 800acb6:	f000 f989 	bl	800afcc <_svfprintf_r>
 800acba:	1c42      	adds	r2, r0, #1
 800acbc:	db10      	blt.n	800ace0 <_vsnprintf_r+0x58>
 800acbe:	9b00      	ldr	r3, [sp, #0]
 800acc0:	2200      	movs	r2, #0
 800acc2:	701a      	strb	r2, [r3, #0]
 800acc4:	b01a      	add	sp, #104	; 0x68
 800acc6:	bd70      	pop	{r4, r5, r6, pc}
 800acc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800acca:	4669      	mov	r1, sp
 800accc:	9402      	str	r4, [sp, #8]
 800acce:	9405      	str	r4, [sp, #20]
 800acd0:	f8ad 600e 	strh.w	r6, [sp, #14]
 800acd4:	f000 f97a 	bl	800afcc <_svfprintf_r>
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	db04      	blt.n	800ace6 <_vsnprintf_r+0x5e>
 800acdc:	b01a      	add	sp, #104	; 0x68
 800acde:	bd70      	pop	{r4, r5, r6, pc}
 800ace0:	238b      	movs	r3, #139	; 0x8b
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	e7eb      	b.n	800acbe <_vsnprintf_r+0x36>
 800ace6:	238b      	movs	r3, #139	; 0x8b
 800ace8:	602b      	str	r3, [r5, #0]
 800acea:	b01a      	add	sp, #104	; 0x68
 800acec:	bd70      	pop	{r4, r5, r6, pc}
 800acee:	238b      	movs	r3, #139	; 0x8b
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	f04f 30ff 	mov.w	r0, #4294967295
 800acf6:	e7f1      	b.n	800acdc <_vsnprintf_r+0x54>

0800acf8 <vsnprintf>:
 800acf8:	b510      	push	{r4, lr}
 800acfa:	4c06      	ldr	r4, [pc, #24]	; (800ad14 <vsnprintf+0x1c>)
 800acfc:	b082      	sub	sp, #8
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	6824      	ldr	r4, [r4, #0]
 800ad02:	4613      	mov	r3, r2
 800ad04:	460a      	mov	r2, r1
 800ad06:	4601      	mov	r1, r0
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f7ff ffbd 	bl	800ac88 <_vsnprintf_r>
 800ad0e:	b002      	add	sp, #8
 800ad10:	bd10      	pop	{r4, pc}
 800ad12:	bf00      	nop
 800ad14:	20000438 	.word	0x20000438

0800ad18 <register_fini>:
 800ad18:	4b02      	ldr	r3, [pc, #8]	; (800ad24 <register_fini+0xc>)
 800ad1a:	b113      	cbz	r3, 800ad22 <register_fini+0xa>
 800ad1c:	4802      	ldr	r0, [pc, #8]	; (800ad28 <register_fini+0x10>)
 800ad1e:	f000 b805 	b.w	800ad2c <atexit>
 800ad22:	4770      	bx	lr
 800ad24:	00000000 	.word	0x00000000
 800ad28:	0800ad39 	.word	0x0800ad39

0800ad2c <atexit>:
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4601      	mov	r1, r0
 800ad30:	461a      	mov	r2, r3
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 bcfa 	b.w	800c72c <__register_exitproc>

0800ad38 <__libc_fini_array>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d07      	ldr	r5, [pc, #28]	; (800ad58 <__libc_fini_array+0x20>)
 800ad3c:	4c07      	ldr	r4, [pc, #28]	; (800ad5c <__libc_fini_array+0x24>)
 800ad3e:	1b2c      	subs	r4, r5, r4
 800ad40:	10a4      	asrs	r4, r4, #2
 800ad42:	d005      	beq.n	800ad50 <__libc_fini_array+0x18>
 800ad44:	3c01      	subs	r4, #1
 800ad46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ad4a:	4798      	blx	r3
 800ad4c:	2c00      	cmp	r4, #0
 800ad4e:	d1f9      	bne.n	800ad44 <__libc_fini_array+0xc>
 800ad50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad54:	f003 bb6a 	b.w	800e42c <_fini>
 800ad58:	0800edf0 	.word	0x0800edf0
 800ad5c:	0800edec 	.word	0x0800edec

0800ad60 <_malloc_trim_r>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	460c      	mov	r4, r1
 800ad64:	4f22      	ldr	r7, [pc, #136]	; (800adf0 <_malloc_trim_r+0x90>)
 800ad66:	4606      	mov	r6, r0
 800ad68:	f7ff ff4a 	bl	800ac00 <__malloc_lock>
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	685d      	ldr	r5, [r3, #4]
 800ad70:	f025 0503 	bic.w	r5, r5, #3
 800ad74:	1b29      	subs	r1, r5, r4
 800ad76:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800ad7a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800ad7e:	f021 010f 	bic.w	r1, r1, #15
 800ad82:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800ad86:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800ad8a:	db07      	blt.n	800ad9c <_malloc_trim_r+0x3c>
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ff3a 	bl	800ac08 <_sbrk_r>
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	442b      	add	r3, r5
 800ad98:	4298      	cmp	r0, r3
 800ad9a:	d004      	beq.n	800ada6 <_malloc_trim_r+0x46>
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	f7ff ff31 	bl	800ac04 <__malloc_unlock>
 800ada2:	2000      	movs	r0, #0
 800ada4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada6:	4261      	negs	r1, r4
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff ff2d 	bl	800ac08 <_sbrk_r>
 800adae:	3001      	adds	r0, #1
 800adb0:	d00d      	beq.n	800adce <_malloc_trim_r+0x6e>
 800adb2:	4b10      	ldr	r3, [pc, #64]	; (800adf4 <_malloc_trim_r+0x94>)
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	6819      	ldr	r1, [r3, #0]
 800adb8:	1b2d      	subs	r5, r5, r4
 800adba:	f045 0501 	orr.w	r5, r5, #1
 800adbe:	4630      	mov	r0, r6
 800adc0:	1b09      	subs	r1, r1, r4
 800adc2:	6055      	str	r5, [r2, #4]
 800adc4:	6019      	str	r1, [r3, #0]
 800adc6:	f7ff ff1d 	bl	800ac04 <__malloc_unlock>
 800adca:	2001      	movs	r0, #1
 800adcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adce:	2100      	movs	r1, #0
 800add0:	4630      	mov	r0, r6
 800add2:	f7ff ff19 	bl	800ac08 <_sbrk_r>
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	1a83      	subs	r3, r0, r2
 800adda:	2b0f      	cmp	r3, #15
 800addc:	ddde      	ble.n	800ad9c <_malloc_trim_r+0x3c>
 800adde:	4c06      	ldr	r4, [pc, #24]	; (800adf8 <_malloc_trim_r+0x98>)
 800ade0:	4904      	ldr	r1, [pc, #16]	; (800adf4 <_malloc_trim_r+0x94>)
 800ade2:	6824      	ldr	r4, [r4, #0]
 800ade4:	f043 0301 	orr.w	r3, r3, #1
 800ade8:	1b00      	subs	r0, r0, r4
 800adea:	6053      	str	r3, [r2, #4]
 800adec:	6008      	str	r0, [r1, #0]
 800adee:	e7d5      	b.n	800ad9c <_malloc_trim_r+0x3c>
 800adf0:	2000043c 	.word	0x2000043c
 800adf4:	20002fb4 	.word	0x20002fb4
 800adf8:	20000848 	.word	0x20000848

0800adfc <_free_r>:
 800adfc:	2900      	cmp	r1, #0
 800adfe:	d045      	beq.n	800ae8c <_free_r+0x90>
 800ae00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae04:	460d      	mov	r5, r1
 800ae06:	4680      	mov	r8, r0
 800ae08:	f7ff fefa 	bl	800ac00 <__malloc_lock>
 800ae0c:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800ae10:	496a      	ldr	r1, [pc, #424]	; (800afbc <_free_r+0x1c0>)
 800ae12:	f1a5 0408 	sub.w	r4, r5, #8
 800ae16:	f027 0301 	bic.w	r3, r7, #1
 800ae1a:	18e2      	adds	r2, r4, r3
 800ae1c:	688e      	ldr	r6, [r1, #8]
 800ae1e:	6850      	ldr	r0, [r2, #4]
 800ae20:	42b2      	cmp	r2, r6
 800ae22:	f020 0003 	bic.w	r0, r0, #3
 800ae26:	d062      	beq.n	800aeee <_free_r+0xf2>
 800ae28:	07fe      	lsls	r6, r7, #31
 800ae2a:	6050      	str	r0, [r2, #4]
 800ae2c:	d40b      	bmi.n	800ae46 <_free_r+0x4a>
 800ae2e:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800ae32:	f101 0e08 	add.w	lr, r1, #8
 800ae36:	1be4      	subs	r4, r4, r7
 800ae38:	68a5      	ldr	r5, [r4, #8]
 800ae3a:	443b      	add	r3, r7
 800ae3c:	4575      	cmp	r5, lr
 800ae3e:	d06f      	beq.n	800af20 <_free_r+0x124>
 800ae40:	68e7      	ldr	r7, [r4, #12]
 800ae42:	60ef      	str	r7, [r5, #12]
 800ae44:	60bd      	str	r5, [r7, #8]
 800ae46:	1815      	adds	r5, r2, r0
 800ae48:	686d      	ldr	r5, [r5, #4]
 800ae4a:	07ed      	lsls	r5, r5, #31
 800ae4c:	d542      	bpl.n	800aed4 <_free_r+0xd8>
 800ae4e:	f043 0201 	orr.w	r2, r3, #1
 800ae52:	6062      	str	r2, [r4, #4]
 800ae54:	50e3      	str	r3, [r4, r3]
 800ae56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae5a:	d218      	bcs.n	800ae8e <_free_r+0x92>
 800ae5c:	08db      	lsrs	r3, r3, #3
 800ae5e:	6848      	ldr	r0, [r1, #4]
 800ae60:	109d      	asrs	r5, r3, #2
 800ae62:	2201      	movs	r2, #1
 800ae64:	3301      	adds	r3, #1
 800ae66:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800ae6a:	fa02 f505 	lsl.w	r5, r2, r5
 800ae6e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800ae72:	4328      	orrs	r0, r5
 800ae74:	3a08      	subs	r2, #8
 800ae76:	60e2      	str	r2, [r4, #12]
 800ae78:	60a7      	str	r7, [r4, #8]
 800ae7a:	6048      	str	r0, [r1, #4]
 800ae7c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
 800ae80:	60fc      	str	r4, [r7, #12]
 800ae82:	4640      	mov	r0, r8
 800ae84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae88:	f7ff bebc 	b.w	800ac04 <__malloc_unlock>
 800ae8c:	4770      	bx	lr
 800ae8e:	0a5a      	lsrs	r2, r3, #9
 800ae90:	2a04      	cmp	r2, #4
 800ae92:	d853      	bhi.n	800af3c <_free_r+0x140>
 800ae94:	099a      	lsrs	r2, r3, #6
 800ae96:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800ae9a:	007f      	lsls	r7, r7, #1
 800ae9c:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800aea0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800aea4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800aea8:	3808      	subs	r0, #8
 800aeaa:	4290      	cmp	r0, r2
 800aeac:	4943      	ldr	r1, [pc, #268]	; (800afbc <_free_r+0x1c0>)
 800aeae:	d04d      	beq.n	800af4c <_free_r+0x150>
 800aeb0:	6851      	ldr	r1, [r2, #4]
 800aeb2:	f021 0103 	bic.w	r1, r1, #3
 800aeb6:	428b      	cmp	r3, r1
 800aeb8:	d202      	bcs.n	800aec0 <_free_r+0xc4>
 800aeba:	6892      	ldr	r2, [r2, #8]
 800aebc:	4290      	cmp	r0, r2
 800aebe:	d1f7      	bne.n	800aeb0 <_free_r+0xb4>
 800aec0:	68d0      	ldr	r0, [r2, #12]
 800aec2:	60e0      	str	r0, [r4, #12]
 800aec4:	60a2      	str	r2, [r4, #8]
 800aec6:	6084      	str	r4, [r0, #8]
 800aec8:	60d4      	str	r4, [r2, #12]
 800aeca:	4640      	mov	r0, r8
 800aecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aed0:	f7ff be98 	b.w	800ac04 <__malloc_unlock>
 800aed4:	6895      	ldr	r5, [r2, #8]
 800aed6:	4f3a      	ldr	r7, [pc, #232]	; (800afc0 <_free_r+0x1c4>)
 800aed8:	4403      	add	r3, r0
 800aeda:	42bd      	cmp	r5, r7
 800aedc:	d03f      	beq.n	800af5e <_free_r+0x162>
 800aede:	68d0      	ldr	r0, [r2, #12]
 800aee0:	f043 0201 	orr.w	r2, r3, #1
 800aee4:	60e8      	str	r0, [r5, #12]
 800aee6:	6085      	str	r5, [r0, #8]
 800aee8:	6062      	str	r2, [r4, #4]
 800aeea:	50e3      	str	r3, [r4, r3]
 800aeec:	e7b3      	b.n	800ae56 <_free_r+0x5a>
 800aeee:	07ff      	lsls	r7, r7, #31
 800aef0:	4403      	add	r3, r0
 800aef2:	d407      	bmi.n	800af04 <_free_r+0x108>
 800aef4:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800aef8:	1b64      	subs	r4, r4, r5
 800aefa:	68e2      	ldr	r2, [r4, #12]
 800aefc:	68a0      	ldr	r0, [r4, #8]
 800aefe:	442b      	add	r3, r5
 800af00:	60c2      	str	r2, [r0, #12]
 800af02:	6090      	str	r0, [r2, #8]
 800af04:	4a2f      	ldr	r2, [pc, #188]	; (800afc4 <_free_r+0x1c8>)
 800af06:	f043 0001 	orr.w	r0, r3, #1
 800af0a:	6812      	ldr	r2, [r2, #0]
 800af0c:	6060      	str	r0, [r4, #4]
 800af0e:	4293      	cmp	r3, r2
 800af10:	608c      	str	r4, [r1, #8]
 800af12:	d3b6      	bcc.n	800ae82 <_free_r+0x86>
 800af14:	4b2c      	ldr	r3, [pc, #176]	; (800afc8 <_free_r+0x1cc>)
 800af16:	4640      	mov	r0, r8
 800af18:	6819      	ldr	r1, [r3, #0]
 800af1a:	f7ff ff21 	bl	800ad60 <_malloc_trim_r>
 800af1e:	e7b0      	b.n	800ae82 <_free_r+0x86>
 800af20:	1811      	adds	r1, r2, r0
 800af22:	6849      	ldr	r1, [r1, #4]
 800af24:	07c9      	lsls	r1, r1, #31
 800af26:	d444      	bmi.n	800afb2 <_free_r+0x1b6>
 800af28:	6891      	ldr	r1, [r2, #8]
 800af2a:	4403      	add	r3, r0
 800af2c:	68d2      	ldr	r2, [r2, #12]
 800af2e:	f043 0001 	orr.w	r0, r3, #1
 800af32:	60ca      	str	r2, [r1, #12]
 800af34:	6091      	str	r1, [r2, #8]
 800af36:	6060      	str	r0, [r4, #4]
 800af38:	50e3      	str	r3, [r4, r3]
 800af3a:	e7a2      	b.n	800ae82 <_free_r+0x86>
 800af3c:	2a14      	cmp	r2, #20
 800af3e:	d817      	bhi.n	800af70 <_free_r+0x174>
 800af40:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800af44:	007f      	lsls	r7, r7, #1
 800af46:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800af4a:	e7a9      	b.n	800aea0 <_free_r+0xa4>
 800af4c:	10aa      	asrs	r2, r5, #2
 800af4e:	684b      	ldr	r3, [r1, #4]
 800af50:	2501      	movs	r5, #1
 800af52:	fa05 f202 	lsl.w	r2, r5, r2
 800af56:	4313      	orrs	r3, r2
 800af58:	604b      	str	r3, [r1, #4]
 800af5a:	4602      	mov	r2, r0
 800af5c:	e7b1      	b.n	800aec2 <_free_r+0xc6>
 800af5e:	f043 0201 	orr.w	r2, r3, #1
 800af62:	614c      	str	r4, [r1, #20]
 800af64:	610c      	str	r4, [r1, #16]
 800af66:	60e5      	str	r5, [r4, #12]
 800af68:	60a5      	str	r5, [r4, #8]
 800af6a:	6062      	str	r2, [r4, #4]
 800af6c:	50e3      	str	r3, [r4, r3]
 800af6e:	e788      	b.n	800ae82 <_free_r+0x86>
 800af70:	2a54      	cmp	r2, #84	; 0x54
 800af72:	d806      	bhi.n	800af82 <_free_r+0x186>
 800af74:	0b1a      	lsrs	r2, r3, #12
 800af76:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800af7a:	007f      	lsls	r7, r7, #1
 800af7c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800af80:	e78e      	b.n	800aea0 <_free_r+0xa4>
 800af82:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800af86:	d806      	bhi.n	800af96 <_free_r+0x19a>
 800af88:	0bda      	lsrs	r2, r3, #15
 800af8a:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800af8e:	007f      	lsls	r7, r7, #1
 800af90:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800af94:	e784      	b.n	800aea0 <_free_r+0xa4>
 800af96:	f240 5054 	movw	r0, #1364	; 0x554
 800af9a:	4282      	cmp	r2, r0
 800af9c:	d806      	bhi.n	800afac <_free_r+0x1b0>
 800af9e:	0c9a      	lsrs	r2, r3, #18
 800afa0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800afa4:	007f      	lsls	r7, r7, #1
 800afa6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800afaa:	e779      	b.n	800aea0 <_free_r+0xa4>
 800afac:	27fe      	movs	r7, #254	; 0xfe
 800afae:	257e      	movs	r5, #126	; 0x7e
 800afb0:	e776      	b.n	800aea0 <_free_r+0xa4>
 800afb2:	f043 0201 	orr.w	r2, r3, #1
 800afb6:	6062      	str	r2, [r4, #4]
 800afb8:	50e3      	str	r3, [r4, r3]
 800afba:	e762      	b.n	800ae82 <_free_r+0x86>
 800afbc:	2000043c 	.word	0x2000043c
 800afc0:	20000444 	.word	0x20000444
 800afc4:	20000844 	.word	0x20000844
 800afc8:	20002fb0 	.word	0x20002fb0

0800afcc <_svfprintf_r>:
 800afcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd0:	b0c1      	sub	sp, #260	; 0x104
 800afd2:	460c      	mov	r4, r1
 800afd4:	9109      	str	r1, [sp, #36]	; 0x24
 800afd6:	4615      	mov	r5, r2
 800afd8:	930e      	str	r3, [sp, #56]	; 0x38
 800afda:	900a      	str	r0, [sp, #40]	; 0x28
 800afdc:	f002 fbb6 	bl	800d74c <_localeconv_r>
 800afe0:	6803      	ldr	r3, [r0, #0]
 800afe2:	4618      	mov	r0, r3
 800afe4:	9317      	str	r3, [sp, #92]	; 0x5c
 800afe6:	f7ff fe21 	bl	800ac2c <strlen>
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	9016      	str	r0, [sp, #88]	; 0x58
 800afee:	061e      	lsls	r6, r3, #24
 800aff0:	d503      	bpl.n	800affa <_svfprintf_r+0x2e>
 800aff2:	6923      	ldr	r3, [r4, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f001 815c 	beq.w	800c2b2 <_svfprintf_r+0x12e6>
 800affa:	2300      	movs	r3, #0
 800affc:	461a      	mov	r2, r3
 800affe:	46a8      	mov	r8, r5
 800b000:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b004:	f8df a460 	ldr.w	sl, [pc, #1120]	; 800b468 <_svfprintf_r+0x49c>
 800b008:	9312      	str	r3, [sp, #72]	; 0x48
 800b00a:	9319      	str	r3, [sp, #100]	; 0x64
 800b00c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b00e:	9325      	str	r3, [sp, #148]	; 0x94
 800b010:	9324      	str	r3, [sp, #144]	; 0x90
 800b012:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b016:	9214      	str	r2, [sp, #80]	; 0x50
 800b018:	9215      	str	r2, [sp, #84]	; 0x54
 800b01a:	f898 3000 	ldrb.w	r3, [r8]
 800b01e:	4644      	mov	r4, r8
 800b020:	b1eb      	cbz	r3, 800b05e <_svfprintf_r+0x92>
 800b022:	2b25      	cmp	r3, #37	; 0x25
 800b024:	d102      	bne.n	800b02c <_svfprintf_r+0x60>
 800b026:	e01a      	b.n	800b05e <_svfprintf_r+0x92>
 800b028:	2b25      	cmp	r3, #37	; 0x25
 800b02a:	d003      	beq.n	800b034 <_svfprintf_r+0x68>
 800b02c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1f9      	bne.n	800b028 <_svfprintf_r+0x5c>
 800b034:	ebc8 0504 	rsb	r5, r8, r4
 800b038:	b18d      	cbz	r5, 800b05e <_svfprintf_r+0x92>
 800b03a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b03c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b03e:	3301      	adds	r3, #1
 800b040:	442a      	add	r2, r5
 800b042:	2b07      	cmp	r3, #7
 800b044:	f8c9 8000 	str.w	r8, [r9]
 800b048:	f8c9 5004 	str.w	r5, [r9, #4]
 800b04c:	9225      	str	r2, [sp, #148]	; 0x94
 800b04e:	9324      	str	r3, [sp, #144]	; 0x90
 800b050:	f300 8332 	bgt.w	800b6b8 <_svfprintf_r+0x6ec>
 800b054:	f109 0908 	add.w	r9, r9, #8
 800b058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b05a:	442b      	add	r3, r5
 800b05c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b05e:	7823      	ldrb	r3, [r4, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 81ea 	beq.w	800b43a <_svfprintf_r+0x46e>
 800b066:	f04f 3bff 	mov.w	fp, #4294967295
 800b06a:	465d      	mov	r5, fp
 800b06c:	2300      	movs	r3, #0
 800b06e:	461a      	mov	r2, r3
 800b070:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800b074:	4619      	mov	r1, r3
 800b076:	930c      	str	r3, [sp, #48]	; 0x30
 800b078:	9307      	str	r3, [sp, #28]
 800b07a:	7863      	ldrb	r3, [r4, #1]
 800b07c:	f104 0801 	add.w	r8, r4, #1
 800b080:	f108 0801 	add.w	r8, r8, #1
 800b084:	f1a3 0020 	sub.w	r0, r3, #32
 800b088:	2858      	cmp	r0, #88	; 0x58
 800b08a:	f200 8645 	bhi.w	800bd18 <_svfprintf_r+0xd4c>
 800b08e:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b092:	03f3      	.short	0x03f3
 800b094:	06430643 	.word	0x06430643
 800b098:	064303fc 	.word	0x064303fc
 800b09c:	06430643 	.word	0x06430643
 800b0a0:	06430643 	.word	0x06430643
 800b0a4:	00590643 	.word	0x00590643
 800b0a8:	06430404 	.word	0x06430404
 800b0ac:	03d00066 	.word	0x03d00066
 800b0b0:	03ec0643 	.word	0x03ec0643
 800b0b4:	05bc05bc 	.word	0x05bc05bc
 800b0b8:	05bc05bc 	.word	0x05bc05bc
 800b0bc:	05bc05bc 	.word	0x05bc05bc
 800b0c0:	05bc05bc 	.word	0x05bc05bc
 800b0c4:	064305bc 	.word	0x064305bc
 800b0c8:	06430643 	.word	0x06430643
 800b0cc:	06430643 	.word	0x06430643
 800b0d0:	06430643 	.word	0x06430643
 800b0d4:	06430643 	.word	0x06430643
 800b0d8:	05e20643 	.word	0x05e20643
 800b0dc:	064304f7 	.word	0x064304f7
 800b0e0:	064304f7 	.word	0x064304f7
 800b0e4:	06430643 	.word	0x06430643
 800b0e8:	05420643 	.word	0x05420643
 800b0ec:	06430643 	.word	0x06430643
 800b0f0:	0643054a 	.word	0x0643054a
 800b0f4:	06430643 	.word	0x06430643
 800b0f8:	06430643 	.word	0x06430643
 800b0fc:	06430574 	.word	0x06430574
 800b100:	05cd0643 	.word	0x05cd0643
 800b104:	06430643 	.word	0x06430643
 800b108:	06430643 	.word	0x06430643
 800b10c:	06430643 	.word	0x06430643
 800b110:	06430643 	.word	0x06430643
 800b114:	06430643 	.word	0x06430643
 800b118:	060e061d 	.word	0x060e061d
 800b11c:	04f704f7 	.word	0x04f704f7
 800b120:	061504f7 	.word	0x061504f7
 800b124:	0643060e 	.word	0x0643060e
 800b128:	04a30643 	.word	0x04a30643
 800b12c:	05a80643 	.word	0x05a80643
 800b130:	006d04ae 	.word	0x006d04ae
 800b134:	0643040a 	.word	0x0643040a
 800b138:	06430412 	.word	0x06430412
 800b13c:	06430435 	.word	0x06430435
 800b140:	04700643 	.word	0x04700643
 800b144:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	930c      	str	r3, [sp, #48]	; 0x30
 800b14c:	4623      	mov	r3, r4
 800b14e:	2800      	cmp	r0, #0
 800b150:	f103 0304 	add.w	r3, r3, #4
 800b154:	930e      	str	r3, [sp, #56]	; 0x38
 800b156:	da06      	bge.n	800b166 <_svfprintf_r+0x19a>
 800b158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b15a:	425b      	negs	r3, r3
 800b15c:	930c      	str	r3, [sp, #48]	; 0x30
 800b15e:	9b07      	ldr	r3, [sp, #28]
 800b160:	f043 0304 	orr.w	r3, r3, #4
 800b164:	9307      	str	r3, [sp, #28]
 800b166:	f898 3000 	ldrb.w	r3, [r8]
 800b16a:	e789      	b.n	800b080 <_svfprintf_r+0xb4>
 800b16c:	46ab      	mov	fp, r5
 800b16e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b170:	2700      	movs	r7, #0
 800b172:	9807      	ldr	r0, [sp, #28]
 800b174:	2130      	movs	r1, #48	; 0x30
 800b176:	2378      	movs	r3, #120	; 0x78
 800b178:	45bb      	cmp	fp, r7
 800b17a:	6814      	ldr	r4, [r2, #0]
 800b17c:	f88d 1070 	strb.w	r1, [sp, #112]	; 0x70
 800b180:	f102 0204 	add.w	r2, r2, #4
 800b184:	f04f 0500 	mov.w	r5, #0
 800b188:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 800b18c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b190:	f040 0102 	orr.w	r1, r0, #2
 800b194:	f2c0 863d 	blt.w	800be12 <_svfprintf_r+0xe46>
 800b198:	f020 0180 	bic.w	r1, r0, #128	; 0x80
 800b19c:	f041 0102 	orr.w	r1, r1, #2
 800b1a0:	9107      	str	r1, [sp, #28]
 800b1a2:	ea54 0105 	orrs.w	r1, r4, r5
 800b1a6:	920e      	str	r2, [sp, #56]	; 0x38
 800b1a8:	9311      	str	r3, [sp, #68]	; 0x44
 800b1aa:	48ad      	ldr	r0, [pc, #692]	; (800b460 <_svfprintf_r+0x494>)
 800b1ac:	f000 8131 	beq.w	800b412 <_svfprintf_r+0x446>
 800b1b0:	ae30      	add	r6, sp, #192	; 0xc0
 800b1b2:	0923      	lsrs	r3, r4, #4
 800b1b4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800b1b8:	0929      	lsrs	r1, r5, #4
 800b1ba:	f004 020f 	and.w	r2, r4, #15
 800b1be:	460d      	mov	r5, r1
 800b1c0:	461c      	mov	r4, r3
 800b1c2:	5c83      	ldrb	r3, [r0, r2]
 800b1c4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800b1c8:	ea54 0305 	orrs.w	r3, r4, r5
 800b1cc:	d1f1      	bne.n	800b1b2 <_svfprintf_r+0x1e6>
 800b1ce:	ab30      	add	r3, sp, #192	; 0xc0
 800b1d0:	1b9b      	subs	r3, r3, r6
 800b1d2:	930d      	str	r3, [sp, #52]	; 0x34
 800b1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1d6:	455b      	cmp	r3, fp
 800b1d8:	bfb8      	it	lt
 800b1da:	465b      	movlt	r3, fp
 800b1dc:	9308      	str	r3, [sp, #32]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b1e2:	b117      	cbz	r7, 800b1ea <_svfprintf_r+0x21e>
 800b1e4:	9b08      	ldr	r3, [sp, #32]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	9308      	str	r3, [sp, #32]
 800b1ea:	9b07      	ldr	r3, [sp, #28]
 800b1ec:	f013 0302 	ands.w	r3, r3, #2
 800b1f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1f2:	d002      	beq.n	800b1fa <_svfprintf_r+0x22e>
 800b1f4:	9b08      	ldr	r3, [sp, #32]
 800b1f6:	3302      	adds	r3, #2
 800b1f8:	9308      	str	r3, [sp, #32]
 800b1fa:	9b07      	ldr	r3, [sp, #28]
 800b1fc:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800b200:	9310      	str	r3, [sp, #64]	; 0x40
 800b202:	f040 8118 	bne.w	800b436 <_svfprintf_r+0x46a>
 800b206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b208:	9a08      	ldr	r2, [sp, #32]
 800b20a:	1a9d      	subs	r5, r3, r2
 800b20c:	2d00      	cmp	r5, #0
 800b20e:	f340 8112 	ble.w	800b436 <_svfprintf_r+0x46a>
 800b212:	2d10      	cmp	r5, #16
 800b214:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b216:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b218:	4f92      	ldr	r7, [pc, #584]	; (800b464 <_svfprintf_r+0x498>)
 800b21a:	dd27      	ble.n	800b26c <_svfprintf_r+0x2a0>
 800b21c:	9618      	str	r6, [sp, #96]	; 0x60
 800b21e:	4648      	mov	r0, r9
 800b220:	2410      	movs	r4, #16
 800b222:	46b9      	mov	r9, r7
 800b224:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b226:	462f      	mov	r7, r5
 800b228:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b22a:	e004      	b.n	800b236 <_svfprintf_r+0x26a>
 800b22c:	3f10      	subs	r7, #16
 800b22e:	2f10      	cmp	r7, #16
 800b230:	f100 0008 	add.w	r0, r0, #8
 800b234:	dd16      	ble.n	800b264 <_svfprintf_r+0x298>
 800b236:	3201      	adds	r2, #1
 800b238:	4b8a      	ldr	r3, [pc, #552]	; (800b464 <_svfprintf_r+0x498>)
 800b23a:	3110      	adds	r1, #16
 800b23c:	2a07      	cmp	r2, #7
 800b23e:	9125      	str	r1, [sp, #148]	; 0x94
 800b240:	9224      	str	r2, [sp, #144]	; 0x90
 800b242:	e880 0018 	stmia.w	r0, {r3, r4}
 800b246:	ddf1      	ble.n	800b22c <_svfprintf_r+0x260>
 800b248:	aa23      	add	r2, sp, #140	; 0x8c
 800b24a:	4631      	mov	r1, r6
 800b24c:	4628      	mov	r0, r5
 800b24e:	f002 fde7 	bl	800de20 <__ssprint_r>
 800b252:	2800      	cmp	r0, #0
 800b254:	f040 80f8 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b258:	3f10      	subs	r7, #16
 800b25a:	2f10      	cmp	r7, #16
 800b25c:	a830      	add	r0, sp, #192	; 0xc0
 800b25e:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b260:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b262:	dce8      	bgt.n	800b236 <_svfprintf_r+0x26a>
 800b264:	463d      	mov	r5, r7
 800b266:	464f      	mov	r7, r9
 800b268:	4681      	mov	r9, r0
 800b26a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b26c:	3201      	adds	r2, #1
 800b26e:	186c      	adds	r4, r5, r1
 800b270:	2a07      	cmp	r2, #7
 800b272:	9425      	str	r4, [sp, #148]	; 0x94
 800b274:	9224      	str	r2, [sp, #144]	; 0x90
 800b276:	f8c9 7000 	str.w	r7, [r9]
 800b27a:	f8c9 5004 	str.w	r5, [r9, #4]
 800b27e:	f300 80d0 	bgt.w	800b422 <_svfprintf_r+0x456>
 800b282:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b286:	f109 0908 	add.w	r9, r9, #8
 800b28a:	b177      	cbz	r7, 800b2aa <_svfprintf_r+0x2de>
 800b28c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b28e:	3401      	adds	r4, #1
 800b290:	3301      	adds	r3, #1
 800b292:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 800b296:	2201      	movs	r2, #1
 800b298:	2b07      	cmp	r3, #7
 800b29a:	9425      	str	r4, [sp, #148]	; 0x94
 800b29c:	9324      	str	r3, [sp, #144]	; 0x90
 800b29e:	e889 0006 	stmia.w	r9, {r1, r2}
 800b2a2:	f300 8220 	bgt.w	800b6e6 <_svfprintf_r+0x71a>
 800b2a6:	f109 0908 	add.w	r9, r9, #8
 800b2aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2ac:	b16b      	cbz	r3, 800b2ca <_svfprintf_r+0x2fe>
 800b2ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b2b0:	3402      	adds	r4, #2
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	a91c      	add	r1, sp, #112	; 0x70
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	2b07      	cmp	r3, #7
 800b2ba:	9425      	str	r4, [sp, #148]	; 0x94
 800b2bc:	9324      	str	r3, [sp, #144]	; 0x90
 800b2be:	e889 0006 	stmia.w	r9, {r1, r2}
 800b2c2:	f300 821c 	bgt.w	800b6fe <_svfprintf_r+0x732>
 800b2c6:	f109 0908 	add.w	r9, r9, #8
 800b2ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2cc:	2b80      	cmp	r3, #128	; 0x80
 800b2ce:	f000 812c 	beq.w	800b52a <_svfprintf_r+0x55e>
 800b2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d4:	ebc3 070b 	rsb	r7, r3, fp
 800b2d8:	2f00      	cmp	r7, #0
 800b2da:	dd33      	ble.n	800b344 <_svfprintf_r+0x378>
 800b2dc:	4a62      	ldr	r2, [pc, #392]	; (800b468 <_svfprintf_r+0x49c>)
 800b2de:	2f10      	cmp	r7, #16
 800b2e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b2e2:	920f      	str	r2, [sp, #60]	; 0x3c
 800b2e4:	dd22      	ble.n	800b32c <_svfprintf_r+0x360>
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	f04f 0b10 	mov.w	fp, #16
 800b2ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b2ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b2f0:	e004      	b.n	800b2fc <_svfprintf_r+0x330>
 800b2f2:	3f10      	subs	r7, #16
 800b2f4:	2f10      	cmp	r7, #16
 800b2f6:	f109 0908 	add.w	r9, r9, #8
 800b2fa:	dd16      	ble.n	800b32a <_svfprintf_r+0x35e>
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	3210      	adds	r2, #16
 800b300:	2b07      	cmp	r3, #7
 800b302:	9225      	str	r2, [sp, #148]	; 0x94
 800b304:	9324      	str	r3, [sp, #144]	; 0x90
 800b306:	e889 0c00 	stmia.w	r9, {sl, fp}
 800b30a:	ddf2      	ble.n	800b2f2 <_svfprintf_r+0x326>
 800b30c:	aa23      	add	r2, sp, #140	; 0x8c
 800b30e:	4621      	mov	r1, r4
 800b310:	4628      	mov	r0, r5
 800b312:	f002 fd85 	bl	800de20 <__ssprint_r>
 800b316:	2800      	cmp	r0, #0
 800b318:	f040 8096 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b31c:	3f10      	subs	r7, #16
 800b31e:	2f10      	cmp	r7, #16
 800b320:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b324:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b326:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b328:	dce8      	bgt.n	800b2fc <_svfprintf_r+0x330>
 800b32a:	4614      	mov	r4, r2
 800b32c:	3301      	adds	r3, #1
 800b32e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b330:	443c      	add	r4, r7
 800b332:	2b07      	cmp	r3, #7
 800b334:	9425      	str	r4, [sp, #148]	; 0x94
 800b336:	9324      	str	r3, [sp, #144]	; 0x90
 800b338:	e889 0084 	stmia.w	r9, {r2, r7}
 800b33c:	f300 81c7 	bgt.w	800b6ce <_svfprintf_r+0x702>
 800b340:	f109 0908 	add.w	r9, r9, #8
 800b344:	9b07      	ldr	r3, [sp, #28]
 800b346:	05da      	lsls	r2, r3, #23
 800b348:	f100 8090 	bmi.w	800b46c <_svfprintf_r+0x4a0>
 800b34c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b34e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b350:	3301      	adds	r3, #1
 800b352:	440c      	add	r4, r1
 800b354:	2b07      	cmp	r3, #7
 800b356:	9425      	str	r4, [sp, #148]	; 0x94
 800b358:	f8c9 6000 	str.w	r6, [r9]
 800b35c:	f8c9 1004 	str.w	r1, [r9, #4]
 800b360:	9324      	str	r3, [sp, #144]	; 0x90
 800b362:	f300 81e2 	bgt.w	800b72a <_svfprintf_r+0x75e>
 800b366:	f109 0908 	add.w	r9, r9, #8
 800b36a:	9b07      	ldr	r3, [sp, #28]
 800b36c:	0759      	lsls	r1, r3, #29
 800b36e:	d536      	bpl.n	800b3de <_svfprintf_r+0x412>
 800b370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b372:	9a08      	ldr	r2, [sp, #32]
 800b374:	1a9d      	subs	r5, r3, r2
 800b376:	2d00      	cmp	r5, #0
 800b378:	dd31      	ble.n	800b3de <_svfprintf_r+0x412>
 800b37a:	2d10      	cmp	r5, #16
 800b37c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b37e:	4f39      	ldr	r7, [pc, #228]	; (800b464 <_svfprintf_r+0x498>)
 800b380:	dd22      	ble.n	800b3c8 <_svfprintf_r+0x3fc>
 800b382:	4622      	mov	r2, r4
 800b384:	2610      	movs	r6, #16
 800b386:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b38a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b38c:	e004      	b.n	800b398 <_svfprintf_r+0x3cc>
 800b38e:	3d10      	subs	r5, #16
 800b390:	2d10      	cmp	r5, #16
 800b392:	f109 0908 	add.w	r9, r9, #8
 800b396:	dd16      	ble.n	800b3c6 <_svfprintf_r+0x3fa>
 800b398:	3301      	adds	r3, #1
 800b39a:	4932      	ldr	r1, [pc, #200]	; (800b464 <_svfprintf_r+0x498>)
 800b39c:	3210      	adds	r2, #16
 800b39e:	2b07      	cmp	r3, #7
 800b3a0:	9225      	str	r2, [sp, #148]	; 0x94
 800b3a2:	9324      	str	r3, [sp, #144]	; 0x90
 800b3a4:	e889 0042 	stmia.w	r9, {r1, r6}
 800b3a8:	ddf1      	ble.n	800b38e <_svfprintf_r+0x3c2>
 800b3aa:	aa23      	add	r2, sp, #140	; 0x8c
 800b3ac:	4621      	mov	r1, r4
 800b3ae:	4658      	mov	r0, fp
 800b3b0:	f002 fd36 	bl	800de20 <__ssprint_r>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d147      	bne.n	800b448 <_svfprintf_r+0x47c>
 800b3b8:	3d10      	subs	r5, #16
 800b3ba:	2d10      	cmp	r5, #16
 800b3bc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b3c0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b3c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b3c4:	dce8      	bgt.n	800b398 <_svfprintf_r+0x3cc>
 800b3c6:	4614      	mov	r4, r2
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	442c      	add	r4, r5
 800b3cc:	2b07      	cmp	r3, #7
 800b3ce:	9425      	str	r4, [sp, #148]	; 0x94
 800b3d0:	9324      	str	r3, [sp, #144]	; 0x90
 800b3d2:	f8c9 7000 	str.w	r7, [r9]
 800b3d6:	f8c9 5004 	str.w	r5, [r9, #4]
 800b3da:	f300 8492 	bgt.w	800bd02 <_svfprintf_r+0xd36>
 800b3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3e2:	9908      	ldr	r1, [sp, #32]
 800b3e4:	428a      	cmp	r2, r1
 800b3e6:	bfac      	ite	ge
 800b3e8:	189b      	addge	r3, r3, r2
 800b3ea:	185b      	addlt	r3, r3, r1
 800b3ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3ee:	2c00      	cmp	r4, #0
 800b3f0:	f040 8159 	bne.w	800b6a6 <_svfprintf_r+0x6da>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9324      	str	r3, [sp, #144]	; 0x90
 800b3f8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b3fc:	e60d      	b.n	800b01a <_svfprintf_r+0x4e>
 800b3fe:	2700      	movs	r7, #0
 800b400:	45bb      	cmp	fp, r7
 800b402:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b406:	f2c0 850e 	blt.w	800be26 <_svfprintf_r+0xe5a>
 800b40a:	9b07      	ldr	r3, [sp, #28]
 800b40c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b410:	9307      	str	r3, [sp, #28]
 800b412:	f1bb 0f00 	cmp.w	fp, #0
 800b416:	f000 846c 	beq.w	800bcf2 <_svfprintf_r+0xd26>
 800b41a:	2400      	movs	r4, #0
 800b41c:	2500      	movs	r5, #0
 800b41e:	2700      	movs	r7, #0
 800b420:	e6c6      	b.n	800b1b0 <_svfprintf_r+0x1e4>
 800b422:	aa23      	add	r2, sp, #140	; 0x8c
 800b424:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b426:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b428:	f002 fcfa 	bl	800de20 <__ssprint_r>
 800b42c:	b960      	cbnz	r0, 800b448 <_svfprintf_r+0x47c>
 800b42e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b432:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b436:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b438:	e727      	b.n	800b28a <_svfprintf_r+0x2be>
 800b43a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b43c:	b123      	cbz	r3, 800b448 <_svfprintf_r+0x47c>
 800b43e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b440:	aa23      	add	r2, sp, #140	; 0x8c
 800b442:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b444:	f002 fcec 	bl	800de20 <__ssprint_r>
 800b448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44a:	899b      	ldrh	r3, [r3, #12]
 800b44c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b452:	bf18      	it	ne
 800b454:	f04f 33ff 	movne.w	r3, #4294967295
 800b458:	4618      	mov	r0, r3
 800b45a:	b041      	add	sp, #260	; 0x104
 800b45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b460:	0800eb88 	.word	0x0800eb88
 800b464:	0800eba8 	.word	0x0800eba8
 800b468:	0800eb54 	.word	0x0800eb54
 800b46c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b46e:	2b65      	cmp	r3, #101	; 0x65
 800b470:	f340 809f 	ble.w	800b5b2 <_svfprintf_r+0x5e6>
 800b474:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b476:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b478:	2200      	movs	r2, #0
 800b47a:	2300      	movs	r3, #0
 800b47c:	f7f5 fb0c 	bl	8000a98 <__aeabi_dcmpeq>
 800b480:	2800      	cmp	r0, #0
 800b482:	f000 8163 	beq.w	800b74c <_svfprintf_r+0x780>
 800b486:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b488:	49ae      	ldr	r1, [pc, #696]	; (800b744 <_svfprintf_r+0x778>)
 800b48a:	3301      	adds	r3, #1
 800b48c:	3401      	adds	r4, #1
 800b48e:	2201      	movs	r2, #1
 800b490:	2b07      	cmp	r3, #7
 800b492:	9425      	str	r4, [sp, #148]	; 0x94
 800b494:	9324      	str	r3, [sp, #144]	; 0x90
 800b496:	e889 0006 	stmia.w	r9, {r1, r2}
 800b49a:	f300 8453 	bgt.w	800bd44 <_svfprintf_r+0xd78>
 800b49e:	f109 0908 	add.w	r9, r9, #8
 800b4a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	db03      	blt.n	800b4b2 <_svfprintf_r+0x4e6>
 800b4aa:	9b07      	ldr	r3, [sp, #28]
 800b4ac:	07db      	lsls	r3, r3, #31
 800b4ae:	f57f af5c 	bpl.w	800b36a <_svfprintf_r+0x39e>
 800b4b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b4b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b4ba:	440c      	add	r4, r1
 800b4bc:	2b07      	cmp	r3, #7
 800b4be:	9425      	str	r4, [sp, #148]	; 0x94
 800b4c0:	f8c9 2000 	str.w	r2, [r9]
 800b4c4:	f8c9 1004 	str.w	r1, [r9, #4]
 800b4c8:	9324      	str	r3, [sp, #144]	; 0x90
 800b4ca:	f300 86e5 	bgt.w	800c298 <_svfprintf_r+0x12cc>
 800b4ce:	f109 0908 	add.w	r9, r9, #8
 800b4d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4d4:	1e5d      	subs	r5, r3, #1
 800b4d6:	2d00      	cmp	r5, #0
 800b4d8:	f77f af47 	ble.w	800b36a <_svfprintf_r+0x39e>
 800b4dc:	4a9a      	ldr	r2, [pc, #616]	; (800b748 <_svfprintf_r+0x77c>)
 800b4de:	2d10      	cmp	r5, #16
 800b4e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b4e2:	920f      	str	r2, [sp, #60]	; 0x3c
 800b4e4:	f340 8117 	ble.w	800b716 <_svfprintf_r+0x74a>
 800b4e8:	2610      	movs	r6, #16
 800b4ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b4ec:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800b4f0:	e005      	b.n	800b4fe <_svfprintf_r+0x532>
 800b4f2:	f109 0908 	add.w	r9, r9, #8
 800b4f6:	3d10      	subs	r5, #16
 800b4f8:	2d10      	cmp	r5, #16
 800b4fa:	f340 810c 	ble.w	800b716 <_svfprintf_r+0x74a>
 800b4fe:	3301      	adds	r3, #1
 800b500:	3410      	adds	r4, #16
 800b502:	2b07      	cmp	r3, #7
 800b504:	9425      	str	r4, [sp, #148]	; 0x94
 800b506:	9324      	str	r3, [sp, #144]	; 0x90
 800b508:	f8c9 a000 	str.w	sl, [r9]
 800b50c:	f8c9 6004 	str.w	r6, [r9, #4]
 800b510:	ddef      	ble.n	800b4f2 <_svfprintf_r+0x526>
 800b512:	aa23      	add	r2, sp, #140	; 0x8c
 800b514:	4659      	mov	r1, fp
 800b516:	4638      	mov	r0, r7
 800b518:	f002 fc82 	bl	800de20 <__ssprint_r>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d193      	bne.n	800b448 <_svfprintf_r+0x47c>
 800b520:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b524:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b526:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b528:	e7e5      	b.n	800b4f6 <_svfprintf_r+0x52a>
 800b52a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b52c:	9a08      	ldr	r2, [sp, #32]
 800b52e:	1a9f      	subs	r7, r3, r2
 800b530:	2f00      	cmp	r7, #0
 800b532:	f77f aece 	ble.w	800b2d2 <_svfprintf_r+0x306>
 800b536:	4a84      	ldr	r2, [pc, #528]	; (800b748 <_svfprintf_r+0x77c>)
 800b538:	2f10      	cmp	r7, #16
 800b53a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b53c:	920f      	str	r2, [sp, #60]	; 0x3c
 800b53e:	dd2b      	ble.n	800b598 <_svfprintf_r+0x5cc>
 800b540:	464a      	mov	r2, r9
 800b542:	4621      	mov	r1, r4
 800b544:	46b9      	mov	r9, r7
 800b546:	2510      	movs	r5, #16
 800b548:	4637      	mov	r7, r6
 800b54a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b54c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b54e:	e006      	b.n	800b55e <_svfprintf_r+0x592>
 800b550:	f1a9 0910 	sub.w	r9, r9, #16
 800b554:	f1b9 0f10 	cmp.w	r9, #16
 800b558:	f102 0208 	add.w	r2, r2, #8
 800b55c:	dd18      	ble.n	800b590 <_svfprintf_r+0x5c4>
 800b55e:	3301      	adds	r3, #1
 800b560:	3110      	adds	r1, #16
 800b562:	2b07      	cmp	r3, #7
 800b564:	9125      	str	r1, [sp, #148]	; 0x94
 800b566:	9324      	str	r3, [sp, #144]	; 0x90
 800b568:	f8c2 a000 	str.w	sl, [r2]
 800b56c:	6055      	str	r5, [r2, #4]
 800b56e:	ddef      	ble.n	800b550 <_svfprintf_r+0x584>
 800b570:	aa23      	add	r2, sp, #140	; 0x8c
 800b572:	4631      	mov	r1, r6
 800b574:	4620      	mov	r0, r4
 800b576:	f002 fc53 	bl	800de20 <__ssprint_r>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	f47f af64 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b580:	f1a9 0910 	sub.w	r9, r9, #16
 800b584:	f1b9 0f10 	cmp.w	r9, #16
 800b588:	aa30      	add	r2, sp, #192	; 0xc0
 800b58a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b58c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b58e:	dce6      	bgt.n	800b55e <_svfprintf_r+0x592>
 800b590:	463e      	mov	r6, r7
 800b592:	460c      	mov	r4, r1
 800b594:	464f      	mov	r7, r9
 800b596:	4691      	mov	r9, r2
 800b598:	3301      	adds	r3, #1
 800b59a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b59c:	443c      	add	r4, r7
 800b59e:	2b07      	cmp	r3, #7
 800b5a0:	9425      	str	r4, [sp, #148]	; 0x94
 800b5a2:	9324      	str	r3, [sp, #144]	; 0x90
 800b5a4:	e889 0084 	stmia.w	r9, {r2, r7}
 800b5a8:	f300 852b 	bgt.w	800c002 <_svfprintf_r+0x1036>
 800b5ac:	f109 0908 	add.w	r9, r9, #8
 800b5b0:	e68f      	b.n	800b2d2 <_svfprintf_r+0x306>
 800b5b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5b4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	f104 0401 	add.w	r4, r4, #1
 800b5bc:	f105 0501 	add.w	r5, r5, #1
 800b5c0:	f340 84e8 	ble.w	800bf94 <_svfprintf_r+0xfc8>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	2d07      	cmp	r5, #7
 800b5c8:	9425      	str	r4, [sp, #148]	; 0x94
 800b5ca:	f8c9 6000 	str.w	r6, [r9]
 800b5ce:	9524      	str	r5, [sp, #144]	; 0x90
 800b5d0:	f8c9 3004 	str.w	r3, [r9, #4]
 800b5d4:	f300 84f9 	bgt.w	800bfca <_svfprintf_r+0xffe>
 800b5d8:	f109 0908 	add.w	r9, r9, #8
 800b5dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b5de:	3501      	adds	r5, #1
 800b5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5e2:	4414      	add	r4, r2
 800b5e4:	2d07      	cmp	r5, #7
 800b5e6:	9425      	str	r4, [sp, #148]	; 0x94
 800b5e8:	9524      	str	r5, [sp, #144]	; 0x90
 800b5ea:	f8c9 3000 	str.w	r3, [r9]
 800b5ee:	f8c9 2004 	str.w	r2, [r9, #4]
 800b5f2:	f300 84f8 	bgt.w	800bfe6 <_svfprintf_r+0x101a>
 800b5f6:	f109 0908 	add.w	r9, r9, #8
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b5fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b600:	2200      	movs	r2, #0
 800b602:	f7f5 fa49 	bl	8000a98 <__aeabi_dcmpeq>
 800b606:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b608:	2800      	cmp	r0, #0
 800b60a:	f000 80ea 	beq.w	800b7e2 <_svfprintf_r+0x816>
 800b60e:	1e5e      	subs	r6, r3, #1
 800b610:	2e00      	cmp	r6, #0
 800b612:	f340 80f5 	ble.w	800b800 <_svfprintf_r+0x834>
 800b616:	4b4c      	ldr	r3, [pc, #304]	; (800b748 <_svfprintf_r+0x77c>)
 800b618:	2e10      	cmp	r6, #16
 800b61a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b61c:	dd2c      	ble.n	800b678 <_svfprintf_r+0x6ac>
 800b61e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800b622:	2710      	movs	r7, #16
 800b624:	46b0      	mov	r8, r6
 800b626:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b62a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b62c:	e006      	b.n	800b63c <_svfprintf_r+0x670>
 800b62e:	f1a8 0810 	sub.w	r8, r8, #16
 800b632:	f1b8 0f10 	cmp.w	r8, #16
 800b636:	f109 0908 	add.w	r9, r9, #8
 800b63a:	dd1a      	ble.n	800b672 <_svfprintf_r+0x6a6>
 800b63c:	3501      	adds	r5, #1
 800b63e:	3410      	adds	r4, #16
 800b640:	2d07      	cmp	r5, #7
 800b642:	9425      	str	r4, [sp, #148]	; 0x94
 800b644:	9524      	str	r5, [sp, #144]	; 0x90
 800b646:	f8c9 a000 	str.w	sl, [r9]
 800b64a:	f8c9 7004 	str.w	r7, [r9, #4]
 800b64e:	ddee      	ble.n	800b62e <_svfprintf_r+0x662>
 800b650:	aa23      	add	r2, sp, #140	; 0x8c
 800b652:	4631      	mov	r1, r6
 800b654:	4658      	mov	r0, fp
 800b656:	f002 fbe3 	bl	800de20 <__ssprint_r>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	f47f aef4 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b660:	f1a8 0810 	sub.w	r8, r8, #16
 800b664:	f1b8 0f10 	cmp.w	r8, #16
 800b668:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b66c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b66e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b670:	dce4      	bgt.n	800b63c <_svfprintf_r+0x670>
 800b672:	4646      	mov	r6, r8
 800b674:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800b678:	3501      	adds	r5, #1
 800b67a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b67c:	4434      	add	r4, r6
 800b67e:	2d07      	cmp	r5, #7
 800b680:	9425      	str	r4, [sp, #148]	; 0x94
 800b682:	9524      	str	r5, [sp, #144]	; 0x90
 800b684:	e889 0048 	stmia.w	r9, {r3, r6}
 800b688:	f340 80b8 	ble.w	800b7fc <_svfprintf_r+0x830>
 800b68c:	aa23      	add	r2, sp, #140	; 0x8c
 800b68e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b690:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b692:	f002 fbc5 	bl	800de20 <__ssprint_r>
 800b696:	2800      	cmp	r0, #0
 800b698:	f47f aed6 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b69c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b69e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b6a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b6a4:	e0ac      	b.n	800b800 <_svfprintf_r+0x834>
 800b6a6:	aa23      	add	r2, sp, #140	; 0x8c
 800b6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6ac:	f002 fbb8 	bl	800de20 <__ssprint_r>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	f43f ae9f 	beq.w	800b3f4 <_svfprintf_r+0x428>
 800b6b6:	e6c7      	b.n	800b448 <_svfprintf_r+0x47c>
 800b6b8:	aa23      	add	r2, sp, #140	; 0x8c
 800b6ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6be:	f002 fbaf 	bl	800de20 <__ssprint_r>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	f47f aec0 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b6c8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b6cc:	e4c4      	b.n	800b058 <_svfprintf_r+0x8c>
 800b6ce:	aa23      	add	r2, sp, #140	; 0x8c
 800b6d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6d4:	f002 fba4 	bl	800de20 <__ssprint_r>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	f47f aeb5 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b6de:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b6e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b6e4:	e62e      	b.n	800b344 <_svfprintf_r+0x378>
 800b6e6:	aa23      	add	r2, sp, #140	; 0x8c
 800b6e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6ec:	f002 fb98 	bl	800de20 <__ssprint_r>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	f47f aea9 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b6f6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b6fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b6fc:	e5d5      	b.n	800b2aa <_svfprintf_r+0x2de>
 800b6fe:	aa23      	add	r2, sp, #140	; 0x8c
 800b700:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b702:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b704:	f002 fb8c 	bl	800de20 <__ssprint_r>
 800b708:	2800      	cmp	r0, #0
 800b70a:	f47f ae9d 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b70e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b712:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b714:	e5d9      	b.n	800b2ca <_svfprintf_r+0x2fe>
 800b716:	3301      	adds	r3, #1
 800b718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b71a:	442c      	add	r4, r5
 800b71c:	2b07      	cmp	r3, #7
 800b71e:	9425      	str	r4, [sp, #148]	; 0x94
 800b720:	9324      	str	r3, [sp, #144]	; 0x90
 800b722:	e889 0024 	stmia.w	r9, {r2, r5}
 800b726:	f77f ae1e 	ble.w	800b366 <_svfprintf_r+0x39a>
 800b72a:	aa23      	add	r2, sp, #140	; 0x8c
 800b72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b72e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b730:	f002 fb76 	bl	800de20 <__ssprint_r>
 800b734:	2800      	cmp	r0, #0
 800b736:	f47f ae87 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b73a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b73c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b740:	e613      	b.n	800b36a <_svfprintf_r+0x39e>
 800b742:	bf00      	nop
 800b744:	0800eba4 	.word	0x0800eba4
 800b748:	0800eb54 	.word	0x0800eb54
 800b74c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b74e:	2d00      	cmp	r5, #0
 800b750:	f340 830e 	ble.w	800bd70 <_svfprintf_r+0xda4>
 800b754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b756:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b758:	4293      	cmp	r3, r2
 800b75a:	bfa8      	it	ge
 800b75c:	4613      	movge	r3, r2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	461d      	mov	r5, r3
 800b762:	dd0d      	ble.n	800b780 <_svfprintf_r+0x7b4>
 800b764:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b766:	442c      	add	r4, r5
 800b768:	3301      	adds	r3, #1
 800b76a:	2b07      	cmp	r3, #7
 800b76c:	9425      	str	r4, [sp, #148]	; 0x94
 800b76e:	f8c9 6000 	str.w	r6, [r9]
 800b772:	f8c9 5004 	str.w	r5, [r9, #4]
 800b776:	9324      	str	r3, [sp, #144]	; 0x90
 800b778:	f300 861a 	bgt.w	800c3b0 <_svfprintf_r+0x13e4>
 800b77c:	f109 0908 	add.w	r9, r9, #8
 800b780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b782:	2d00      	cmp	r5, #0
 800b784:	bfa8      	it	ge
 800b786:	1b5b      	subge	r3, r3, r5
 800b788:	2b00      	cmp	r3, #0
 800b78a:	461d      	mov	r5, r3
 800b78c:	f340 83a0 	ble.w	800bed0 <_svfprintf_r+0xf04>
 800b790:	4ab9      	ldr	r2, [pc, #740]	; (800ba78 <_svfprintf_r+0xaac>)
 800b792:	2d10      	cmp	r5, #16
 800b794:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b796:	920f      	str	r2, [sp, #60]	; 0x3c
 800b798:	f340 8544 	ble.w	800c224 <_svfprintf_r+0x1258>
 800b79c:	4622      	mov	r2, r4
 800b79e:	2710      	movs	r7, #16
 800b7a0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b7a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b7a6:	e005      	b.n	800b7b4 <_svfprintf_r+0x7e8>
 800b7a8:	f109 0908 	add.w	r9, r9, #8
 800b7ac:	3d10      	subs	r5, #16
 800b7ae:	2d10      	cmp	r5, #16
 800b7b0:	f340 8537 	ble.w	800c222 <_svfprintf_r+0x1256>
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	3210      	adds	r2, #16
 800b7b8:	2b07      	cmp	r3, #7
 800b7ba:	9225      	str	r2, [sp, #148]	; 0x94
 800b7bc:	9324      	str	r3, [sp, #144]	; 0x90
 800b7be:	f8c9 a000 	str.w	sl, [r9]
 800b7c2:	f8c9 7004 	str.w	r7, [r9, #4]
 800b7c6:	ddef      	ble.n	800b7a8 <_svfprintf_r+0x7dc>
 800b7c8:	aa23      	add	r2, sp, #140	; 0x8c
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	4658      	mov	r0, fp
 800b7ce:	f002 fb27 	bl	800de20 <__ssprint_r>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	f47f ae38 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b7d8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b7dc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b7de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b7e0:	e7e4      	b.n	800b7ac <_svfprintf_r+0x7e0>
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	3601      	adds	r6, #1
 800b7e8:	441c      	add	r4, r3
 800b7ea:	2d07      	cmp	r5, #7
 800b7ec:	f8c9 6000 	str.w	r6, [r9]
 800b7f0:	9524      	str	r5, [sp, #144]	; 0x90
 800b7f2:	9425      	str	r4, [sp, #148]	; 0x94
 800b7f4:	f8c9 3004 	str.w	r3, [r9, #4]
 800b7f8:	f73f af48 	bgt.w	800b68c <_svfprintf_r+0x6c0>
 800b7fc:	f109 0908 	add.w	r9, r9, #8
 800b800:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b802:	3501      	adds	r5, #1
 800b804:	4414      	add	r4, r2
 800b806:	ab1f      	add	r3, sp, #124	; 0x7c
 800b808:	2d07      	cmp	r5, #7
 800b80a:	9425      	str	r4, [sp, #148]	; 0x94
 800b80c:	9524      	str	r5, [sp, #144]	; 0x90
 800b80e:	f8c9 2004 	str.w	r2, [r9, #4]
 800b812:	f8c9 3000 	str.w	r3, [r9]
 800b816:	f77f ada6 	ble.w	800b366 <_svfprintf_r+0x39a>
 800b81a:	aa23      	add	r2, sp, #140	; 0x8c
 800b81c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b81e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b820:	f002 fafe 	bl	800de20 <__ssprint_r>
 800b824:	2800      	cmp	r0, #0
 800b826:	f47f ae0f 	bne.w	800b448 <_svfprintf_r+0x47c>
 800b82a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b82e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b830:	e59b      	b.n	800b36a <_svfprintf_r+0x39e>
 800b832:	f898 3000 	ldrb.w	r3, [r8]
 800b836:	f108 0401 	add.w	r4, r8, #1
 800b83a:	2b2a      	cmp	r3, #42	; 0x2a
 800b83c:	f000 872e 	beq.w	800c69c <_svfprintf_r+0x16d0>
 800b840:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800b844:	2809      	cmp	r0, #9
 800b846:	bf98      	it	ls
 800b848:	2500      	movls	r5, #0
 800b84a:	f200 86b2 	bhi.w	800c5b2 <_svfprintf_r+0x15e6>
 800b84e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b852:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b856:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b85a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800b85e:	2809      	cmp	r0, #9
 800b860:	d9f5      	bls.n	800b84e <_svfprintf_r+0x882>
 800b862:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800b866:	46a0      	mov	r8, r4
 800b868:	e40c      	b.n	800b084 <_svfprintf_r+0xb8>
 800b86a:	9b07      	ldr	r3, [sp, #28]
 800b86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b870:	9307      	str	r3, [sp, #28]
 800b872:	f898 3000 	ldrb.w	r3, [r8]
 800b876:	e403      	b.n	800b080 <_svfprintf_r+0xb4>
 800b878:	f898 3000 	ldrb.w	r3, [r8]
 800b87c:	2900      	cmp	r1, #0
 800b87e:	f47f abff 	bne.w	800b080 <_svfprintf_r+0xb4>
 800b882:	2201      	movs	r2, #1
 800b884:	2120      	movs	r1, #32
 800b886:	f7ff bbfb 	b.w	800b080 <_svfprintf_r+0xb4>
 800b88a:	9b07      	ldr	r3, [sp, #28]
 800b88c:	f043 0301 	orr.w	r3, r3, #1
 800b890:	9307      	str	r3, [sp, #28]
 800b892:	f898 3000 	ldrb.w	r3, [r8]
 800b896:	f7ff bbf3 	b.w	800b080 <_svfprintf_r+0xb4>
 800b89a:	f898 3000 	ldrb.w	r3, [r8]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	212b      	movs	r1, #43	; 0x2b
 800b8a2:	f7ff bbed 	b.w	800b080 <_svfprintf_r+0xb4>
 800b8a6:	9b07      	ldr	r3, [sp, #28]
 800b8a8:	f043 0320 	orr.w	r3, r3, #32
 800b8ac:	9307      	str	r3, [sp, #28]
 800b8ae:	f898 3000 	ldrb.w	r3, [r8]
 800b8b2:	f7ff bbe5 	b.w	800b080 <_svfprintf_r+0xb4>
 800b8b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8b8:	46ab      	mov	fp, r5
 800b8ba:	6816      	ldr	r6, [r2, #0]
 800b8bc:	2500      	movs	r5, #0
 800b8be:	9311      	str	r3, [sp, #68]	; 0x44
 800b8c0:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
 800b8c4:	1d14      	adds	r4, r2, #4
 800b8c6:	2e00      	cmp	r6, #0
 800b8c8:	f000 85f8 	beq.w	800c4bc <_svfprintf_r+0x14f0>
 800b8cc:	f1bb 0f00 	cmp.w	fp, #0
 800b8d0:	f2c0 8544 	blt.w	800c35c <_svfprintf_r+0x1390>
 800b8d4:	465a      	mov	r2, fp
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f001 ff45 	bl	800d768 <memchr>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f000 862e 	beq.w	800c540 <_svfprintf_r+0x1574>
 800b8e4:	46ab      	mov	fp, r5
 800b8e6:	1b83      	subs	r3, r0, r6
 800b8e8:	930d      	str	r3, [sp, #52]	; 0x34
 800b8ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b8ee:	940e      	str	r4, [sp, #56]	; 0x38
 800b8f0:	9308      	str	r3, [sp, #32]
 800b8f2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800b8f6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b8fa:	e472      	b.n	800b1e2 <_svfprintf_r+0x216>
 800b8fc:	9311      	str	r3, [sp, #68]	; 0x44
 800b8fe:	46ab      	mov	fp, r5
 800b900:	2a00      	cmp	r2, #0
 800b902:	f040 86f3 	bne.w	800c6ec <_svfprintf_r+0x1720>
 800b906:	9a07      	ldr	r2, [sp, #28]
 800b908:	f012 0320 	ands.w	r3, r2, #32
 800b90c:	f000 8143 	beq.w	800bb96 <_svfprintf_r+0xbca>
 800b910:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b912:	2700      	movs	r7, #0
 800b914:	3407      	adds	r4, #7
 800b916:	f024 0307 	bic.w	r3, r4, #7
 800b91a:	f103 0108 	add.w	r1, r3, #8
 800b91e:	45bb      	cmp	fp, r7
 800b920:	910e      	str	r1, [sp, #56]	; 0x38
 800b922:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b926:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b92a:	f2c0 82c1 	blt.w	800beb0 <_svfprintf_r+0xee4>
 800b92e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800b932:	9307      	str	r3, [sp, #28]
 800b934:	ea54 0305 	orrs.w	r3, r4, r5
 800b938:	f000 8148 	beq.w	800bbcc <_svfprintf_r+0xc00>
 800b93c:	2d00      	cmp	r5, #0
 800b93e:	bf08      	it	eq
 800b940:	2c0a      	cmpeq	r4, #10
 800b942:	f0c0 8148 	bcc.w	800bbd6 <_svfprintf_r+0xc0a>
 800b946:	ae30      	add	r6, sp, #192	; 0xc0
 800b948:	4620      	mov	r0, r4
 800b94a:	4629      	mov	r1, r5
 800b94c:	220a      	movs	r2, #10
 800b94e:	2300      	movs	r3, #0
 800b950:	f7f5 fa90 	bl	8000e74 <__aeabi_uldivmod>
 800b954:	3230      	adds	r2, #48	; 0x30
 800b956:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800b95a:	4620      	mov	r0, r4
 800b95c:	4629      	mov	r1, r5
 800b95e:	2300      	movs	r3, #0
 800b960:	220a      	movs	r2, #10
 800b962:	f7f5 fa87 	bl	8000e74 <__aeabi_uldivmod>
 800b966:	4604      	mov	r4, r0
 800b968:	460d      	mov	r5, r1
 800b96a:	ea54 0305 	orrs.w	r3, r4, r5
 800b96e:	d1eb      	bne.n	800b948 <_svfprintf_r+0x97c>
 800b970:	e42d      	b.n	800b1ce <_svfprintf_r+0x202>
 800b972:	9311      	str	r3, [sp, #68]	; 0x44
 800b974:	46ab      	mov	fp, r5
 800b976:	2a00      	cmp	r2, #0
 800b978:	f040 86b4 	bne.w	800c6e4 <_svfprintf_r+0x1718>
 800b97c:	9b07      	ldr	r3, [sp, #28]
 800b97e:	483f      	ldr	r0, [pc, #252]	; (800ba7c <_svfprintf_r+0xab0>)
 800b980:	069d      	lsls	r5, r3, #26
 800b982:	f140 815d 	bpl.w	800bc40 <_svfprintf_r+0xc74>
 800b986:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b988:	3407      	adds	r4, #7
 800b98a:	f024 0307 	bic.w	r3, r4, #7
 800b98e:	f103 0208 	add.w	r2, r3, #8
 800b992:	920e      	str	r2, [sp, #56]	; 0x38
 800b994:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b998:	9a07      	ldr	r2, [sp, #28]
 800b99a:	f012 0701 	ands.w	r7, r2, #1
 800b99e:	f000 8246 	beq.w	800be2e <_svfprintf_r+0xe62>
 800b9a2:	ea54 0305 	orrs.w	r3, r4, r5
 800b9a6:	f43f ad2a 	beq.w	800b3fe <_svfprintf_r+0x432>
 800b9aa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800b9ae:	2700      	movs	r7, #0
 800b9b0:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800b9b4:	9a07      	ldr	r2, [sp, #28]
 800b9b6:	2330      	movs	r3, #48	; 0x30
 800b9b8:	45bb      	cmp	fp, r7
 800b9ba:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800b9be:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b9c2:	f042 0302 	orr.w	r3, r2, #2
 800b9c6:	f2c0 85a5 	blt.w	800c514 <_svfprintf_r+0x1548>
 800b9ca:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800b9ce:	f043 0302 	orr.w	r3, r3, #2
 800b9d2:	9307      	str	r3, [sp, #28]
 800b9d4:	f7ff bbec 	b.w	800b1b0 <_svfprintf_r+0x1e4>
 800b9d8:	f898 3000 	ldrb.w	r3, [r8]
 800b9dc:	2b6c      	cmp	r3, #108	; 0x6c
 800b9de:	f000 8451 	beq.w	800c284 <_svfprintf_r+0x12b8>
 800b9e2:	9807      	ldr	r0, [sp, #28]
 800b9e4:	f040 0010 	orr.w	r0, r0, #16
 800b9e8:	9007      	str	r0, [sp, #28]
 800b9ea:	f7ff bb49 	b.w	800b080 <_svfprintf_r+0xb4>
 800b9ee:	9311      	str	r3, [sp, #68]	; 0x44
 800b9f0:	46ab      	mov	fp, r5
 800b9f2:	2a00      	cmp	r2, #0
 800b9f4:	f040 867e 	bne.w	800c6f4 <_svfprintf_r+0x1728>
 800b9f8:	9a07      	ldr	r2, [sp, #28]
 800b9fa:	f012 0320 	ands.w	r3, r2, #32
 800b9fe:	f000 80a0 	beq.w	800bb42 <_svfprintf_r+0xb76>
 800ba02:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ba04:	2700      	movs	r7, #0
 800ba06:	3407      	adds	r4, #7
 800ba08:	f024 0307 	bic.w	r3, r4, #7
 800ba0c:	f103 0108 	add.w	r1, r3, #8
 800ba10:	45bb      	cmp	fp, r7
 800ba12:	910e      	str	r1, [sp, #56]	; 0x38
 800ba14:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ba18:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800ba1c:	db0b      	blt.n	800ba36 <_svfprintf_r+0xa6a>
 800ba1e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800ba22:	9307      	str	r3, [sp, #28]
 800ba24:	ea54 0305 	orrs.w	r3, r4, r5
 800ba28:	d106      	bne.n	800ba38 <_svfprintf_r+0xa6c>
 800ba2a:	f1bb 0f00 	cmp.w	fp, #0
 800ba2e:	f000 85b1 	beq.w	800c594 <_svfprintf_r+0x15c8>
 800ba32:	2400      	movs	r4, #0
 800ba34:	2500      	movs	r5, #0
 800ba36:	2700      	movs	r7, #0
 800ba38:	ae30      	add	r6, sp, #192	; 0xc0
 800ba3a:	08e2      	lsrs	r2, r4, #3
 800ba3c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800ba40:	08e9      	lsrs	r1, r5, #3
 800ba42:	f004 0307 	and.w	r3, r4, #7
 800ba46:	460d      	mov	r5, r1
 800ba48:	4614      	mov	r4, r2
 800ba4a:	3330      	adds	r3, #48	; 0x30
 800ba4c:	ea54 0205 	orrs.w	r2, r4, r5
 800ba50:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800ba54:	d1f1      	bne.n	800ba3a <_svfprintf_r+0xa6e>
 800ba56:	9a07      	ldr	r2, [sp, #28]
 800ba58:	07d1      	lsls	r1, r2, #31
 800ba5a:	f57f abb8 	bpl.w	800b1ce <_svfprintf_r+0x202>
 800ba5e:	2b30      	cmp	r3, #48	; 0x30
 800ba60:	f43f abb5 	beq.w	800b1ce <_svfprintf_r+0x202>
 800ba64:	2230      	movs	r2, #48	; 0x30
 800ba66:	1e73      	subs	r3, r6, #1
 800ba68:	f806 2c01 	strb.w	r2, [r6, #-1]
 800ba6c:	aa30      	add	r2, sp, #192	; 0xc0
 800ba6e:	1ad2      	subs	r2, r2, r3
 800ba70:	920d      	str	r2, [sp, #52]	; 0x34
 800ba72:	461e      	mov	r6, r3
 800ba74:	f7ff bbae 	b.w	800b1d4 <_svfprintf_r+0x208>
 800ba78:	0800eb54 	.word	0x0800eb54
 800ba7c:	0800eb88 	.word	0x0800eb88
 800ba80:	9311      	str	r3, [sp, #68]	; 0x44
 800ba82:	46ab      	mov	fp, r5
 800ba84:	2a00      	cmp	r2, #0
 800ba86:	f040 8621 	bne.w	800c6cc <_svfprintf_r+0x1700>
 800ba8a:	9b07      	ldr	r3, [sp, #28]
 800ba8c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ba8e:	071a      	lsls	r2, r3, #28
 800ba90:	f104 0407 	add.w	r4, r4, #7
 800ba94:	f140 836c 	bpl.w	800c170 <_svfprintf_r+0x11a4>
 800ba98:	f024 0307 	bic.w	r3, r4, #7
 800ba9c:	f103 0208 	add.w	r2, r3, #8
 800baa0:	920e      	str	r2, [sp, #56]	; 0x38
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	9214      	str	r2, [sp, #80]	; 0x50
 800baa8:	9315      	str	r3, [sp, #84]	; 0x54
 800baaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baac:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800baae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800bab2:	4628      	mov	r0, r5
 800bab4:	4621      	mov	r1, r4
 800bab6:	f04f 32ff 	mov.w	r2, #4294967295
 800baba:	4ba9      	ldr	r3, [pc, #676]	; (800bd60 <_svfprintf_r+0xd94>)
 800babc:	f7f5 f81e 	bl	8000afc <__aeabi_dcmpun>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	f040 82cd 	bne.w	800c060 <_svfprintf_r+0x1094>
 800bac6:	4628      	mov	r0, r5
 800bac8:	4621      	mov	r1, r4
 800baca:	f04f 32ff 	mov.w	r2, #4294967295
 800bace:	4ba4      	ldr	r3, [pc, #656]	; (800bd60 <_svfprintf_r+0xd94>)
 800bad0:	f7f4 fff6 	bl	8000ac0 <__aeabi_dcmple>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	f040 82c3 	bne.w	800c060 <_svfprintf_r+0x1094>
 800bada:	9814      	ldr	r0, [sp, #80]	; 0x50
 800badc:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bade:	2200      	movs	r2, #0
 800bae0:	2300      	movs	r3, #0
 800bae2:	f7f4 ffe3 	bl	8000aac <__aeabi_dcmplt>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f040 850e 	bne.w	800c508 <_svfprintf_r+0x153c>
 800baec:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800baf0:	9907      	ldr	r1, [sp, #28]
 800baf2:	4e9c      	ldr	r6, [pc, #624]	; (800bd64 <_svfprintf_r+0xd98>)
 800baf4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800baf8:	4b9b      	ldr	r3, [pc, #620]	; (800bd68 <_svfprintf_r+0xd9c>)
 800bafa:	9107      	str	r1, [sp, #28]
 800bafc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bafe:	2203      	movs	r2, #3
 800bb00:	f04f 0b00 	mov.w	fp, #0
 800bb04:	9208      	str	r2, [sp, #32]
 800bb06:	2947      	cmp	r1, #71	; 0x47
 800bb08:	bfd8      	it	le
 800bb0a:	461e      	movle	r6, r3
 800bb0c:	920d      	str	r2, [sp, #52]	; 0x34
 800bb0e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800bb12:	f7ff bb66 	b.w	800b1e2 <_svfprintf_r+0x216>
 800bb16:	9b07      	ldr	r3, [sp, #28]
 800bb18:	f043 0308 	orr.w	r3, r3, #8
 800bb1c:	9307      	str	r3, [sp, #28]
 800bb1e:	f898 3000 	ldrb.w	r3, [r8]
 800bb22:	f7ff baad 	b.w	800b080 <_svfprintf_r+0xb4>
 800bb26:	9311      	str	r3, [sp, #68]	; 0x44
 800bb28:	46ab      	mov	fp, r5
 800bb2a:	2a00      	cmp	r2, #0
 800bb2c:	f040 85d6 	bne.w	800c6dc <_svfprintf_r+0x1710>
 800bb30:	9b07      	ldr	r3, [sp, #28]
 800bb32:	f043 0310 	orr.w	r3, r3, #16
 800bb36:	9307      	str	r3, [sp, #28]
 800bb38:	9a07      	ldr	r2, [sp, #28]
 800bb3a:	f012 0320 	ands.w	r3, r2, #32
 800bb3e:	f47f af60 	bne.w	800ba02 <_svfprintf_r+0xa36>
 800bb42:	9907      	ldr	r1, [sp, #28]
 800bb44:	f011 0210 	ands.w	r2, r1, #16
 800bb48:	f000 8268 	beq.w	800c01c <_svfprintf_r+0x1050>
 800bb4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bb4e:	f1bb 0f00 	cmp.w	fp, #0
 800bb52:	4602      	mov	r2, r0
 800bb54:	6804      	ldr	r4, [r0, #0]
 800bb56:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800bb5a:	f102 0204 	add.w	r2, r2, #4
 800bb5e:	f04f 0500 	mov.w	r5, #0
 800bb62:	f2c0 84dd 	blt.w	800c520 <_svfprintf_r+0x1554>
 800bb66:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bb6a:	9107      	str	r1, [sp, #28]
 800bb6c:	ea54 0105 	orrs.w	r1, r4, r5
 800bb70:	920e      	str	r2, [sp, #56]	; 0x38
 800bb72:	f43f af5a 	beq.w	800ba2a <_svfprintf_r+0xa5e>
 800bb76:	461f      	mov	r7, r3
 800bb78:	e75e      	b.n	800ba38 <_svfprintf_r+0xa6c>
 800bb7a:	9311      	str	r3, [sp, #68]	; 0x44
 800bb7c:	46ab      	mov	fp, r5
 800bb7e:	2a00      	cmp	r2, #0
 800bb80:	f040 85a8 	bne.w	800c6d4 <_svfprintf_r+0x1708>
 800bb84:	9b07      	ldr	r3, [sp, #28]
 800bb86:	f043 0310 	orr.w	r3, r3, #16
 800bb8a:	9307      	str	r3, [sp, #28]
 800bb8c:	9a07      	ldr	r2, [sp, #28]
 800bb8e:	f012 0320 	ands.w	r3, r2, #32
 800bb92:	f47f aebd 	bne.w	800b910 <_svfprintf_r+0x944>
 800bb96:	9907      	ldr	r1, [sp, #28]
 800bb98:	f011 0210 	ands.w	r2, r1, #16
 800bb9c:	f000 8325 	beq.w	800c1ea <_svfprintf_r+0x121e>
 800bba0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bba2:	f1bb 0f00 	cmp.w	fp, #0
 800bba6:	4602      	mov	r2, r0
 800bba8:	6804      	ldr	r4, [r0, #0]
 800bbaa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800bbae:	f102 0204 	add.w	r2, r2, #4
 800bbb2:	f04f 0500 	mov.w	r5, #0
 800bbb6:	f2c0 84a4 	blt.w	800c502 <_svfprintf_r+0x1536>
 800bbba:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bbbe:	9107      	str	r1, [sp, #28]
 800bbc0:	ea54 0105 	orrs.w	r1, r4, r5
 800bbc4:	920e      	str	r2, [sp, #56]	; 0x38
 800bbc6:	461f      	mov	r7, r3
 800bbc8:	f47f aeb8 	bne.w	800b93c <_svfprintf_r+0x970>
 800bbcc:	f1bb 0f00 	cmp.w	fp, #0
 800bbd0:	f000 8090 	beq.w	800bcf4 <_svfprintf_r+0xd28>
 800bbd4:	2400      	movs	r4, #0
 800bbd6:	ae40      	add	r6, sp, #256	; 0x100
 800bbd8:	3430      	adds	r4, #48	; 0x30
 800bbda:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800bbde:	f7ff baf6 	b.w	800b1ce <_svfprintf_r+0x202>
 800bbe2:	2a00      	cmp	r2, #0
 800bbe4:	f040 859e 	bne.w	800c724 <_svfprintf_r+0x1758>
 800bbe8:	9b07      	ldr	r3, [sp, #28]
 800bbea:	069b      	lsls	r3, r3, #26
 800bbec:	f140 82ca 	bpl.w	800c184 <_svfprintf_r+0x11b8>
 800bbf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	930e      	str	r3, [sp, #56]	; 0x38
 800bbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbfa:	6811      	ldr	r1, [r2, #0]
 800bbfc:	17dd      	asrs	r5, r3, #31
 800bbfe:	461a      	mov	r2, r3
 800bc00:	462b      	mov	r3, r5
 800bc02:	e9c1 2300 	strd	r2, r3, [r1]
 800bc06:	f7ff ba08 	b.w	800b01a <_svfprintf_r+0x4e>
 800bc0a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800bc0e:	2300      	movs	r3, #0
 800bc10:	461c      	mov	r4, r3
 800bc12:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc16:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800bc1a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800bc1e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800bc22:	2809      	cmp	r0, #9
 800bc24:	d9f5      	bls.n	800bc12 <_svfprintf_r+0xc46>
 800bc26:	940c      	str	r4, [sp, #48]	; 0x30
 800bc28:	f7ff ba2c 	b.w	800b084 <_svfprintf_r+0xb8>
 800bc2c:	9311      	str	r3, [sp, #68]	; 0x44
 800bc2e:	46ab      	mov	fp, r5
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	f040 8573 	bne.w	800c71c <_svfprintf_r+0x1750>
 800bc36:	9b07      	ldr	r3, [sp, #28]
 800bc38:	484c      	ldr	r0, [pc, #304]	; (800bd6c <_svfprintf_r+0xda0>)
 800bc3a:	069d      	lsls	r5, r3, #26
 800bc3c:	f53f aea3 	bmi.w	800b986 <_svfprintf_r+0x9ba>
 800bc40:	9b07      	ldr	r3, [sp, #28]
 800bc42:	06dc      	lsls	r4, r3, #27
 800bc44:	f140 82b5 	bpl.w	800c1b2 <_svfprintf_r+0x11e6>
 800bc48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc4a:	2500      	movs	r5, #0
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	3304      	adds	r3, #4
 800bc50:	6814      	ldr	r4, [r2, #0]
 800bc52:	930e      	str	r3, [sp, #56]	; 0x38
 800bc54:	e6a0      	b.n	800b998 <_svfprintf_r+0x9cc>
 800bc56:	9311      	str	r3, [sp, #68]	; 0x44
 800bc58:	46ab      	mov	fp, r5
 800bc5a:	2a00      	cmp	r2, #0
 800bc5c:	f040 855a 	bne.w	800c714 <_svfprintf_r+0x1748>
 800bc60:	9b07      	ldr	r3, [sp, #28]
 800bc62:	f043 0310 	orr.w	r3, r3, #16
 800bc66:	9307      	str	r3, [sp, #28]
 800bc68:	9b07      	ldr	r3, [sp, #28]
 800bc6a:	0698      	lsls	r0, r3, #26
 800bc6c:	f140 80f1 	bpl.w	800be52 <_svfprintf_r+0xe86>
 800bc70:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800bc72:	3407      	adds	r4, #7
 800bc74:	f024 0407 	bic.w	r4, r4, #7
 800bc78:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc7c:	f104 0108 	add.w	r1, r4, #8
 800bc80:	461d      	mov	r5, r3
 800bc82:	4614      	mov	r4, r2
 800bc84:	910e      	str	r1, [sp, #56]	; 0x38
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	f173 0300 	sbcs.w	r3, r3, #0
 800bc8c:	f2c0 80f2 	blt.w	800be74 <_svfprintf_r+0xea8>
 800bc90:	f1bb 0f00 	cmp.w	fp, #0
 800bc94:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800bc98:	f2c0 810a 	blt.w	800beb0 <_svfprintf_r+0xee4>
 800bc9c:	9b07      	ldr	r3, [sp, #28]
 800bc9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bca2:	9307      	str	r3, [sp, #28]
 800bca4:	ea54 0305 	orrs.w	r3, r4, r5
 800bca8:	f47f ae48 	bne.w	800b93c <_svfprintf_r+0x970>
 800bcac:	e78e      	b.n	800bbcc <_svfprintf_r+0xc00>
 800bcae:	9311      	str	r3, [sp, #68]	; 0x44
 800bcb0:	46ab      	mov	fp, r5
 800bcb2:	2a00      	cmp	r2, #0
 800bcb4:	d0d8      	beq.n	800bc68 <_svfprintf_r+0xc9c>
 800bcb6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800bcba:	e7d5      	b.n	800bc68 <_svfprintf_r+0xc9c>
 800bcbc:	9b07      	ldr	r3, [sp, #28]
 800bcbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcc2:	9307      	str	r3, [sp, #28]
 800bcc4:	f898 3000 	ldrb.w	r3, [r8]
 800bcc8:	f7ff b9da 	b.w	800b080 <_svfprintf_r+0xb4>
 800bccc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bcce:	9311      	str	r3, [sp, #68]	; 0x44
 800bcd0:	680a      	ldr	r2, [r1, #0]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	461f      	mov	r7, r3
 800bcd8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800bcdc:	469b      	mov	fp, r3
 800bcde:	9313      	str	r3, [sp, #76]	; 0x4c
 800bce0:	1d0b      	adds	r3, r1, #4
 800bce2:	9008      	str	r0, [sp, #32]
 800bce4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800bce8:	930e      	str	r3, [sp, #56]	; 0x38
 800bcea:	900d      	str	r0, [sp, #52]	; 0x34
 800bcec:	ae26      	add	r6, sp, #152	; 0x98
 800bcee:	f7ff ba7c 	b.w	800b1ea <_svfprintf_r+0x21e>
 800bcf2:	465f      	mov	r7, fp
 800bcf4:	f04f 0b00 	mov.w	fp, #0
 800bcf8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800bcfc:	ae30      	add	r6, sp, #192	; 0xc0
 800bcfe:	f7ff ba69 	b.w	800b1d4 <_svfprintf_r+0x208>
 800bd02:	aa23      	add	r2, sp, #140	; 0x8c
 800bd04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd08:	f002 f88a 	bl	800de20 <__ssprint_r>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	f47f ab9b 	bne.w	800b448 <_svfprintf_r+0x47c>
 800bd12:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bd14:	f7ff bb63 	b.w	800b3de <_svfprintf_r+0x412>
 800bd18:	9311      	str	r3, [sp, #68]	; 0x44
 800bd1a:	2a00      	cmp	r2, #0
 800bd1c:	f040 84f6 	bne.w	800c70c <_svfprintf_r+0x1740>
 800bd20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd22:	2a00      	cmp	r2, #0
 800bd24:	f43f ab89 	beq.w	800b43a <_svfprintf_r+0x46e>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	461f      	mov	r7, r3
 800bd2e:	9108      	str	r1, [sp, #32]
 800bd30:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800bd34:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800bd38:	469b      	mov	fp, r3
 800bd3a:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd3c:	910d      	str	r1, [sp, #52]	; 0x34
 800bd3e:	ae26      	add	r6, sp, #152	; 0x98
 800bd40:	f7ff ba53 	b.w	800b1ea <_svfprintf_r+0x21e>
 800bd44:	aa23      	add	r2, sp, #140	; 0x8c
 800bd46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd4a:	f002 f869 	bl	800de20 <__ssprint_r>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	f47f ab7a 	bne.w	800b448 <_svfprintf_r+0x47c>
 800bd54:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800bd58:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bd5a:	f7ff bba2 	b.w	800b4a2 <_svfprintf_r+0x4d6>
 800bd5e:	bf00      	nop
 800bd60:	7fefffff 	.word	0x7fefffff
 800bd64:	0800eb68 	.word	0x0800eb68
 800bd68:	0800eb64 	.word	0x0800eb64
 800bd6c:	0800eb74 	.word	0x0800eb74
 800bd70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd72:	49b8      	ldr	r1, [pc, #736]	; (800c054 <_svfprintf_r+0x1088>)
 800bd74:	3301      	adds	r3, #1
 800bd76:	3401      	adds	r4, #1
 800bd78:	2201      	movs	r2, #1
 800bd7a:	2b07      	cmp	r3, #7
 800bd7c:	9425      	str	r4, [sp, #148]	; 0x94
 800bd7e:	9324      	str	r3, [sp, #144]	; 0x90
 800bd80:	e889 0006 	stmia.w	r9, {r1, r2}
 800bd84:	f300 82c1 	bgt.w	800c30a <_svfprintf_r+0x133e>
 800bd88:	f109 0908 	add.w	r9, r9, #8
 800bd8c:	b92d      	cbnz	r5, 800bd9a <_svfprintf_r+0xdce>
 800bd8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd90:	b91b      	cbnz	r3, 800bd9a <_svfprintf_r+0xdce>
 800bd92:	9b07      	ldr	r3, [sp, #28]
 800bd94:	07df      	lsls	r7, r3, #31
 800bd96:	f57f aae8 	bpl.w	800b36a <_svfprintf_r+0x39e>
 800bd9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd9e:	3301      	adds	r3, #1
 800bda0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bda2:	440c      	add	r4, r1
 800bda4:	2b07      	cmp	r3, #7
 800bda6:	9425      	str	r4, [sp, #148]	; 0x94
 800bda8:	f8c9 2000 	str.w	r2, [r9]
 800bdac:	f8c9 1004 	str.w	r1, [r9, #4]
 800bdb0:	9324      	str	r3, [sp, #144]	; 0x90
 800bdb2:	f300 8402 	bgt.w	800c5ba <_svfprintf_r+0x15ee>
 800bdb6:	f109 0908 	add.w	r9, r9, #8
 800bdba:	426d      	negs	r5, r5
 800bdbc:	2d00      	cmp	r5, #0
 800bdbe:	f340 82e0 	ble.w	800c382 <_svfprintf_r+0x13b6>
 800bdc2:	4aa5      	ldr	r2, [pc, #660]	; (800c058 <_svfprintf_r+0x108c>)
 800bdc4:	2d10      	cmp	r5, #16
 800bdc6:	920f      	str	r2, [sp, #60]	; 0x3c
 800bdc8:	f340 8300 	ble.w	800c3cc <_svfprintf_r+0x1400>
 800bdcc:	4622      	mov	r2, r4
 800bdce:	2710      	movs	r7, #16
 800bdd0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800bdd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bdd6:	e005      	b.n	800bde4 <_svfprintf_r+0xe18>
 800bdd8:	f109 0908 	add.w	r9, r9, #8
 800bddc:	3d10      	subs	r5, #16
 800bdde:	2d10      	cmp	r5, #16
 800bde0:	f340 82f3 	ble.w	800c3ca <_svfprintf_r+0x13fe>
 800bde4:	3301      	adds	r3, #1
 800bde6:	3210      	adds	r2, #16
 800bde8:	2b07      	cmp	r3, #7
 800bdea:	9225      	str	r2, [sp, #148]	; 0x94
 800bdec:	9324      	str	r3, [sp, #144]	; 0x90
 800bdee:	f8c9 a000 	str.w	sl, [r9]
 800bdf2:	f8c9 7004 	str.w	r7, [r9, #4]
 800bdf6:	ddef      	ble.n	800bdd8 <_svfprintf_r+0xe0c>
 800bdf8:	aa23      	add	r2, sp, #140	; 0x8c
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4658      	mov	r0, fp
 800bdfe:	f002 f80f 	bl	800de20 <__ssprint_r>
 800be02:	2800      	cmp	r0, #0
 800be04:	f47f ab20 	bne.w	800b448 <_svfprintf_r+0x47c>
 800be08:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800be0c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800be0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800be10:	e7e4      	b.n	800bddc <_svfprintf_r+0xe10>
 800be12:	4892      	ldr	r0, [pc, #584]	; (800c05c <_svfprintf_r+0x1090>)
 800be14:	9107      	str	r1, [sp, #28]
 800be16:	9311      	str	r3, [sp, #68]	; 0x44
 800be18:	ea54 0305 	orrs.w	r3, r4, r5
 800be1c:	920e      	str	r2, [sp, #56]	; 0x38
 800be1e:	f04f 0700 	mov.w	r7, #0
 800be22:	f47f a9c5 	bne.w	800b1b0 <_svfprintf_r+0x1e4>
 800be26:	2400      	movs	r4, #0
 800be28:	2500      	movs	r5, #0
 800be2a:	f7ff b9c1 	b.w	800b1b0 <_svfprintf_r+0x1e4>
 800be2e:	f1bb 0f00 	cmp.w	fp, #0
 800be32:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800be36:	f2c0 8202 	blt.w	800c23e <_svfprintf_r+0x1272>
 800be3a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800be3e:	9307      	str	r3, [sp, #28]
 800be40:	ea54 0305 	orrs.w	r3, r4, r5
 800be44:	f47f a9b4 	bne.w	800b1b0 <_svfprintf_r+0x1e4>
 800be48:	f1bb 0f00 	cmp.w	fp, #0
 800be4c:	f47f aae5 	bne.w	800b41a <_svfprintf_r+0x44e>
 800be50:	e74f      	b.n	800bcf2 <_svfprintf_r+0xd26>
 800be52:	9b07      	ldr	r3, [sp, #28]
 800be54:	06d9      	lsls	r1, r3, #27
 800be56:	f140 81b9 	bpl.w	800c1cc <_svfprintf_r+0x1200>
 800be5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be5c:	4613      	mov	r3, r2
 800be5e:	681c      	ldr	r4, [r3, #0]
 800be60:	3304      	adds	r3, #4
 800be62:	17e5      	asrs	r5, r4, #31
 800be64:	4622      	mov	r2, r4
 800be66:	930e      	str	r3, [sp, #56]	; 0x38
 800be68:	462b      	mov	r3, r5
 800be6a:	2a00      	cmp	r2, #0
 800be6c:	f173 0300 	sbcs.w	r3, r3, #0
 800be70:	f6bf af0e 	bge.w	800bc90 <_svfprintf_r+0xcc4>
 800be74:	4264      	negs	r4, r4
 800be76:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800be7a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800be7e:	f1bb 0f00 	cmp.w	fp, #0
 800be82:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800be86:	f6ff ad59 	blt.w	800b93c <_svfprintf_r+0x970>
 800be8a:	9b07      	ldr	r3, [sp, #28]
 800be8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be90:	9307      	str	r3, [sp, #28]
 800be92:	e553      	b.n	800b93c <_svfprintf_r+0x970>
 800be94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be96:	f1bb 0f00 	cmp.w	fp, #0
 800be9a:	4613      	mov	r3, r2
 800be9c:	6814      	ldr	r4, [r2, #0]
 800be9e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800bea2:	f103 0304 	add.w	r3, r3, #4
 800bea6:	f04f 0500 	mov.w	r5, #0
 800beaa:	f280 81ca 	bge.w	800c242 <_svfprintf_r+0x1276>
 800beae:	930e      	str	r3, [sp, #56]	; 0x38
 800beb0:	ea54 0305 	orrs.w	r3, r4, r5
 800beb4:	f47f ad42 	bne.w	800b93c <_svfprintf_r+0x970>
 800beb8:	e68d      	b.n	800bbd6 <_svfprintf_r+0xc0a>
 800beba:	aa23      	add	r2, sp, #140	; 0x8c
 800bebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bebe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bec0:	f001 ffae 	bl	800de20 <__ssprint_r>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	f47f aabf 	bne.w	800b448 <_svfprintf_r+0x47c>
 800beca:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800becc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800bed0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bed2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bed4:	4432      	add	r2, r6
 800bed6:	4617      	mov	r7, r2
 800bed8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800beda:	4293      	cmp	r3, r2
 800bedc:	db49      	blt.n	800bf72 <_svfprintf_r+0xfa6>
 800bede:	9a07      	ldr	r2, [sp, #28]
 800bee0:	07d5      	lsls	r5, r2, #31
 800bee2:	d446      	bmi.n	800bf72 <_svfprintf_r+0xfa6>
 800bee4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bee6:	440e      	add	r6, r1
 800bee8:	1bf5      	subs	r5, r6, r7
 800beea:	1acb      	subs	r3, r1, r3
 800beec:	429d      	cmp	r5, r3
 800beee:	bfa8      	it	ge
 800bef0:	461d      	movge	r5, r3
 800bef2:	2d00      	cmp	r5, #0
 800bef4:	462e      	mov	r6, r5
 800bef6:	dd0d      	ble.n	800bf14 <_svfprintf_r+0xf48>
 800bef8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800befa:	442c      	add	r4, r5
 800befc:	3201      	adds	r2, #1
 800befe:	2a07      	cmp	r2, #7
 800bf00:	9425      	str	r4, [sp, #148]	; 0x94
 800bf02:	f8c9 7000 	str.w	r7, [r9]
 800bf06:	f8c9 5004 	str.w	r5, [r9, #4]
 800bf0a:	9224      	str	r2, [sp, #144]	; 0x90
 800bf0c:	f300 82c7 	bgt.w	800c49e <_svfprintf_r+0x14d2>
 800bf10:	f109 0908 	add.w	r9, r9, #8
 800bf14:	2e00      	cmp	r6, #0
 800bf16:	bfb4      	ite	lt
 800bf18:	461d      	movlt	r5, r3
 800bf1a:	1b9d      	subge	r5, r3, r6
 800bf1c:	2d00      	cmp	r5, #0
 800bf1e:	f77f aa24 	ble.w	800b36a <_svfprintf_r+0x39e>
 800bf22:	4a4d      	ldr	r2, [pc, #308]	; (800c058 <_svfprintf_r+0x108c>)
 800bf24:	2d10      	cmp	r5, #16
 800bf26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf28:	920f      	str	r2, [sp, #60]	; 0x3c
 800bf2a:	f77f abf4 	ble.w	800b716 <_svfprintf_r+0x74a>
 800bf2e:	2610      	movs	r6, #16
 800bf30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bf32:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800bf36:	e005      	b.n	800bf44 <_svfprintf_r+0xf78>
 800bf38:	f109 0908 	add.w	r9, r9, #8
 800bf3c:	3d10      	subs	r5, #16
 800bf3e:	2d10      	cmp	r5, #16
 800bf40:	f77f abe9 	ble.w	800b716 <_svfprintf_r+0x74a>
 800bf44:	3301      	adds	r3, #1
 800bf46:	3410      	adds	r4, #16
 800bf48:	2b07      	cmp	r3, #7
 800bf4a:	9425      	str	r4, [sp, #148]	; 0x94
 800bf4c:	9324      	str	r3, [sp, #144]	; 0x90
 800bf4e:	f8c9 a000 	str.w	sl, [r9]
 800bf52:	f8c9 6004 	str.w	r6, [r9, #4]
 800bf56:	ddef      	ble.n	800bf38 <_svfprintf_r+0xf6c>
 800bf58:	aa23      	add	r2, sp, #140	; 0x8c
 800bf5a:	4659      	mov	r1, fp
 800bf5c:	4638      	mov	r0, r7
 800bf5e:	f001 ff5f 	bl	800de20 <__ssprint_r>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	f47f aa70 	bne.w	800b448 <_svfprintf_r+0x47c>
 800bf68:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800bf6c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bf6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf70:	e7e4      	b.n	800bf3c <_svfprintf_r+0xf70>
 800bf72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bf74:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bf76:	3201      	adds	r2, #1
 800bf78:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bf7a:	4404      	add	r4, r0
 800bf7c:	2a07      	cmp	r2, #7
 800bf7e:	9425      	str	r4, [sp, #148]	; 0x94
 800bf80:	f8c9 1000 	str.w	r1, [r9]
 800bf84:	f8c9 0004 	str.w	r0, [r9, #4]
 800bf88:	9224      	str	r2, [sp, #144]	; 0x90
 800bf8a:	f300 827b 	bgt.w	800c484 <_svfprintf_r+0x14b8>
 800bf8e:	f109 0908 	add.w	r9, r9, #8
 800bf92:	e7a7      	b.n	800bee4 <_svfprintf_r+0xf18>
 800bf94:	9b07      	ldr	r3, [sp, #28]
 800bf96:	07d8      	lsls	r0, r3, #31
 800bf98:	f53f ab14 	bmi.w	800b5c4 <_svfprintf_r+0x5f8>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	2d07      	cmp	r5, #7
 800bfa0:	9425      	str	r4, [sp, #148]	; 0x94
 800bfa2:	f8c9 6000 	str.w	r6, [r9]
 800bfa6:	9524      	str	r5, [sp, #144]	; 0x90
 800bfa8:	f8c9 3004 	str.w	r3, [r9, #4]
 800bfac:	f77f ac26 	ble.w	800b7fc <_svfprintf_r+0x830>
 800bfb0:	aa23      	add	r2, sp, #140	; 0x8c
 800bfb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfb6:	f001 ff33 	bl	800de20 <__ssprint_r>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	f47f aa44 	bne.w	800b448 <_svfprintf_r+0x47c>
 800bfc0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800bfc4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bfc6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800bfc8:	e41a      	b.n	800b800 <_svfprintf_r+0x834>
 800bfca:	aa23      	add	r2, sp, #140	; 0x8c
 800bfcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfd0:	f001 ff26 	bl	800de20 <__ssprint_r>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	f47f aa37 	bne.w	800b448 <_svfprintf_r+0x47c>
 800bfda:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800bfde:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bfe0:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800bfe2:	f7ff bafb 	b.w	800b5dc <_svfprintf_r+0x610>
 800bfe6:	aa23      	add	r2, sp, #140	; 0x8c
 800bfe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfec:	f001 ff18 	bl	800de20 <__ssprint_r>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	f47f aa29 	bne.w	800b448 <_svfprintf_r+0x47c>
 800bff6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800bffa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bffc:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800bffe:	f7ff bafc 	b.w	800b5fa <_svfprintf_r+0x62e>
 800c002:	aa23      	add	r2, sp, #140	; 0x8c
 800c004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c006:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c008:	f001 ff0a 	bl	800de20 <__ssprint_r>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	f47f aa1b 	bne.w	800b448 <_svfprintf_r+0x47c>
 800c012:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c016:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c018:	f7ff b95b 	b.w	800b2d2 <_svfprintf_r+0x306>
 800c01c:	9907      	ldr	r1, [sp, #28]
 800c01e:	f011 0740 	ands.w	r7, r1, #64	; 0x40
 800c022:	f000 8118 	beq.w	800c256 <_svfprintf_r+0x128a>
 800c026:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c028:	f1bb 0f00 	cmp.w	fp, #0
 800c02c:	4603      	mov	r3, r0
 800c02e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800c032:	f103 0304 	add.w	r3, r3, #4
 800c036:	8804      	ldrh	r4, [r0, #0]
 800c038:	f04f 0500 	mov.w	r5, #0
 800c03c:	f2c0 8172 	blt.w	800c324 <_svfprintf_r+0x1358>
 800c040:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c044:	9107      	str	r1, [sp, #28]
 800c046:	ea54 0105 	orrs.w	r1, r4, r5
 800c04a:	930e      	str	r3, [sp, #56]	; 0x38
 800c04c:	f43f aced 	beq.w	800ba2a <_svfprintf_r+0xa5e>
 800c050:	4617      	mov	r7, r2
 800c052:	e4f1      	b.n	800ba38 <_svfprintf_r+0xa6c>
 800c054:	0800eba4 	.word	0x0800eba4
 800c058:	0800eb54 	.word	0x0800eb54
 800c05c:	0800eb88 	.word	0x0800eb88
 800c060:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800c062:	4622      	mov	r2, r4
 800c064:	4620      	mov	r0, r4
 800c066:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800c068:	4623      	mov	r3, r4
 800c06a:	4621      	mov	r1, r4
 800c06c:	f7f4 fd46 	bl	8000afc <__aeabi_dcmpun>
 800c070:	2800      	cmp	r0, #0
 800c072:	f040 82c4 	bne.w	800c5fe <_svfprintf_r+0x1632>
 800c076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c078:	f1bb 3fff 	cmp.w	fp, #4294967295
 800c07c:	f023 0320 	bic.w	r3, r3, #32
 800c080:	930d      	str	r3, [sp, #52]	; 0x34
 800c082:	f000 824a 	beq.w	800c51a <_svfprintf_r+0x154e>
 800c086:	2b47      	cmp	r3, #71	; 0x47
 800c088:	f000 814f 	beq.w	800c32a <_svfprintf_r+0x135e>
 800c08c:	9b07      	ldr	r3, [sp, #28]
 800c08e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c092:	9310      	str	r3, [sp, #64]	; 0x40
 800c094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c096:	1e1f      	subs	r7, r3, #0
 800c098:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c09a:	9308      	str	r3, [sp, #32]
 800c09c:	bfb7      	itett	lt
 800c09e:	463b      	movlt	r3, r7
 800c0a0:	2300      	movge	r3, #0
 800c0a2:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 800c0a6:	232d      	movlt	r3, #45	; 0x2d
 800c0a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0ac:	2b66      	cmp	r3, #102	; 0x66
 800c0ae:	f000 8214 	beq.w	800c4da <_svfprintf_r+0x150e>
 800c0b2:	2b46      	cmp	r3, #70	; 0x46
 800c0b4:	f000 810c 	beq.w	800c2d0 <_svfprintf_r+0x1304>
 800c0b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0ba:	a821      	add	r0, sp, #132	; 0x84
 800c0bc:	2b45      	cmp	r3, #69	; 0x45
 800c0be:	bf18      	it	ne
 800c0c0:	465d      	movne	r5, fp
 800c0c2:	a91e      	add	r1, sp, #120	; 0x78
 800c0c4:	bf08      	it	eq
 800c0c6:	f10b 0501 	addeq.w	r5, fp, #1
 800c0ca:	9004      	str	r0, [sp, #16]
 800c0cc:	9103      	str	r1, [sp, #12]
 800c0ce:	a81d      	add	r0, sp, #116	; 0x74
 800c0d0:	2102      	movs	r1, #2
 800c0d2:	463b      	mov	r3, r7
 800c0d4:	9002      	str	r0, [sp, #8]
 800c0d6:	9a08      	ldr	r2, [sp, #32]
 800c0d8:	9501      	str	r5, [sp, #4]
 800c0da:	9100      	str	r1, [sp, #0]
 800c0dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0de:	f000 fc0f 	bl	800c900 <_dtoa_r>
 800c0e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	2b67      	cmp	r3, #103	; 0x67
 800c0e8:	f040 8236 	bne.w	800c558 <_svfprintf_r+0x158c>
 800c0ec:	9b07      	ldr	r3, [sp, #28]
 800c0ee:	07da      	lsls	r2, r3, #31
 800c0f0:	f140 8272 	bpl.w	800c5d8 <_svfprintf_r+0x160c>
 800c0f4:	1974      	adds	r4, r6, r5
 800c0f6:	9808      	ldr	r0, [sp, #32]
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f7f4 fccb 	bl	8000a98 <__aeabi_dcmpeq>
 800c102:	2800      	cmp	r0, #0
 800c104:	f040 8152 	bne.w	800c3ac <_svfprintf_r+0x13e0>
 800c108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c10a:	429c      	cmp	r4, r3
 800c10c:	d906      	bls.n	800c11c <_svfprintf_r+0x1150>
 800c10e:	2130      	movs	r1, #48	; 0x30
 800c110:	1c5a      	adds	r2, r3, #1
 800c112:	9221      	str	r2, [sp, #132]	; 0x84
 800c114:	7019      	strb	r1, [r3, #0]
 800c116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c118:	429c      	cmp	r4, r3
 800c11a:	d8f9      	bhi.n	800c110 <_svfprintf_r+0x1144>
 800c11c:	1b9b      	subs	r3, r3, r6
 800c11e:	9312      	str	r3, [sp, #72]	; 0x48
 800c120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c122:	2b47      	cmp	r3, #71	; 0x47
 800c124:	f000 813b 	beq.w	800c39e <_svfprintf_r+0x13d2>
 800c128:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c12a:	2b65      	cmp	r3, #101	; 0x65
 800c12c:	f340 8223 	ble.w	800c576 <_svfprintf_r+0x15aa>
 800c130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c132:	2b66      	cmp	r3, #102	; 0x66
 800c134:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c136:	9313      	str	r3, [sp, #76]	; 0x4c
 800c138:	f000 821f 	beq.w	800c57a <_svfprintf_r+0x15ae>
 800c13c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c13e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c140:	428a      	cmp	r2, r1
 800c142:	f2c0 81f0 	blt.w	800c526 <_svfprintf_r+0x155a>
 800c146:	9b07      	ldr	r3, [sp, #28]
 800c148:	07d9      	lsls	r1, r3, #31
 800c14a:	f100 8247 	bmi.w	800c5dc <_svfprintf_r+0x1610>
 800c14e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c152:	920d      	str	r2, [sp, #52]	; 0x34
 800c154:	2267      	movs	r2, #103	; 0x67
 800c156:	9211      	str	r2, [sp, #68]	; 0x44
 800c158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c15a:	2a00      	cmp	r2, #0
 800c15c:	f040 80f4 	bne.w	800c348 <_svfprintf_r+0x137c>
 800c160:	9308      	str	r3, [sp, #32]
 800c162:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c164:	4693      	mov	fp, r2
 800c166:	9307      	str	r3, [sp, #28]
 800c168:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800c16c:	f7ff b839 	b.w	800b1e2 <_svfprintf_r+0x216>
 800c170:	f024 0407 	bic.w	r4, r4, #7
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	9314      	str	r3, [sp, #80]	; 0x50
 800c178:	6863      	ldr	r3, [r4, #4]
 800c17a:	9315      	str	r3, [sp, #84]	; 0x54
 800c17c:	f104 0308 	add.w	r3, r4, #8
 800c180:	930e      	str	r3, [sp, #56]	; 0x38
 800c182:	e492      	b.n	800baaa <_svfprintf_r+0xade>
 800c184:	9b07      	ldr	r3, [sp, #28]
 800c186:	06df      	lsls	r7, r3, #27
 800c188:	d40b      	bmi.n	800c1a2 <_svfprintf_r+0x11d6>
 800c18a:	9b07      	ldr	r3, [sp, #28]
 800c18c:	065e      	lsls	r6, r3, #25
 800c18e:	d508      	bpl.n	800c1a2 <_svfprintf_r+0x11d6>
 800c190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c192:	6813      	ldr	r3, [r2, #0]
 800c194:	3204      	adds	r2, #4
 800c196:	920e      	str	r2, [sp, #56]	; 0x38
 800c198:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800c19c:	801a      	strh	r2, [r3, #0]
 800c19e:	f7fe bf3c 	b.w	800b01a <_svfprintf_r+0x4e>
 800c1a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1a4:	6813      	ldr	r3, [r2, #0]
 800c1a6:	3204      	adds	r2, #4
 800c1a8:	920e      	str	r2, [sp, #56]	; 0x38
 800c1aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	f7fe bf34 	b.w	800b01a <_svfprintf_r+0x4e>
 800c1b2:	9b07      	ldr	r3, [sp, #28]
 800c1b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	f000 80be 	beq.w	800c33c <_svfprintf_r+0x1370>
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	8814      	ldrh	r4, [r2, #0]
 800c1c4:	2500      	movs	r5, #0
 800c1c6:	930e      	str	r3, [sp, #56]	; 0x38
 800c1c8:	f7ff bbe6 	b.w	800b998 <_svfprintf_r+0x9cc>
 800c1cc:	9b07      	ldr	r3, [sp, #28]
 800c1ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	f43f ae42 	beq.w	800be5e <_svfprintf_r+0xe92>
 800c1da:	f9b2 4000 	ldrsh.w	r4, [r2]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	17e5      	asrs	r5, r4, #31
 800c1e2:	930e      	str	r3, [sp, #56]	; 0x38
 800c1e4:	4622      	mov	r2, r4
 800c1e6:	462b      	mov	r3, r5
 800c1e8:	e54d      	b.n	800bc86 <_svfprintf_r+0xcba>
 800c1ea:	9907      	ldr	r1, [sp, #28]
 800c1ec:	f011 0740 	ands.w	r7, r1, #64	; 0x40
 800c1f0:	f43f ae50 	beq.w	800be94 <_svfprintf_r+0xec8>
 800c1f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c1f6:	f1bb 0f00 	cmp.w	fp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800c200:	f103 0304 	add.w	r3, r3, #4
 800c204:	8804      	ldrh	r4, [r0, #0]
 800c206:	f04f 0500 	mov.w	r5, #0
 800c20a:	f2c0 8094 	blt.w	800c336 <_svfprintf_r+0x136a>
 800c20e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c212:	9107      	str	r1, [sp, #28]
 800c214:	ea54 0105 	orrs.w	r1, r4, r5
 800c218:	930e      	str	r3, [sp, #56]	; 0x38
 800c21a:	4617      	mov	r7, r2
 800c21c:	f47f ab8e 	bne.w	800b93c <_svfprintf_r+0x970>
 800c220:	e4d4      	b.n	800bbcc <_svfprintf_r+0xc00>
 800c222:	4614      	mov	r4, r2
 800c224:	3301      	adds	r3, #1
 800c226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c228:	442c      	add	r4, r5
 800c22a:	2b07      	cmp	r3, #7
 800c22c:	9425      	str	r4, [sp, #148]	; 0x94
 800c22e:	9324      	str	r3, [sp, #144]	; 0x90
 800c230:	e889 0024 	stmia.w	r9, {r2, r5}
 800c234:	f73f ae41 	bgt.w	800beba <_svfprintf_r+0xeee>
 800c238:	f109 0908 	add.w	r9, r9, #8
 800c23c:	e648      	b.n	800bed0 <_svfprintf_r+0xf04>
 800c23e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c240:	e5ea      	b.n	800be18 <_svfprintf_r+0xe4c>
 800c242:	9a07      	ldr	r2, [sp, #28]
 800c244:	930e      	str	r3, [sp, #56]	; 0x38
 800c246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c24a:	9207      	str	r2, [sp, #28]
 800c24c:	ea54 0205 	orrs.w	r2, r4, r5
 800c250:	f47f ab74 	bne.w	800b93c <_svfprintf_r+0x970>
 800c254:	e4ba      	b.n	800bbcc <_svfprintf_r+0xc00>
 800c256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c258:	f1bb 0f00 	cmp.w	fp, #0
 800c25c:	4613      	mov	r3, r2
 800c25e:	6814      	ldr	r4, [r2, #0]
 800c260:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800c264:	f103 0304 	add.w	r3, r3, #4
 800c268:	f04f 0500 	mov.w	r5, #0
 800c26c:	db5a      	blt.n	800c324 <_svfprintf_r+0x1358>
 800c26e:	9a07      	ldr	r2, [sp, #28]
 800c270:	930e      	str	r3, [sp, #56]	; 0x38
 800c272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c276:	9207      	str	r2, [sp, #28]
 800c278:	ea54 0205 	orrs.w	r2, r4, r5
 800c27c:	f47f abdc 	bne.w	800ba38 <_svfprintf_r+0xa6c>
 800c280:	f7ff bbd3 	b.w	800ba2a <_svfprintf_r+0xa5e>
 800c284:	9b07      	ldr	r3, [sp, #28]
 800c286:	f108 0801 	add.w	r8, r8, #1
 800c28a:	f043 0320 	orr.w	r3, r3, #32
 800c28e:	9307      	str	r3, [sp, #28]
 800c290:	f898 3000 	ldrb.w	r3, [r8]
 800c294:	f7fe bef4 	b.w	800b080 <_svfprintf_r+0xb4>
 800c298:	aa23      	add	r2, sp, #140	; 0x8c
 800c29a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c29c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c29e:	f001 fdbf 	bl	800de20 <__ssprint_r>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	f47f a8d0 	bne.w	800b448 <_svfprintf_r+0x47c>
 800c2a8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c2ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c2ae:	f7ff b910 	b.w	800b4d2 <_svfprintf_r+0x506>
 800c2b2:	2140      	movs	r1, #64	; 0x40
 800c2b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2b6:	f7fe f9a9 	bl	800a60c <_malloc_r>
 800c2ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2bc:	6010      	str	r0, [r2, #0]
 800c2be:	6110      	str	r0, [r2, #16]
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	f000 81f9 	beq.w	800c6b8 <_svfprintf_r+0x16ec>
 800c2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c8:	2340      	movs	r3, #64	; 0x40
 800c2ca:	6153      	str	r3, [r2, #20]
 800c2cc:	f7fe be95 	b.w	800affa <_svfprintf_r+0x2e>
 800c2d0:	a821      	add	r0, sp, #132	; 0x84
 800c2d2:	a91e      	add	r1, sp, #120	; 0x78
 800c2d4:	9004      	str	r0, [sp, #16]
 800c2d6:	9103      	str	r1, [sp, #12]
 800c2d8:	a81d      	add	r0, sp, #116	; 0x74
 800c2da:	2103      	movs	r1, #3
 800c2dc:	9002      	str	r0, [sp, #8]
 800c2de:	9a08      	ldr	r2, [sp, #32]
 800c2e0:	463b      	mov	r3, r7
 800c2e2:	f8cd b004 	str.w	fp, [sp, #4]
 800c2e6:	9100      	str	r1, [sp, #0]
 800c2e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2ea:	f000 fb09 	bl	800c900 <_dtoa_r>
 800c2ee:	465d      	mov	r5, fp
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2f4:	1974      	adds	r4, r6, r5
 800c2f6:	2b46      	cmp	r3, #70	; 0x46
 800c2f8:	f47f aefd 	bne.w	800c0f6 <_svfprintf_r+0x112a>
 800c2fc:	7833      	ldrb	r3, [r6, #0]
 800c2fe:	2b30      	cmp	r3, #48	; 0x30
 800c300:	f000 8192 	beq.w	800c628 <_svfprintf_r+0x165c>
 800c304:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c306:	442c      	add	r4, r5
 800c308:	e6f5      	b.n	800c0f6 <_svfprintf_r+0x112a>
 800c30a:	aa23      	add	r2, sp, #140	; 0x8c
 800c30c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c30e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c310:	f001 fd86 	bl	800de20 <__ssprint_r>
 800c314:	2800      	cmp	r0, #0
 800c316:	f47f a897 	bne.w	800b448 <_svfprintf_r+0x47c>
 800c31a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c31e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c320:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c322:	e533      	b.n	800bd8c <_svfprintf_r+0xdc0>
 800c324:	930e      	str	r3, [sp, #56]	; 0x38
 800c326:	f7ff bb86 	b.w	800ba36 <_svfprintf_r+0xa6a>
 800c32a:	f1bb 0f00 	cmp.w	fp, #0
 800c32e:	bf08      	it	eq
 800c330:	f04f 0b01 	moveq.w	fp, #1
 800c334:	e6aa      	b.n	800c08c <_svfprintf_r+0x10c0>
 800c336:	930e      	str	r3, [sp, #56]	; 0x38
 800c338:	4617      	mov	r7, r2
 800c33a:	e5b9      	b.n	800beb0 <_svfprintf_r+0xee4>
 800c33c:	3304      	adds	r3, #4
 800c33e:	6814      	ldr	r4, [r2, #0]
 800c340:	2500      	movs	r5, #0
 800c342:	930e      	str	r3, [sp, #56]	; 0x38
 800c344:	f7ff bb28 	b.w	800b998 <_svfprintf_r+0x9cc>
 800c348:	9308      	str	r3, [sp, #32]
 800c34a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c34c:	272d      	movs	r7, #45	; 0x2d
 800c34e:	9307      	str	r3, [sp, #28]
 800c350:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800c354:	f04f 0b00 	mov.w	fp, #0
 800c358:	f7fe bf44 	b.w	800b1e4 <_svfprintf_r+0x218>
 800c35c:	4630      	mov	r0, r6
 800c35e:	f7fe fc65 	bl	800ac2c <strlen>
 800c362:	46ab      	mov	fp, r5
 800c364:	4603      	mov	r3, r0
 800c366:	f7ff babf 	b.w	800b8e8 <_svfprintf_r+0x91c>
 800c36a:	aa23      	add	r2, sp, #140	; 0x8c
 800c36c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c36e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c370:	f001 fd56 	bl	800de20 <__ssprint_r>
 800c374:	2800      	cmp	r0, #0
 800c376:	f47f a867 	bne.w	800b448 <_svfprintf_r+0x47c>
 800c37a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c37c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c37e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c382:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c384:	3301      	adds	r3, #1
 800c386:	440c      	add	r4, r1
 800c388:	2b07      	cmp	r3, #7
 800c38a:	9425      	str	r4, [sp, #148]	; 0x94
 800c38c:	9324      	str	r3, [sp, #144]	; 0x90
 800c38e:	f8c9 6000 	str.w	r6, [r9]
 800c392:	f8c9 1004 	str.w	r1, [r9, #4]
 800c396:	f77e afe6 	ble.w	800b366 <_svfprintf_r+0x39a>
 800c39a:	f7ff b9c6 	b.w	800b72a <_svfprintf_r+0x75e>
 800c39e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c3a0:	1cdd      	adds	r5, r3, #3
 800c3a2:	db1f      	blt.n	800c3e4 <_svfprintf_r+0x1418>
 800c3a4:	459b      	cmp	fp, r3
 800c3a6:	db1d      	blt.n	800c3e4 <_svfprintf_r+0x1418>
 800c3a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c3aa:	e6c7      	b.n	800c13c <_svfprintf_r+0x1170>
 800c3ac:	4623      	mov	r3, r4
 800c3ae:	e6b5      	b.n	800c11c <_svfprintf_r+0x1150>
 800c3b0:	aa23      	add	r2, sp, #140	; 0x8c
 800c3b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c3b6:	f001 fd33 	bl	800de20 <__ssprint_r>
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f47f a844 	bne.w	800b448 <_svfprintf_r+0x47c>
 800c3c0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c3c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c3c6:	f7ff b9db 	b.w	800b780 <_svfprintf_r+0x7b4>
 800c3ca:	4614      	mov	r4, r2
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3d0:	442c      	add	r4, r5
 800c3d2:	2b07      	cmp	r3, #7
 800c3d4:	9425      	str	r4, [sp, #148]	; 0x94
 800c3d6:	9324      	str	r3, [sp, #144]	; 0x90
 800c3d8:	e889 0024 	stmia.w	r9, {r2, r5}
 800c3dc:	dcc5      	bgt.n	800c36a <_svfprintf_r+0x139e>
 800c3de:	f109 0908 	add.w	r9, r9, #8
 800c3e2:	e7ce      	b.n	800c382 <_svfprintf_r+0x13b6>
 800c3e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c3e6:	3a02      	subs	r2, #2
 800c3e8:	9211      	str	r2, [sp, #68]	; 0x44
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	931d      	str	r3, [sp, #116]	; 0x74
 800c3f4:	bfb8      	it	lt
 800c3f6:	425b      	neglt	r3, r3
 800c3f8:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 800c3fc:	bfb4      	ite	lt
 800c3fe:	222d      	movlt	r2, #45	; 0x2d
 800c400:	222b      	movge	r2, #43	; 0x2b
 800c402:	2b09      	cmp	r3, #9
 800c404:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800c408:	f340 80f1 	ble.w	800c5ee <_svfprintf_r+0x1622>
 800c40c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 800c410:	4604      	mov	r4, r0
 800c412:	4aba      	ldr	r2, [pc, #744]	; (800c6fc <_svfprintf_r+0x1730>)
 800c414:	fb82 2103 	smull	r2, r1, r2, r3
 800c418:	17da      	asrs	r2, r3, #31
 800c41a:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 800c41e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800c422:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 800c426:	3230      	adds	r2, #48	; 0x30
 800c428:	2909      	cmp	r1, #9
 800c42a:	460b      	mov	r3, r1
 800c42c:	f804 2d01 	strb.w	r2, [r4, #-1]!
 800c430:	dcef      	bgt.n	800c412 <_svfprintf_r+0x1446>
 800c432:	4621      	mov	r1, r4
 800c434:	3330      	adds	r3, #48	; 0x30
 800c436:	b2da      	uxtb	r2, r3
 800c438:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800c43c:	4288      	cmp	r0, r1
 800c43e:	f240 8142 	bls.w	800c6c6 <_svfprintf_r+0x16fa>
 800c442:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 800c446:	4623      	mov	r3, r4
 800c448:	e001      	b.n	800c44e <_svfprintf_r+0x1482>
 800c44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c44e:	4298      	cmp	r0, r3
 800c450:	f801 2b01 	strb.w	r2, [r1], #1
 800c454:	d1f9      	bne.n	800c44a <_svfprintf_r+0x147e>
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	1b1b      	subs	r3, r3, r4
 800c45a:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800c45e:	4413      	add	r3, r2
 800c460:	aa1f      	add	r2, sp, #124	; 0x7c
 800c462:	1a9b      	subs	r3, r3, r2
 800c464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c466:	9319      	str	r3, [sp, #100]	; 0x64
 800c468:	2a01      	cmp	r2, #1
 800c46a:	4413      	add	r3, r2
 800c46c:	930d      	str	r3, [sp, #52]	; 0x34
 800c46e:	f340 80fa 	ble.w	800c666 <_svfprintf_r+0x169a>
 800c472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c474:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c476:	4413      	add	r3, r2
 800c478:	2200      	movs	r2, #0
 800c47a:	930d      	str	r3, [sp, #52]	; 0x34
 800c47c:	9213      	str	r2, [sp, #76]	; 0x4c
 800c47e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c482:	e669      	b.n	800c158 <_svfprintf_r+0x118c>
 800c484:	aa23      	add	r2, sp, #140	; 0x8c
 800c486:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c488:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c48a:	f001 fcc9 	bl	800de20 <__ssprint_r>
 800c48e:	2800      	cmp	r0, #0
 800c490:	f47e afda 	bne.w	800b448 <_svfprintf_r+0x47c>
 800c494:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c498:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c49a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c49c:	e522      	b.n	800bee4 <_svfprintf_r+0xf18>
 800c49e:	aa23      	add	r2, sp, #140	; 0x8c
 800c4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c4a4:	f001 fcbc 	bl	800de20 <__ssprint_r>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	f47e afcd 	bne.w	800b448 <_svfprintf_r+0x47c>
 800c4ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c4b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c4b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c4ba:	e52b      	b.n	800bf14 <_svfprintf_r+0xf48>
 800c4bc:	465b      	mov	r3, fp
 800c4be:	2b06      	cmp	r3, #6
 800c4c0:	bf28      	it	cs
 800c4c2:	2306      	movcs	r3, #6
 800c4c4:	930d      	str	r3, [sp, #52]	; 0x34
 800c4c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c4ca:	46b3      	mov	fp, r6
 800c4cc:	4637      	mov	r7, r6
 800c4ce:	9613      	str	r6, [sp, #76]	; 0x4c
 800c4d0:	940e      	str	r4, [sp, #56]	; 0x38
 800c4d2:	9308      	str	r3, [sp, #32]
 800c4d4:	4e8a      	ldr	r6, [pc, #552]	; (800c700 <_svfprintf_r+0x1734>)
 800c4d6:	f7fe be84 	b.w	800b1e2 <_svfprintf_r+0x216>
 800c4da:	a821      	add	r0, sp, #132	; 0x84
 800c4dc:	a91e      	add	r1, sp, #120	; 0x78
 800c4de:	9004      	str	r0, [sp, #16]
 800c4e0:	9103      	str	r1, [sp, #12]
 800c4e2:	a81d      	add	r0, sp, #116	; 0x74
 800c4e4:	2103      	movs	r1, #3
 800c4e6:	9002      	str	r0, [sp, #8]
 800c4e8:	9a08      	ldr	r2, [sp, #32]
 800c4ea:	463b      	mov	r3, r7
 800c4ec:	f8cd b004 	str.w	fp, [sp, #4]
 800c4f0:	9100      	str	r1, [sp, #0]
 800c4f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c4f4:	f000 fa04 	bl	800c900 <_dtoa_r>
 800c4f8:	465d      	mov	r5, fp
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	eb00 040b 	add.w	r4, r0, fp
 800c500:	e6fc      	b.n	800c2fc <_svfprintf_r+0x1330>
 800c502:	920e      	str	r2, [sp, #56]	; 0x38
 800c504:	461f      	mov	r7, r3
 800c506:	e4d3      	b.n	800beb0 <_svfprintf_r+0xee4>
 800c508:	232d      	movs	r3, #45	; 0x2d
 800c50a:	461f      	mov	r7, r3
 800c50c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800c510:	f7ff baee 	b.w	800baf0 <_svfprintf_r+0xb24>
 800c514:	9307      	str	r3, [sp, #28]
 800c516:	f7fe be4b 	b.w	800b1b0 <_svfprintf_r+0x1e4>
 800c51a:	f04f 0b06 	mov.w	fp, #6
 800c51e:	e5b5      	b.n	800c08c <_svfprintf_r+0x10c0>
 800c520:	920e      	str	r2, [sp, #56]	; 0x38
 800c522:	f7ff ba88 	b.w	800ba36 <_svfprintf_r+0xa6a>
 800c526:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c528:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c52a:	4413      	add	r3, r2
 800c52c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c52e:	930d      	str	r3, [sp, #52]	; 0x34
 800c530:	2a00      	cmp	r2, #0
 800c532:	f340 8090 	ble.w	800c656 <_svfprintf_r+0x168a>
 800c536:	2267      	movs	r2, #103	; 0x67
 800c538:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c53c:	9211      	str	r2, [sp, #68]	; 0x44
 800c53e:	e60b      	b.n	800c158 <_svfprintf_r+0x118c>
 800c540:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 800c544:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800c548:	9308      	str	r3, [sp, #32]
 800c54a:	4683      	mov	fp, r0
 800c54c:	940e      	str	r4, [sp, #56]	; 0x38
 800c54e:	9013      	str	r0, [sp, #76]	; 0x4c
 800c550:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800c554:	f7fe be45 	b.w	800b1e2 <_svfprintf_r+0x216>
 800c558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c55a:	2b47      	cmp	r3, #71	; 0x47
 800c55c:	f47f adca 	bne.w	800c0f4 <_svfprintf_r+0x1128>
 800c560:	9b07      	ldr	r3, [sp, #28]
 800c562:	07db      	lsls	r3, r3, #31
 800c564:	f53f aec5 	bmi.w	800c2f2 <_svfprintf_r+0x1326>
 800c568:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c56a:	1b9b      	subs	r3, r3, r6
 800c56c:	9312      	str	r3, [sp, #72]	; 0x48
 800c56e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c570:	2b47      	cmp	r3, #71	; 0x47
 800c572:	f43f af14 	beq.w	800c39e <_svfprintf_r+0x13d2>
 800c576:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c578:	e737      	b.n	800c3ea <_svfprintf_r+0x141e>
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	dd7d      	ble.n	800c67a <_svfprintf_r+0x16ae>
 800c57e:	f1bb 0f00 	cmp.w	fp, #0
 800c582:	d15f      	bne.n	800c644 <_svfprintf_r+0x1678>
 800c584:	9a07      	ldr	r2, [sp, #28]
 800c586:	07d4      	lsls	r4, r2, #31
 800c588:	d45c      	bmi.n	800c644 <_svfprintf_r+0x1678>
 800c58a:	461a      	mov	r2, r3
 800c58c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c590:	920d      	str	r2, [sp, #52]	; 0x34
 800c592:	e5e1      	b.n	800c158 <_svfprintf_r+0x118c>
 800c594:	9b07      	ldr	r3, [sp, #28]
 800c596:	465f      	mov	r7, fp
 800c598:	07db      	lsls	r3, r3, #31
 800c59a:	d505      	bpl.n	800c5a8 <_svfprintf_r+0x15dc>
 800c59c:	ae40      	add	r6, sp, #256	; 0x100
 800c59e:	2330      	movs	r3, #48	; 0x30
 800c5a0:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800c5a4:	f7fe be13 	b.w	800b1ce <_svfprintf_r+0x202>
 800c5a8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800c5ac:	ae30      	add	r6, sp, #192	; 0xc0
 800c5ae:	f7fe be11 	b.w	800b1d4 <_svfprintf_r+0x208>
 800c5b2:	46a0      	mov	r8, r4
 800c5b4:	2500      	movs	r5, #0
 800c5b6:	f7fe bd65 	b.w	800b084 <_svfprintf_r+0xb8>
 800c5ba:	aa23      	add	r2, sp, #140	; 0x8c
 800c5bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c5c0:	f001 fc2e 	bl	800de20 <__ssprint_r>
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	f47e af3f 	bne.w	800b448 <_svfprintf_r+0x47c>
 800c5ca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c5ce:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c5d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c5d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c5d4:	f7ff bbf1 	b.w	800bdba <_svfprintf_r+0xdee>
 800c5d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5da:	e59f      	b.n	800c11c <_svfprintf_r+0x1150>
 800c5dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c5de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5e0:	4413      	add	r3, r2
 800c5e2:	2267      	movs	r2, #103	; 0x67
 800c5e4:	930d      	str	r3, [sp, #52]	; 0x34
 800c5e6:	9211      	str	r2, [sp, #68]	; 0x44
 800c5e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c5ec:	e5b4      	b.n	800c158 <_svfprintf_r+0x118c>
 800c5ee:	3330      	adds	r3, #48	; 0x30
 800c5f0:	2230      	movs	r2, #48	; 0x30
 800c5f2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800c5f6:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 800c5fa:	ab20      	add	r3, sp, #128	; 0x80
 800c5fc:	e730      	b.n	800c460 <_svfprintf_r+0x1494>
 800c5fe:	9907      	ldr	r1, [sp, #28]
 800c600:	4e40      	ldr	r6, [pc, #256]	; (800c704 <_svfprintf_r+0x1738>)
 800c602:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c606:	4b40      	ldr	r3, [pc, #256]	; (800c708 <_svfprintf_r+0x173c>)
 800c608:	9107      	str	r1, [sp, #28]
 800c60a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c60c:	2203      	movs	r2, #3
 800c60e:	f04f 0b00 	mov.w	fp, #0
 800c612:	9208      	str	r2, [sp, #32]
 800c614:	2947      	cmp	r1, #71	; 0x47
 800c616:	bfd8      	it	le
 800c618:	461e      	movle	r6, r3
 800c61a:	920d      	str	r2, [sp, #52]	; 0x34
 800c61c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800c620:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800c624:	f7fe bddd 	b.w	800b1e2 <_svfprintf_r+0x216>
 800c628:	9808      	ldr	r0, [sp, #32]
 800c62a:	4639      	mov	r1, r7
 800c62c:	2200      	movs	r2, #0
 800c62e:	2300      	movs	r3, #0
 800c630:	f7f4 fa32 	bl	8000a98 <__aeabi_dcmpeq>
 800c634:	2800      	cmp	r0, #0
 800c636:	f47f ae65 	bne.w	800c304 <_svfprintf_r+0x1338>
 800c63a:	f1c5 0501 	rsb	r5, r5, #1
 800c63e:	951d      	str	r5, [sp, #116]	; 0x74
 800c640:	442c      	add	r4, r5
 800c642:	e558      	b.n	800c0f6 <_svfprintf_r+0x112a>
 800c644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c646:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c648:	189d      	adds	r5, r3, r2
 800c64a:	eb05 030b 	add.w	r3, r5, fp
 800c64e:	930d      	str	r3, [sp, #52]	; 0x34
 800c650:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c654:	e580      	b.n	800c158 <_svfprintf_r+0x118c>
 800c656:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c65a:	f1c3 0301 	rsb	r3, r3, #1
 800c65e:	441a      	add	r2, r3
 800c660:	4613      	mov	r3, r2
 800c662:	920d      	str	r2, [sp, #52]	; 0x34
 800c664:	e767      	b.n	800c536 <_svfprintf_r+0x156a>
 800c666:	9b07      	ldr	r3, [sp, #28]
 800c668:	f013 0301 	ands.w	r3, r3, #1
 800c66c:	f47f af01 	bne.w	800c472 <_svfprintf_r+0x14a6>
 800c670:	9313      	str	r3, [sp, #76]	; 0x4c
 800c672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c674:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c678:	e56e      	b.n	800c158 <_svfprintf_r+0x118c>
 800c67a:	f1bb 0f00 	cmp.w	fp, #0
 800c67e:	d102      	bne.n	800c686 <_svfprintf_r+0x16ba>
 800c680:	9b07      	ldr	r3, [sp, #28]
 800c682:	07d8      	lsls	r0, r3, #31
 800c684:	d507      	bpl.n	800c696 <_svfprintf_r+0x16ca>
 800c686:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c688:	1c5d      	adds	r5, r3, #1
 800c68a:	eb05 030b 	add.w	r3, r5, fp
 800c68e:	930d      	str	r3, [sp, #52]	; 0x34
 800c690:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c694:	e560      	b.n	800c158 <_svfprintf_r+0x118c>
 800c696:	2301      	movs	r3, #1
 800c698:	930d      	str	r3, [sp, #52]	; 0x34
 800c69a:	e55d      	b.n	800c158 <_svfprintf_r+0x118c>
 800c69c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c69e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c6a2:	6805      	ldr	r5, [r0, #0]
 800c6a4:	3004      	adds	r0, #4
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	900e      	str	r0, [sp, #56]	; 0x38
 800c6aa:	46a0      	mov	r8, r4
 800c6ac:	f6be ace8 	bge.w	800b080 <_svfprintf_r+0xb4>
 800c6b0:	f04f 35ff 	mov.w	r5, #4294967295
 800c6b4:	f7fe bce4 	b.w	800b080 <_svfprintf_r+0xb4>
 800c6b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6ba:	230c      	movs	r3, #12
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c2:	f7fe beca 	b.w	800b45a <_svfprintf_r+0x48e>
 800c6c6:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800c6ca:	e6c9      	b.n	800c460 <_svfprintf_r+0x1494>
 800c6cc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c6d0:	f7ff b9db 	b.w	800ba8a <_svfprintf_r+0xabe>
 800c6d4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c6d8:	f7ff ba54 	b.w	800bb84 <_svfprintf_r+0xbb8>
 800c6dc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c6e0:	f7ff ba26 	b.w	800bb30 <_svfprintf_r+0xb64>
 800c6e4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c6e8:	f7ff b948 	b.w	800b97c <_svfprintf_r+0x9b0>
 800c6ec:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c6f0:	f7ff b909 	b.w	800b906 <_svfprintf_r+0x93a>
 800c6f4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c6f8:	f7ff b97e 	b.w	800b9f8 <_svfprintf_r+0xa2c>
 800c6fc:	66666667 	.word	0x66666667
 800c700:	0800eb9c 	.word	0x0800eb9c
 800c704:	0800eb70 	.word	0x0800eb70
 800c708:	0800eb6c 	.word	0x0800eb6c
 800c70c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c710:	f7ff bb06 	b.w	800bd20 <_svfprintf_r+0xd54>
 800c714:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c718:	f7ff baa2 	b.w	800bc60 <_svfprintf_r+0xc94>
 800c71c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c720:	f7ff ba89 	b.w	800bc36 <_svfprintf_r+0xc6a>
 800c724:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c728:	f7ff ba5e 	b.w	800bbe8 <_svfprintf_r+0xc1c>

0800c72c <__register_exitproc>:
 800c72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c730:	4c25      	ldr	r4, [pc, #148]	; (800c7c8 <__register_exitproc+0x9c>)
 800c732:	4606      	mov	r6, r0
 800c734:	6825      	ldr	r5, [r4, #0]
 800c736:	4688      	mov	r8, r1
 800c738:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800c73c:	4692      	mov	sl, r2
 800c73e:	4699      	mov	r9, r3
 800c740:	b3c4      	cbz	r4, 800c7b4 <__register_exitproc+0x88>
 800c742:	6860      	ldr	r0, [r4, #4]
 800c744:	281f      	cmp	r0, #31
 800c746:	dc17      	bgt.n	800c778 <__register_exitproc+0x4c>
 800c748:	1c41      	adds	r1, r0, #1
 800c74a:	b176      	cbz	r6, 800c76a <__register_exitproc+0x3e>
 800c74c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800c750:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
 800c754:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
 800c758:	2201      	movs	r2, #1
 800c75a:	4082      	lsls	r2, r0
 800c75c:	4315      	orrs	r5, r2
 800c75e:	2e02      	cmp	r6, #2
 800c760:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
 800c764:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
 800c768:	d01e      	beq.n	800c7a8 <__register_exitproc+0x7c>
 800c76a:	1c83      	adds	r3, r0, #2
 800c76c:	6061      	str	r1, [r4, #4]
 800c76e:	2000      	movs	r0, #0
 800c770:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
 800c774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c778:	4b14      	ldr	r3, [pc, #80]	; (800c7cc <__register_exitproc+0xa0>)
 800c77a:	b303      	cbz	r3, 800c7be <__register_exitproc+0x92>
 800c77c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c780:	f3af 8000 	nop.w
 800c784:	4604      	mov	r4, r0
 800c786:	b1d0      	cbz	r0, 800c7be <__register_exitproc+0x92>
 800c788:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800c78c:	2700      	movs	r7, #0
 800c78e:	e884 0088 	stmia.w	r4, {r3, r7}
 800c792:	4638      	mov	r0, r7
 800c794:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800c798:	2101      	movs	r1, #1
 800c79a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800c79e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800c7a2:	2e00      	cmp	r6, #0
 800c7a4:	d0e1      	beq.n	800c76a <__register_exitproc+0x3e>
 800c7a6:	e7d1      	b.n	800c74c <__register_exitproc+0x20>
 800c7a8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 800c7ac:	431a      	orrs	r2, r3
 800c7ae:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800c7b2:	e7da      	b.n	800c76a <__register_exitproc+0x3e>
 800c7b4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800c7b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800c7bc:	e7c1      	b.n	800c742 <__register_exitproc+0x16>
 800c7be:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c6:	bf00      	nop
 800c7c8:	0800eb50 	.word	0x0800eb50
 800c7cc:	00000000 	.word	0x00000000

0800c7d0 <quorem>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	6903      	ldr	r3, [r0, #16]
 800c7d6:	690f      	ldr	r7, [r1, #16]
 800c7d8:	b083      	sub	sp, #12
 800c7da:	429f      	cmp	r7, r3
 800c7dc:	f300 8089 	bgt.w	800c8f2 <quorem+0x122>
 800c7e0:	3f01      	subs	r7, #1
 800c7e2:	f101 0614 	add.w	r6, r1, #20
 800c7e6:	f100 0a14 	add.w	sl, r0, #20
 800c7ea:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
 800c7ee:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	fbb2 f8f3 	udiv	r8, r2, r3
 800c7f8:	00bb      	lsls	r3, r7, #2
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	eb06 0903 	add.w	r9, r6, r3
 800c800:	4453      	add	r3, sl
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	f1b8 0f00 	cmp.w	r8, #0
 800c808:	d03b      	beq.n	800c882 <quorem+0xb2>
 800c80a:	2300      	movs	r3, #0
 800c80c:	461c      	mov	r4, r3
 800c80e:	46b4      	mov	ip, r6
 800c810:	46d6      	mov	lr, sl
 800c812:	f85c bb04 	ldr.w	fp, [ip], #4
 800c816:	f8de 5000 	ldr.w	r5, [lr]
 800c81a:	fa1f f28b 	uxth.w	r2, fp
 800c81e:	fb08 3202 	mla	r2, r8, r2, r3
 800c822:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 800c826:	0c13      	lsrs	r3, r2, #16
 800c828:	fb08 330b 	mla	r3, r8, fp, r3
 800c82c:	b292      	uxth	r2, r2
 800c82e:	1aa4      	subs	r4, r4, r2
 800c830:	fa1f fb83 	uxth.w	fp, r3
 800c834:	b2aa      	uxth	r2, r5
 800c836:	4422      	add	r2, r4
 800c838:	ebcb 4415 	rsb	r4, fp, r5, lsr #16
 800c83c:	eb04 4422 	add.w	r4, r4, r2, asr #16
 800c840:	b292      	uxth	r2, r2
 800c842:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c846:	45e1      	cmp	r9, ip
 800c848:	f84e 2b04 	str.w	r2, [lr], #4
 800c84c:	ea4f 4424 	mov.w	r4, r4, asr #16
 800c850:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c854:	d2dd      	bcs.n	800c812 <quorem+0x42>
 800c856:	9b00      	ldr	r3, [sp, #0]
 800c858:	f85a 3003 	ldr.w	r3, [sl, r3]
 800c85c:	b98b      	cbnz	r3, 800c882 <quorem+0xb2>
 800c85e:	9c01      	ldr	r4, [sp, #4]
 800c860:	1f23      	subs	r3, r4, #4
 800c862:	459a      	cmp	sl, r3
 800c864:	d20c      	bcs.n	800c880 <quorem+0xb0>
 800c866:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c86a:	b94b      	cbnz	r3, 800c880 <quorem+0xb0>
 800c86c:	f1a4 0308 	sub.w	r3, r4, #8
 800c870:	e002      	b.n	800c878 <quorem+0xa8>
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	3b04      	subs	r3, #4
 800c876:	b91a      	cbnz	r2, 800c880 <quorem+0xb0>
 800c878:	459a      	cmp	sl, r3
 800c87a:	f107 37ff 	add.w	r7, r7, #4294967295
 800c87e:	d3f8      	bcc.n	800c872 <quorem+0xa2>
 800c880:	6107      	str	r7, [r0, #16]
 800c882:	4604      	mov	r4, r0
 800c884:	f001 f9c4 	bl	800dc10 <__mcmp>
 800c888:	2800      	cmp	r0, #0
 800c88a:	db2e      	blt.n	800c8ea <quorem+0x11a>
 800c88c:	2300      	movs	r3, #0
 800c88e:	4655      	mov	r5, sl
 800c890:	4619      	mov	r1, r3
 800c892:	f108 0801 	add.w	r8, r8, #1
 800c896:	f856 2b04 	ldr.w	r2, [r6], #4
 800c89a:	682b      	ldr	r3, [r5, #0]
 800c89c:	b290      	uxth	r0, r2
 800c89e:	1a08      	subs	r0, r1, r0
 800c8a0:	0c12      	lsrs	r2, r2, #16
 800c8a2:	b299      	uxth	r1, r3
 800c8a4:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800c8a8:	1842      	adds	r2, r0, r1
 800c8aa:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800c8ae:	b292      	uxth	r2, r2
 800c8b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c8b4:	45b1      	cmp	r9, r6
 800c8b6:	f845 2b04 	str.w	r2, [r5], #4
 800c8ba:	ea4f 4123 	mov.w	r1, r3, asr #16
 800c8be:	d2ea      	bcs.n	800c896 <quorem+0xc6>
 800c8c0:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 800c8c4:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 800c8c8:	b97a      	cbnz	r2, 800c8ea <quorem+0x11a>
 800c8ca:	1f1a      	subs	r2, r3, #4
 800c8cc:	4592      	cmp	sl, r2
 800c8ce:	d20b      	bcs.n	800c8e8 <quorem+0x118>
 800c8d0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800c8d4:	b942      	cbnz	r2, 800c8e8 <quorem+0x118>
 800c8d6:	3b08      	subs	r3, #8
 800c8d8:	e002      	b.n	800c8e0 <quorem+0x110>
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	3b04      	subs	r3, #4
 800c8de:	b91a      	cbnz	r2, 800c8e8 <quorem+0x118>
 800c8e0:	459a      	cmp	sl, r3
 800c8e2:	f107 37ff 	add.w	r7, r7, #4294967295
 800c8e6:	d3f8      	bcc.n	800c8da <quorem+0x10a>
 800c8e8:	6127      	str	r7, [r4, #16]
 800c8ea:	4640      	mov	r0, r8
 800c8ec:	b003      	add	sp, #12
 800c8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	b003      	add	sp, #12
 800c8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fa:	bf00      	nop
 800c8fc:	0000      	movs	r0, r0
	...

0800c900 <_dtoa_r>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800c906:	b099      	sub	sp, #100	; 0x64
 800c908:	4681      	mov	r9, r0
 800c90a:	4692      	mov	sl, r2
 800c90c:	469b      	mov	fp, r3
 800c90e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c910:	b149      	cbz	r1, 800c926 <_dtoa_r+0x26>
 800c912:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c914:	2301      	movs	r3, #1
 800c916:	4093      	lsls	r3, r2
 800c918:	608b      	str	r3, [r1, #8]
 800c91a:	604a      	str	r2, [r1, #4]
 800c91c:	f000 ff92 	bl	800d844 <_Bfree>
 800c920:	2300      	movs	r3, #0
 800c922:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800c926:	f1bb 0f00 	cmp.w	fp, #0
 800c92a:	46d8      	mov	r8, fp
 800c92c:	db33      	blt.n	800c996 <_dtoa_r+0x96>
 800c92e:	2300      	movs	r3, #0
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	4ba3      	ldr	r3, [pc, #652]	; (800cbc0 <_dtoa_r+0x2c0>)
 800c934:	461a      	mov	r2, r3
 800c936:	ea08 0303 	and.w	r3, r8, r3
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d014      	beq.n	800c968 <_dtoa_r+0x68>
 800c93e:	2200      	movs	r2, #0
 800c940:	2300      	movs	r3, #0
 800c942:	4650      	mov	r0, sl
 800c944:	4659      	mov	r1, fp
 800c946:	f7f4 f8a7 	bl	8000a98 <__aeabi_dcmpeq>
 800c94a:	4605      	mov	r5, r0
 800c94c:	b348      	cbz	r0, 800c9a2 <_dtoa_r+0xa2>
 800c94e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c950:	2301      	movs	r3, #1
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c956:	2b00      	cmp	r3, #0
 800c958:	f000 80c5 	beq.w	800cae6 <_dtoa_r+0x1e6>
 800c95c:	4899      	ldr	r0, [pc, #612]	; (800cbc4 <_dtoa_r+0x2c4>)
 800c95e:	6018      	str	r0, [r3, #0]
 800c960:	3801      	subs	r0, #1
 800c962:	b019      	add	sp, #100	; 0x64
 800c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c968:	f242 730f 	movw	r3, #9999	; 0x270f
 800c96c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	f1ba 0f00 	cmp.w	sl, #0
 800c974:	f000 80a2 	beq.w	800cabc <_dtoa_r+0x1bc>
 800c978:	4893      	ldr	r0, [pc, #588]	; (800cbc8 <_dtoa_r+0x2c8>)
 800c97a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d0f0      	beq.n	800c962 <_dtoa_r+0x62>
 800c980:	78c3      	ldrb	r3, [r0, #3]
 800c982:	2b00      	cmp	r3, #0
 800c984:	f000 80b1 	beq.w	800caea <_dtoa_r+0x1ea>
 800c988:	f100 0308 	add.w	r3, r0, #8
 800c98c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	b019      	add	sp, #100	; 0x64
 800c992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c996:	2301      	movs	r3, #1
 800c998:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	46c3      	mov	fp, r8
 800c9a0:	e7c7      	b.n	800c932 <_dtoa_r+0x32>
 800c9a2:	aa16      	add	r2, sp, #88	; 0x58
 800c9a4:	ab17      	add	r3, sp, #92	; 0x5c
 800c9a6:	9201      	str	r2, [sp, #4]
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	4652      	mov	r2, sl
 800c9ac:	465b      	mov	r3, fp
 800c9ae:	4648      	mov	r0, r9
 800c9b0:	f001 f9e2 	bl	800dd78 <__d2b>
 800c9b4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 800c9b8:	9009      	str	r0, [sp, #36]	; 0x24
 800c9ba:	f040 8088 	bne.w	800cace <_dtoa_r+0x1ce>
 800c9be:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800c9c0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c9c2:	442c      	add	r4, r5
 800c9c4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c9c8:	2b20      	cmp	r3, #32
 800c9ca:	f340 828a 	ble.w	800cee2 <_dtoa_r+0x5e2>
 800c9ce:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800c9d2:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800c9d6:	fa08 f803 	lsl.w	r8, r8, r3
 800c9da:	fa2a f000 	lsr.w	r0, sl, r0
 800c9de:	ea40 0008 	orr.w	r0, r0, r8
 800c9e2:	f7f3 fd7b 	bl	80004dc <__aeabi_ui2d>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	3c01      	subs	r4, #1
 800c9ea:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c9ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4b76      	ldr	r3, [pc, #472]	; (800cbcc <_dtoa_r+0x2cc>)
 800c9f4:	f7f3 fc34 	bl	8000260 <__aeabi_dsub>
 800c9f8:	a36b      	add	r3, pc, #428	; (adr r3, 800cba8 <_dtoa_r+0x2a8>)
 800c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fe:	f7f3 fde3 	bl	80005c8 <__aeabi_dmul>
 800ca02:	a36b      	add	r3, pc, #428	; (adr r3, 800cbb0 <_dtoa_r+0x2b0>)
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f7f3 fc2c 	bl	8000264 <__adddf3>
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	4620      	mov	r0, r4
 800ca10:	460f      	mov	r7, r1
 800ca12:	f7f3 fd73 	bl	80004fc <__aeabi_i2d>
 800ca16:	a368      	add	r3, pc, #416	; (adr r3, 800cbb8 <_dtoa_r+0x2b8>)
 800ca18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1c:	f7f3 fdd4 	bl	80005c8 <__aeabi_dmul>
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	4630      	mov	r0, r6
 800ca26:	4639      	mov	r1, r7
 800ca28:	f7f3 fc1c 	bl	8000264 <__adddf3>
 800ca2c:	4606      	mov	r6, r0
 800ca2e:	460f      	mov	r7, r1
 800ca30:	f7f4 f87a 	bl	8000b28 <__aeabi_d2iz>
 800ca34:	2200      	movs	r2, #0
 800ca36:	9003      	str	r0, [sp, #12]
 800ca38:	2300      	movs	r3, #0
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	f7f4 f835 	bl	8000aac <__aeabi_dcmplt>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	f040 8229 	bne.w	800ce9a <_dtoa_r+0x59a>
 800ca48:	9e03      	ldr	r6, [sp, #12]
 800ca4a:	2e16      	cmp	r6, #22
 800ca4c:	f200 8222 	bhi.w	800ce94 <_dtoa_r+0x594>
 800ca50:	495f      	ldr	r1, [pc, #380]	; (800cbd0 <_dtoa_r+0x2d0>)
 800ca52:	4652      	mov	r2, sl
 800ca54:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ca58:	465b      	mov	r3, fp
 800ca5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca5e:	f7f4 f843 	bl	8000ae8 <__aeabi_dcmpgt>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	f000 8242 	beq.w	800ceec <_dtoa_r+0x5ec>
 800ca68:	1e73      	subs	r3, r6, #1
 800ca6a:	9303      	str	r3, [sp, #12]
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	930d      	str	r3, [sp, #52]	; 0x34
 800ca70:	1b2c      	subs	r4, r5, r4
 800ca72:	1e63      	subs	r3, r4, #1
 800ca74:	9304      	str	r3, [sp, #16]
 800ca76:	f100 822b 	bmi.w	800ced0 <_dtoa_r+0x5d0>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9306      	str	r3, [sp, #24]
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f2c0 821c 	blt.w	800cebe <_dtoa_r+0x5be>
 800ca86:	9a04      	ldr	r2, [sp, #16]
 800ca88:	930c      	str	r3, [sp, #48]	; 0x30
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	4419      	add	r1, r3
 800ca8e:	2300      	movs	r3, #0
 800ca90:	9104      	str	r1, [sp, #16]
 800ca92:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca96:	2b09      	cmp	r3, #9
 800ca98:	d829      	bhi.n	800caee <_dtoa_r+0x1ee>
 800ca9a:	2b05      	cmp	r3, #5
 800ca9c:	f340 8652 	ble.w	800d744 <_dtoa_r+0xe44>
 800caa0:	3b04      	subs	r3, #4
 800caa2:	9322      	str	r3, [sp, #136]	; 0x88
 800caa4:	2500      	movs	r5, #0
 800caa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800caa8:	3b02      	subs	r3, #2
 800caaa:	2b03      	cmp	r3, #3
 800caac:	f200 862f 	bhi.w	800d70e <_dtoa_r+0xe0e>
 800cab0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cab4:	02200327 	.word	0x02200327
 800cab8:	04530332 	.word	0x04530332
 800cabc:	4b42      	ldr	r3, [pc, #264]	; (800cbc8 <_dtoa_r+0x2c8>)
 800cabe:	4a45      	ldr	r2, [pc, #276]	; (800cbd4 <_dtoa_r+0x2d4>)
 800cac0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cac4:	2800      	cmp	r0, #0
 800cac6:	bf14      	ite	ne
 800cac8:	4618      	movne	r0, r3
 800caca:	4610      	moveq	r0, r2
 800cacc:	e755      	b.n	800c97a <_dtoa_r+0x7a>
 800cace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cad2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cad6:	950f      	str	r5, [sp, #60]	; 0x3c
 800cad8:	4650      	mov	r0, sl
 800cada:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cade:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cae2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800cae4:	e784      	b.n	800c9f0 <_dtoa_r+0xf0>
 800cae6:	483c      	ldr	r0, [pc, #240]	; (800cbd8 <_dtoa_r+0x2d8>)
 800cae8:	e73b      	b.n	800c962 <_dtoa_r+0x62>
 800caea:	1cc3      	adds	r3, r0, #3
 800caec:	e74e      	b.n	800c98c <_dtoa_r+0x8c>
 800caee:	2100      	movs	r1, #0
 800caf0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800caf4:	4648      	mov	r0, r9
 800caf6:	9122      	str	r1, [sp, #136]	; 0x88
 800caf8:	f000 fe7c 	bl	800d7f4 <_Balloc>
 800cafc:	f04f 33ff 	mov.w	r3, #4294967295
 800cb00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cb02:	9307      	str	r3, [sp, #28]
 800cb04:	930e      	str	r3, [sp, #56]	; 0x38
 800cb06:	2301      	movs	r3, #1
 800cb08:	9008      	str	r0, [sp, #32]
 800cb0a:	9223      	str	r2, [sp, #140]	; 0x8c
 800cb0c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800cb10:	930a      	str	r3, [sp, #40]	; 0x28
 800cb12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f2c0 80ca 	blt.w	800ccae <_dtoa_r+0x3ae>
 800cb1a:	9a03      	ldr	r2, [sp, #12]
 800cb1c:	2a0e      	cmp	r2, #14
 800cb1e:	f300 80c6 	bgt.w	800ccae <_dtoa_r+0x3ae>
 800cb22:	4b2b      	ldr	r3, [pc, #172]	; (800cbd0 <_dtoa_r+0x2d0>)
 800cb24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb28:	cb18      	ldmia	r3, {r3, r4}
 800cb2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cb2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f2c0 82fc 	blt.w	800d12e <_dtoa_r+0x82e>
 800cb36:	4656      	mov	r6, sl
 800cb38:	465f      	mov	r7, fp
 800cb3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cb3e:	4630      	mov	r0, r6
 800cb40:	4652      	mov	r2, sl
 800cb42:	465b      	mov	r3, fp
 800cb44:	4639      	mov	r1, r7
 800cb46:	f7f3 fe69 	bl	800081c <__aeabi_ddiv>
 800cb4a:	f7f3 ffed 	bl	8000b28 <__aeabi_d2iz>
 800cb4e:	4604      	mov	r4, r0
 800cb50:	f7f3 fcd4 	bl	80004fc <__aeabi_i2d>
 800cb54:	4652      	mov	r2, sl
 800cb56:	465b      	mov	r3, fp
 800cb58:	f7f3 fd36 	bl	80005c8 <__aeabi_dmul>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 fb7c 	bl	8000260 <__aeabi_dsub>
 800cb68:	9e07      	ldr	r6, [sp, #28]
 800cb6a:	9f08      	ldr	r7, [sp, #32]
 800cb6c:	f104 0530 	add.w	r5, r4, #48	; 0x30
 800cb70:	2e01      	cmp	r6, #1
 800cb72:	703d      	strb	r5, [r7, #0]
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	f107 0501 	add.w	r5, r7, #1
 800cb7c:	d05e      	beq.n	800cc3c <_dtoa_r+0x33c>
 800cb7e:	2200      	movs	r2, #0
 800cb80:	4b16      	ldr	r3, [pc, #88]	; (800cbdc <_dtoa_r+0x2dc>)
 800cb82:	f7f3 fd21 	bl	80005c8 <__aeabi_dmul>
 800cb86:	2200      	movs	r2, #0
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	460f      	mov	r7, r1
 800cb8e:	f7f3 ff83 	bl	8000a98 <__aeabi_dcmpeq>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d178      	bne.n	800cc88 <_dtoa_r+0x388>
 800cb96:	f8cd 9018 	str.w	r9, [sp, #24]
 800cb9a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cb9e:	f8dd b020 	ldr.w	fp, [sp, #32]
 800cba2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cba6:	e028      	b.n	800cbfa <_dtoa_r+0x2fa>
 800cba8:	636f4361 	.word	0x636f4361
 800cbac:	3fd287a7 	.word	0x3fd287a7
 800cbb0:	8b60c8b3 	.word	0x8b60c8b3
 800cbb4:	3fc68a28 	.word	0x3fc68a28
 800cbb8:	509f79fb 	.word	0x509f79fb
 800cbbc:	3fd34413 	.word	0x3fd34413
 800cbc0:	7ff00000 	.word	0x7ff00000
 800cbc4:	0800eba5 	.word	0x0800eba5
 800cbc8:	0800ebc4 	.word	0x0800ebc4
 800cbcc:	3ff80000 	.word	0x3ff80000
 800cbd0:	0800ebc8 	.word	0x0800ebc8
 800cbd4:	0800ebb8 	.word	0x0800ebb8
 800cbd8:	0800eba4 	.word	0x0800eba4
 800cbdc:	40240000 	.word	0x40240000
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	4bc3      	ldr	r3, [pc, #780]	; (800cef0 <_dtoa_r+0x5f0>)
 800cbe4:	f7f3 fcf0 	bl	80005c8 <__aeabi_dmul>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2300      	movs	r3, #0
 800cbec:	4606      	mov	r6, r0
 800cbee:	460f      	mov	r7, r1
 800cbf0:	f7f3 ff52 	bl	8000a98 <__aeabi_dcmpeq>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	f040 83b3 	bne.w	800d360 <_dtoa_r+0xa60>
 800cbfa:	4642      	mov	r2, r8
 800cbfc:	464b      	mov	r3, r9
 800cbfe:	4630      	mov	r0, r6
 800cc00:	4639      	mov	r1, r7
 800cc02:	f7f3 fe0b 	bl	800081c <__aeabi_ddiv>
 800cc06:	f7f3 ff8f 	bl	8000b28 <__aeabi_d2iz>
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	f7f3 fc76 	bl	80004fc <__aeabi_i2d>
 800cc10:	4642      	mov	r2, r8
 800cc12:	464b      	mov	r3, r9
 800cc14:	f7f3 fcd8 	bl	80005c8 <__aeabi_dmul>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	4639      	mov	r1, r7
 800cc20:	f7f3 fb1e 	bl	8000260 <__aeabi_dsub>
 800cc24:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800cc28:	f805 6b01 	strb.w	r6, [r5], #1
 800cc2c:	ebcb 0605 	rsb	r6, fp, r5
 800cc30:	4556      	cmp	r6, sl
 800cc32:	4602      	mov	r2, r0
 800cc34:	460b      	mov	r3, r1
 800cc36:	d1d3      	bne.n	800cbe0 <_dtoa_r+0x2e0>
 800cc38:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	4619      	mov	r1, r3
 800cc40:	f7f3 fb10 	bl	8000264 <__adddf3>
 800cc44:	4606      	mov	r6, r0
 800cc46:	460f      	mov	r7, r1
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc50:	f7f3 ff2c 	bl	8000aac <__aeabi_dcmplt>
 800cc54:	b940      	cbnz	r0, 800cc68 <_dtoa_r+0x368>
 800cc56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc5a:	4632      	mov	r2, r6
 800cc5c:	463b      	mov	r3, r7
 800cc5e:	f7f3 ff1b 	bl	8000a98 <__aeabi_dcmpeq>
 800cc62:	b188      	cbz	r0, 800cc88 <_dtoa_r+0x388>
 800cc64:	07e3      	lsls	r3, r4, #31
 800cc66:	d50f      	bpl.n	800cc88 <_dtoa_r+0x388>
 800cc68:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800cc6c:	1e6b      	subs	r3, r5, #1
 800cc6e:	9a08      	ldr	r2, [sp, #32]
 800cc70:	e004      	b.n	800cc7c <_dtoa_r+0x37c>
 800cc72:	429a      	cmp	r2, r3
 800cc74:	f000 842c 	beq.w	800d4d0 <_dtoa_r+0xbd0>
 800cc78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc7c:	2c39      	cmp	r4, #57	; 0x39
 800cc7e:	f103 0501 	add.w	r5, r3, #1
 800cc82:	d0f6      	beq.n	800cc72 <_dtoa_r+0x372>
 800cc84:	3401      	adds	r4, #1
 800cc86:	701c      	strb	r4, [r3, #0]
 800cc88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc8a:	4648      	mov	r0, r9
 800cc8c:	f000 fdda 	bl	800d844 <_Bfree>
 800cc90:	2200      	movs	r2, #0
 800cc92:	9b03      	ldr	r3, [sp, #12]
 800cc94:	702a      	strb	r2, [r5, #0]
 800cc96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cc98:	3301      	adds	r3, #1
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f000 83a8 	beq.w	800d3f4 <_dtoa_r+0xaf4>
 800cca4:	9808      	ldr	r0, [sp, #32]
 800cca6:	601d      	str	r5, [r3, #0]
 800cca8:	b019      	add	sp, #100	; 0x64
 800ccaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccb0:	2a00      	cmp	r2, #0
 800ccb2:	f000 8112 	beq.w	800ceda <_dtoa_r+0x5da>
 800ccb6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ccb8:	2a01      	cmp	r2, #1
 800ccba:	f340 825a 	ble.w	800d172 <_dtoa_r+0x872>
 800ccbe:	9b07      	ldr	r3, [sp, #28]
 800ccc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccc2:	1e5f      	subs	r7, r3, #1
 800ccc4:	42ba      	cmp	r2, r7
 800ccc6:	f2c0 8398 	blt.w	800d3fa <_dtoa_r+0xafa>
 800ccca:	1bd7      	subs	r7, r2, r7
 800cccc:	9b07      	ldr	r3, [sp, #28]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f2c0 848c 	blt.w	800d5ec <_dtoa_r+0xcec>
 800ccd4:	9d06      	ldr	r5, [sp, #24]
 800ccd6:	9b07      	ldr	r3, [sp, #28]
 800ccd8:	9a06      	ldr	r2, [sp, #24]
 800ccda:	2101      	movs	r1, #1
 800ccdc:	441a      	add	r2, r3
 800ccde:	9206      	str	r2, [sp, #24]
 800cce0:	9a04      	ldr	r2, [sp, #16]
 800cce2:	4648      	mov	r0, r9
 800cce4:	441a      	add	r2, r3
 800cce6:	9204      	str	r2, [sp, #16]
 800cce8:	f000 fe44 	bl	800d974 <__i2b>
 800ccec:	4606      	mov	r6, r0
 800ccee:	b165      	cbz	r5, 800cd0a <_dtoa_r+0x40a>
 800ccf0:	9904      	ldr	r1, [sp, #16]
 800ccf2:	2900      	cmp	r1, #0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	dd08      	ble.n	800cd0a <_dtoa_r+0x40a>
 800ccf8:	42a9      	cmp	r1, r5
 800ccfa:	bfa8      	it	ge
 800ccfc:	462b      	movge	r3, r5
 800ccfe:	9a06      	ldr	r2, [sp, #24]
 800cd00:	1aed      	subs	r5, r5, r3
 800cd02:	1ad2      	subs	r2, r2, r3
 800cd04:	1acb      	subs	r3, r1, r3
 800cd06:	9206      	str	r2, [sp, #24]
 800cd08:	9304      	str	r3, [sp, #16]
 800cd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f340 82fd 	ble.w	800d30c <_dtoa_r+0xa0c>
 800cd12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd14:	2a00      	cmp	r2, #0
 800cd16:	f000 8203 	beq.w	800d120 <_dtoa_r+0x820>
 800cd1a:	2f00      	cmp	r7, #0
 800cd1c:	f000 8200 	beq.w	800d120 <_dtoa_r+0x820>
 800cd20:	4631      	mov	r1, r6
 800cd22:	463a      	mov	r2, r7
 800cd24:	4648      	mov	r0, r9
 800cd26:	f000 fecd 	bl	800dac4 <__pow5mult>
 800cd2a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800cd2e:	4601      	mov	r1, r0
 800cd30:	4642      	mov	r2, r8
 800cd32:	4606      	mov	r6, r0
 800cd34:	4648      	mov	r0, r9
 800cd36:	f000 fe27 	bl	800d988 <__multiply>
 800cd3a:	4641      	mov	r1, r8
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	4648      	mov	r0, r9
 800cd40:	f000 fd80 	bl	800d844 <_Bfree>
 800cd44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd46:	1bdb      	subs	r3, r3, r7
 800cd48:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd4a:	f040 81e8 	bne.w	800d11e <_dtoa_r+0x81e>
 800cd4e:	2101      	movs	r1, #1
 800cd50:	4648      	mov	r0, r9
 800cd52:	f000 fe0f 	bl	800d974 <__i2b>
 800cd56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd58:	4680      	mov	r8, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 821b 	beq.w	800d196 <_dtoa_r+0x896>
 800cd60:	4601      	mov	r1, r0
 800cd62:	461a      	mov	r2, r3
 800cd64:	4648      	mov	r0, r9
 800cd66:	f000 fead 	bl	800dac4 <__pow5mult>
 800cd6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd6c:	4680      	mov	r8, r0
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	f340 82f9 	ble.w	800d366 <_dtoa_r+0xa66>
 800cd74:	2700      	movs	r7, #0
 800cd76:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cd7a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800cd7e:	6918      	ldr	r0, [r3, #16]
 800cd80:	f000 fdaa 	bl	800d8d8 <__hi0bits>
 800cd84:	f1c0 0020 	rsb	r0, r0, #32
 800cd88:	9a04      	ldr	r2, [sp, #16]
 800cd8a:	4410      	add	r0, r2
 800cd8c:	f010 001f 	ands.w	r0, r0, #31
 800cd90:	f000 81f8 	beq.w	800d184 <_dtoa_r+0x884>
 800cd94:	f1c0 0320 	rsb	r3, r0, #32
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	f340 84cb 	ble.w	800d734 <_dtoa_r+0xe34>
 800cd9e:	9b06      	ldr	r3, [sp, #24]
 800cda0:	f1c0 001c 	rsb	r0, r0, #28
 800cda4:	4403      	add	r3, r0
 800cda6:	9306      	str	r3, [sp, #24]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	4403      	add	r3, r0
 800cdac:	4405      	add	r5, r0
 800cdae:	9304      	str	r3, [sp, #16]
 800cdb0:	9b06      	ldr	r3, [sp, #24]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	dd05      	ble.n	800cdc2 <_dtoa_r+0x4c2>
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	461a      	mov	r2, r3
 800cdba:	4648      	mov	r0, r9
 800cdbc:	f000 fed2 	bl	800db64 <__lshift>
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	9b04      	ldr	r3, [sp, #16]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	dd05      	ble.n	800cdd4 <_dtoa_r+0x4d4>
 800cdc8:	4641      	mov	r1, r8
 800cdca:	461a      	mov	r2, r3
 800cdcc:	4648      	mov	r0, r9
 800cdce:	f000 fec9 	bl	800db64 <__lshift>
 800cdd2:	4680      	mov	r8, r0
 800cdd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f040 827d 	bne.w	800d2d6 <_dtoa_r+0x9d6>
 800cddc:	9b07      	ldr	r3, [sp, #28]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f340 8296 	ble.w	800d310 <_dtoa_r+0xa10>
 800cde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f040 81f6 	bne.w	800d1d8 <_dtoa_r+0x8d8>
 800cdec:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cdf0:	9f07      	ldr	r7, [sp, #28]
 800cdf2:	4655      	mov	r5, sl
 800cdf4:	e004      	b.n	800ce00 <_dtoa_r+0x500>
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	4648      	mov	r0, r9
 800cdfa:	f000 fd2d 	bl	800d858 <__multadd>
 800cdfe:	4604      	mov	r4, r0
 800ce00:	4641      	mov	r1, r8
 800ce02:	4620      	mov	r0, r4
 800ce04:	f7ff fce4 	bl	800c7d0 <quorem>
 800ce08:	3030      	adds	r0, #48	; 0x30
 800ce0a:	f805 0b01 	strb.w	r0, [r5], #1
 800ce0e:	ebca 0305 	rsb	r3, sl, r5
 800ce12:	42bb      	cmp	r3, r7
 800ce14:	f04f 020a 	mov.w	r2, #10
 800ce18:	f04f 0300 	mov.w	r3, #0
 800ce1c:	dbeb      	blt.n	800cdf6 <_dtoa_r+0x4f6>
 800ce1e:	9b08      	ldr	r3, [sp, #32]
 800ce20:	9a07      	ldr	r2, [sp, #28]
 800ce22:	4682      	mov	sl, r0
 800ce24:	2a01      	cmp	r2, #1
 800ce26:	bfac      	ite	ge
 800ce28:	189b      	addge	r3, r3, r2
 800ce2a:	3301      	addlt	r3, #1
 800ce2c:	461d      	mov	r5, r3
 800ce2e:	f04f 0b00 	mov.w	fp, #0
 800ce32:	4621      	mov	r1, r4
 800ce34:	2201      	movs	r2, #1
 800ce36:	4648      	mov	r0, r9
 800ce38:	f000 fe94 	bl	800db64 <__lshift>
 800ce3c:	4641      	mov	r1, r8
 800ce3e:	9009      	str	r0, [sp, #36]	; 0x24
 800ce40:	f000 fee6 	bl	800dc10 <__mcmp>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	f340 830e 	ble.w	800d466 <_dtoa_r+0xb66>
 800ce4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce4e:	1e6b      	subs	r3, r5, #1
 800ce50:	9908      	ldr	r1, [sp, #32]
 800ce52:	e004      	b.n	800ce5e <_dtoa_r+0x55e>
 800ce54:	428b      	cmp	r3, r1
 800ce56:	f000 8279 	beq.w	800d34c <_dtoa_r+0xa4c>
 800ce5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce5e:	2a39      	cmp	r2, #57	; 0x39
 800ce60:	f103 0501 	add.w	r5, r3, #1
 800ce64:	d0f6      	beq.n	800ce54 <_dtoa_r+0x554>
 800ce66:	3201      	adds	r2, #1
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	4641      	mov	r1, r8
 800ce6c:	4648      	mov	r0, r9
 800ce6e:	f000 fce9 	bl	800d844 <_Bfree>
 800ce72:	2e00      	cmp	r6, #0
 800ce74:	f43f af08 	beq.w	800cc88 <_dtoa_r+0x388>
 800ce78:	f1bb 0f00 	cmp.w	fp, #0
 800ce7c:	d005      	beq.n	800ce8a <_dtoa_r+0x58a>
 800ce7e:	45b3      	cmp	fp, r6
 800ce80:	d003      	beq.n	800ce8a <_dtoa_r+0x58a>
 800ce82:	4659      	mov	r1, fp
 800ce84:	4648      	mov	r0, r9
 800ce86:	f000 fcdd 	bl	800d844 <_Bfree>
 800ce8a:	4631      	mov	r1, r6
 800ce8c:	4648      	mov	r0, r9
 800ce8e:	f000 fcd9 	bl	800d844 <_Bfree>
 800ce92:	e6f9      	b.n	800cc88 <_dtoa_r+0x388>
 800ce94:	2301      	movs	r3, #1
 800ce96:	930d      	str	r3, [sp, #52]	; 0x34
 800ce98:	e5ea      	b.n	800ca70 <_dtoa_r+0x170>
 800ce9a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ce9e:	4640      	mov	r0, r8
 800cea0:	f7f3 fb2c 	bl	80004fc <__aeabi_i2d>
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	4630      	mov	r0, r6
 800ceaa:	4639      	mov	r1, r7
 800ceac:	f7f3 fdf4 	bl	8000a98 <__aeabi_dcmpeq>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	f47f adc9 	bne.w	800ca48 <_dtoa_r+0x148>
 800ceb6:	f108 33ff 	add.w	r3, r8, #4294967295
 800ceba:	9303      	str	r3, [sp, #12]
 800cebc:	e5c4      	b.n	800ca48 <_dtoa_r+0x148>
 800cebe:	9a06      	ldr	r2, [sp, #24]
 800cec0:	9b03      	ldr	r3, [sp, #12]
 800cec2:	1ad2      	subs	r2, r2, r3
 800cec4:	425b      	negs	r3, r3
 800cec6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cec8:	2300      	movs	r3, #0
 800ceca:	9206      	str	r2, [sp, #24]
 800cecc:	930c      	str	r3, [sp, #48]	; 0x30
 800cece:	e5e1      	b.n	800ca94 <_dtoa_r+0x194>
 800ced0:	425b      	negs	r3, r3
 800ced2:	9306      	str	r3, [sp, #24]
 800ced4:	2300      	movs	r3, #0
 800ced6:	9304      	str	r3, [sp, #16]
 800ced8:	e5d1      	b.n	800ca7e <_dtoa_r+0x17e>
 800ceda:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800cedc:	9d06      	ldr	r5, [sp, #24]
 800cede:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cee0:	e705      	b.n	800ccee <_dtoa_r+0x3ee>
 800cee2:	f1c3 0820 	rsb	r8, r3, #32
 800cee6:	fa0a f008 	lsl.w	r0, sl, r8
 800ceea:	e57a      	b.n	800c9e2 <_dtoa_r+0xe2>
 800ceec:	900d      	str	r0, [sp, #52]	; 0x34
 800ceee:	e5bf      	b.n	800ca70 <_dtoa_r+0x170>
 800cef0:	40240000 	.word	0x40240000
 800cef4:	2300      	movs	r3, #0
 800cef6:	930a      	str	r3, [sp, #40]	; 0x28
 800cef8:	9b03      	ldr	r3, [sp, #12]
 800cefa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cefc:	4413      	add	r3, r2
 800cefe:	930e      	str	r3, [sp, #56]	; 0x38
 800cf00:	3301      	adds	r3, #1
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	9307      	str	r3, [sp, #28]
 800cf06:	f340 8285 	ble.w	800d414 <_dtoa_r+0xb14>
 800cf0a:	9c07      	ldr	r4, [sp, #28]
 800cf0c:	4626      	mov	r6, r4
 800cf0e:	2100      	movs	r1, #0
 800cf10:	2e17      	cmp	r6, #23
 800cf12:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800cf16:	d90b      	bls.n	800cf30 <_dtoa_r+0x630>
 800cf18:	2201      	movs	r2, #1
 800cf1a:	2304      	movs	r3, #4
 800cf1c:	005b      	lsls	r3, r3, #1
 800cf1e:	f103 0014 	add.w	r0, r3, #20
 800cf22:	42b0      	cmp	r0, r6
 800cf24:	4611      	mov	r1, r2
 800cf26:	f102 0201 	add.w	r2, r2, #1
 800cf2a:	d9f7      	bls.n	800cf1c <_dtoa_r+0x61c>
 800cf2c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800cf30:	4648      	mov	r0, r9
 800cf32:	f000 fc5f 	bl	800d7f4 <_Balloc>
 800cf36:	2c0e      	cmp	r4, #14
 800cf38:	9008      	str	r0, [sp, #32]
 800cf3a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800cf3e:	f63f ade8 	bhi.w	800cb12 <_dtoa_r+0x212>
 800cf42:	2d00      	cmp	r5, #0
 800cf44:	f43f ade5 	beq.w	800cb12 <_dtoa_r+0x212>
 800cf48:	4657      	mov	r7, sl
 800cf4a:	46d8      	mov	r8, fp
 800cf4c:	9903      	ldr	r1, [sp, #12]
 800cf4e:	e9cd 7810 	strd	r7, r8, [sp, #64]	; 0x40
 800cf52:	2900      	cmp	r1, #0
 800cf54:	f340 8293 	ble.w	800d47e <_dtoa_r+0xb7e>
 800cf58:	4b92      	ldr	r3, [pc, #584]	; (800d1a4 <_dtoa_r+0x8a4>)
 800cf5a:	f001 020f 	and.w	r2, r1, #15
 800cf5e:	110e      	asrs	r6, r1, #4
 800cf60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf64:	06f0      	lsls	r0, r6, #27
 800cf66:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cf6a:	f140 824e 	bpl.w	800d40a <_dtoa_r+0xb0a>
 800cf6e:	4b8e      	ldr	r3, [pc, #568]	; (800d1a8 <_dtoa_r+0x8a8>)
 800cf70:	4650      	mov	r0, sl
 800cf72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf76:	4659      	mov	r1, fp
 800cf78:	f7f3 fc50 	bl	800081c <__aeabi_ddiv>
 800cf7c:	4682      	mov	sl, r0
 800cf7e:	468b      	mov	fp, r1
 800cf80:	f006 060f 	and.w	r6, r6, #15
 800cf84:	f04f 0803 	mov.w	r8, #3
 800cf88:	b186      	cbz	r6, 800cfac <_dtoa_r+0x6ac>
 800cf8a:	4f87      	ldr	r7, [pc, #540]	; (800d1a8 <_dtoa_r+0x8a8>)
 800cf8c:	07f1      	lsls	r1, r6, #31
 800cf8e:	d509      	bpl.n	800cfa4 <_dtoa_r+0x6a4>
 800cf90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf94:	4620      	mov	r0, r4
 800cf96:	4629      	mov	r1, r5
 800cf98:	f7f3 fb16 	bl	80005c8 <__aeabi_dmul>
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	460d      	mov	r5, r1
 800cfa0:	f108 0801 	add.w	r8, r8, #1
 800cfa4:	1076      	asrs	r6, r6, #1
 800cfa6:	f107 0708 	add.w	r7, r7, #8
 800cfaa:	d1ef      	bne.n	800cf8c <_dtoa_r+0x68c>
 800cfac:	4622      	mov	r2, r4
 800cfae:	462b      	mov	r3, r5
 800cfb0:	4650      	mov	r0, sl
 800cfb2:	4659      	mov	r1, fp
 800cfb4:	f7f3 fc32 	bl	800081c <__aeabi_ddiv>
 800cfb8:	4606      	mov	r6, r0
 800cfba:	460f      	mov	r7, r1
 800cfbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfbe:	b143      	cbz	r3, 800cfd2 <_dtoa_r+0x6d2>
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	4b7a      	ldr	r3, [pc, #488]	; (800d1ac <_dtoa_r+0x8ac>)
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	f7f3 fd70 	bl	8000aac <__aeabi_dcmplt>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f040 8323 	bne.w	800d618 <_dtoa_r+0xd18>
 800cfd2:	4640      	mov	r0, r8
 800cfd4:	f7f3 fa92 	bl	80004fc <__aeabi_i2d>
 800cfd8:	4632      	mov	r2, r6
 800cfda:	463b      	mov	r3, r7
 800cfdc:	f7f3 faf4 	bl	80005c8 <__aeabi_dmul>
 800cfe0:	4b73      	ldr	r3, [pc, #460]	; (800d1b0 <_dtoa_r+0x8b0>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f7f3 f93e 	bl	8000264 <__adddf3>
 800cfe8:	9b07      	ldr	r3, [sp, #28]
 800cfea:	4604      	mov	r4, r0
 800cfec:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f000 81e1 	beq.w	800d3b8 <_dtoa_r+0xab8>
 800cff6:	9b03      	ldr	r3, [sp, #12]
 800cff8:	9313      	str	r3, [sp, #76]	; 0x4c
 800cffa:	9b07      	ldr	r3, [sp, #28]
 800cffc:	9312      	str	r3, [sp, #72]	; 0x48
 800cffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d000:	2b00      	cmp	r3, #0
 800d002:	f000 8298 	beq.w	800d536 <_dtoa_r+0xc36>
 800d006:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d008:	4b66      	ldr	r3, [pc, #408]	; (800d1a4 <_dtoa_r+0x8a4>)
 800d00a:	2000      	movs	r0, #0
 800d00c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d014:	4967      	ldr	r1, [pc, #412]	; (800d1b4 <_dtoa_r+0x8b4>)
 800d016:	f7f3 fc01 	bl	800081c <__aeabi_ddiv>
 800d01a:	4622      	mov	r2, r4
 800d01c:	462b      	mov	r3, r5
 800d01e:	f7f3 f91f 	bl	8000260 <__aeabi_dsub>
 800d022:	4682      	mov	sl, r0
 800d024:	468b      	mov	fp, r1
 800d026:	4630      	mov	r0, r6
 800d028:	4639      	mov	r1, r7
 800d02a:	f7f3 fd7d 	bl	8000b28 <__aeabi_d2iz>
 800d02e:	4604      	mov	r4, r0
 800d030:	f7f3 fa64 	bl	80004fc <__aeabi_i2d>
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	4630      	mov	r0, r6
 800d03a:	4639      	mov	r1, r7
 800d03c:	f7f3 f910 	bl	8000260 <__aeabi_dsub>
 800d040:	3430      	adds	r4, #48	; 0x30
 800d042:	9d08      	ldr	r5, [sp, #32]
 800d044:	b2e4      	uxtb	r4, r4
 800d046:	4606      	mov	r6, r0
 800d048:	460f      	mov	r7, r1
 800d04a:	702c      	strb	r4, [r5, #0]
 800d04c:	4602      	mov	r2, r0
 800d04e:	460b      	mov	r3, r1
 800d050:	4650      	mov	r0, sl
 800d052:	4659      	mov	r1, fp
 800d054:	3501      	adds	r5, #1
 800d056:	f7f3 fd47 	bl	8000ae8 <__aeabi_dcmpgt>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d14e      	bne.n	800d0fc <_dtoa_r+0x7fc>
 800d05e:	4632      	mov	r2, r6
 800d060:	463b      	mov	r3, r7
 800d062:	2000      	movs	r0, #0
 800d064:	4951      	ldr	r1, [pc, #324]	; (800d1ac <_dtoa_r+0x8ac>)
 800d066:	f7f3 f8fb 	bl	8000260 <__aeabi_dsub>
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	4650      	mov	r0, sl
 800d070:	4659      	mov	r1, fp
 800d072:	f7f3 fd39 	bl	8000ae8 <__aeabi_dcmpgt>
 800d076:	2800      	cmp	r0, #0
 800d078:	f040 830e 	bne.w	800d698 <_dtoa_r+0xd98>
 800d07c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d07e:	2a01      	cmp	r2, #1
 800d080:	f340 81b4 	ble.w	800d3ec <_dtoa_r+0xaec>
 800d084:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d086:	9a08      	ldr	r2, [sp, #32]
 800d088:	4413      	add	r3, r2
 800d08a:	4698      	mov	r8, r3
 800d08c:	e00f      	b.n	800d0ae <_dtoa_r+0x7ae>
 800d08e:	4632      	mov	r2, r6
 800d090:	463b      	mov	r3, r7
 800d092:	2000      	movs	r0, #0
 800d094:	4945      	ldr	r1, [pc, #276]	; (800d1ac <_dtoa_r+0x8ac>)
 800d096:	f7f3 f8e3 	bl	8000260 <__aeabi_dsub>
 800d09a:	4652      	mov	r2, sl
 800d09c:	465b      	mov	r3, fp
 800d09e:	f7f3 fd05 	bl	8000aac <__aeabi_dcmplt>
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	f040 82f8 	bne.w	800d698 <_dtoa_r+0xd98>
 800d0a8:	4545      	cmp	r5, r8
 800d0aa:	f000 819f 	beq.w	800d3ec <_dtoa_r+0xaec>
 800d0ae:	4650      	mov	r0, sl
 800d0b0:	4659      	mov	r1, fp
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	4b40      	ldr	r3, [pc, #256]	; (800d1b8 <_dtoa_r+0x8b8>)
 800d0b6:	f7f3 fa87 	bl	80005c8 <__aeabi_dmul>
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	4b3e      	ldr	r3, [pc, #248]	; (800d1b8 <_dtoa_r+0x8b8>)
 800d0be:	4682      	mov	sl, r0
 800d0c0:	468b      	mov	fp, r1
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	4639      	mov	r1, r7
 800d0c6:	f7f3 fa7f 	bl	80005c8 <__aeabi_dmul>
 800d0ca:	460f      	mov	r7, r1
 800d0cc:	4606      	mov	r6, r0
 800d0ce:	f7f3 fd2b 	bl	8000b28 <__aeabi_d2iz>
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	f7f3 fa12 	bl	80004fc <__aeabi_i2d>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	4630      	mov	r0, r6
 800d0de:	4639      	mov	r1, r7
 800d0e0:	f7f3 f8be 	bl	8000260 <__aeabi_dsub>
 800d0e4:	3430      	adds	r4, #48	; 0x30
 800d0e6:	b2e4      	uxtb	r4, r4
 800d0e8:	f805 4b01 	strb.w	r4, [r5], #1
 800d0ec:	4652      	mov	r2, sl
 800d0ee:	465b      	mov	r3, fp
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	460f      	mov	r7, r1
 800d0f4:	f7f3 fcda 	bl	8000aac <__aeabi_dcmplt>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d0c8      	beq.n	800d08e <_dtoa_r+0x78e>
 800d0fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0fe:	9303      	str	r3, [sp, #12]
 800d100:	e5c2      	b.n	800cc88 <_dtoa_r+0x388>
 800d102:	2300      	movs	r3, #0
 800d104:	930a      	str	r3, [sp, #40]	; 0x28
 800d106:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f340 8188 	ble.w	800d41e <_dtoa_r+0xb1e>
 800d10e:	461e      	mov	r6, r3
 800d110:	461c      	mov	r4, r3
 800d112:	930e      	str	r3, [sp, #56]	; 0x38
 800d114:	9307      	str	r3, [sp, #28]
 800d116:	e6fa      	b.n	800cf0e <_dtoa_r+0x60e>
 800d118:	2301      	movs	r3, #1
 800d11a:	930a      	str	r3, [sp, #40]	; 0x28
 800d11c:	e7f3      	b.n	800d106 <_dtoa_r+0x806>
 800d11e:	9409      	str	r4, [sp, #36]	; 0x24
 800d120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d122:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d124:	4648      	mov	r0, r9
 800d126:	f000 fccd 	bl	800dac4 <__pow5mult>
 800d12a:	4604      	mov	r4, r0
 800d12c:	e60f      	b.n	800cd4e <_dtoa_r+0x44e>
 800d12e:	9b07      	ldr	r3, [sp, #28]
 800d130:	2b00      	cmp	r3, #0
 800d132:	f73f ad00 	bgt.w	800cb36 <_dtoa_r+0x236>
 800d136:	f040 82d9 	bne.w	800d6ec <_dtoa_r+0xdec>
 800d13a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d13e:	2200      	movs	r2, #0
 800d140:	4b1e      	ldr	r3, [pc, #120]	; (800d1bc <_dtoa_r+0x8bc>)
 800d142:	f7f3 fa41 	bl	80005c8 <__aeabi_dmul>
 800d146:	4652      	mov	r2, sl
 800d148:	465b      	mov	r3, fp
 800d14a:	f7f3 fcc3 	bl	8000ad4 <__aeabi_dcmpge>
 800d14e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800d152:	4646      	mov	r6, r8
 800d154:	2800      	cmp	r0, #0
 800d156:	f000 80f1 	beq.w	800d33c <_dtoa_r+0xa3c>
 800d15a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d15c:	9d08      	ldr	r5, [sp, #32]
 800d15e:	43db      	mvns	r3, r3
 800d160:	9303      	str	r3, [sp, #12]
 800d162:	4641      	mov	r1, r8
 800d164:	4648      	mov	r0, r9
 800d166:	f000 fb6d 	bl	800d844 <_Bfree>
 800d16a:	2e00      	cmp	r6, #0
 800d16c:	f43f ad8c 	beq.w	800cc88 <_dtoa_r+0x388>
 800d170:	e68b      	b.n	800ce8a <_dtoa_r+0x58a>
 800d172:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d174:	2a00      	cmp	r2, #0
 800d176:	f000 8241 	beq.w	800d5fc <_dtoa_r+0xcfc>
 800d17a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d17e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800d180:	9d06      	ldr	r5, [sp, #24]
 800d182:	e5a9      	b.n	800ccd8 <_dtoa_r+0x3d8>
 800d184:	201c      	movs	r0, #28
 800d186:	9b06      	ldr	r3, [sp, #24]
 800d188:	4405      	add	r5, r0
 800d18a:	4403      	add	r3, r0
 800d18c:	9306      	str	r3, [sp, #24]
 800d18e:	9b04      	ldr	r3, [sp, #16]
 800d190:	4403      	add	r3, r0
 800d192:	9304      	str	r3, [sp, #16]
 800d194:	e60c      	b.n	800cdb0 <_dtoa_r+0x4b0>
 800d196:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d198:	2b01      	cmp	r3, #1
 800d19a:	f340 8281 	ble.w	800d6a0 <_dtoa_r+0xda0>
 800d19e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d1a0:	2001      	movs	r0, #1
 800d1a2:	e5f1      	b.n	800cd88 <_dtoa_r+0x488>
 800d1a4:	0800ebc8 	.word	0x0800ebc8
 800d1a8:	0800eca0 	.word	0x0800eca0
 800d1ac:	3ff00000 	.word	0x3ff00000
 800d1b0:	401c0000 	.word	0x401c0000
 800d1b4:	3fe00000 	.word	0x3fe00000
 800d1b8:	40240000 	.word	0x40240000
 800d1bc:	40140000 	.word	0x40140000
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	220a      	movs	r2, #10
 800d1c6:	4648      	mov	r0, r9
 800d1c8:	f000 fb46 	bl	800d858 <__multadd>
 800d1cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f340 8297 	ble.w	800d704 <_dtoa_r+0xe04>
 800d1d6:	9307      	str	r3, [sp, #28]
 800d1d8:	2d00      	cmp	r5, #0
 800d1da:	dd05      	ble.n	800d1e8 <_dtoa_r+0x8e8>
 800d1dc:	4631      	mov	r1, r6
 800d1de:	462a      	mov	r2, r5
 800d1e0:	4648      	mov	r0, r9
 800d1e2:	f000 fcbf 	bl	800db64 <__lshift>
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	2f00      	cmp	r7, #0
 800d1ea:	f040 817b 	bne.w	800d4e4 <_dtoa_r+0xbe4>
 800d1ee:	9606      	str	r6, [sp, #24]
 800d1f0:	9b07      	ldr	r3, [sp, #28]
 800d1f2:	9a08      	ldr	r2, [sp, #32]
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	18d3      	adds	r3, r2, r3
 800d1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1fa:	4617      	mov	r7, r2
 800d1fc:	f00a 0301 	and.w	r3, sl, #1
 800d200:	46c2      	mov	sl, r8
 800d202:	f8dd b018 	ldr.w	fp, [sp, #24]
 800d206:	930a      	str	r3, [sp, #40]	; 0x28
 800d208:	4651      	mov	r1, sl
 800d20a:	4620      	mov	r0, r4
 800d20c:	f7ff fae0 	bl	800c7d0 <quorem>
 800d210:	4631      	mov	r1, r6
 800d212:	4605      	mov	r5, r0
 800d214:	4620      	mov	r0, r4
 800d216:	f000 fcfb 	bl	800dc10 <__mcmp>
 800d21a:	465a      	mov	r2, fp
 800d21c:	9004      	str	r0, [sp, #16]
 800d21e:	4651      	mov	r1, sl
 800d220:	4648      	mov	r0, r9
 800d222:	f000 fd15 	bl	800dc50 <__mdiff>
 800d226:	68c2      	ldr	r2, [r0, #12]
 800d228:	4680      	mov	r8, r0
 800d22a:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800d22e:	2a00      	cmp	r2, #0
 800d230:	d149      	bne.n	800d2c6 <_dtoa_r+0x9c6>
 800d232:	4601      	mov	r1, r0
 800d234:	4620      	mov	r0, r4
 800d236:	9307      	str	r3, [sp, #28]
 800d238:	f000 fcea 	bl	800dc10 <__mcmp>
 800d23c:	4641      	mov	r1, r8
 800d23e:	9006      	str	r0, [sp, #24]
 800d240:	4648      	mov	r0, r9
 800d242:	f000 faff 	bl	800d844 <_Bfree>
 800d246:	9a06      	ldr	r2, [sp, #24]
 800d248:	9b07      	ldr	r3, [sp, #28]
 800d24a:	b92a      	cbnz	r2, 800d258 <_dtoa_r+0x958>
 800d24c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d24e:	b919      	cbnz	r1, 800d258 <_dtoa_r+0x958>
 800d250:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d252:	2900      	cmp	r1, #0
 800d254:	f000 8236 	beq.w	800d6c4 <_dtoa_r+0xdc4>
 800d258:	9904      	ldr	r1, [sp, #16]
 800d25a:	2900      	cmp	r1, #0
 800d25c:	f2c0 80e4 	blt.w	800d428 <_dtoa_r+0xb28>
 800d260:	d105      	bne.n	800d26e <_dtoa_r+0x96e>
 800d262:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d264:	b919      	cbnz	r1, 800d26e <_dtoa_r+0x96e>
 800d266:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d268:	2900      	cmp	r1, #0
 800d26a:	f000 80dd 	beq.w	800d428 <_dtoa_r+0xb28>
 800d26e:	2a00      	cmp	r2, #0
 800d270:	f300 814c 	bgt.w	800d50c <_dtoa_r+0xc0c>
 800d274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d276:	f107 0801 	add.w	r8, r7, #1
 800d27a:	4297      	cmp	r7, r2
 800d27c:	703b      	strb	r3, [r7, #0]
 800d27e:	4645      	mov	r5, r8
 800d280:	f000 8153 	beq.w	800d52a <_dtoa_r+0xc2a>
 800d284:	4621      	mov	r1, r4
 800d286:	2300      	movs	r3, #0
 800d288:	220a      	movs	r2, #10
 800d28a:	4648      	mov	r0, r9
 800d28c:	f000 fae4 	bl	800d858 <__multadd>
 800d290:	455e      	cmp	r6, fp
 800d292:	4604      	mov	r4, r0
 800d294:	4631      	mov	r1, r6
 800d296:	f04f 0300 	mov.w	r3, #0
 800d29a:	f04f 020a 	mov.w	r2, #10
 800d29e:	4648      	mov	r0, r9
 800d2a0:	d00b      	beq.n	800d2ba <_dtoa_r+0x9ba>
 800d2a2:	f000 fad9 	bl	800d858 <__multadd>
 800d2a6:	4659      	mov	r1, fp
 800d2a8:	4606      	mov	r6, r0
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	220a      	movs	r2, #10
 800d2ae:	4648      	mov	r0, r9
 800d2b0:	f000 fad2 	bl	800d858 <__multadd>
 800d2b4:	4647      	mov	r7, r8
 800d2b6:	4683      	mov	fp, r0
 800d2b8:	e7a6      	b.n	800d208 <_dtoa_r+0x908>
 800d2ba:	f000 facd 	bl	800d858 <__multadd>
 800d2be:	4647      	mov	r7, r8
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	4683      	mov	fp, r0
 800d2c4:	e7a0      	b.n	800d208 <_dtoa_r+0x908>
 800d2c6:	4601      	mov	r1, r0
 800d2c8:	4648      	mov	r0, r9
 800d2ca:	9306      	str	r3, [sp, #24]
 800d2cc:	f000 faba 	bl	800d844 <_Bfree>
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	9b06      	ldr	r3, [sp, #24]
 800d2d4:	e7c0      	b.n	800d258 <_dtoa_r+0x958>
 800d2d6:	4641      	mov	r1, r8
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f000 fc99 	bl	800dc10 <__mcmp>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	f6bf ad7c 	bge.w	800cddc <_dtoa_r+0x4dc>
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	9c03      	ldr	r4, [sp, #12]
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	3c01      	subs	r4, #1
 800d2ec:	220a      	movs	r2, #10
 800d2ee:	4648      	mov	r0, r9
 800d2f0:	9403      	str	r4, [sp, #12]
 800d2f2:	f000 fab1 	bl	800d858 <__multadd>
 800d2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f47f af60 	bne.w	800d1c0 <_dtoa_r+0x8c0>
 800d300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d302:	2b00      	cmp	r3, #0
 800d304:	f340 81f6 	ble.w	800d6f4 <_dtoa_r+0xdf4>
 800d308:	9307      	str	r3, [sp, #28]
 800d30a:	e56f      	b.n	800cdec <_dtoa_r+0x4ec>
 800d30c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d30e:	e51e      	b.n	800cd4e <_dtoa_r+0x44e>
 800d310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d312:	2b02      	cmp	r3, #2
 800d314:	f77f ad66 	ble.w	800cde4 <_dtoa_r+0x4e4>
 800d318:	9b07      	ldr	r3, [sp, #28]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f040 817a 	bne.w	800d614 <_dtoa_r+0xd14>
 800d320:	4641      	mov	r1, r8
 800d322:	2205      	movs	r2, #5
 800d324:	4648      	mov	r0, r9
 800d326:	f000 fa97 	bl	800d858 <__multadd>
 800d32a:	4601      	mov	r1, r0
 800d32c:	4680      	mov	r8, r0
 800d32e:	4620      	mov	r0, r4
 800d330:	f000 fc6e 	bl	800dc10 <__mcmp>
 800d334:	2800      	cmp	r0, #0
 800d336:	9409      	str	r4, [sp, #36]	; 0x24
 800d338:	f77f af0f 	ble.w	800d15a <_dtoa_r+0x85a>
 800d33c:	9a03      	ldr	r2, [sp, #12]
 800d33e:	9908      	ldr	r1, [sp, #32]
 800d340:	2331      	movs	r3, #49	; 0x31
 800d342:	3201      	adds	r2, #1
 800d344:	9203      	str	r2, [sp, #12]
 800d346:	700b      	strb	r3, [r1, #0]
 800d348:	1c4d      	adds	r5, r1, #1
 800d34a:	e70a      	b.n	800d162 <_dtoa_r+0x862>
 800d34c:	9a03      	ldr	r2, [sp, #12]
 800d34e:	2331      	movs	r3, #49	; 0x31
 800d350:	3201      	adds	r2, #1
 800d352:	9203      	str	r2, [sp, #12]
 800d354:	9a08      	ldr	r2, [sp, #32]
 800d356:	7013      	strb	r3, [r2, #0]
 800d358:	e587      	b.n	800ce6a <_dtoa_r+0x56a>
 800d35a:	2301      	movs	r3, #1
 800d35c:	930a      	str	r3, [sp, #40]	; 0x28
 800d35e:	e5cb      	b.n	800cef8 <_dtoa_r+0x5f8>
 800d360:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800d364:	e490      	b.n	800cc88 <_dtoa_r+0x388>
 800d366:	f1ba 0f00 	cmp.w	sl, #0
 800d36a:	f47f ad03 	bne.w	800cd74 <_dtoa_r+0x474>
 800d36e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d372:	2b00      	cmp	r3, #0
 800d374:	f040 8140 	bne.w	800d5f8 <_dtoa_r+0xcf8>
 800d378:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d37c:	0d3f      	lsrs	r7, r7, #20
 800d37e:	053f      	lsls	r7, r7, #20
 800d380:	b137      	cbz	r7, 800d390 <_dtoa_r+0xa90>
 800d382:	9b06      	ldr	r3, [sp, #24]
 800d384:	2701      	movs	r7, #1
 800d386:	3301      	adds	r3, #1
 800d388:	9306      	str	r3, [sp, #24]
 800d38a:	9b04      	ldr	r3, [sp, #16]
 800d38c:	3301      	adds	r3, #1
 800d38e:	9304      	str	r3, [sp, #16]
 800d390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d392:	2001      	movs	r0, #1
 800d394:	2b00      	cmp	r3, #0
 800d396:	f43f acf7 	beq.w	800cd88 <_dtoa_r+0x488>
 800d39a:	e4ec      	b.n	800cd76 <_dtoa_r+0x476>
 800d39c:	4640      	mov	r0, r8
 800d39e:	f7f3 f8ad 	bl	80004fc <__aeabi_i2d>
 800d3a2:	4632      	mov	r2, r6
 800d3a4:	463b      	mov	r3, r7
 800d3a6:	f7f3 f90f 	bl	80005c8 <__aeabi_dmul>
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	4bbf      	ldr	r3, [pc, #764]	; (800d6ac <_dtoa_r+0xdac>)
 800d3ae:	f7f2 ff59 	bl	8000264 <__adddf3>
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	2200      	movs	r2, #0
 800d3be:	4bbc      	ldr	r3, [pc, #752]	; (800d6b0 <_dtoa_r+0xdb0>)
 800d3c0:	f7f2 ff4e 	bl	8000260 <__aeabi_dsub>
 800d3c4:	4622      	mov	r2, r4
 800d3c6:	462b      	mov	r3, r5
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	460f      	mov	r7, r1
 800d3cc:	f7f3 fb8c 	bl	8000ae8 <__aeabi_dcmpgt>
 800d3d0:	4680      	mov	r8, r0
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	f040 8106 	bne.w	800d5e4 <_dtoa_r+0xce4>
 800d3d8:	4622      	mov	r2, r4
 800d3da:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d3de:	4630      	mov	r0, r6
 800d3e0:	4639      	mov	r1, r7
 800d3e2:	f7f3 fb63 	bl	8000aac <__aeabi_dcmplt>
 800d3e6:	b108      	cbz	r0, 800d3ec <_dtoa_r+0xaec>
 800d3e8:	4646      	mov	r6, r8
 800d3ea:	e6b6      	b.n	800d15a <_dtoa_r+0x85a>
 800d3ec:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 800d3f0:	f7ff bb8f 	b.w	800cb12 <_dtoa_r+0x212>
 800d3f4:	9808      	ldr	r0, [sp, #32]
 800d3f6:	f7ff bab4 	b.w	800c962 <_dtoa_r+0x62>
 800d3fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3fe:	1afb      	subs	r3, r7, r3
 800d400:	441a      	add	r2, r3
 800d402:	970b      	str	r7, [sp, #44]	; 0x2c
 800d404:	920c      	str	r2, [sp, #48]	; 0x30
 800d406:	2700      	movs	r7, #0
 800d408:	e460      	b.n	800cccc <_dtoa_r+0x3cc>
 800d40a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 800d40e:	f04f 0802 	mov.w	r8, #2
 800d412:	e5b9      	b.n	800cf88 <_dtoa_r+0x688>
 800d414:	461c      	mov	r4, r3
 800d416:	2100      	movs	r1, #0
 800d418:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800d41c:	e588      	b.n	800cf30 <_dtoa_r+0x630>
 800d41e:	2401      	movs	r4, #1
 800d420:	9423      	str	r4, [sp, #140]	; 0x8c
 800d422:	940e      	str	r4, [sp, #56]	; 0x38
 800d424:	9407      	str	r4, [sp, #28]
 800d426:	e7f6      	b.n	800d416 <_dtoa_r+0xb16>
 800d428:	2a00      	cmp	r2, #0
 800d42a:	46d0      	mov	r8, sl
 800d42c:	f8cd b018 	str.w	fp, [sp, #24]
 800d430:	469a      	mov	sl, r3
 800d432:	dd11      	ble.n	800d458 <_dtoa_r+0xb58>
 800d434:	4621      	mov	r1, r4
 800d436:	2201      	movs	r2, #1
 800d438:	4648      	mov	r0, r9
 800d43a:	f000 fb93 	bl	800db64 <__lshift>
 800d43e:	4641      	mov	r1, r8
 800d440:	4604      	mov	r4, r0
 800d442:	f000 fbe5 	bl	800dc10 <__mcmp>
 800d446:	2800      	cmp	r0, #0
 800d448:	f340 8149 	ble.w	800d6de <_dtoa_r+0xdde>
 800d44c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d450:	f000 8107 	beq.w	800d662 <_dtoa_r+0xd62>
 800d454:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800d458:	46b3      	mov	fp, r6
 800d45a:	f887 a000 	strb.w	sl, [r7]
 800d45e:	1c7d      	adds	r5, r7, #1
 800d460:	9e06      	ldr	r6, [sp, #24]
 800d462:	9409      	str	r4, [sp, #36]	; 0x24
 800d464:	e501      	b.n	800ce6a <_dtoa_r+0x56a>
 800d466:	d104      	bne.n	800d472 <_dtoa_r+0xb72>
 800d468:	f01a 0f01 	tst.w	sl, #1
 800d46c:	d001      	beq.n	800d472 <_dtoa_r+0xb72>
 800d46e:	e4ec      	b.n	800ce4a <_dtoa_r+0x54a>
 800d470:	4615      	mov	r5, r2
 800d472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d476:	1e6a      	subs	r2, r5, #1
 800d478:	2b30      	cmp	r3, #48	; 0x30
 800d47a:	d0f9      	beq.n	800d470 <_dtoa_r+0xb70>
 800d47c:	e4f5      	b.n	800ce6a <_dtoa_r+0x56a>
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	425c      	negs	r4, r3
 800d482:	2c00      	cmp	r4, #0
 800d484:	f000 80c1 	beq.w	800d60a <_dtoa_r+0xd0a>
 800d488:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d48c:	4b89      	ldr	r3, [pc, #548]	; (800d6b4 <_dtoa_r+0xdb4>)
 800d48e:	f004 020f 	and.w	r2, r4, #15
 800d492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	f7f3 f895 	bl	80005c8 <__aeabi_dmul>
 800d49e:	1124      	asrs	r4, r4, #4
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	460f      	mov	r7, r1
 800d4a4:	f000 812b 	beq.w	800d6fe <_dtoa_r+0xdfe>
 800d4a8:	4d83      	ldr	r5, [pc, #524]	; (800d6b8 <_dtoa_r+0xdb8>)
 800d4aa:	f04f 0802 	mov.w	r8, #2
 800d4ae:	07e2      	lsls	r2, r4, #31
 800d4b0:	d509      	bpl.n	800d4c6 <_dtoa_r+0xbc6>
 800d4b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	f7f3 f885 	bl	80005c8 <__aeabi_dmul>
 800d4be:	4606      	mov	r6, r0
 800d4c0:	460f      	mov	r7, r1
 800d4c2:	f108 0801 	add.w	r8, r8, #1
 800d4c6:	1064      	asrs	r4, r4, #1
 800d4c8:	f105 0508 	add.w	r5, r5, #8
 800d4cc:	d1ef      	bne.n	800d4ae <_dtoa_r+0xbae>
 800d4ce:	e575      	b.n	800cfbc <_dtoa_r+0x6bc>
 800d4d0:	9908      	ldr	r1, [sp, #32]
 800d4d2:	2230      	movs	r2, #48	; 0x30
 800d4d4:	700a      	strb	r2, [r1, #0]
 800d4d6:	9a03      	ldr	r2, [sp, #12]
 800d4d8:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800d4dc:	3201      	adds	r2, #1
 800d4de:	9203      	str	r2, [sp, #12]
 800d4e0:	f7ff bbd0 	b.w	800cc84 <_dtoa_r+0x384>
 800d4e4:	6871      	ldr	r1, [r6, #4]
 800d4e6:	4648      	mov	r0, r9
 800d4e8:	f000 f984 	bl	800d7f4 <_Balloc>
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	6933      	ldr	r3, [r6, #16]
 800d4f0:	f106 010c 	add.w	r1, r6, #12
 800d4f4:	1c9a      	adds	r2, r3, #2
 800d4f6:	0092      	lsls	r2, r2, #2
 800d4f8:	300c      	adds	r0, #12
 800d4fa:	f7f2 fe37 	bl	800016c <memcpy>
 800d4fe:	4629      	mov	r1, r5
 800d500:	2201      	movs	r2, #1
 800d502:	4648      	mov	r0, r9
 800d504:	f000 fb2e 	bl	800db64 <__lshift>
 800d508:	9006      	str	r0, [sp, #24]
 800d50a:	e671      	b.n	800d1f0 <_dtoa_r+0x8f0>
 800d50c:	2b39      	cmp	r3, #57	; 0x39
 800d50e:	f8cd b018 	str.w	fp, [sp, #24]
 800d512:	46d0      	mov	r8, sl
 800d514:	f000 80a5 	beq.w	800d662 <_dtoa_r+0xd62>
 800d518:	f103 0a01 	add.w	sl, r3, #1
 800d51c:	46b3      	mov	fp, r6
 800d51e:	f887 a000 	strb.w	sl, [r7]
 800d522:	1c7d      	adds	r5, r7, #1
 800d524:	9e06      	ldr	r6, [sp, #24]
 800d526:	9409      	str	r4, [sp, #36]	; 0x24
 800d528:	e49f      	b.n	800ce6a <_dtoa_r+0x56a>
 800d52a:	465a      	mov	r2, fp
 800d52c:	46d0      	mov	r8, sl
 800d52e:	46b3      	mov	fp, r6
 800d530:	469a      	mov	sl, r3
 800d532:	4616      	mov	r6, r2
 800d534:	e47d      	b.n	800ce32 <_dtoa_r+0x532>
 800d536:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d538:	495e      	ldr	r1, [pc, #376]	; (800d6b4 <_dtoa_r+0xdb4>)
 800d53a:	f103 3aff 	add.w	sl, r3, #4294967295
 800d53e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d542:	4622      	mov	r2, r4
 800d544:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d548:	462b      	mov	r3, r5
 800d54a:	f7f3 f83d 	bl	80005c8 <__aeabi_dmul>
 800d54e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800d552:	4639      	mov	r1, r7
 800d554:	4630      	mov	r0, r6
 800d556:	f7f3 fae7 	bl	8000b28 <__aeabi_d2iz>
 800d55a:	4604      	mov	r4, r0
 800d55c:	f7f2 ffce 	bl	80004fc <__aeabi_i2d>
 800d560:	460b      	mov	r3, r1
 800d562:	4602      	mov	r2, r0
 800d564:	4639      	mov	r1, r7
 800d566:	4630      	mov	r0, r6
 800d568:	f7f2 fe7a 	bl	8000260 <__aeabi_dsub>
 800d56c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d56e:	460f      	mov	r7, r1
 800d570:	9908      	ldr	r1, [sp, #32]
 800d572:	3430      	adds	r4, #48	; 0x30
 800d574:	2b01      	cmp	r3, #1
 800d576:	4606      	mov	r6, r0
 800d578:	700c      	strb	r4, [r1, #0]
 800d57a:	f101 0501 	add.w	r5, r1, #1
 800d57e:	d01f      	beq.n	800d5c0 <_dtoa_r+0xcc0>
 800d580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d582:	9a08      	ldr	r2, [sp, #32]
 800d584:	46a8      	mov	r8, r5
 800d586:	4413      	add	r3, r2
 800d588:	469b      	mov	fp, r3
 800d58a:	2200      	movs	r2, #0
 800d58c:	4b4b      	ldr	r3, [pc, #300]	; (800d6bc <_dtoa_r+0xdbc>)
 800d58e:	4630      	mov	r0, r6
 800d590:	4639      	mov	r1, r7
 800d592:	f7f3 f819 	bl	80005c8 <__aeabi_dmul>
 800d596:	460f      	mov	r7, r1
 800d598:	4606      	mov	r6, r0
 800d59a:	f7f3 fac5 	bl	8000b28 <__aeabi_d2iz>
 800d59e:	4604      	mov	r4, r0
 800d5a0:	f7f2 ffac 	bl	80004fc <__aeabi_i2d>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	4639      	mov	r1, r7
 800d5ac:	f7f2 fe58 	bl	8000260 <__aeabi_dsub>
 800d5b0:	3430      	adds	r4, #48	; 0x30
 800d5b2:	f808 4b01 	strb.w	r4, [r8], #1
 800d5b6:	45c3      	cmp	fp, r8
 800d5b8:	4606      	mov	r6, r0
 800d5ba:	460f      	mov	r7, r1
 800d5bc:	d1e5      	bne.n	800d58a <_dtoa_r+0xc8a>
 800d5be:	4455      	add	r5, sl
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	4b3f      	ldr	r3, [pc, #252]	; (800d6c0 <_dtoa_r+0xdc0>)
 800d5c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800d5c8:	f7f2 fe4c 	bl	8000264 <__adddf3>
 800d5cc:	4632      	mov	r2, r6
 800d5ce:	463b      	mov	r3, r7
 800d5d0:	f7f3 fa6c 	bl	8000aac <__aeabi_dcmplt>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d04c      	beq.n	800d672 <_dtoa_r+0xd72>
 800d5d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d5da:	9303      	str	r3, [sp, #12]
 800d5dc:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800d5e0:	f7ff bb44 	b.w	800cc6c <_dtoa_r+0x36c>
 800d5e4:	f04f 0800 	mov.w	r8, #0
 800d5e8:	4646      	mov	r6, r8
 800d5ea:	e6a7      	b.n	800d33c <_dtoa_r+0xa3c>
 800d5ec:	9b06      	ldr	r3, [sp, #24]
 800d5ee:	9a07      	ldr	r2, [sp, #28]
 800d5f0:	1a9d      	subs	r5, r3, r2
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	f7ff bb70 	b.w	800ccd8 <_dtoa_r+0x3d8>
 800d5f8:	2700      	movs	r7, #0
 800d5fa:	e6c9      	b.n	800d390 <_dtoa_r+0xa90>
 800d5fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d5fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800d600:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d604:	9d06      	ldr	r5, [sp, #24]
 800d606:	f7ff bb67 	b.w	800ccd8 <_dtoa_r+0x3d8>
 800d60a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d60e:	f04f 0802 	mov.w	r8, #2
 800d612:	e4d3      	b.n	800cfbc <_dtoa_r+0x6bc>
 800d614:	9409      	str	r4, [sp, #36]	; 0x24
 800d616:	e5a0      	b.n	800d15a <_dtoa_r+0x85a>
 800d618:	9b07      	ldr	r3, [sp, #28]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	f43f aebe 	beq.w	800d39c <_dtoa_r+0xa9c>
 800d620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d622:	2b00      	cmp	r3, #0
 800d624:	f77f aee2 	ble.w	800d3ec <_dtoa_r+0xaec>
 800d628:	2200      	movs	r2, #0
 800d62a:	4b24      	ldr	r3, [pc, #144]	; (800d6bc <_dtoa_r+0xdbc>)
 800d62c:	4630      	mov	r0, r6
 800d62e:	4639      	mov	r1, r7
 800d630:	f7f2 ffca 	bl	80005c8 <__aeabi_dmul>
 800d634:	4606      	mov	r6, r0
 800d636:	460f      	mov	r7, r1
 800d638:	f108 0001 	add.w	r0, r8, #1
 800d63c:	f7f2 ff5e 	bl	80004fc <__aeabi_i2d>
 800d640:	4632      	mov	r2, r6
 800d642:	463b      	mov	r3, r7
 800d644:	f7f2 ffc0 	bl	80005c8 <__aeabi_dmul>
 800d648:	2200      	movs	r2, #0
 800d64a:	4b18      	ldr	r3, [pc, #96]	; (800d6ac <_dtoa_r+0xdac>)
 800d64c:	f7f2 fe0a 	bl	8000264 <__adddf3>
 800d650:	9a03      	ldr	r2, [sp, #12]
 800d652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d654:	3a01      	subs	r2, #1
 800d656:	4604      	mov	r4, r0
 800d658:	9213      	str	r2, [sp, #76]	; 0x4c
 800d65a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d65e:	9312      	str	r3, [sp, #72]	; 0x48
 800d660:	e4cd      	b.n	800cffe <_dtoa_r+0x6fe>
 800d662:	2239      	movs	r2, #57	; 0x39
 800d664:	46b3      	mov	fp, r6
 800d666:	9409      	str	r4, [sp, #36]	; 0x24
 800d668:	9e06      	ldr	r6, [sp, #24]
 800d66a:	703a      	strb	r2, [r7, #0]
 800d66c:	1c7d      	adds	r5, r7, #1
 800d66e:	f7ff bbee 	b.w	800ce4e <_dtoa_r+0x54e>
 800d672:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d676:	2000      	movs	r0, #0
 800d678:	4911      	ldr	r1, [pc, #68]	; (800d6c0 <_dtoa_r+0xdc0>)
 800d67a:	f7f2 fdf1 	bl	8000260 <__aeabi_dsub>
 800d67e:	4632      	mov	r2, r6
 800d680:	463b      	mov	r3, r7
 800d682:	f7f3 fa31 	bl	8000ae8 <__aeabi_dcmpgt>
 800d686:	b908      	cbnz	r0, 800d68c <_dtoa_r+0xd8c>
 800d688:	e6b0      	b.n	800d3ec <_dtoa_r+0xaec>
 800d68a:	4615      	mov	r5, r2
 800d68c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d690:	1e6a      	subs	r2, r5, #1
 800d692:	2b30      	cmp	r3, #48	; 0x30
 800d694:	d0f9      	beq.n	800d68a <_dtoa_r+0xd8a>
 800d696:	e531      	b.n	800d0fc <_dtoa_r+0x7fc>
 800d698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d69a:	9303      	str	r3, [sp, #12]
 800d69c:	f7ff bae6 	b.w	800cc6c <_dtoa_r+0x36c>
 800d6a0:	f1ba 0f00 	cmp.w	sl, #0
 800d6a4:	f47f ad7b 	bne.w	800d19e <_dtoa_r+0x89e>
 800d6a8:	e661      	b.n	800d36e <_dtoa_r+0xa6e>
 800d6aa:	bf00      	nop
 800d6ac:	401c0000 	.word	0x401c0000
 800d6b0:	40140000 	.word	0x40140000
 800d6b4:	0800ebc8 	.word	0x0800ebc8
 800d6b8:	0800eca0 	.word	0x0800eca0
 800d6bc:	40240000 	.word	0x40240000
 800d6c0:	3fe00000 	.word	0x3fe00000
 800d6c4:	2b39      	cmp	r3, #57	; 0x39
 800d6c6:	f8cd b018 	str.w	fp, [sp, #24]
 800d6ca:	46d0      	mov	r8, sl
 800d6cc:	f8dd b010 	ldr.w	fp, [sp, #16]
 800d6d0:	469a      	mov	sl, r3
 800d6d2:	d0c6      	beq.n	800d662 <_dtoa_r+0xd62>
 800d6d4:	f1bb 0f00 	cmp.w	fp, #0
 800d6d8:	f73f aebc 	bgt.w	800d454 <_dtoa_r+0xb54>
 800d6dc:	e6bc      	b.n	800d458 <_dtoa_r+0xb58>
 800d6de:	f47f aebb 	bne.w	800d458 <_dtoa_r+0xb58>
 800d6e2:	f01a 0f01 	tst.w	sl, #1
 800d6e6:	f43f aeb7 	beq.w	800d458 <_dtoa_r+0xb58>
 800d6ea:	e6af      	b.n	800d44c <_dtoa_r+0xb4c>
 800d6ec:	f04f 0800 	mov.w	r8, #0
 800d6f0:	4646      	mov	r6, r8
 800d6f2:	e532      	b.n	800d15a <_dtoa_r+0x85a>
 800d6f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	dc21      	bgt.n	800d73e <_dtoa_r+0xe3e>
 800d6fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6fc:	e604      	b.n	800d308 <_dtoa_r+0xa08>
 800d6fe:	f04f 0802 	mov.w	r8, #2
 800d702:	e45b      	b.n	800cfbc <_dtoa_r+0x6bc>
 800d704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d706:	2b02      	cmp	r3, #2
 800d708:	dc19      	bgt.n	800d73e <_dtoa_r+0xe3e>
 800d70a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d70c:	e563      	b.n	800d1d6 <_dtoa_r+0x8d6>
 800d70e:	2400      	movs	r4, #0
 800d710:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800d714:	4621      	mov	r1, r4
 800d716:	4648      	mov	r0, r9
 800d718:	f000 f86c 	bl	800d7f4 <_Balloc>
 800d71c:	f04f 33ff 	mov.w	r3, #4294967295
 800d720:	9307      	str	r3, [sp, #28]
 800d722:	930e      	str	r3, [sp, #56]	; 0x38
 800d724:	2301      	movs	r3, #1
 800d726:	9008      	str	r0, [sp, #32]
 800d728:	9423      	str	r4, [sp, #140]	; 0x8c
 800d72a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800d72e:	930a      	str	r3, [sp, #40]	; 0x28
 800d730:	f7ff b9ef 	b.w	800cb12 <_dtoa_r+0x212>
 800d734:	f43f ab3c 	beq.w	800cdb0 <_dtoa_r+0x4b0>
 800d738:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800d73c:	e523      	b.n	800d186 <_dtoa_r+0x886>
 800d73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d740:	9307      	str	r3, [sp, #28]
 800d742:	e5e9      	b.n	800d318 <_dtoa_r+0xa18>
 800d744:	2501      	movs	r5, #1
 800d746:	f7ff b9ae 	b.w	800caa6 <_dtoa_r+0x1a6>
 800d74a:	bf00      	nop

0800d74c <_localeconv_r>:
 800d74c:	4a04      	ldr	r2, [pc, #16]	; (800d760 <_localeconv_r+0x14>)
 800d74e:	4b05      	ldr	r3, [pc, #20]	; (800d764 <_localeconv_r+0x18>)
 800d750:	6812      	ldr	r2, [r2, #0]
 800d752:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800d754:	2800      	cmp	r0, #0
 800d756:	bf08      	it	eq
 800d758:	4618      	moveq	r0, r3
 800d75a:	30f0      	adds	r0, #240	; 0xf0
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	20000438 	.word	0x20000438
 800d764:	2000084c 	.word	0x2000084c

0800d768 <memchr>:
 800d768:	0783      	lsls	r3, r0, #30
 800d76a:	b470      	push	{r4, r5, r6}
 800d76c:	b2cd      	uxtb	r5, r1
 800d76e:	d03d      	beq.n	800d7ec <memchr+0x84>
 800d770:	1e53      	subs	r3, r2, #1
 800d772:	b302      	cbz	r2, 800d7b6 <memchr+0x4e>
 800d774:	7802      	ldrb	r2, [r0, #0]
 800d776:	42aa      	cmp	r2, r5
 800d778:	d01e      	beq.n	800d7b8 <memchr+0x50>
 800d77a:	1c42      	adds	r2, r0, #1
 800d77c:	e004      	b.n	800d788 <memchr+0x20>
 800d77e:	b1d3      	cbz	r3, 800d7b6 <memchr+0x4e>
 800d780:	7804      	ldrb	r4, [r0, #0]
 800d782:	3b01      	subs	r3, #1
 800d784:	42ac      	cmp	r4, r5
 800d786:	d017      	beq.n	800d7b8 <memchr+0x50>
 800d788:	f012 0f03 	tst.w	r2, #3
 800d78c:	4610      	mov	r0, r2
 800d78e:	f102 0201 	add.w	r2, r2, #1
 800d792:	d1f4      	bne.n	800d77e <memchr+0x16>
 800d794:	2b03      	cmp	r3, #3
 800d796:	d811      	bhi.n	800d7bc <memchr+0x54>
 800d798:	b353      	cbz	r3, 800d7f0 <memchr+0x88>
 800d79a:	7802      	ldrb	r2, [r0, #0]
 800d79c:	42aa      	cmp	r2, r5
 800d79e:	d00b      	beq.n	800d7b8 <memchr+0x50>
 800d7a0:	4403      	add	r3, r0
 800d7a2:	1c42      	adds	r2, r0, #1
 800d7a4:	e002      	b.n	800d7ac <memchr+0x44>
 800d7a6:	7801      	ldrb	r1, [r0, #0]
 800d7a8:	42a9      	cmp	r1, r5
 800d7aa:	d005      	beq.n	800d7b8 <memchr+0x50>
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	f102 0201 	add.w	r2, r2, #1
 800d7b4:	d1f7      	bne.n	800d7a6 <memchr+0x3e>
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	bc70      	pop	{r4, r5, r6}
 800d7ba:	4770      	bx	lr
 800d7bc:	4604      	mov	r4, r0
 800d7be:	020e      	lsls	r6, r1, #8
 800d7c0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 800d7c4:	432e      	orrs	r6, r5
 800d7c6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800d7ca:	6822      	ldr	r2, [r4, #0]
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	4072      	eors	r2, r6
 800d7d0:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
 800d7d4:	ea21 0202 	bic.w	r2, r1, r2
 800d7d8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800d7dc:	f104 0404 	add.w	r4, r4, #4
 800d7e0:	d1db      	bne.n	800d79a <memchr+0x32>
 800d7e2:	3b04      	subs	r3, #4
 800d7e4:	2b03      	cmp	r3, #3
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	d8ef      	bhi.n	800d7ca <memchr+0x62>
 800d7ea:	e7d5      	b.n	800d798 <memchr+0x30>
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	e7d1      	b.n	800d794 <memchr+0x2c>
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	e7e1      	b.n	800d7b8 <memchr+0x50>

0800d7f4 <_Balloc>:
 800d7f4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d7f6:	b570      	push	{r4, r5, r6, lr}
 800d7f8:	4605      	mov	r5, r0
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	b152      	cbz	r2, 800d814 <_Balloc+0x20>
 800d7fe:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800d802:	b18b      	cbz	r3, 800d828 <_Balloc+0x34>
 800d804:	6819      	ldr	r1, [r3, #0]
 800d806:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d80a:	2200      	movs	r2, #0
 800d80c:	4618      	mov	r0, r3
 800d80e:	611a      	str	r2, [r3, #16]
 800d810:	60da      	str	r2, [r3, #12]
 800d812:	bd70      	pop	{r4, r5, r6, pc}
 800d814:	2221      	movs	r2, #33	; 0x21
 800d816:	2104      	movs	r1, #4
 800d818:	f7fc fea0 	bl	800a55c <_calloc_r>
 800d81c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800d81e:	4602      	mov	r2, r0
 800d820:	2800      	cmp	r0, #0
 800d822:	d1ec      	bne.n	800d7fe <_Balloc+0xa>
 800d824:	2000      	movs	r0, #0
 800d826:	bd70      	pop	{r4, r5, r6, pc}
 800d828:	2101      	movs	r1, #1
 800d82a:	fa01 f604 	lsl.w	r6, r1, r4
 800d82e:	1d72      	adds	r2, r6, #5
 800d830:	4628      	mov	r0, r5
 800d832:	0092      	lsls	r2, r2, #2
 800d834:	f7fc fe92 	bl	800a55c <_calloc_r>
 800d838:	4603      	mov	r3, r0
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d0f2      	beq.n	800d824 <_Balloc+0x30>
 800d83e:	6044      	str	r4, [r0, #4]
 800d840:	6086      	str	r6, [r0, #8]
 800d842:	e7e2      	b.n	800d80a <_Balloc+0x16>

0800d844 <_Bfree>:
 800d844:	b131      	cbz	r1, 800d854 <_Bfree+0x10>
 800d846:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d848:	684a      	ldr	r2, [r1, #4]
 800d84a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d84e:	6008      	str	r0, [r1, #0]
 800d850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop

0800d858 <__multadd>:
 800d858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d85a:	460c      	mov	r4, r1
 800d85c:	4605      	mov	r5, r0
 800d85e:	690e      	ldr	r6, [r1, #16]
 800d860:	b083      	sub	sp, #12
 800d862:	f101 0e14 	add.w	lr, r1, #20
 800d866:	2700      	movs	r7, #0
 800d868:	f8de 0000 	ldr.w	r0, [lr]
 800d86c:	3701      	adds	r7, #1
 800d86e:	b281      	uxth	r1, r0
 800d870:	fb02 3101 	mla	r1, r2, r1, r3
 800d874:	0c00      	lsrs	r0, r0, #16
 800d876:	0c0b      	lsrs	r3, r1, #16
 800d878:	fb02 3300 	mla	r3, r2, r0, r3
 800d87c:	b289      	uxth	r1, r1
 800d87e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d882:	42be      	cmp	r6, r7
 800d884:	f84e 1b04 	str.w	r1, [lr], #4
 800d888:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d88c:	dcec      	bgt.n	800d868 <__multadd+0x10>
 800d88e:	b13b      	cbz	r3, 800d8a0 <__multadd+0x48>
 800d890:	68a2      	ldr	r2, [r4, #8]
 800d892:	4296      	cmp	r6, r2
 800d894:	da07      	bge.n	800d8a6 <__multadd+0x4e>
 800d896:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 800d89a:	3601      	adds	r6, #1
 800d89c:	6153      	str	r3, [r2, #20]
 800d89e:	6126      	str	r6, [r4, #16]
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	b003      	add	sp, #12
 800d8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8a6:	6861      	ldr	r1, [r4, #4]
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	3101      	adds	r1, #1
 800d8ac:	9301      	str	r3, [sp, #4]
 800d8ae:	f7ff ffa1 	bl	800d7f4 <_Balloc>
 800d8b2:	4607      	mov	r7, r0
 800d8b4:	6922      	ldr	r2, [r4, #16]
 800d8b6:	f104 010c 	add.w	r1, r4, #12
 800d8ba:	3202      	adds	r2, #2
 800d8bc:	0092      	lsls	r2, r2, #2
 800d8be:	300c      	adds	r0, #12
 800d8c0:	f7f2 fc54 	bl	800016c <memcpy>
 800d8c4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800d8c6:	6861      	ldr	r1, [r4, #4]
 800d8c8:	9b01      	ldr	r3, [sp, #4]
 800d8ca:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800d8ce:	6020      	str	r0, [r4, #0]
 800d8d0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 800d8d4:	463c      	mov	r4, r7
 800d8d6:	e7de      	b.n	800d896 <__multadd+0x3e>

0800d8d8 <__hi0bits>:
 800d8d8:	0c03      	lsrs	r3, r0, #16
 800d8da:	041b      	lsls	r3, r3, #16
 800d8dc:	b9b3      	cbnz	r3, 800d90c <__hi0bits+0x34>
 800d8de:	0400      	lsls	r0, r0, #16
 800d8e0:	2310      	movs	r3, #16
 800d8e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8e6:	bf04      	itt	eq
 800d8e8:	0200      	lsleq	r0, r0, #8
 800d8ea:	3308      	addeq	r3, #8
 800d8ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8f0:	bf04      	itt	eq
 800d8f2:	0100      	lsleq	r0, r0, #4
 800d8f4:	3304      	addeq	r3, #4
 800d8f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8fa:	bf04      	itt	eq
 800d8fc:	0080      	lsleq	r0, r0, #2
 800d8fe:	3302      	addeq	r3, #2
 800d900:	2800      	cmp	r0, #0
 800d902:	db07      	blt.n	800d914 <__hi0bits+0x3c>
 800d904:	0042      	lsls	r2, r0, #1
 800d906:	d403      	bmi.n	800d910 <__hi0bits+0x38>
 800d908:	2020      	movs	r0, #32
 800d90a:	4770      	bx	lr
 800d90c:	2300      	movs	r3, #0
 800d90e:	e7e8      	b.n	800d8e2 <__hi0bits+0xa>
 800d910:	1c58      	adds	r0, r3, #1
 800d912:	4770      	bx	lr
 800d914:	4618      	mov	r0, r3
 800d916:	4770      	bx	lr

0800d918 <__lo0bits>:
 800d918:	6803      	ldr	r3, [r0, #0]
 800d91a:	f013 0207 	ands.w	r2, r3, #7
 800d91e:	d007      	beq.n	800d930 <__lo0bits+0x18>
 800d920:	07d9      	lsls	r1, r3, #31
 800d922:	d420      	bmi.n	800d966 <__lo0bits+0x4e>
 800d924:	079a      	lsls	r2, r3, #30
 800d926:	d420      	bmi.n	800d96a <__lo0bits+0x52>
 800d928:	089b      	lsrs	r3, r3, #2
 800d92a:	6003      	str	r3, [r0, #0]
 800d92c:	2002      	movs	r0, #2
 800d92e:	4770      	bx	lr
 800d930:	b299      	uxth	r1, r3
 800d932:	b909      	cbnz	r1, 800d938 <__lo0bits+0x20>
 800d934:	0c1b      	lsrs	r3, r3, #16
 800d936:	2210      	movs	r2, #16
 800d938:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d93c:	bf04      	itt	eq
 800d93e:	0a1b      	lsreq	r3, r3, #8
 800d940:	3208      	addeq	r2, #8
 800d942:	0719      	lsls	r1, r3, #28
 800d944:	bf04      	itt	eq
 800d946:	091b      	lsreq	r3, r3, #4
 800d948:	3204      	addeq	r2, #4
 800d94a:	0799      	lsls	r1, r3, #30
 800d94c:	bf04      	itt	eq
 800d94e:	089b      	lsreq	r3, r3, #2
 800d950:	3202      	addeq	r2, #2
 800d952:	07d9      	lsls	r1, r3, #31
 800d954:	d404      	bmi.n	800d960 <__lo0bits+0x48>
 800d956:	085b      	lsrs	r3, r3, #1
 800d958:	d101      	bne.n	800d95e <__lo0bits+0x46>
 800d95a:	2020      	movs	r0, #32
 800d95c:	4770      	bx	lr
 800d95e:	3201      	adds	r2, #1
 800d960:	6003      	str	r3, [r0, #0]
 800d962:	4610      	mov	r0, r2
 800d964:	4770      	bx	lr
 800d966:	2000      	movs	r0, #0
 800d968:	4770      	bx	lr
 800d96a:	085b      	lsrs	r3, r3, #1
 800d96c:	6003      	str	r3, [r0, #0]
 800d96e:	2001      	movs	r0, #1
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop

0800d974 <__i2b>:
 800d974:	b510      	push	{r4, lr}
 800d976:	460c      	mov	r4, r1
 800d978:	2101      	movs	r1, #1
 800d97a:	f7ff ff3b 	bl	800d7f4 <_Balloc>
 800d97e:	2201      	movs	r2, #1
 800d980:	6144      	str	r4, [r0, #20]
 800d982:	6102      	str	r2, [r0, #16]
 800d984:	bd10      	pop	{r4, pc}
 800d986:	bf00      	nop

0800d988 <__multiply>:
 800d988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98c:	690d      	ldr	r5, [r1, #16]
 800d98e:	6916      	ldr	r6, [r2, #16]
 800d990:	b085      	sub	sp, #20
 800d992:	42b5      	cmp	r5, r6
 800d994:	460c      	mov	r4, r1
 800d996:	4691      	mov	r9, r2
 800d998:	da04      	bge.n	800d9a4 <__multiply+0x1c>
 800d99a:	462a      	mov	r2, r5
 800d99c:	464c      	mov	r4, r9
 800d99e:	4635      	mov	r5, r6
 800d9a0:	4689      	mov	r9, r1
 800d9a2:	4616      	mov	r6, r2
 800d9a4:	68a3      	ldr	r3, [r4, #8]
 800d9a6:	eb05 0806 	add.w	r8, r5, r6
 800d9aa:	6861      	ldr	r1, [r4, #4]
 800d9ac:	4598      	cmp	r8, r3
 800d9ae:	bfc8      	it	gt
 800d9b0:	3101      	addgt	r1, #1
 800d9b2:	f7ff ff1f 	bl	800d7f4 <_Balloc>
 800d9b6:	f100 0a14 	add.w	sl, r0, #20
 800d9ba:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
 800d9be:	45da      	cmp	sl, fp
 800d9c0:	9001      	str	r0, [sp, #4]
 800d9c2:	d205      	bcs.n	800d9d0 <__multiply+0x48>
 800d9c4:	4653      	mov	r3, sl
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	f843 1b04 	str.w	r1, [r3], #4
 800d9cc:	459b      	cmp	fp, r3
 800d9ce:	d8fb      	bhi.n	800d9c8 <__multiply+0x40>
 800d9d0:	f109 0914 	add.w	r9, r9, #20
 800d9d4:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 800d9d8:	f104 0214 	add.w	r2, r4, #20
 800d9dc:	4599      	cmp	r9, r3
 800d9de:	eb02 0c85 	add.w	ip, r2, r5, lsl #2
 800d9e2:	d259      	bcs.n	800da98 <__multiply+0x110>
 800d9e4:	f8cd b008 	str.w	fp, [sp, #8]
 800d9e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9ec:	469b      	mov	fp, r3
 800d9ee:	4690      	mov	r8, r2
 800d9f0:	f859 7b04 	ldr.w	r7, [r9], #4
 800d9f4:	fa1f fe87 	uxth.w	lr, r7
 800d9f8:	f1be 0f00 	cmp.w	lr, #0
 800d9fc:	d01f      	beq.n	800da3e <__multiply+0xb6>
 800d9fe:	4647      	mov	r7, r8
 800da00:	4656      	mov	r6, sl
 800da02:	2100      	movs	r1, #0
 800da04:	e000      	b.n	800da08 <__multiply+0x80>
 800da06:	4606      	mov	r6, r0
 800da08:	4630      	mov	r0, r6
 800da0a:	f857 5b04 	ldr.w	r5, [r7], #4
 800da0e:	6834      	ldr	r4, [r6, #0]
 800da10:	b2ab      	uxth	r3, r5
 800da12:	b2a2      	uxth	r2, r4
 800da14:	fb0e 2203 	mla	r2, lr, r3, r2
 800da18:	0c2d      	lsrs	r5, r5, #16
 800da1a:	0c24      	lsrs	r4, r4, #16
 800da1c:	fb0e 4405 	mla	r4, lr, r5, r4
 800da20:	1853      	adds	r3, r2, r1
 800da22:	eb04 4113 	add.w	r1, r4, r3, lsr #16
 800da26:	b29a      	uxth	r2, r3
 800da28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800da2c:	45bc      	cmp	ip, r7
 800da2e:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800da32:	f840 2b04 	str.w	r2, [r0], #4
 800da36:	d8e6      	bhi.n	800da06 <__multiply+0x7e>
 800da38:	6071      	str	r1, [r6, #4]
 800da3a:	f859 7c04 	ldr.w	r7, [r9, #-4]
 800da3e:	0c3f      	lsrs	r7, r7, #16
 800da40:	d022      	beq.n	800da88 <__multiply+0x100>
 800da42:	f8da 3000 	ldr.w	r3, [sl]
 800da46:	2200      	movs	r2, #0
 800da48:	4655      	mov	r5, sl
 800da4a:	461e      	mov	r6, r3
 800da4c:	4640      	mov	r0, r8
 800da4e:	4696      	mov	lr, r2
 800da50:	e000      	b.n	800da54 <__multiply+0xcc>
 800da52:	4625      	mov	r5, r4
 800da54:	462c      	mov	r4, r5
 800da56:	8802      	ldrh	r2, [r0, #0]
 800da58:	0c36      	lsrs	r6, r6, #16
 800da5a:	fb07 6602 	mla	r6, r7, r2, r6
 800da5e:	b299      	uxth	r1, r3
 800da60:	eb06 020e 	add.w	r2, r6, lr
 800da64:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 800da68:	f844 3b04 	str.w	r3, [r4], #4
 800da6c:	f850 1b04 	ldr.w	r1, [r0], #4
 800da70:	686e      	ldr	r6, [r5, #4]
 800da72:	0c09      	lsrs	r1, r1, #16
 800da74:	b2b3      	uxth	r3, r6
 800da76:	fb07 3101 	mla	r1, r7, r1, r3
 800da7a:	4584      	cmp	ip, r0
 800da7c:	eb01 4312 	add.w	r3, r1, r2, lsr #16
 800da80:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800da84:	d8e5      	bhi.n	800da52 <__multiply+0xca>
 800da86:	606b      	str	r3, [r5, #4]
 800da88:	45cb      	cmp	fp, r9
 800da8a:	f10a 0a04 	add.w	sl, sl, #4
 800da8e:	d8af      	bhi.n	800d9f0 <__multiply+0x68>
 800da90:	f8dd b008 	ldr.w	fp, [sp, #8]
 800da94:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800da98:	f1b8 0f00 	cmp.w	r8, #0
 800da9c:	dd0b      	ble.n	800dab6 <__multiply+0x12e>
 800da9e:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800daa2:	f1ab 0b04 	sub.w	fp, fp, #4
 800daa6:	b11b      	cbz	r3, 800dab0 <__multiply+0x128>
 800daa8:	e005      	b.n	800dab6 <__multiply+0x12e>
 800daaa:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 800daae:	b913      	cbnz	r3, 800dab6 <__multiply+0x12e>
 800dab0:	f1b8 0801 	subs.w	r8, r8, #1
 800dab4:	d1f9      	bne.n	800daaa <__multiply+0x122>
 800dab6:	9801      	ldr	r0, [sp, #4]
 800dab8:	f8c0 8010 	str.w	r8, [r0, #16]
 800dabc:	b005      	add	sp, #20
 800dabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac2:	bf00      	nop

0800dac4 <__pow5mult>:
 800dac4:	f012 0303 	ands.w	r3, r2, #3
 800dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dacc:	4614      	mov	r4, r2
 800dace:	4607      	mov	r7, r0
 800dad0:	d12e      	bne.n	800db30 <__pow5mult+0x6c>
 800dad2:	460e      	mov	r6, r1
 800dad4:	10a4      	asrs	r4, r4, #2
 800dad6:	d01c      	beq.n	800db12 <__pow5mult+0x4e>
 800dad8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800dada:	b395      	cbz	r5, 800db42 <__pow5mult+0x7e>
 800dadc:	07e3      	lsls	r3, r4, #31
 800dade:	f04f 0800 	mov.w	r8, #0
 800dae2:	d406      	bmi.n	800daf2 <__pow5mult+0x2e>
 800dae4:	1064      	asrs	r4, r4, #1
 800dae6:	d014      	beq.n	800db12 <__pow5mult+0x4e>
 800dae8:	6828      	ldr	r0, [r5, #0]
 800daea:	b1a8      	cbz	r0, 800db18 <__pow5mult+0x54>
 800daec:	4605      	mov	r5, r0
 800daee:	07e3      	lsls	r3, r4, #31
 800daf0:	d5f8      	bpl.n	800dae4 <__pow5mult+0x20>
 800daf2:	462a      	mov	r2, r5
 800daf4:	4631      	mov	r1, r6
 800daf6:	4638      	mov	r0, r7
 800daf8:	f7ff ff46 	bl	800d988 <__multiply>
 800dafc:	b1b6      	cbz	r6, 800db2c <__pow5mult+0x68>
 800dafe:	6872      	ldr	r2, [r6, #4]
 800db00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db02:	1064      	asrs	r4, r4, #1
 800db04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db08:	6031      	str	r1, [r6, #0]
 800db0a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800db0e:	4606      	mov	r6, r0
 800db10:	d1ea      	bne.n	800dae8 <__pow5mult+0x24>
 800db12:	4630      	mov	r0, r6
 800db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db18:	462a      	mov	r2, r5
 800db1a:	4629      	mov	r1, r5
 800db1c:	4638      	mov	r0, r7
 800db1e:	f7ff ff33 	bl	800d988 <__multiply>
 800db22:	6028      	str	r0, [r5, #0]
 800db24:	f8c0 8000 	str.w	r8, [r0]
 800db28:	4605      	mov	r5, r0
 800db2a:	e7e0      	b.n	800daee <__pow5mult+0x2a>
 800db2c:	4606      	mov	r6, r0
 800db2e:	e7d9      	b.n	800dae4 <__pow5mult+0x20>
 800db30:	4a0b      	ldr	r2, [pc, #44]	; (800db60 <__pow5mult+0x9c>)
 800db32:	3b01      	subs	r3, #1
 800db34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800db38:	2300      	movs	r3, #0
 800db3a:	f7ff fe8d 	bl	800d858 <__multadd>
 800db3e:	4606      	mov	r6, r0
 800db40:	e7c8      	b.n	800dad4 <__pow5mult+0x10>
 800db42:	2101      	movs	r1, #1
 800db44:	4638      	mov	r0, r7
 800db46:	f7ff fe55 	bl	800d7f4 <_Balloc>
 800db4a:	f240 2171 	movw	r1, #625	; 0x271
 800db4e:	2201      	movs	r2, #1
 800db50:	2300      	movs	r3, #0
 800db52:	6141      	str	r1, [r0, #20]
 800db54:	6102      	str	r2, [r0, #16]
 800db56:	4605      	mov	r5, r0
 800db58:	64b8      	str	r0, [r7, #72]	; 0x48
 800db5a:	6003      	str	r3, [r0, #0]
 800db5c:	e7be      	b.n	800dadc <__pow5mult+0x18>
 800db5e:	bf00      	nop
 800db60:	0800ec90 	.word	0x0800ec90

0800db64 <__lshift>:
 800db64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db68:	690b      	ldr	r3, [r1, #16]
 800db6a:	1154      	asrs	r4, r2, #5
 800db6c:	eb04 0803 	add.w	r8, r4, r3
 800db70:	688b      	ldr	r3, [r1, #8]
 800db72:	f108 0501 	add.w	r5, r8, #1
 800db76:	429d      	cmp	r5, r3
 800db78:	460e      	mov	r6, r1
 800db7a:	4691      	mov	r9, r2
 800db7c:	4683      	mov	fp, r0
 800db7e:	6849      	ldr	r1, [r1, #4]
 800db80:	dd04      	ble.n	800db8c <__lshift+0x28>
 800db82:	005b      	lsls	r3, r3, #1
 800db84:	429d      	cmp	r5, r3
 800db86:	f101 0101 	add.w	r1, r1, #1
 800db8a:	dcfa      	bgt.n	800db82 <__lshift+0x1e>
 800db8c:	4658      	mov	r0, fp
 800db8e:	f7ff fe31 	bl	800d7f4 <_Balloc>
 800db92:	2c00      	cmp	r4, #0
 800db94:	f100 0214 	add.w	r2, r0, #20
 800db98:	dd37      	ble.n	800dc0a <__lshift+0xa6>
 800db9a:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800db9e:	2100      	movs	r1, #0
 800dba0:	f842 1b04 	str.w	r1, [r2], #4
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d1fb      	bne.n	800dba0 <__lshift+0x3c>
 800dba8:	6934      	ldr	r4, [r6, #16]
 800dbaa:	f106 0114 	add.w	r1, r6, #20
 800dbae:	f019 091f 	ands.w	r9, r9, #31
 800dbb2:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800dbb6:	d020      	beq.n	800dbfa <__lshift+0x96>
 800dbb8:	f1c9 0c20 	rsb	ip, r9, #32
 800dbbc:	2400      	movs	r4, #0
 800dbbe:	680f      	ldr	r7, [r1, #0]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	fa07 fa09 	lsl.w	sl, r7, r9
 800dbc6:	ea4a 0404 	orr.w	r4, sl, r4
 800dbca:	f843 4b04 	str.w	r4, [r3], #4
 800dbce:	f851 4b04 	ldr.w	r4, [r1], #4
 800dbd2:	458e      	cmp	lr, r1
 800dbd4:	fa24 f40c 	lsr.w	r4, r4, ip
 800dbd8:	d8f1      	bhi.n	800dbbe <__lshift+0x5a>
 800dbda:	6054      	str	r4, [r2, #4]
 800dbdc:	b10c      	cbz	r4, 800dbe2 <__lshift+0x7e>
 800dbde:	f108 0502 	add.w	r5, r8, #2
 800dbe2:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
 800dbe6:	6872      	ldr	r2, [r6, #4]
 800dbe8:	3d01      	subs	r5, #1
 800dbea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dbee:	6105      	str	r5, [r0, #16]
 800dbf0:	6031      	str	r1, [r6, #0]
 800dbf2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800dbf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfa:	3b04      	subs	r3, #4
 800dbfc:	f851 2b04 	ldr.w	r2, [r1], #4
 800dc00:	458e      	cmp	lr, r1
 800dc02:	f843 2f04 	str.w	r2, [r3, #4]!
 800dc06:	d8f9      	bhi.n	800dbfc <__lshift+0x98>
 800dc08:	e7eb      	b.n	800dbe2 <__lshift+0x7e>
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	e7cc      	b.n	800dba8 <__lshift+0x44>
 800dc0e:	bf00      	nop

0800dc10 <__mcmp>:
 800dc10:	6902      	ldr	r2, [r0, #16]
 800dc12:	690b      	ldr	r3, [r1, #16]
 800dc14:	1ad2      	subs	r2, r2, r3
 800dc16:	d112      	bne.n	800dc3e <__mcmp+0x2e>
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	3014      	adds	r0, #20
 800dc1c:	3114      	adds	r1, #20
 800dc1e:	4419      	add	r1, r3
 800dc20:	b410      	push	{r4}
 800dc22:	4403      	add	r3, r0
 800dc24:	e001      	b.n	800dc2a <__mcmp+0x1a>
 800dc26:	4298      	cmp	r0, r3
 800dc28:	d20b      	bcs.n	800dc42 <__mcmp+0x32>
 800dc2a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800dc2e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc32:	4294      	cmp	r4, r2
 800dc34:	d0f7      	beq.n	800dc26 <__mcmp+0x16>
 800dc36:	d307      	bcc.n	800dc48 <__mcmp+0x38>
 800dc38:	2001      	movs	r0, #1
 800dc3a:	bc10      	pop	{r4}
 800dc3c:	4770      	bx	lr
 800dc3e:	4610      	mov	r0, r2
 800dc40:	4770      	bx	lr
 800dc42:	2000      	movs	r0, #0
 800dc44:	bc10      	pop	{r4}
 800dc46:	4770      	bx	lr
 800dc48:	f04f 30ff 	mov.w	r0, #4294967295
 800dc4c:	e7f5      	b.n	800dc3a <__mcmp+0x2a>
 800dc4e:	bf00      	nop

0800dc50 <__mdiff>:
 800dc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc54:	690b      	ldr	r3, [r1, #16]
 800dc56:	460c      	mov	r4, r1
 800dc58:	6911      	ldr	r1, [r2, #16]
 800dc5a:	4690      	mov	r8, r2
 800dc5c:	1a5b      	subs	r3, r3, r1
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d118      	bne.n	800dc94 <__mdiff+0x44>
 800dc62:	0089      	lsls	r1, r1, #2
 800dc64:	f104 0614 	add.w	r6, r4, #20
 800dc68:	f102 0714 	add.w	r7, r2, #20
 800dc6c:	1873      	adds	r3, r6, r1
 800dc6e:	4439      	add	r1, r7
 800dc70:	e001      	b.n	800dc76 <__mdiff+0x26>
 800dc72:	429e      	cmp	r6, r3
 800dc74:	d269      	bcs.n	800dd4a <__mdiff+0xfa>
 800dc76:	f853 5d04 	ldr.w	r5, [r3, #-4]!
 800dc7a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc7e:	4295      	cmp	r5, r2
 800dc80:	d0f7      	beq.n	800dc72 <__mdiff+0x22>
 800dc82:	d26b      	bcs.n	800dd5c <__mdiff+0x10c>
 800dc84:	4623      	mov	r3, r4
 800dc86:	46b2      	mov	sl, r6
 800dc88:	4644      	mov	r4, r8
 800dc8a:	463e      	mov	r6, r7
 800dc8c:	4698      	mov	r8, r3
 800dc8e:	f04f 0901 	mov.w	r9, #1
 800dc92:	e006      	b.n	800dca2 <__mdiff+0x52>
 800dc94:	db66      	blt.n	800dd64 <__mdiff+0x114>
 800dc96:	f104 0614 	add.w	r6, r4, #20
 800dc9a:	f102 0a14 	add.w	sl, r2, #20
 800dc9e:	f04f 0900 	mov.w	r9, #0
 800dca2:	6861      	ldr	r1, [r4, #4]
 800dca4:	f7ff fda6 	bl	800d7f4 <_Balloc>
 800dca8:	4655      	mov	r5, sl
 800dcaa:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800dcae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dcb2:	4637      	mov	r7, r6
 800dcb4:	f8c0 900c 	str.w	r9, [r0, #12]
 800dcb8:	eb0a 0c83 	add.w	ip, sl, r3, lsl #2
 800dcbc:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800dcc0:	f100 0414 	add.w	r4, r0, #20
 800dcc4:	f04f 0900 	mov.w	r9, #0
 800dcc8:	f857 2b04 	ldr.w	r2, [r7], #4
 800dccc:	f855 1b04 	ldr.w	r1, [r5], #4
 800dcd0:	fa1f f882 	uxth.w	r8, r2
 800dcd4:	eb08 0309 	add.w	r3, r8, r9
 800dcd8:	fa1f f881 	uxth.w	r8, r1
 800dcdc:	0c09      	lsrs	r1, r1, #16
 800dcde:	ebc8 0303 	rsb	r3, r8, r3
 800dce2:	ebc1 4212 	rsb	r2, r1, r2, lsr #16
 800dce6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcf0:	45ac      	cmp	ip, r5
 800dcf2:	f844 3b04 	str.w	r3, [r4], #4
 800dcf6:	ea4f 4922 	mov.w	r9, r2, asr #16
 800dcfa:	d8e5      	bhi.n	800dcc8 <__mdiff+0x78>
 800dcfc:	42be      	cmp	r6, r7
 800dcfe:	d918      	bls.n	800dd32 <__mdiff+0xe2>
 800dd00:	46a0      	mov	r8, r4
 800dd02:	46bc      	mov	ip, r7
 800dd04:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd08:	b295      	uxth	r5, r2
 800dd0a:	eb05 0109 	add.w	r1, r5, r9
 800dd0e:	140b      	asrs	r3, r1, #16
 800dd10:	eb03 4212 	add.w	r2, r3, r2, lsr #16
 800dd14:	b28b      	uxth	r3, r1
 800dd16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd1a:	4566      	cmp	r6, ip
 800dd1c:	f848 3b04 	str.w	r3, [r8], #4
 800dd20:	ea4f 4922 	mov.w	r9, r2, asr #16
 800dd24:	d8ee      	bhi.n	800dd04 <__mdiff+0xb4>
 800dd26:	43ff      	mvns	r7, r7
 800dd28:	4437      	add	r7, r6
 800dd2a:	f027 0703 	bic.w	r7, r7, #3
 800dd2e:	3704      	adds	r7, #4
 800dd30:	443c      	add	r4, r7
 800dd32:	3c04      	subs	r4, #4
 800dd34:	b92b      	cbnz	r3, 800dd42 <__mdiff+0xf2>
 800dd36:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800dd3a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0f9      	beq.n	800dd36 <__mdiff+0xe6>
 800dd42:	f8c0 e010 	str.w	lr, [r0, #16]
 800dd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	f7ff fd52 	bl	800d7f4 <_Balloc>
 800dd50:	2201      	movs	r2, #1
 800dd52:	2300      	movs	r3, #0
 800dd54:	6102      	str	r2, [r0, #16]
 800dd56:	6143      	str	r3, [r0, #20]
 800dd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd5c:	46ba      	mov	sl, r7
 800dd5e:	f04f 0900 	mov.w	r9, #0
 800dd62:	e79e      	b.n	800dca2 <__mdiff+0x52>
 800dd64:	4623      	mov	r3, r4
 800dd66:	f104 0a14 	add.w	sl, r4, #20
 800dd6a:	f108 0614 	add.w	r6, r8, #20
 800dd6e:	4644      	mov	r4, r8
 800dd70:	f04f 0901 	mov.w	r9, #1
 800dd74:	4698      	mov	r8, r3
 800dd76:	e794      	b.n	800dca2 <__mdiff+0x52>

0800dd78 <__d2b>:
 800dd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd7a:	2101      	movs	r1, #1
 800dd7c:	b083      	sub	sp, #12
 800dd7e:	461c      	mov	r4, r3
 800dd80:	f3c3 550a 	ubfx	r5, r3, #20, #11
 800dd84:	4616      	mov	r6, r2
 800dd86:	f7ff fd35 	bl	800d7f4 <_Balloc>
 800dd8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dd8e:	4607      	mov	r7, r0
 800dd90:	b10d      	cbz	r5, 800dd96 <__d2b+0x1e>
 800dd92:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800dd96:	9401      	str	r4, [sp, #4]
 800dd98:	b306      	cbz	r6, 800dddc <__d2b+0x64>
 800dd9a:	a802      	add	r0, sp, #8
 800dd9c:	f840 6d08 	str.w	r6, [r0, #-8]!
 800dda0:	f7ff fdba 	bl	800d918 <__lo0bits>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d130      	bne.n	800de0a <__d2b+0x92>
 800dda8:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800ddac:	617a      	str	r2, [r7, #20]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	bf0c      	ite	eq
 800ddb2:	2101      	moveq	r1, #1
 800ddb4:	2102      	movne	r1, #2
 800ddb6:	61bb      	str	r3, [r7, #24]
 800ddb8:	6139      	str	r1, [r7, #16]
 800ddba:	b9d5      	cbnz	r5, 800ddf2 <__d2b+0x7a>
 800ddbc:	9a08      	ldr	r2, [sp, #32]
 800ddbe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ddc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ddc6:	6010      	str	r0, [r2, #0]
 800ddc8:	6918      	ldr	r0, [r3, #16]
 800ddca:	f7ff fd85 	bl	800d8d8 <__hi0bits>
 800ddce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ddd4:	6018      	str	r0, [r3, #0]
 800ddd6:	4638      	mov	r0, r7
 800ddd8:	b003      	add	sp, #12
 800ddda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dddc:	a801      	add	r0, sp, #4
 800ddde:	f7ff fd9b 	bl	800d918 <__lo0bits>
 800dde2:	9b01      	ldr	r3, [sp, #4]
 800dde4:	2201      	movs	r2, #1
 800dde6:	4611      	mov	r1, r2
 800dde8:	3020      	adds	r0, #32
 800ddea:	613a      	str	r2, [r7, #16]
 800ddec:	617b      	str	r3, [r7, #20]
 800ddee:	2d00      	cmp	r5, #0
 800ddf0:	d0e4      	beq.n	800ddbc <__d2b+0x44>
 800ddf2:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
 800ddf6:	9a08      	ldr	r2, [sp, #32]
 800ddf8:	4403      	add	r3, r0
 800ddfa:	6013      	str	r3, [r2, #0]
 800ddfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de02:	6018      	str	r0, [r3, #0]
 800de04:	4638      	mov	r0, r7
 800de06:	b003      	add	sp, #12
 800de08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de0a:	9b01      	ldr	r3, [sp, #4]
 800de0c:	f1c0 0120 	rsb	r1, r0, #32
 800de10:	9a00      	ldr	r2, [sp, #0]
 800de12:	fa03 f101 	lsl.w	r1, r3, r1
 800de16:	430a      	orrs	r2, r1
 800de18:	40c3      	lsrs	r3, r0
 800de1a:	9301      	str	r3, [sp, #4]
 800de1c:	617a      	str	r2, [r7, #20]
 800de1e:	e7c6      	b.n	800ddae <__d2b+0x36>

0800de20 <__ssprint_r>:
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	6893      	ldr	r3, [r2, #8]
 800de26:	b083      	sub	sp, #12
 800de28:	4690      	mov	r8, r2
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d072      	beq.n	800df14 <__ssprint_r+0xf4>
 800de2e:	f04f 0900 	mov.w	r9, #0
 800de32:	460d      	mov	r5, r1
 800de34:	464c      	mov	r4, r9
 800de36:	4683      	mov	fp, r0
 800de38:	6816      	ldr	r6, [r2, #0]
 800de3a:	6808      	ldr	r0, [r1, #0]
 800de3c:	688b      	ldr	r3, [r1, #8]
 800de3e:	2c00      	cmp	r4, #0
 800de40:	d045      	beq.n	800dece <__ssprint_r+0xae>
 800de42:	429c      	cmp	r4, r3
 800de44:	461f      	mov	r7, r3
 800de46:	469a      	mov	sl, r3
 800de48:	d346      	bcc.n	800ded8 <__ssprint_r+0xb8>
 800de4a:	89ab      	ldrh	r3, [r5, #12]
 800de4c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800de50:	d02d      	beq.n	800deae <__ssprint_r+0x8e>
 800de52:	696f      	ldr	r7, [r5, #20]
 800de54:	6929      	ldr	r1, [r5, #16]
 800de56:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800de5a:	ebc1 0a00 	rsb	sl, r1, r0
 800de5e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800de62:	1c60      	adds	r0, r4, #1
 800de64:	107f      	asrs	r7, r7, #1
 800de66:	4450      	add	r0, sl
 800de68:	42b8      	cmp	r0, r7
 800de6a:	463a      	mov	r2, r7
 800de6c:	bf84      	itt	hi
 800de6e:	4607      	movhi	r7, r0
 800de70:	463a      	movhi	r2, r7
 800de72:	055b      	lsls	r3, r3, #21
 800de74:	d533      	bpl.n	800dede <__ssprint_r+0xbe>
 800de76:	4611      	mov	r1, r2
 800de78:	4658      	mov	r0, fp
 800de7a:	f7fc fbc7 	bl	800a60c <_malloc_r>
 800de7e:	2800      	cmp	r0, #0
 800de80:	d037      	beq.n	800def2 <__ssprint_r+0xd2>
 800de82:	4652      	mov	r2, sl
 800de84:	6929      	ldr	r1, [r5, #16]
 800de86:	9001      	str	r0, [sp, #4]
 800de88:	f7f2 f970 	bl	800016c <memcpy>
 800de8c:	89aa      	ldrh	r2, [r5, #12]
 800de8e:	9b01      	ldr	r3, [sp, #4]
 800de90:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800de94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800de98:	81aa      	strh	r2, [r5, #12]
 800de9a:	ebca 0207 	rsb	r2, sl, r7
 800de9e:	eb03 000a 	add.w	r0, r3, sl
 800dea2:	616f      	str	r7, [r5, #20]
 800dea4:	46a2      	mov	sl, r4
 800dea6:	4627      	mov	r7, r4
 800dea8:	612b      	str	r3, [r5, #16]
 800deaa:	6028      	str	r0, [r5, #0]
 800deac:	60aa      	str	r2, [r5, #8]
 800deae:	4652      	mov	r2, sl
 800deb0:	4649      	mov	r1, r9
 800deb2:	f000 f84b 	bl	800df4c <memmove>
 800deb6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800deba:	68ab      	ldr	r3, [r5, #8]
 800debc:	6828      	ldr	r0, [r5, #0]
 800debe:	1bdb      	subs	r3, r3, r7
 800dec0:	4450      	add	r0, sl
 800dec2:	1b14      	subs	r4, r2, r4
 800dec4:	60ab      	str	r3, [r5, #8]
 800dec6:	6028      	str	r0, [r5, #0]
 800dec8:	f8c8 4008 	str.w	r4, [r8, #8]
 800decc:	b314      	cbz	r4, 800df14 <__ssprint_r+0xf4>
 800dece:	f8d6 9000 	ldr.w	r9, [r6]
 800ded2:	6874      	ldr	r4, [r6, #4]
 800ded4:	3608      	adds	r6, #8
 800ded6:	e7b2      	b.n	800de3e <__ssprint_r+0x1e>
 800ded8:	4627      	mov	r7, r4
 800deda:	46a2      	mov	sl, r4
 800dedc:	e7e7      	b.n	800deae <__ssprint_r+0x8e>
 800dede:	4658      	mov	r0, fp
 800dee0:	f000 f898 	bl	800e014 <_realloc_r>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2800      	cmp	r0, #0
 800dee8:	d1d7      	bne.n	800de9a <__ssprint_r+0x7a>
 800deea:	6929      	ldr	r1, [r5, #16]
 800deec:	4658      	mov	r0, fp
 800deee:	f7fc ff85 	bl	800adfc <_free_r>
 800def2:	230c      	movs	r3, #12
 800def4:	f8cb 3000 	str.w	r3, [fp]
 800def8:	89ab      	ldrh	r3, [r5, #12]
 800defa:	2200      	movs	r2, #0
 800defc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df00:	f04f 30ff 	mov.w	r0, #4294967295
 800df04:	81ab      	strh	r3, [r5, #12]
 800df06:	f8c8 2008 	str.w	r2, [r8, #8]
 800df0a:	f8c8 2004 	str.w	r2, [r8, #4]
 800df0e:	b003      	add	sp, #12
 800df10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df14:	2000      	movs	r0, #0
 800df16:	f8c8 0004 	str.w	r0, [r8, #4]
 800df1a:	b003      	add	sp, #12
 800df1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df20 <__ascii_mbtowc>:
 800df20:	b082      	sub	sp, #8
 800df22:	b149      	cbz	r1, 800df38 <__ascii_mbtowc+0x18>
 800df24:	b15a      	cbz	r2, 800df3e <__ascii_mbtowc+0x1e>
 800df26:	b16b      	cbz	r3, 800df44 <__ascii_mbtowc+0x24>
 800df28:	7813      	ldrb	r3, [r2, #0]
 800df2a:	600b      	str	r3, [r1, #0]
 800df2c:	7812      	ldrb	r2, [r2, #0]
 800df2e:	1c10      	adds	r0, r2, #0
 800df30:	bf18      	it	ne
 800df32:	2001      	movne	r0, #1
 800df34:	b002      	add	sp, #8
 800df36:	4770      	bx	lr
 800df38:	a901      	add	r1, sp, #4
 800df3a:	2a00      	cmp	r2, #0
 800df3c:	d1f3      	bne.n	800df26 <__ascii_mbtowc+0x6>
 800df3e:	4610      	mov	r0, r2
 800df40:	b002      	add	sp, #8
 800df42:	4770      	bx	lr
 800df44:	f06f 0001 	mvn.w	r0, #1
 800df48:	e7f4      	b.n	800df34 <__ascii_mbtowc+0x14>
 800df4a:	bf00      	nop

0800df4c <memmove>:
 800df4c:	4288      	cmp	r0, r1
 800df4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df50:	d90d      	bls.n	800df6e <memmove+0x22>
 800df52:	188b      	adds	r3, r1, r2
 800df54:	4298      	cmp	r0, r3
 800df56:	d20a      	bcs.n	800df6e <memmove+0x22>
 800df58:	1881      	adds	r1, r0, r2
 800df5a:	2a00      	cmp	r2, #0
 800df5c:	d051      	beq.n	800e002 <memmove+0xb6>
 800df5e:	1a9a      	subs	r2, r3, r2
 800df60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df64:	4293      	cmp	r3, r2
 800df66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800df6a:	d1f9      	bne.n	800df60 <memmove+0x14>
 800df6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df6e:	2a0f      	cmp	r2, #15
 800df70:	d948      	bls.n	800e004 <memmove+0xb8>
 800df72:	ea41 0300 	orr.w	r3, r1, r0
 800df76:	079b      	lsls	r3, r3, #30
 800df78:	d146      	bne.n	800e008 <memmove+0xbc>
 800df7a:	4615      	mov	r5, r2
 800df7c:	f100 0410 	add.w	r4, r0, #16
 800df80:	f101 0310 	add.w	r3, r1, #16
 800df84:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800df88:	3d10      	subs	r5, #16
 800df8a:	f844 6c10 	str.w	r6, [r4, #-16]
 800df8e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800df92:	2d0f      	cmp	r5, #15
 800df94:	f844 6c0c 	str.w	r6, [r4, #-12]
 800df98:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800df9c:	f104 0410 	add.w	r4, r4, #16
 800dfa0:	f844 6c18 	str.w	r6, [r4, #-24]
 800dfa4:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800dfa8:	f103 0310 	add.w	r3, r3, #16
 800dfac:	f844 6c14 	str.w	r6, [r4, #-20]
 800dfb0:	d8e8      	bhi.n	800df84 <memmove+0x38>
 800dfb2:	f1a2 0310 	sub.w	r3, r2, #16
 800dfb6:	f023 030f 	bic.w	r3, r3, #15
 800dfba:	f002 0e0f 	and.w	lr, r2, #15
 800dfbe:	3310      	adds	r3, #16
 800dfc0:	f1be 0f03 	cmp.w	lr, #3
 800dfc4:	4419      	add	r1, r3
 800dfc6:	4403      	add	r3, r0
 800dfc8:	d921      	bls.n	800e00e <memmove+0xc2>
 800dfca:	460e      	mov	r6, r1
 800dfcc:	4674      	mov	r4, lr
 800dfce:	1f1d      	subs	r5, r3, #4
 800dfd0:	f856 7b04 	ldr.w	r7, [r6], #4
 800dfd4:	3c04      	subs	r4, #4
 800dfd6:	2c03      	cmp	r4, #3
 800dfd8:	f845 7f04 	str.w	r7, [r5, #4]!
 800dfdc:	d8f8      	bhi.n	800dfd0 <memmove+0x84>
 800dfde:	f1ae 0404 	sub.w	r4, lr, #4
 800dfe2:	f024 0403 	bic.w	r4, r4, #3
 800dfe6:	3404      	adds	r4, #4
 800dfe8:	4423      	add	r3, r4
 800dfea:	4421      	add	r1, r4
 800dfec:	f002 0203 	and.w	r2, r2, #3
 800dff0:	b162      	cbz	r2, 800e00c <memmove+0xc0>
 800dff2:	3b01      	subs	r3, #1
 800dff4:	440a      	add	r2, r1
 800dff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dffa:	428a      	cmp	r2, r1
 800dffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e000:	d1f9      	bne.n	800dff6 <memmove+0xaa>
 800e002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e004:	4603      	mov	r3, r0
 800e006:	e7f3      	b.n	800dff0 <memmove+0xa4>
 800e008:	4603      	mov	r3, r0
 800e00a:	e7f2      	b.n	800dff2 <memmove+0xa6>
 800e00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e00e:	4672      	mov	r2, lr
 800e010:	e7ee      	b.n	800dff0 <memmove+0xa4>
 800e012:	bf00      	nop

0800e014 <_realloc_r>:
 800e014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e018:	4617      	mov	r7, r2
 800e01a:	b083      	sub	sp, #12
 800e01c:	2900      	cmp	r1, #0
 800e01e:	f000 808f 	beq.w	800e140 <_realloc_r+0x12c>
 800e022:	460d      	mov	r5, r1
 800e024:	4681      	mov	r9, r0
 800e026:	f107 040b 	add.w	r4, r7, #11
 800e02a:	f7fc fde9 	bl	800ac00 <__malloc_lock>
 800e02e:	f855 ec04 	ldr.w	lr, [r5, #-4]
 800e032:	2c16      	cmp	r4, #22
 800e034:	f02e 0603 	bic.w	r6, lr, #3
 800e038:	f1a5 0808 	sub.w	r8, r5, #8
 800e03c:	d83c      	bhi.n	800e0b8 <_realloc_r+0xa4>
 800e03e:	2210      	movs	r2, #16
 800e040:	4614      	mov	r4, r2
 800e042:	42a7      	cmp	r7, r4
 800e044:	d83d      	bhi.n	800e0c2 <_realloc_r+0xae>
 800e046:	4296      	cmp	r6, r2
 800e048:	da42      	bge.n	800e0d0 <_realloc_r+0xbc>
 800e04a:	4bc6      	ldr	r3, [pc, #792]	; (800e364 <_realloc_r+0x350>)
 800e04c:	eb08 0006 	add.w	r0, r8, r6
 800e050:	6899      	ldr	r1, [r3, #8]
 800e052:	4288      	cmp	r0, r1
 800e054:	6841      	ldr	r1, [r0, #4]
 800e056:	f000 80d7 	beq.w	800e208 <_realloc_r+0x1f4>
 800e05a:	f021 0301 	bic.w	r3, r1, #1
 800e05e:	4403      	add	r3, r0
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	07db      	lsls	r3, r3, #31
 800e064:	d54c      	bpl.n	800e100 <_realloc_r+0xec>
 800e066:	f01e 0f01 	tst.w	lr, #1
 800e06a:	f000 809d 	beq.w	800e1a8 <_realloc_r+0x194>
 800e06e:	4639      	mov	r1, r7
 800e070:	4648      	mov	r0, r9
 800e072:	f7fc facb 	bl	800a60c <_malloc_r>
 800e076:	4607      	mov	r7, r0
 800e078:	2800      	cmp	r0, #0
 800e07a:	d03a      	beq.n	800e0f2 <_realloc_r+0xde>
 800e07c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800e080:	f1a0 0208 	sub.w	r2, r0, #8
 800e084:	f023 0301 	bic.w	r3, r3, #1
 800e088:	4443      	add	r3, r8
 800e08a:	429a      	cmp	r2, r3
 800e08c:	f000 813e 	beq.w	800e30c <_realloc_r+0x2f8>
 800e090:	1f32      	subs	r2, r6, #4
 800e092:	2a24      	cmp	r2, #36	; 0x24
 800e094:	f200 812b 	bhi.w	800e2ee <_realloc_r+0x2da>
 800e098:	2a13      	cmp	r2, #19
 800e09a:	f200 80ff 	bhi.w	800e29c <_realloc_r+0x288>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	462a      	mov	r2, r5
 800e0a2:	6811      	ldr	r1, [r2, #0]
 800e0a4:	6019      	str	r1, [r3, #0]
 800e0a6:	6851      	ldr	r1, [r2, #4]
 800e0a8:	6059      	str	r1, [r3, #4]
 800e0aa:	6892      	ldr	r2, [r2, #8]
 800e0ac:	609a      	str	r2, [r3, #8]
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	4648      	mov	r0, r9
 800e0b2:	f7fc fea3 	bl	800adfc <_free_r>
 800e0b6:	e01c      	b.n	800e0f2 <_realloc_r+0xde>
 800e0b8:	f024 0407 	bic.w	r4, r4, #7
 800e0bc:	2c00      	cmp	r4, #0
 800e0be:	4622      	mov	r2, r4
 800e0c0:	dabf      	bge.n	800e042 <_realloc_r+0x2e>
 800e0c2:	230c      	movs	r3, #12
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	f8c9 3000 	str.w	r3, [r9]
 800e0ca:	b003      	add	sp, #12
 800e0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d0:	462f      	mov	r7, r5
 800e0d2:	1b33      	subs	r3, r6, r4
 800e0d4:	2b0f      	cmp	r3, #15
 800e0d6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e0da:	d81d      	bhi.n	800e118 <_realloc_r+0x104>
 800e0dc:	f002 0201 	and.w	r2, r2, #1
 800e0e0:	4332      	orrs	r2, r6
 800e0e2:	eb08 0106 	add.w	r1, r8, r6
 800e0e6:	f8c8 2004 	str.w	r2, [r8, #4]
 800e0ea:	684b      	ldr	r3, [r1, #4]
 800e0ec:	f043 0301 	orr.w	r3, r3, #1
 800e0f0:	604b      	str	r3, [r1, #4]
 800e0f2:	4648      	mov	r0, r9
 800e0f4:	f7fc fd86 	bl	800ac04 <__malloc_unlock>
 800e0f8:	4638      	mov	r0, r7
 800e0fa:	b003      	add	sp, #12
 800e0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e100:	f021 0103 	bic.w	r1, r1, #3
 800e104:	4431      	add	r1, r6
 800e106:	4291      	cmp	r1, r2
 800e108:	db20      	blt.n	800e14c <_realloc_r+0x138>
 800e10a:	68c3      	ldr	r3, [r0, #12]
 800e10c:	6882      	ldr	r2, [r0, #8]
 800e10e:	462f      	mov	r7, r5
 800e110:	60d3      	str	r3, [r2, #12]
 800e112:	460e      	mov	r6, r1
 800e114:	609a      	str	r2, [r3, #8]
 800e116:	e7dc      	b.n	800e0d2 <_realloc_r+0xbe>
 800e118:	f002 0201 	and.w	r2, r2, #1
 800e11c:	eb08 0104 	add.w	r1, r8, r4
 800e120:	4314      	orrs	r4, r2
 800e122:	f043 0201 	orr.w	r2, r3, #1
 800e126:	f8c8 4004 	str.w	r4, [r8, #4]
 800e12a:	440b      	add	r3, r1
 800e12c:	604a      	str	r2, [r1, #4]
 800e12e:	685a      	ldr	r2, [r3, #4]
 800e130:	3108      	adds	r1, #8
 800e132:	f042 0201 	orr.w	r2, r2, #1
 800e136:	605a      	str	r2, [r3, #4]
 800e138:	4648      	mov	r0, r9
 800e13a:	f7fc fe5f 	bl	800adfc <_free_r>
 800e13e:	e7d8      	b.n	800e0f2 <_realloc_r+0xde>
 800e140:	4611      	mov	r1, r2
 800e142:	b003      	add	sp, #12
 800e144:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e148:	f7fc ba60 	b.w	800a60c <_malloc_r>
 800e14c:	f01e 0f01 	tst.w	lr, #1
 800e150:	d18d      	bne.n	800e06e <_realloc_r+0x5a>
 800e152:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800e156:	ebc3 0a08 	rsb	sl, r3, r8
 800e15a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e15e:	f023 0c03 	bic.w	ip, r3, #3
 800e162:	eb01 0e0c 	add.w	lr, r1, ip
 800e166:	4596      	cmp	lr, r2
 800e168:	db26      	blt.n	800e1b8 <_realloc_r+0x1a4>
 800e16a:	4657      	mov	r7, sl
 800e16c:	68c3      	ldr	r3, [r0, #12]
 800e16e:	6881      	ldr	r1, [r0, #8]
 800e170:	1f32      	subs	r2, r6, #4
 800e172:	60cb      	str	r3, [r1, #12]
 800e174:	6099      	str	r1, [r3, #8]
 800e176:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800e17a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e17e:	2a24      	cmp	r2, #36	; 0x24
 800e180:	60cb      	str	r3, [r1, #12]
 800e182:	6099      	str	r1, [r3, #8]
 800e184:	f200 80c9 	bhi.w	800e31a <_realloc_r+0x306>
 800e188:	2a13      	cmp	r2, #19
 800e18a:	f240 8092 	bls.w	800e2b2 <_realloc_r+0x29e>
 800e18e:	682b      	ldr	r3, [r5, #0]
 800e190:	2a1b      	cmp	r2, #27
 800e192:	f8ca 3008 	str.w	r3, [sl, #8]
 800e196:	686b      	ldr	r3, [r5, #4]
 800e198:	f8ca 300c 	str.w	r3, [sl, #12]
 800e19c:	f200 80cd 	bhi.w	800e33a <_realloc_r+0x326>
 800e1a0:	3508      	adds	r5, #8
 800e1a2:	f10a 0310 	add.w	r3, sl, #16
 800e1a6:	e085      	b.n	800e2b4 <_realloc_r+0x2a0>
 800e1a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800e1ac:	ebc3 0a08 	rsb	sl, r3, r8
 800e1b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e1b4:	f023 0c03 	bic.w	ip, r3, #3
 800e1b8:	eb06 030c 	add.w	r3, r6, ip
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	f6ff af56 	blt.w	800e06e <_realloc_r+0x5a>
 800e1c2:	4657      	mov	r7, sl
 800e1c4:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e1c8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800e1cc:	1f32      	subs	r2, r6, #4
 800e1ce:	2a24      	cmp	r2, #36	; 0x24
 800e1d0:	60c1      	str	r1, [r0, #12]
 800e1d2:	6088      	str	r0, [r1, #8]
 800e1d4:	f200 80aa 	bhi.w	800e32c <_realloc_r+0x318>
 800e1d8:	2a13      	cmp	r2, #19
 800e1da:	f240 80a5 	bls.w	800e328 <_realloc_r+0x314>
 800e1de:	6829      	ldr	r1, [r5, #0]
 800e1e0:	2a1b      	cmp	r2, #27
 800e1e2:	f8ca 1008 	str.w	r1, [sl, #8]
 800e1e6:	6869      	ldr	r1, [r5, #4]
 800e1e8:	f8ca 100c 	str.w	r1, [sl, #12]
 800e1ec:	f200 80bc 	bhi.w	800e368 <_realloc_r+0x354>
 800e1f0:	3508      	adds	r5, #8
 800e1f2:	f10a 0210 	add.w	r2, sl, #16
 800e1f6:	6829      	ldr	r1, [r5, #0]
 800e1f8:	461e      	mov	r6, r3
 800e1fa:	6011      	str	r1, [r2, #0]
 800e1fc:	6869      	ldr	r1, [r5, #4]
 800e1fe:	46d0      	mov	r8, sl
 800e200:	6051      	str	r1, [r2, #4]
 800e202:	68ab      	ldr	r3, [r5, #8]
 800e204:	6093      	str	r3, [r2, #8]
 800e206:	e764      	b.n	800e0d2 <_realloc_r+0xbe>
 800e208:	f021 0b03 	bic.w	fp, r1, #3
 800e20c:	f104 0010 	add.w	r0, r4, #16
 800e210:	44b3      	add	fp, r6
 800e212:	4583      	cmp	fp, r0
 800e214:	da57      	bge.n	800e2c6 <_realloc_r+0x2b2>
 800e216:	f01e 0f01 	tst.w	lr, #1
 800e21a:	f47f af28 	bne.w	800e06e <_realloc_r+0x5a>
 800e21e:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800e222:	ebc1 0a08 	rsb	sl, r1, r8
 800e226:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e22a:	f021 0c03 	bic.w	ip, r1, #3
 800e22e:	44e3      	add	fp, ip
 800e230:	4558      	cmp	r0, fp
 800e232:	dcc1      	bgt.n	800e1b8 <_realloc_r+0x1a4>
 800e234:	4657      	mov	r7, sl
 800e236:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e23a:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800e23e:	1f32      	subs	r2, r6, #4
 800e240:	2a24      	cmp	r2, #36	; 0x24
 800e242:	60c1      	str	r1, [r0, #12]
 800e244:	6088      	str	r0, [r1, #8]
 800e246:	f200 80b1 	bhi.w	800e3ac <_realloc_r+0x398>
 800e24a:	2a13      	cmp	r2, #19
 800e24c:	f240 80a2 	bls.w	800e394 <_realloc_r+0x380>
 800e250:	6829      	ldr	r1, [r5, #0]
 800e252:	2a1b      	cmp	r2, #27
 800e254:	f8ca 1008 	str.w	r1, [sl, #8]
 800e258:	6869      	ldr	r1, [r5, #4]
 800e25a:	f8ca 100c 	str.w	r1, [sl, #12]
 800e25e:	f200 80ac 	bhi.w	800e3ba <_realloc_r+0x3a6>
 800e262:	3508      	adds	r5, #8
 800e264:	f10a 0210 	add.w	r2, sl, #16
 800e268:	6829      	ldr	r1, [r5, #0]
 800e26a:	6011      	str	r1, [r2, #0]
 800e26c:	6869      	ldr	r1, [r5, #4]
 800e26e:	6051      	str	r1, [r2, #4]
 800e270:	68a9      	ldr	r1, [r5, #8]
 800e272:	6091      	str	r1, [r2, #8]
 800e274:	ebc4 020b 	rsb	r2, r4, fp
 800e278:	eb0a 0104 	add.w	r1, sl, r4
 800e27c:	f042 0201 	orr.w	r2, r2, #1
 800e280:	6099      	str	r1, [r3, #8]
 800e282:	604a      	str	r2, [r1, #4]
 800e284:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e288:	4648      	mov	r0, r9
 800e28a:	f003 0301 	and.w	r3, r3, #1
 800e28e:	431c      	orrs	r4, r3
 800e290:	f8ca 4004 	str.w	r4, [sl, #4]
 800e294:	f7fc fcb6 	bl	800ac04 <__malloc_unlock>
 800e298:	4638      	mov	r0, r7
 800e29a:	e72e      	b.n	800e0fa <_realloc_r+0xe6>
 800e29c:	682b      	ldr	r3, [r5, #0]
 800e29e:	2a1b      	cmp	r2, #27
 800e2a0:	6003      	str	r3, [r0, #0]
 800e2a2:	686b      	ldr	r3, [r5, #4]
 800e2a4:	6043      	str	r3, [r0, #4]
 800e2a6:	d826      	bhi.n	800e2f6 <_realloc_r+0x2e2>
 800e2a8:	f100 0308 	add.w	r3, r0, #8
 800e2ac:	f105 0208 	add.w	r2, r5, #8
 800e2b0:	e6f7      	b.n	800e0a2 <_realloc_r+0x8e>
 800e2b2:	463b      	mov	r3, r7
 800e2b4:	682a      	ldr	r2, [r5, #0]
 800e2b6:	4676      	mov	r6, lr
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	686a      	ldr	r2, [r5, #4]
 800e2bc:	46d0      	mov	r8, sl
 800e2be:	605a      	str	r2, [r3, #4]
 800e2c0:	68aa      	ldr	r2, [r5, #8]
 800e2c2:	609a      	str	r2, [r3, #8]
 800e2c4:	e705      	b.n	800e0d2 <_realloc_r+0xbe>
 800e2c6:	ebc4 0b0b 	rsb	fp, r4, fp
 800e2ca:	eb08 0104 	add.w	r1, r8, r4
 800e2ce:	f04b 0201 	orr.w	r2, fp, #1
 800e2d2:	6099      	str	r1, [r3, #8]
 800e2d4:	604a      	str	r2, [r1, #4]
 800e2d6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800e2da:	4648      	mov	r0, r9
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	431c      	orrs	r4, r3
 800e2e2:	f845 4c04 	str.w	r4, [r5, #-4]
 800e2e6:	f7fc fc8d 	bl	800ac04 <__malloc_unlock>
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	e705      	b.n	800e0fa <_realloc_r+0xe6>
 800e2ee:	4629      	mov	r1, r5
 800e2f0:	f7ff fe2c 	bl	800df4c <memmove>
 800e2f4:	e6db      	b.n	800e0ae <_realloc_r+0x9a>
 800e2f6:	68ab      	ldr	r3, [r5, #8]
 800e2f8:	2a24      	cmp	r2, #36	; 0x24
 800e2fa:	6083      	str	r3, [r0, #8]
 800e2fc:	68eb      	ldr	r3, [r5, #12]
 800e2fe:	60c3      	str	r3, [r0, #12]
 800e300:	d027      	beq.n	800e352 <_realloc_r+0x33e>
 800e302:	f100 0310 	add.w	r3, r0, #16
 800e306:	f105 0210 	add.w	r2, r5, #16
 800e30a:	e6ca      	b.n	800e0a2 <_realloc_r+0x8e>
 800e30c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e310:	462f      	mov	r7, r5
 800e312:	f023 0303 	bic.w	r3, r3, #3
 800e316:	441e      	add	r6, r3
 800e318:	e6db      	b.n	800e0d2 <_realloc_r+0xbe>
 800e31a:	4629      	mov	r1, r5
 800e31c:	4638      	mov	r0, r7
 800e31e:	4676      	mov	r6, lr
 800e320:	46d0      	mov	r8, sl
 800e322:	f7ff fe13 	bl	800df4c <memmove>
 800e326:	e6d4      	b.n	800e0d2 <_realloc_r+0xbe>
 800e328:	463a      	mov	r2, r7
 800e32a:	e764      	b.n	800e1f6 <_realloc_r+0x1e2>
 800e32c:	4629      	mov	r1, r5
 800e32e:	4638      	mov	r0, r7
 800e330:	461e      	mov	r6, r3
 800e332:	46d0      	mov	r8, sl
 800e334:	f7ff fe0a 	bl	800df4c <memmove>
 800e338:	e6cb      	b.n	800e0d2 <_realloc_r+0xbe>
 800e33a:	68ab      	ldr	r3, [r5, #8]
 800e33c:	2a24      	cmp	r2, #36	; 0x24
 800e33e:	f8ca 3010 	str.w	r3, [sl, #16]
 800e342:	68eb      	ldr	r3, [r5, #12]
 800e344:	f8ca 3014 	str.w	r3, [sl, #20]
 800e348:	d01a      	beq.n	800e380 <_realloc_r+0x36c>
 800e34a:	3510      	adds	r5, #16
 800e34c:	f10a 0318 	add.w	r3, sl, #24
 800e350:	e7b0      	b.n	800e2b4 <_realloc_r+0x2a0>
 800e352:	692a      	ldr	r2, [r5, #16]
 800e354:	f100 0318 	add.w	r3, r0, #24
 800e358:	6102      	str	r2, [r0, #16]
 800e35a:	6969      	ldr	r1, [r5, #20]
 800e35c:	f105 0218 	add.w	r2, r5, #24
 800e360:	6141      	str	r1, [r0, #20]
 800e362:	e69e      	b.n	800e0a2 <_realloc_r+0x8e>
 800e364:	2000043c 	.word	0x2000043c
 800e368:	68a9      	ldr	r1, [r5, #8]
 800e36a:	2a24      	cmp	r2, #36	; 0x24
 800e36c:	f8ca 1010 	str.w	r1, [sl, #16]
 800e370:	68e9      	ldr	r1, [r5, #12]
 800e372:	f8ca 1014 	str.w	r1, [sl, #20]
 800e376:	d00f      	beq.n	800e398 <_realloc_r+0x384>
 800e378:	3510      	adds	r5, #16
 800e37a:	f10a 0218 	add.w	r2, sl, #24
 800e37e:	e73a      	b.n	800e1f6 <_realloc_r+0x1e2>
 800e380:	692a      	ldr	r2, [r5, #16]
 800e382:	f10a 0320 	add.w	r3, sl, #32
 800e386:	f8ca 2018 	str.w	r2, [sl, #24]
 800e38a:	696a      	ldr	r2, [r5, #20]
 800e38c:	3518      	adds	r5, #24
 800e38e:	f8ca 201c 	str.w	r2, [sl, #28]
 800e392:	e78f      	b.n	800e2b4 <_realloc_r+0x2a0>
 800e394:	463a      	mov	r2, r7
 800e396:	e767      	b.n	800e268 <_realloc_r+0x254>
 800e398:	6929      	ldr	r1, [r5, #16]
 800e39a:	f10a 0220 	add.w	r2, sl, #32
 800e39e:	f8ca 1018 	str.w	r1, [sl, #24]
 800e3a2:	6969      	ldr	r1, [r5, #20]
 800e3a4:	3518      	adds	r5, #24
 800e3a6:	f8ca 101c 	str.w	r1, [sl, #28]
 800e3aa:	e724      	b.n	800e1f6 <_realloc_r+0x1e2>
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	9301      	str	r3, [sp, #4]
 800e3b2:	f7ff fdcb 	bl	800df4c <memmove>
 800e3b6:	9b01      	ldr	r3, [sp, #4]
 800e3b8:	e75c      	b.n	800e274 <_realloc_r+0x260>
 800e3ba:	68a9      	ldr	r1, [r5, #8]
 800e3bc:	2a24      	cmp	r2, #36	; 0x24
 800e3be:	f8ca 1010 	str.w	r1, [sl, #16]
 800e3c2:	68e9      	ldr	r1, [r5, #12]
 800e3c4:	f8ca 1014 	str.w	r1, [sl, #20]
 800e3c8:	d003      	beq.n	800e3d2 <_realloc_r+0x3be>
 800e3ca:	3510      	adds	r5, #16
 800e3cc:	f10a 0218 	add.w	r2, sl, #24
 800e3d0:	e74a      	b.n	800e268 <_realloc_r+0x254>
 800e3d2:	6929      	ldr	r1, [r5, #16]
 800e3d4:	f10a 0220 	add.w	r2, sl, #32
 800e3d8:	f8ca 1018 	str.w	r1, [sl, #24]
 800e3dc:	6969      	ldr	r1, [r5, #20]
 800e3de:	3518      	adds	r5, #24
 800e3e0:	f8ca 101c 	str.w	r1, [sl, #28]
 800e3e4:	e740      	b.n	800e268 <_realloc_r+0x254>
 800e3e6:	bf00      	nop

0800e3e8 <__ascii_wctomb>:
 800e3e8:	b121      	cbz	r1, 800e3f4 <__ascii_wctomb+0xc>
 800e3ea:	2aff      	cmp	r2, #255	; 0xff
 800e3ec:	d804      	bhi.n	800e3f8 <__ascii_wctomb+0x10>
 800e3ee:	700a      	strb	r2, [r1, #0]
 800e3f0:	2001      	movs	r0, #1
 800e3f2:	4770      	bx	lr
 800e3f4:	4608      	mov	r0, r1
 800e3f6:	4770      	bx	lr
 800e3f8:	238a      	movs	r3, #138	; 0x8a
 800e3fa:	6003      	str	r3, [r0, #0]
 800e3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop

0800e404 <_sbrk>:
 800e404:	4a04      	ldr	r2, [pc, #16]	; (800e418 <_sbrk+0x14>)
 800e406:	4905      	ldr	r1, [pc, #20]	; (800e41c <_sbrk+0x18>)
 800e408:	6813      	ldr	r3, [r2, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	bf08      	it	eq
 800e40e:	460b      	moveq	r3, r1
 800e410:	4418      	add	r0, r3
 800e412:	6010      	str	r0, [r2, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	4770      	bx	lr
 800e418:	20002fdc 	.word	0x20002fdc
 800e41c:	20003ab0 	.word	0x20003ab0

0800e420 <_init>:
 800e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e422:	bf00      	nop
 800e424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e426:	bc08      	pop	{r3}
 800e428:	469e      	mov	lr, r3
 800e42a:	4770      	bx	lr

0800e42c <_fini>:
 800e42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e42e:	bf00      	nop
 800e430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e432:	bc08      	pop	{r3}
 800e434:	469e      	mov	lr, r3
 800e436:	4770      	bx	lr
