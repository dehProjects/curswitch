ARM GAS  /tmp/ccs6ueUd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"adcparams.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.internal,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	internal:
  25              	.LFB70:
  26              		.file 1 "Ourtasks/adcparams.c"
   1:Ourtasks/adcparams.c **** /******************************************************************************
   2:Ourtasks/adcparams.c **** * File Name          : adcparams.c
   3:Ourtasks/adcparams.c **** * Date First Issued  : 03/09/2019
   4:Ourtasks/adcparams.c **** * Board              : DiscoveryF4
   5:Ourtasks/adcparams.c **** * Description        : Parameters for ADC app configuration
   6:Ourtasks/adcparams.c **** *******************************************************************************/
   7:Ourtasks/adcparams.c **** /*
   8:Ourtasks/adcparams.c **** Not thread safe.
   9:Ourtasks/adcparams.c **** */
  10:Ourtasks/adcparams.c **** #include "adcparams.h"
  11:Ourtasks/adcparams.c **** #include "adcparamsinit.h"
  12:Ourtasks/adcparams.c **** #include "ADCTask.h"
  13:Ourtasks/adcparams.c **** 
  14:Ourtasks/adcparams.c **** #include "DTW_counter.h"
  15:Ourtasks/adcparams.c **** 
  16:Ourtasks/adcparams.c **** /*
  17:Ourtasks/adcparams.c ****   SCALING DETAIL
  18:Ourtasks/adcparams.c **** 
  19:Ourtasks/adcparams.c **** ADC readings are referred in the 1/2 DMA sum, i.e. the sum of 16 ADC readings.
  20:Ourtasks/adcparams.c **** The max sum is therefore, 65520 (16 * 4095).  
  21:Ourtasks/adcparams.c **** 
  22:Ourtasks/adcparams.c **** Vn = Vref * (ADC[n]/ADC[vref]) * ((R1+R2)/R2);
  23:Ourtasks/adcparams.c ****   Where: ((R1+R2)/R2) is resistor divider scale factor 
  24:Ourtasks/adcparams.c **** 
  25:Ourtasks/adcparams.c **** The resistor scale factor is applied when sending out readings for human consumption.
  26:Ourtasks/adcparams.c **** 
  27:Ourtasks/adcparams.c **** Since all values are positive, scaled uint32_t is used.  Ranges encounted--
  28:Ourtasks/adcparams.c ****  (1.20 * 65536) < Vref      < (1.27 * 65536) 
  29:Ourtasks/adcparams.c ****           39321 < Vref      < 41615
  30:Ourtasks/adcparams.c ****               0 < ADC[n]    < 65520
  31:Ourtasks/adcparams.c ****           22464 < ADC[Vref] < 29718
  32:Ourtasks/adcparams.c **** Max ADCVref = 65520 * 1.20v/Vdd 3.5v = 22464
ARM GAS  /tmp/ccs6ueUd.s 			page 2


  33:Ourtasks/adcparams.c **** Min ADCVref = 65520 * 1.27v/Vdd 2.8v = 29718
  34:Ourtasks/adcparams.c **** 
  35:Ourtasks/adcparams.c **** 
  36:Ourtasks/adcparams.c ****  Vref TEMPERATURE COMPENSATION
  37:Ourtasks/adcparams.c **** 
  38:Ourtasks/adcparams.c **** Temp(degree) = (V_sense - V_25)/Avg_slope + 25
  39:Ourtasks/adcparams.c **** 
  40:Ourtasks/adcparams.c ****                  Min  Typ  Max
  41:Ourtasks/adcparams.c **** Average slope    4.0  4.3  4.6  mV/°C
  42:Ourtasks/adcparams.c **** Voltage at 25 °C 1.34 1.43 1.52 V
  43:Ourtasks/adcparams.c **** 
  44:Ourtasks/adcparams.c **** ADC sampling time when reading the
  45:Ourtasks/adcparams.c **** temperature - - 17.1 μs
  46:Ourtasks/adcparams.c **** 
  47:Ourtasks/adcparams.c **** V 25 = V SENSE value for 25° C and
  48:Ourtasks/adcparams.c **** Avg_Slope = Average Slope for curve between Temperature vs. V SENSE (given in
  49:Ourtasks/adcparams.c ****    mV/° C or μV/ °C).
  50:Ourtasks/adcparams.c **** */
  51:Ourtasks/adcparams.c **** 
  52:Ourtasks/adcparams.c **** /* Everything for ADC1. */
  53:Ourtasks/adcparams.c **** struct ADCFUNCTION adc1;
  54:Ourtasks/adcparams.c **** 
  55:Ourtasks/adcparams.c **** /* *************************************************************************
  56:Ourtasks/adcparams.c ****  * void adcparams_init(void);
  57:Ourtasks/adcparams.c ****  *	@brief	: Copy parameters into structs
  58:Ourtasks/adcparams.c ****  * NOTE: => ASSUMES ADC1 ONLY <==
  59:Ourtasks/adcparams.c ****  * *************************************************************************/
  60:Ourtasks/adcparams.c **** void adcparams_init(void)
  61:Ourtasks/adcparams.c **** {
  62:Ourtasks/adcparams.c **** 	/* Load parameters, either hard coded, (or later implement from high flash). */
  63:Ourtasks/adcparams.c **** 	adc_idx_v_struct_hardcode_params(&adc1.lc);
  64:Ourtasks/adcparams.c **** 
  65:Ourtasks/adcparams.c **** 	/* Init working struct for ADC function. */
  66:Ourtasks/adcparams.c **** 	adcparamsinit_init(&adc1);
  67:Ourtasks/adcparams.c **** 
  68:Ourtasks/adcparams.c **** 	return;
  69:Ourtasks/adcparams.c **** }
  70:Ourtasks/adcparams.c **** 
  71:Ourtasks/adcparams.c **** /* *************************************************************************
  72:Ourtasks/adcparams.c ****  * static void internal(struct ADCFUNCTION* p, struct ADCINTERNAL* pi,uin8_t idx);
  73:Ourtasks/adcparams.c ****  *	@brief	: Update values used for compensation from Vref and Temperature
  74:Ourtasks/adcparams.c ****  * @param	: p = Pointer to array of ADC reading sums plus other stuff
  75:Ourtasks/adcparams.c ****  * @param	: idx = index into ADC sum for sensor
  76:Ourtasks/adcparams.c ****  * *************************************************************************/
  77:Ourtasks/adcparams.c **** uint32_t adcdbg1;
  78:Ourtasks/adcparams.c **** uint32_t adcdbg2;
  79:Ourtasks/adcparams.c **** 
  80:Ourtasks/adcparams.c **** static void internal(struct ADCFUNCTION* p)
  81:Ourtasks/adcparams.c **** {
  27              		.loc 1 81 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccs6ueUd.s 			page 3


  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 0446     		mov	r4, r0
  82:Ourtasks/adcparams.c **** 	int32_t itmp;
  83:Ourtasks/adcparams.c **** /* 
  84:Ourtasks/adcparams.c **** 
  85:Ourtasks/adcparams.c **** Obtain the temperature using the following formula:
  86:Ourtasks/adcparams.c ****   Temperature (in °C) = {(V 25 - V SENSE ) / Avg_Slope} + 25.
  87:Ourtasks/adcparams.c **** Where,
  88:Ourtasks/adcparams.c ****    V 25 = V SENSE value for 25° C and
  89:Ourtasks/adcparams.c ****    Avg_Slope = Average Slope for curve between Temperature vs. V SENSE (given in
  90:Ourtasks/adcparams.c ****        mV/° C or μV/ °C).
  91:Ourtasks/adcparams.c **** Refer to the Electrical characteristics section for the actual values of V 25 and Avg_Slope
  92:Ourtasks/adcparams.c **** 
  93:Ourtasks/adcparams.c **** Average slope     4.0  4.3  4.6  mV/°C
  94:Ourtasks/adcparams.c **** Voltage at 25 °C  1.34 1.43 1.52 V
  95:Ourtasks/adcparams.c **** 
  96:Ourtasks/adcparams.c **** */
  97:Ourtasks/adcparams.c **** 	/* IIR filter internal adc sensor readings. */
  98:Ourtasks/adcparams.c **** 	p->intern.adcfiltemp = iir_filter_lx_do(&p->intern.iiradctemp, &p->chan[ADC1IDX_INTERNALTEMP].sum)
  40              		.loc 1 98 0
  41 0004 00F55971 		add	r1, r0, #868
  42 0008 E830     		adds	r0, r0, #232
  43              	.LVL1:
  44 000a FFF7FEFF 		bl	iir_filter_lx_do
  45              	.LVL2:
  46 000e C4F80401 		str	r0, [r4, #260]
  99:Ourtasks/adcparams.c **** 	p->intern.adcfilvref = iir_filter_lx_do(&p->intern.iiradcvref, &p->chan[ADC1IDX_INTERNALVREF].sum)
  47              		.loc 1 99 0
  48 0012 04F56D71 		add	r1, r4, #948
  49 0016 04F1D000 		add	r0, r4, #208
  50 001a FFF7FEFF 		bl	iir_filter_lx_do
  51              	.LVL3:
  52 001e C4F80001 		str	r0, [r4, #256]
 100:Ourtasks/adcparams.c **** 
 101:Ourtasks/adcparams.c **** 	/* Skip temperature compensation for now. */
 102:Ourtasks/adcparams.c **** 	p->intern.adccmpvref = p->intern.adcfilvref;
  53              		.loc 1 102 0
  54 0022 C4F80C01 		str	r0, [r4, #268]
 103:Ourtasks/adcparams.c **** 
 104:Ourtasks/adcparams.c **** adcdbg1 = DTWTIME;
  55              		.loc 1 104 0
  56 0026 114E     		ldr	r6, .L3
  57 0028 3568     		ldr	r5, [r6]
  58 002a 114B     		ldr	r3, .L3+4
  59 002c 1D60     		str	r5, [r3]
 105:Ourtasks/adcparams.c **** 	/* Compute temperature */
 106:Ourtasks/adcparams.c **** 	itmp = (p->intern.iv25 * p->intern.adcfilvref) - ((p->intern.vref * p->intern.adcfiltemp) >> (ADCS
  60              		.loc 1 106 0
  61 002e D4F84431 		ldr	r3, [r4, #324]
  62 0032 03FB00F2 		mul	r2, r3, r0
  63 0036 D4F81831 		ldr	r3, [r4, #280]
  64 003a D4F80411 		ldr	r1, [r4, #260]
  65 003e 01FB03F3 		mul	r3, r1, r3
  66 0042 A2EB1323 		sub	r3, r2, r3, lsr #8
ARM GAS  /tmp/ccs6ueUd.s 			page 4


  67              	.LVL4:
 107:Ourtasks/adcparams.c **** 
 108:Ourtasks/adcparams.c **** 	itmp = ((itmp >> ADCSCALEbitsitmp) * p->intern.yRs) / p->intern.adcfilvref;
  68              		.loc 1 108 0
  69 0046 DB10     		asrs	r3, r3, #3
  70              	.LVL5:
  71 0048 D4F84021 		ldr	r2, [r4, #320]
  72              	.LVL6:
  73 004c 02FB03F3 		mul	r3, r2, r3
  74 0050 B3FBF0F0 		udiv	r0, r3, r0
  75              	.LVL7:
 109:Ourtasks/adcparams.c **** 
 110:Ourtasks/adcparams.c **** 	p->intern.itemp = (itmp << ADCSCALEbitsitmp) + p->intern.irmtemp;
  76              		.loc 1 110 0
  77 0054 D4F83821 		ldr	r2, [r4, #312]
  78 0058 02EBC000 		add	r0, r2, r0, lsl #3
  79              	.LVL8:
  80 005c C4F83C01 		str	r0, [r4, #316]
 111:Ourtasks/adcparams.c **** adcdbg2 = DTWTIME - adcdbg1;
  81              		.loc 1 111 0
  82 0060 3368     		ldr	r3, [r6]
  83              	.LVL9:
  84 0062 5B1B     		subs	r3, r3, r5
  85 0064 034A     		ldr	r2, .L3+8
  86 0066 1360     		str	r3, [r2]
  87 0068 70BD     		pop	{r4, r5, r6, pc}
  88              	.LVL10:
  89              	.L4:
  90 006a 00BF     		.align	2
  91              	.L3:
  92 006c 041000E0 		.word	-536866812
  93 0070 00000000 		.word	adcdbg1
  94 0074 00000000 		.word	adcdbg2
  95              		.cfi_endproc
  96              	.LFE70:
  98              		.section	.text.absolute,"ax",%progbits
  99              		.align	2
 100              		.thumb
 101              		.thumb_func
 103              	absolute:
 104              	.LFB71:
 112:Ourtasks/adcparams.c **** 
 113:Ourtasks/adcparams.c **** 	return;
 114:Ourtasks/adcparams.c **** }
 115:Ourtasks/adcparams.c **** /* *************************************************************************
 116:Ourtasks/adcparams.c ****  * static void absolute(struct ADCFUNCTION* p, struct ADCABSOLUTE* pa,uint8_t idx);
 117:Ourtasks/adcparams.c ****  *	@brief	: Calibrate and filter absolute voltage readings
 118:Ourtasks/adcparams.c ****  * @param	: p = Pointer to array of ADC reading sums plus other stuff
 119:Ourtasks/adcparams.c ****  * @param	: pa = Pointer to absolute parameters for reading 'n'
 120:Ourtasks/adcparams.c ****  * @param	: idx = index into ADC sum for sensor for reading 'n'
 121:Ourtasks/adcparams.c ****  * *************************************************************************/
 122:Ourtasks/adcparams.c **** /*
 123:Ourtasks/adcparams.c **** Vn = Vref * (ADC[n]/ADC[vref]) * ((R1+R2)/R2);
 124:Ourtasks/adcparams.c ****   Where: ((R1+R2)/R2) is resistor divider scale factor 
 125:Ourtasks/adcparams.c **** */
 126:Ourtasks/adcparams.c **** static void absolute(struct ADCFUNCTION* p, struct ADCABSOLUTE* pa,uint8_t idx)
 127:Ourtasks/adcparams.c **** {
ARM GAS  /tmp/ccs6ueUd.s 			page 5


 105              		.loc 1 127 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              	.LVL11:
 110 0000 38B5     		push	{r3, r4, r5, lr}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 16
 113              		.cfi_offset 3, -16
 114              		.cfi_offset 4, -12
 115              		.cfi_offset 5, -8
 116              		.cfi_offset 14, -4
 117 0002 0546     		mov	r5, r0
 118 0004 0C46     		mov	r4, r1
 128:Ourtasks/adcparams.c **** 	/* IIR filter adc reading. */
 129:Ourtasks/adcparams.c **** 	pa->adcfil = iir_filter_lx_do(&pa->iir, &p->chan[idx].sum);
 119              		.loc 1 129 0
 120 0006 02EB8202 		add	r2, r2, r2, lsl #2
 121              	.LVL12:
 122 000a 1101     		lsls	r1, r2, #4
 123              	.LVL13:
 124 000c 01F50871 		add	r1, r1, #544
 125 0010 0144     		add	r1, r1, r0
 126 0012 0431     		adds	r1, r1, #4
 127 0014 2046     		mov	r0, r4
 128              	.LVL14:
 129 0016 FFF7FEFF 		bl	iir_filter_lx_do
 130              	.LVL15:
 131 001a A062     		str	r0, [r4, #40]
 130:Ourtasks/adcparams.c **** 
 131:Ourtasks/adcparams.c **** 	pa->ival = ((1<<ADCSCALEbits) * pa->adcfil) / p->intern.adccmpvref;
 132              		.loc 1 131 0
 133 001c C003     		lsls	r0, r0, #15
 134 001e D5F80C31 		ldr	r3, [r5, #268]
 135 0022 B0FBF3F0 		udiv	r0, r0, r3
 136 0026 E062     		str	r0, [r4, #44]
 137 0028 38BD     		pop	{r3, r4, r5, pc}
 138              		.cfi_endproc
 139              	.LFE71:
 141 002a 00BF     		.section	.text.ratiometric5v,"ax",%progbits
 142              		.align	2
 143              		.thumb
 144              		.thumb_func
 146              	ratiometric5v:
 147              	.LFB72:
 132:Ourtasks/adcparams.c **** 	return;
 133:Ourtasks/adcparams.c **** }
 134:Ourtasks/adcparams.c **** /* *************************************************************************
 135:Ourtasks/adcparams.c ****  * static void ratiometric5v(struct ADCFUNCTION* p, struct ADCRATIOMETRIC* pr,uint8_t idx);
 136:Ourtasks/adcparams.c ****  *	@brief	: Calibrate and filter 5v ratiometric (e.g. Hall-effect sensor) reading
 137:Ourtasks/adcparams.c ****  * @param	: p = Pointer to array of ADC reading sums plus other stuff
 138:Ourtasks/adcparams.c ****  * @param	: pr = Pointer to ratiometric working vars (within p->)
 139:Ourtasks/adcparams.c ****  * @param	: idx = index into ADC sum for sensor
 140:Ourtasks/adcparams.c ****  * *************************************************************************/
 141:Ourtasks/adcparams.c **** 
 142:Ourtasks/adcparams.c **** uint32_t dbgadcfil;
 143:Ourtasks/adcparams.c **** uint32_t dbgadcratio;
ARM GAS  /tmp/ccs6ueUd.s 			page 6


 144:Ourtasks/adcparams.c **** 
 145:Ourtasks/adcparams.c **** static void ratiometric5v(struct ADCFUNCTION* p, struct ADCRATIOMETRIC* pr, uint8_t idx)
 146:Ourtasks/adcparams.c **** {
 148              		.loc 1 146 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              	.LVL16:
 153 0000 10B5     		push	{r4, lr}
 154              	.LCFI2:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 4, -8
 157              		.cfi_offset 14, -4
 158 0002 82B0     		sub	sp, sp, #8
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 16
 161 0004 0C46     		mov	r4, r1
 147:Ourtasks/adcparams.c **** /* NOTE: Ratiometric is based on the ratio of the reading of the 5v supply 
 148:Ourtasks/adcparams.c ****    powering the sensor and the sensor reading.  The ratio is adjusted to 
 149:Ourtasks/adcparams.c ****    account for the differences in the resistor divider ratio for both
 150:Ourtasks/adcparams.c ****    inputs.
 151:Ourtasks/adcparams.c **** 
 152:Ourtasks/adcparams.c **** 	The originating offset parameter in the 'lc struct is converted to a
 153:Ourtasks/adcparams.c ****    2^16 scaled fraction during the initialization of parameters.  Therefore,
 154:Ourtasks/adcparams.c ****    the offset is typically, either zero (sensor is positive going only), to
 155:Ourtasks/adcparams.c ****    0.5 (therefore 32767) when the offset is at 1/2 Vsensor (2.5v).
 156:Ourtasks/adcparams.c **** */
 157:Ourtasks/adcparams.c **** 	/* IIR filter adc reading. */
 158:Ourtasks/adcparams.c **** //$	pr->adcfil = iir_filter_lx_do(&pr->iir, &p->chan[idx].sum);
 159:Ourtasks/adcparams.c **** 
 160:Ourtasks/adcparams.c **** 	/* Compute ratio of sensor reading to 5v supply reading. */
 161:Ourtasks/adcparams.c **** 	uint16_t adcratio = (p->chan[idx].sum << ADCSCALEbits) / p->chan[ADC1IDX_5VOLTSUPPLY].sum;
 162              		.loc 1 161 0
 163 0006 02EB8202 		add	r2, r2, r2, lsl #2
 164              	.LVL17:
 165 000a 1301     		lsls	r3, r2, #4
 166 000c 0344     		add	r3, r3, r0
 167 000e B3F82432 		ldrh	r3, [r3, #548]
 168 0012 DB03     		lsls	r3, r3, #15
 169 0014 B0F82422 		ldrh	r2, [r0, #548]
 170 0018 93FBF2F3 		sdiv	r3, r3, r2
 171 001c 02A9     		add	r1, sp, #8
 172              	.LVL18:
 173 001e 21F8023D 		strh	r3, [r1, #-2]!	@ movhi
 162:Ourtasks/adcparams.c **** 
 163:Ourtasks/adcparams.c **** 	/* Filter the ratio */
 164:Ourtasks/adcparams.c **** 	pr->adcfil = iir_filter_lx_do(&pr->iir, &adcratio);
 174              		.loc 1 164 0
 175 0022 2046     		mov	r0, r4
 176              	.LVL19:
 177 0024 FFF7FEFF 		bl	iir_filter_lx_do
 178              	.LVL20:
 179 0028 A062     		str	r0, [r4, #40]
 165:Ourtasks/adcparams.c **** 
 166:Ourtasks/adcparams.c **** 	/* Subtract offset (note result is now signed). */
 167:Ourtasks/adcparams.c **** 	pr->iI = (pr->adcfil - pr->irko); 
 180              		.loc 1 167 0
ARM GAS  /tmp/ccs6ueUd.s 			page 7


 181 002a E36A     		ldr	r3, [r4, #44]
 182 002c C31A     		subs	r3, r0, r3
 183 002e 2363     		str	r3, [r4, #48]
 168:Ourtasks/adcparams.c **** 
 169:Ourtasks/adcparams.c **** 
 170:Ourtasks/adcparams.c **** dbgadcfil=pr->adcfil;
 184              		.loc 1 170 0
 185 0030 034B     		ldr	r3, .L9
 186 0032 1860     		str	r0, [r3]
 171:Ourtasks/adcparams.c **** dbgadcratio=adcratio;
 187              		.loc 1 171 0
 188 0034 BDF80620 		ldrh	r2, [sp, #6]
 189 0038 024B     		ldr	r3, .L9+4
 190 003a 1A60     		str	r2, [r3]
 172:Ourtasks/adcparams.c **** 
 173:Ourtasks/adcparams.c **** 	return;
 174:Ourtasks/adcparams.c **** }
 191              		.loc 1 174 0
 192 003c 02B0     		add	sp, sp, #8
 193              	.LCFI4:
 194              		.cfi_def_cfa_offset 8
 195              		@ sp needed
 196 003e 10BD     		pop	{r4, pc}
 197              	.LVL21:
 198              	.L10:
 199              		.align	2
 200              	.L9:
 201 0040 00000000 		.word	dbgadcfil
 202 0044 00000000 		.word	dbgadcratio
 203              		.cfi_endproc
 204              	.LFE72:
 206              		.section	.text.adcparams_init,"ax",%progbits
 207              		.align	2
 208              		.global	adcparams_init
 209              		.thumb
 210              		.thumb_func
 212              	adcparams_init:
 213              	.LFB69:
  61:Ourtasks/adcparams.c **** 	/* Load parameters, either hard coded, (or later implement from high flash). */
 214              		.loc 1 61 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218 0000 10B5     		push	{r4, lr}
 219              	.LCFI5:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 4, -8
 222              		.cfi_offset 14, -4
  63:Ourtasks/adcparams.c **** 
 223              		.loc 1 63 0
 224 0002 044C     		ldr	r4, .L13
 225 0004 2046     		mov	r0, r4
 226 0006 FFF7FEFF 		bl	adc_idx_v_struct_hardcode_params
 227              	.LVL22:
  66:Ourtasks/adcparams.c **** 
 228              		.loc 1 66 0
 229 000a 2046     		mov	r0, r4
ARM GAS  /tmp/ccs6ueUd.s 			page 8


 230 000c FFF7FEFF 		bl	adcparamsinit_init
 231              	.LVL23:
 232 0010 10BD     		pop	{r4, pc}
 233              	.L14:
 234 0012 00BF     		.align	2
 235              	.L13:
 236 0014 00000000 		.word	adc1
 237              		.cfi_endproc
 238              	.LFE69:
 240              		.section	.text.adcparams_cal,"ax",%progbits
 241              		.align	2
 242              		.global	adcparams_cal
 243              		.thumb
 244              		.thumb_func
 246              	adcparams_cal:
 247              	.LFB73:
 175:Ourtasks/adcparams.c **** 
 176:Ourtasks/adcparams.c **** /* *************************************************************************
 177:Ourtasks/adcparams.c ****  * void adcparams_cal(void);
 178:Ourtasks/adcparams.c ****  *	@brief	: calibrate and filter ADC readings
 179:Ourtasks/adcparams.c ****  * *************************************************************************/
 180:Ourtasks/adcparams.c **** void adcparams_cal(void)
 181:Ourtasks/adcparams.c **** {
 248              		.loc 1 181 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252 0000 10B5     		push	{r4, lr}
 253              	.LCFI6:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 4, -8
 256              		.cfi_offset 14, -4
 257              	.LVL24:
 182:Ourtasks/adcparams.c **** 	struct ADCFUNCTION* p = &adc1; // Convenience pointer
 183:Ourtasks/adcparams.c **** 
 184:Ourtasks/adcparams.c **** 	/* First: Update Vref used in subsequent computations. */
 185:Ourtasks/adcparams.c **** 	internal(p); // Update Vref for temperature
 258              		.loc 1 185 0
 259 0002 0B4C     		ldr	r4, .L17
 260 0004 2046     		mov	r0, r4
 261 0006 FFF7FEFF 		bl	internal
 262              	.LVL25:
 186:Ourtasks/adcparams.c **** 
 187:Ourtasks/adcparams.c **** 	absolute(p, &p->v5 ,ADC1IDX_5VOLTSUPPLY); // 5v supplying Blue Pill, and sensors.
 263              		.loc 1 187 0
 264 000a 0022     		movs	r2, #0
 265 000c 04F5BC71 		add	r1, r4, #376
 266 0010 2046     		mov	r0, r4
 267 0012 FFF7FEFF 		bl	absolute
 268              	.LVL26:
 188:Ourtasks/adcparams.c ****   
 189:Ourtasks/adcparams.c **** 	absolute(p, &p->v12 ,ADC1IDX_12VRAWSUPPLY); // Raw CAN bus supply to board
 269              		.loc 1 189 0
 270 0016 0322     		movs	r2, #3
 271 0018 04F5A471 		add	r1, r4, #328
 272 001c 2046     		mov	r0, r4
 273 001e FFF7FEFF 		bl	absolute
ARM GAS  /tmp/ccs6ueUd.s 			page 9


 274              	.LVL27:
 190:Ourtasks/adcparams.c **** 
 191:Ourtasks/adcparams.c **** /* Note: 5v supply should be processed before ratiometrics.  Otherwise,
 192:Ourtasks/adcparams.c ****    old readings will be used which is not a big deal for a slowly 
 193:Ourtasks/adcparams.c ****    changing 5v supply. */
 194:Ourtasks/adcparams.c **** 
 195:Ourtasks/adcparams.c **** 	ratiometric5v(p, &p->cur1, ADC1IDX_CURRENTTOTAL); // Battery string sensor
 275              		.loc 1 195 0
 276 0022 0122     		movs	r2, #1
 277 0024 04F5D471 		add	r1, r4, #424
 278 0028 2046     		mov	r0, r4
 279 002a FFF7FEFF 		bl	ratiometric5v
 280              	.LVL28:
 281 002e 10BD     		pop	{r4, pc}
 282              	.L18:
 283              		.align	2
 284              	.L17:
 285 0030 00000000 		.word	adc1
 286              		.cfi_endproc
 287              	.LFE73:
 289              		.comm	dbgadcratio,4,4
 290              		.comm	dbgadcfil,4,4
 291              		.comm	adcdbg2,4,4
 292              		.comm	adcdbg1,4,4
 293              		.comm	adc1,1024,8
 294              		.text
 295              	.Letext0:
 296              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 297              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 298              		.file 4 "Ourtasks/iir_filter_lx.h"
 299              		.file 5 "Ourtasks/adc_idx_v_struct.h"
 300              		.file 6 "Ourtasks/adcparams.h"
 301              		.file 7 "Ourtasks/cic_filter_l_N2_M3.h"
 302              		.file 8 "Drivers/CMSIS/Include/core_cm3.h"
 303              		.file 9 "Ourtasks/adcparamsinit.h"
ARM GAS  /tmp/ccs6ueUd.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 adcparams.c
     /tmp/ccs6ueUd.s:20     .text.internal:00000000 $t
     /tmp/ccs6ueUd.s:24     .text.internal:00000000 internal
     /tmp/ccs6ueUd.s:92     .text.internal:0000006c $d
                            *COM*:00000004 adcdbg1
                            *COM*:00000004 adcdbg2
     /tmp/ccs6ueUd.s:99     .text.absolute:00000000 $t
     /tmp/ccs6ueUd.s:103    .text.absolute:00000000 absolute
     /tmp/ccs6ueUd.s:142    .text.ratiometric5v:00000000 $t
     /tmp/ccs6ueUd.s:146    .text.ratiometric5v:00000000 ratiometric5v
     /tmp/ccs6ueUd.s:201    .text.ratiometric5v:00000040 $d
                            *COM*:00000004 dbgadcfil
                            *COM*:00000004 dbgadcratio
     /tmp/ccs6ueUd.s:207    .text.adcparams_init:00000000 $t
     /tmp/ccs6ueUd.s:212    .text.adcparams_init:00000000 adcparams_init
     /tmp/ccs6ueUd.s:236    .text.adcparams_init:00000014 $d
                            *COM*:00000400 adc1
     /tmp/ccs6ueUd.s:241    .text.adcparams_cal:00000000 $t
     /tmp/ccs6ueUd.s:246    .text.adcparams_cal:00000000 adcparams_cal
     /tmp/ccs6ueUd.s:285    .text.adcparams_cal:00000030 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
iir_filter_lx_do
adc_idx_v_struct_hardcode_params
adcparamsinit_init
