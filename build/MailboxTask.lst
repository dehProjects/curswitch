ARM GAS  /tmp/ccXgWVek.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"MailboxTask.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.lookup,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	lookup:
  25              	.LFB76:
  26              		.file 1 "Ourwares/MailboxTask.c"
   1:Ourwares/MailboxTask.c **** /******************************************************************************
   2:Ourwares/MailboxTask.c **** * File Name          : MailboxTask.c
   3:Ourwares/MailboxTask.c **** * Date First Issued  : 02/20/2019
   4:Ourwares/MailboxTask.c **** * Description        : Incoming CAN msgs to Mailbox
   5:Ourwares/MailboxTask.c **** *******************************************************************************/
   6:Ourwares/MailboxTask.c **** 
   7:Ourwares/MailboxTask.c **** #include "stm32f1xx_hal.h"
   8:Ourwares/MailboxTask.c **** #include "stm32f1xx_hal_can.h"
   9:Ourwares/MailboxTask.c **** #include "CanTask.h"
  10:Ourwares/MailboxTask.c **** #include "MailboxTask.h"
  11:Ourwares/MailboxTask.c **** #include "morse.h"
  12:Ourwares/MailboxTask.c **** #include "DTW_counter.h"
  13:Ourwares/MailboxTask.c **** #include "payload_extract.h"
  14:Ourwares/MailboxTask.c **** #include "GatewayTask.h"
  15:Ourwares/MailboxTask.c **** 
  16:Ourwares/MailboxTask.c **** extern osThreadId GatewayTaskHandle;
  17:Ourwares/MailboxTask.c **** 
  18:Ourwares/MailboxTask.c **** // The following two for debugging
  19:Ourwares/MailboxTask.c **** #include "ContactorTask.h"
  20:Ourwares/MailboxTask.c **** extern struct CONTACTORFUNCTION contactorfunction;
  21:Ourwares/MailboxTask.c **** 
  22:Ourwares/MailboxTask.c **** /* One struct for each CAN module, e.g. CAN 1, 2, 3, ... */
  23:Ourwares/MailboxTask.c **** struct MAILBOXCANNUM mbxcannum[STM32MAXCANNUM] = {0};
  24:Ourwares/MailboxTask.c **** 
  25:Ourwares/MailboxTask.c **** osThreadId MailboxTaskHandle; // This wonderful task handle
  26:Ourwares/MailboxTask.c **** 
  27:Ourwares/MailboxTask.c **** void StartMailboxTask(void const * argument);
  28:Ourwares/MailboxTask.c **** static struct MAILBOXCAN* loadmbx(struct MAILBOXCANNUM* pmbxnum, struct CANRCVBUFN* pncan);
  29:Ourwares/MailboxTask.c **** 
  30:Ourwares/MailboxTask.c **** /* *************************************************************************
  31:Ourwares/MailboxTask.c ****  * struct MAILBOXCANNUM* MailboxTask_add_CANlist(struct CAN_CTLBLOCK* pctl, uint16_t arraysize);
  32:Ourwares/MailboxTask.c ****  *	@brief	: Add CAN module mailbox list
ARM GAS  /tmp/ccXgWVek.s 			page 2


  33:Ourwares/MailboxTask.c ****  * @param	: pctl = Pointer to CAN control block
  34:Ourwares/MailboxTask.c ****  * @param	: arraysize = max number of mailboxes in sorted list
  35:Ourwares/MailboxTask.c ****  * @return	: Pointer which probably will not be used; NULL = failed (more important)
  36:Ourwares/MailboxTask.c ****  * NOTE: This is normally called in 'main' before the FreeRTOS scheduler starts.
  37:Ourwares/MailboxTask.c ****  * *************************************************************************/
  38:Ourwares/MailboxTask.c **** struct MAILBOXCANNUM* MailboxTask_add_CANlist(struct CAN_CTLBLOCK* pctl, uint16_t arraysize)
  39:Ourwares/MailboxTask.c **** {
  40:Ourwares/MailboxTask.c **** 	struct MAILBOXCAN** ppmbxarray; // Pointer to array of pointers to mailboxes
  41:Ourwares/MailboxTask.c **** 
  42:Ourwares/MailboxTask.c **** 	if (pctl == NULL) morse_trap(21); // Oops
  43:Ourwares/MailboxTask.c **** 
  44:Ourwares/MailboxTask.c **** 	if (arraysize == 0) morse_trap(22); // Oops
  45:Ourwares/MailboxTask.c **** 
  46:Ourwares/MailboxTask.c **** taskENTER_CRITICAL();
  47:Ourwares/MailboxTask.c **** 
  48:Ourwares/MailboxTask.c **** 	/* Save max number of mailboxes for this CAN module */
  49:Ourwares/MailboxTask.c **** 	mbxcannum[pctl->canidx].arraysizemax = arraysize;
  50:Ourwares/MailboxTask.c **** 
  51:Ourwares/MailboxTask.c **** 	/* This needed to find the CAN module in 'StartMailboxTask' */
  52:Ourwares/MailboxTask.c **** 	mbxcannum[pctl->canidx].pctl = pctl;
  53:Ourwares/MailboxTask.c **** 
  54:Ourwares/MailboxTask.c **** 	/* Get memory for the array of mailbox pointers */
  55:Ourwares/MailboxTask.c **** 	ppmbxarray = (struct MAILBOXCAN**)calloc(arraysize, sizeof(struct MAILBOXCAN*));
  56:Ourwares/MailboxTask.c **** 	if (ppmbxarray == NULL) {taskEXIT_CRITICAL(); morse_trap(23);}
  57:Ourwares/MailboxTask.c **** 
  58:Ourwares/MailboxTask.c **** 	/* xMailboxTaskCreate needs to be called before this 'add to list' */
  59:Ourwares/MailboxTask.c **** 	if (MailboxTaskHandle == NULL) {taskEXIT_CRITICAL(); morse_trap(24);}
  60:Ourwares/MailboxTask.c **** 
  61:Ourwares/MailboxTask.c **** 	/* Get a circular buffer 'take' pointer for this CAN module. */
  62:Ourwares/MailboxTask.c **** 	// The first three notification bits are reserved for CAN modules 
  63:Ourwares/MailboxTask.c **** 	mbxcannum[pctl->canidx].ptake = can_iface_mbx_init(pctl, MailboxTaskHandle, (1 << pctl->canidx) );
  64:Ourwares/MailboxTask.c **** 
  65:Ourwares/MailboxTask.c **** 	/* Save pointer to array of pointers to mailboxes. */
  66:Ourwares/MailboxTask.c **** 	mbxcannum[pctl->canidx].pmbxarray = ppmbxarray;
  67:Ourwares/MailboxTask.c **** 
  68:Ourwares/MailboxTask.c **** 	/* Save number of mailbox pointers */
  69:Ourwares/MailboxTask.c **** 	mbxcannum[pctl->canidx].arraysizemax = arraysize; // Max
  70:Ourwares/MailboxTask.c **** 
  71:Ourwares/MailboxTask.c **** 	/* Start with no mailboxes created. */
  72:Ourwares/MailboxTask.c **** 	mbxcannum[pctl->canidx].arraysizecur = 0;
  73:Ourwares/MailboxTask.c **** 
  74:Ourwares/MailboxTask.c **** 	/* What is important here is to return a non-NULL pointer to show success. */
  75:Ourwares/MailboxTask.c **** taskEXIT_CRITICAL();
  76:Ourwares/MailboxTask.c **** 	return &mbxcannum[pctl->canidx];
  77:Ourwares/MailboxTask.c **** }
  78:Ourwares/MailboxTask.c **** /* *************************************************************************
  79:Ourwares/MailboxTask.c ****  *  struct CANNOTIFYLIST* MailboxTask_disable_notifications(struct MAILBOXCAN* pmbx);
  80:Ourwares/MailboxTask.c ****  *  struct CANNOTIFYLIST* MailboxTask_enable_notifications (struct MAILBOXCAN* pmbx);
  81:Ourwares/MailboxTask.c ****  *	@brief	: Disable, enable mailbox notifications
  82:Ourwares/MailboxTask.c ****  * @param	: pmbx = pointer to mailbox
  83:Ourwares/MailboxTask.c ****  * @return	: Pointer to notification block, for calling task; NULL = task not found
  84:Ourwares/MailboxTask.c ****  * *************************************************************************/
  85:Ourwares/MailboxTask.c **** static struct CANNOTIFYLIST* noteskip(struct MAILBOXCAN* pmbx, uint8_t skip)
  86:Ourwares/MailboxTask.c **** {
  87:Ourwares/MailboxTask.c **** 	osThreadId tskhandle = xTaskGetCurrentTaskHandle();
  88:Ourwares/MailboxTask.c **** 	struct CANNOTIFYLIST* pnotetmp;	
  89:Ourwares/MailboxTask.c **** 	struct CANNOTIFYLIST* pnotex;	
ARM GAS  /tmp/ccXgWVek.s 			page 3


  90:Ourwares/MailboxTask.c **** 
  91:Ourwares/MailboxTask.c **** 	// Traverse linked list to find task
  92:Ourwares/MailboxTask.c **** 	pnotetmp = pmbx->pnote;	// Ptr to head of list
  93:Ourwares/MailboxTask.c **** 	if (pnotetmp == NULL) return NULL; // No notifications setup!
  94:Ourwares/MailboxTask.c **** 	do 
  95:Ourwares/MailboxTask.c **** 	{
  96:Ourwares/MailboxTask.c **** 		if (tskhandle == pnotetmp->tskhandle)
  97:Ourwares/MailboxTask.c **** 		{ // Notification for "this" task found
  98:Ourwares/MailboxTask.c **** 			pnotetmp->skip = skip; // Update 'skip' flag
  99:Ourwares/MailboxTask.c **** 			return pnotetmp; // Ptr to notification struct
 100:Ourwares/MailboxTask.c **** 		}
 101:Ourwares/MailboxTask.c **** 			pnotex   = pnotetmp;
 102:Ourwares/MailboxTask.c **** 			pnotetmp = pnotetmp->pnext;
 103:Ourwares/MailboxTask.c **** 	} while (pnotetmp != pnotex);
 104:Ourwares/MailboxTask.c **** 	return NULL; // Here, the current running task not found
 105:Ourwares/MailboxTask.c **** }
 106:Ourwares/MailboxTask.c **** struct CANNOTIFYLIST* MailboxTask_disable_notifications(struct MAILBOXCAN* pmbx)
 107:Ourwares/MailboxTask.c **** {
 108:Ourwares/MailboxTask.c **** 	return noteskip(pmbx, 1);
 109:Ourwares/MailboxTask.c **** }
 110:Ourwares/MailboxTask.c **** struct CANNOTIFYLIST* MailboxTask_enable_notifications(struct MAILBOXCAN* pmbx)
 111:Ourwares/MailboxTask.c **** {
 112:Ourwares/MailboxTask.c **** 	return noteskip(pmbx, 0);
 113:Ourwares/MailboxTask.c **** }
 114:Ourwares/MailboxTask.c **** 
 115:Ourwares/MailboxTask.c **** /* *************************************************************************
 116:Ourwares/MailboxTask.c ****  * struct MAILBOXCAN* MailboxTask_add(struct CAN_CTLBLOCK* pctl,\
 117:Ourwares/MailboxTask.c **** 		 uint32_t canid,\
 118:Ourwares/MailboxTask.c ****        osThreadId tskhandle,\
 119:Ourwares/MailboxTask.c **** 		 uint32_t notebit,\
 120:Ourwares/MailboxTask.c **** 		 uint8_t noteskip,\
 121:Ourwares/MailboxTask.c **** 		 uint8_t paytype);
 122:Ourwares/MailboxTask.c ****  *	@brief	: Add a mailbox, given CAN control block ptr, and other stuff
 123:Ourwares/MailboxTask.c ****  * @param	: pctl = Pointer to CAN control block, i.e. CAN module/CAN bus, for mailbox
 124:Ourwares/MailboxTask.c ****  * @param	: canid = CAN ID
 125:Ourwares/MailboxTask.c ****  * @param	: tskhandle = Task handle; NULL for use current task; 
 126:Ourwares/MailboxTask.c ****  * @param	: notebit = notification bit; NULL = no notification
 127:Ourwares/MailboxTask.c ****  * @paran	: noteskip = notify = 0; skip notification = 1;
 128:Ourwares/MailboxTask.c ****  * @param	: paytype = payload type code (see 'PAYLOAD_TYPE_INSERT.sql' in 'GliderWinchCommons/embed
 129:Ourwares/MailboxTask.c ****  * @return	: Pointer to mailbox; NULL = failed
 130:Ourwares/MailboxTask.c ****  * *************************************************************************/
 131:Ourwares/MailboxTask.c **** struct MAILBOXCAN* MailboxTask_add(struct CAN_CTLBLOCK* pctl,\
 132:Ourwares/MailboxTask.c **** 		 uint32_t canid,\
 133:Ourwares/MailboxTask.c ****        osThreadId tskhandle,\
 134:Ourwares/MailboxTask.c **** 		 uint32_t notebit,\
 135:Ourwares/MailboxTask.c **** 		 uint8_t noteskip,\
 136:Ourwares/MailboxTask.c **** 		 uint8_t paytype)
 137:Ourwares/MailboxTask.c **** {
 138:Ourwares/MailboxTask.c **** 	int j;
 139:Ourwares/MailboxTask.c **** 	struct MAILBOXCAN* pmbx;
 140:Ourwares/MailboxTask.c **** 	struct CANNOTIFYLIST* pnotex;
 141:Ourwares/MailboxTask.c **** 	struct CANNOTIFYLIST* pnotetmp;
 142:Ourwares/MailboxTask.c **** 	struct MAILBOXCAN** ppmbx;
 143:Ourwares/MailboxTask.c **** 
 144:Ourwares/MailboxTask.c **** 	/* Check that the bozo programmer got the prior initializations done correctly. */
 145:Ourwares/MailboxTask.c **** 	if (canid == 0)    morse_trap(25); // return NULL;
 146:Ourwares/MailboxTask.c **** 	if (pctl  == NULL) morse_trap(26); //return NULL;
ARM GAS  /tmp/ccXgWVek.s 			page 4


 147:Ourwares/MailboxTask.c **** 	if (pctl->canidx >= STM32MAXCANNUM) morse_trap(27);       //return NULL;
 148:Ourwares/MailboxTask.c **** 	if (mbxcannum[pctl->canidx].pctl == NULL) morse_trap(28); //return NULL;
 149:Ourwares/MailboxTask.c **** 
 150:Ourwares/MailboxTask.c **** 	if (tskhandle == NULL)
 151:Ourwares/MailboxTask.c **** 		tskhandle = xTaskGetCurrentTaskHandle();
 152:Ourwares/MailboxTask.c **** 
 153:Ourwares/MailboxTask.c **** 	/* Pointer to beginning of array of mailbox pointers. */
 154:Ourwares/MailboxTask.c **** 	ppmbx = mbxcannum[pctl->canidx].pmbxarray;
 155:Ourwares/MailboxTask.c **** 
 156:Ourwares/MailboxTask.c **** taskENTER_CRITICAL();
 157:Ourwares/MailboxTask.c **** 
 158:Ourwares/MailboxTask.c **** 	/* We are working with the array of pointers to mailboxes. */
 159:Ourwares/MailboxTask.c **** 	// Check if this 'canid' has a mailbox
 160:Ourwares/MailboxTask.c **** 	for (j = 0; j < mbxcannum[pctl->canidx].arraysizecur; j++)
 161:Ourwares/MailboxTask.c **** 	{
 162:Ourwares/MailboxTask.c **** 		pmbx = *(ppmbx+j);  // Get pointer to a mailbox from array of pointers
 163:Ourwares/MailboxTask.c **** 		if (pmbx == NULL) morse_trap(23); // jic|debug
 164:Ourwares/MailboxTask.c **** 		if (pmbx->ncan.can.id == canid)
 165:Ourwares/MailboxTask.c **** 		{ // Here, CAN id already has a mailbox, so a notification must be wanted by this task
 166:Ourwares/MailboxTask.c **** 			if (notebit != 0)
 167:Ourwares/MailboxTask.c **** 			{ // Here add a notification to the existing mailbox
 168:Ourwares/MailboxTask.c **** 
 169:Ourwares/MailboxTask.c **** 				/* Get a notification block. */
 170:Ourwares/MailboxTask.c **** 				pnotex = (struct CANNOTIFYLIST*)calloc(1, sizeof(struct CANNOTIFYLIST));
 171:Ourwares/MailboxTask.c **** 				if (pnotex == NULL){taskEXIT_CRITICAL(); morse_trap(29);}//return NULL;}
 172:Ourwares/MailboxTask.c **** 
 173:Ourwares/MailboxTask.c **** 				/* Check if this mailbox has any notifications */
 174:Ourwares/MailboxTask.c **** 				if (pmbx->pnote == NULL)
 175:Ourwares/MailboxTask.c **** 				{ // This is the first notification for this mailbox.
 176:Ourwares/MailboxTask.c **** 					pmbx->pnote       = pnotex;   // Mailbox points to first notification
 177:Ourwares/MailboxTask.c **** 					pnotex->pnext     = pnotex;	// Last on list points to self
 178:Ourwares/MailboxTask.c **** 					pnotex->tskhandle = tskhandle;
 179:Ourwares/MailboxTask.c ****  					pnotex->notebit   = notebit;  // Notification bit to use
 180:Ourwares/MailboxTask.c **** 					pnotex->skip      = noteskip; // Skip notification flag
 181:Ourwares/MailboxTask.c **** 					/* Here, there is no need to sort array on CANID for a binary lookup
 182:Ourwares/MailboxTask.c **** 						since a new mailbox was not added. */
 183:Ourwares/MailboxTask.c **** 					taskEXIT_CRITICAL();
 184:Ourwares/MailboxTask.c **** 					return pmbx;
 185:Ourwares/MailboxTask.c **** 				}
 186:Ourwares/MailboxTask.c **** 				else
 187:Ourwares/MailboxTask.c **** 				{ // Here, one of more notifications.  Add to list.
 188:Ourwares/MailboxTask.c **** 					/* Seach end of list */
 189:Ourwares/MailboxTask.c **** 					pnotetmp = pmbx->pnote;
 190:Ourwares/MailboxTask.c **** 					while (pnotetmp != pnotetmp->pnext) pnotetmp = pnotetmp->pnext;
 191:Ourwares/MailboxTask.c **** 
 192:Ourwares/MailboxTask.c **** 					/* Add to list and initialize. */
 193:Ourwares/MailboxTask.c **** 					pnotetmp->pnext   = pnotex; // End block now points to new block
 194:Ourwares/MailboxTask.c **** 					pnotex->pnext     = pnotex; // New block points to self
 195:Ourwares/MailboxTask.c **** 					pnotex->tskhandle = tskhandle;
 196:Ourwares/MailboxTask.c ****  					pnotex->notebit   = notebit;  // Notification bit to use
 197:Ourwares/MailboxTask.c **** 					pnotex->skip      = noteskip; // Skip notification flag
 198:Ourwares/MailboxTask.c **** 					/* Here, there is no need to sort array on CANID for a binary lookup
 199:Ourwares/MailboxTask.c **** 						since a new mailbox was not added. */
 200:Ourwares/MailboxTask.c **** 					taskEXIT_CRITICAL();
 201:Ourwares/MailboxTask.c **** 					return pmbx;
 202:Ourwares/MailboxTask.c **** 				}
 203:Ourwares/MailboxTask.c **** 			}
ARM GAS  /tmp/ccXgWVek.s 			page 5


 204:Ourwares/MailboxTask.c **** 			/* Here, no notification bit, but CAN id already has a mailbox!
 205:Ourwares/MailboxTask.c ****             Either the canid is wrong, or this call was not necessary. */
 206:Ourwares/MailboxTask.c **** 			taskEXIT_CRITICAL(); morse_trap(34);//return NULL;
 207:Ourwares/MailboxTask.c **** 		}
 208:Ourwares/MailboxTask.c **** 	}
 209:Ourwares/MailboxTask.c **** 
 210:Ourwares/MailboxTask.c **** 	/* Here, a mailbox for 'canid' was not found in the list.  
 211:Ourwares/MailboxTask.c ****       Or, this is the first mailbox created.                  
 212:Ourwares/MailboxTask.c **** 
 213:Ourwares/MailboxTask.c ****       Create a mailbox for this canid                         */
 214:Ourwares/MailboxTask.c **** 
 215:Ourwares/MailboxTask.c **** 	// Point to next available location in array of mailbox pointers.
 216:Ourwares/MailboxTask.c ****    //                 pointer to beginning   + number of entries
 217:Ourwares/MailboxTask.c **** 	ppmbx = mbxcannum[pctl->canidx].pmbxarray + mbxcannum[pctl->canidx].arraysizecur;
 218:Ourwares/MailboxTask.c **** 
 219:Ourwares/MailboxTask.c **** 
 220:Ourwares/MailboxTask.c **** 
 221:Ourwares/MailboxTask.c **** 	/* Create one mailbox */
 222:Ourwares/MailboxTask.c **** 	pmbx = (struct MAILBOXCAN*)calloc(1, sizeof(struct MAILBOXCAN));
 223:Ourwares/MailboxTask.c **** 	if (pmbx == NULL){taskEXIT_CRITICAL();morse_trap(33);}//return NULL;}
 224:Ourwares/MailboxTask.c **** 
 225:Ourwares/MailboxTask.c **** 	pmbx->ctr          = 0;       // Redundant (calloc set it zero)
 226:Ourwares/MailboxTask.c **** 	pmbx->pnote        = NULL;    // Redundant (calloc set it zero)
 227:Ourwares/MailboxTask.c **** 	pmbx->paytype      = paytype; // Payload layout code
 228:Ourwares/MailboxTask.c **** 	pmbx->ncan.can.id  = canid;   // Save CAN id
 229:Ourwares/MailboxTask.c **** 	pmbx->ncan.toa     = DTWTIME; // Set current time for initial time-of-arrival
 230:Ourwares/MailboxTask.c **** 
 231:Ourwares/MailboxTask.c **** 	if (notebit != 0)
 232:Ourwares/MailboxTask.c **** 	{ // Here, a notification is requested.  Add first instance of notification  
 233:Ourwares/MailboxTask.c **** 		pnotex = (struct CANNOTIFYLIST*)calloc(1, sizeof(struct CANNOTIFYLIST));
 234:Ourwares/MailboxTask.c **** 		if (pnotex == NULL){ taskEXIT_CRITICAL();morse_trap(31);}//return NULL;}
 235:Ourwares/MailboxTask.c **** 
 236:Ourwares/MailboxTask.c **** 		pmbx->pnote       = pnotex;    // Mailbox points to first notification
 237:Ourwares/MailboxTask.c **** 		pnotex->pnext     = pnotex;	 // Last on list points to self
 238:Ourwares/MailboxTask.c **** 		pnotex->tskhandle = tskhandle; // Task to notify
 239:Ourwares/MailboxTask.c **** 		pnotex->notebit   = notebit;   // Notification bit to use
 240:Ourwares/MailboxTask.c **** 		pnotex->skip      = noteskip;  // Skip notification flag
 241:Ourwares/MailboxTask.c **** 	} 
 242:Ourwares/MailboxTask.c **** 
 243:Ourwares/MailboxTask.c **** 	/* Save pointer to mailbox in array of pointers to mailboxes. */
 244:Ourwares/MailboxTask.c **** 	*(mbxcannum[pctl->canidx].pmbxarray+mbxcannum[pctl->canidx].arraysizecur) = pmbx;
 245:Ourwares/MailboxTask.c **** 
 246:Ourwares/MailboxTask.c **** 	/* Advance current size of number of mailboxes for this CAN module. */
 247:Ourwares/MailboxTask.c **** 	    mbxcannum[pctl->canidx].arraysizecur += 1;
 248:Ourwares/MailboxTask.c **** 	if (mbxcannum[pctl->canidx].arraysizecur 
 249:Ourwares/MailboxTask.c ****                              >=
 250:Ourwares/MailboxTask.c **** 		 mbxcannum[pctl->canidx].arraysizemax)
 251:Ourwares/MailboxTask.c **** 	{ // Here, the next addition will exceed size calloc'ed earlier!
 252:Ourwares/MailboxTask.c **** 		{taskEXIT_CRITICAL();morse_trap(31);} // Bozo programmer. We gotcha.
 253:Ourwares/MailboxTask.c **** 	}
 254:Ourwares/MailboxTask.c **** // TODO: Sort pointers for new Mailbox if later binary lookup on CAN ID.
 255:Ourwares/MailboxTask.c **** 
 256:Ourwares/MailboxTask.c **** taskEXIT_CRITICAL();
 257:Ourwares/MailboxTask.c **** 	return pmbx;
 258:Ourwares/MailboxTask.c **** }
 259:Ourwares/MailboxTask.c **** 
 260:Ourwares/MailboxTask.c **** /* *************************************************************************
ARM GAS  /tmp/ccXgWVek.s 			page 6


 261:Ourwares/MailboxTask.c ****  * osThreadId xMailboxTaskCreate(uint32_t taskpriority);
 262:Ourwares/MailboxTask.c ****  * @brief	: Create task; task handle created is global for all to enjoy!
 263:Ourwares/MailboxTask.c ****  * @param	: taskpriority = Task priority (just as it says!)
 264:Ourwares/MailboxTask.c ****  * @return	: QueueHandle_t = queue handle
 265:Ourwares/MailboxTask.c ****  * *************************************************************************/
 266:Ourwares/MailboxTask.c **** osThreadId xMailboxTaskCreate(uint32_t taskpriority)
 267:Ourwares/MailboxTask.c **** {
 268:Ourwares/MailboxTask.c ****  /* definition and creation of CanTask */
 269:Ourwares/MailboxTask.c ****   osThreadDef(MailboxTask, StartMailboxTask, osPriorityNormal, 0, 96);
 270:Ourwares/MailboxTask.c **** 
 271:Ourwares/MailboxTask.c ****   MailboxTaskHandle = osThreadCreate(osThread(MailboxTask), NULL);
 272:Ourwares/MailboxTask.c **** 
 273:Ourwares/MailboxTask.c **** 	vTaskPrioritySet( MailboxTaskHandle, taskpriority );
 274:Ourwares/MailboxTask.c **** 	return MailboxTaskHandle;
 275:Ourwares/MailboxTask.c **** }
 276:Ourwares/MailboxTask.c **** /* *************************************************************************
 277:Ourwares/MailboxTask.c ****  * void StartMailboxTask(void const * argument);
 278:Ourwares/MailboxTask.c ****  *	@brief	: Task startup
 279:Ourwares/MailboxTask.c ****  * *************************************************************************/
 280:Ourwares/MailboxTask.c **** void StartMailboxTask(void const * argument)
 281:Ourwares/MailboxTask.c **** {
 282:Ourwares/MailboxTask.c **** 	struct MAILBOXCANNUM* pmbxnum;
 283:Ourwares/MailboxTask.c **** 	struct CANRCVBUFN* pncan;
 284:Ourwares/MailboxTask.c **** 	struct CANTAKEPTR* ptake[STM32MAXCANNUM];
 285:Ourwares/MailboxTask.c **** 	int i;
 286:Ourwares/MailboxTask.c **** //	int8_t flag;
 287:Ourwares/MailboxTask.c **** 
 288:Ourwares/MailboxTask.c **** //while(1==1) osDelay(10); // Debug: make task do nothing
 289:Ourwares/MailboxTask.c **** 
 290:Ourwares/MailboxTask.c **** 	/* Get circular buffer pointers for each CAN module in list. */	
 291:Ourwares/MailboxTask.c **** 	for (i = 0; i < STM32MAXCANNUM; i++)
 292:Ourwares/MailboxTask.c **** 	{
 293:Ourwares/MailboxTask.c **** 		if (mbxcannum[i].pmbxarray != NULL)
 294:Ourwares/MailboxTask.c **** 		{ // Here, array of pointers was initialized
 295:Ourwares/MailboxTask.c **** 			ptake[i] = can_iface_mbx_init(mbxcannum[i].pctl, NULL, (1 << i));
 296:Ourwares/MailboxTask.c **** 			if (ptake[i] == NULL) morse_trap(22);
 297:Ourwares/MailboxTask.c **** 		}
 298:Ourwares/MailboxTask.c **** 	}
 299:Ourwares/MailboxTask.c **** 
 300:Ourwares/MailboxTask.c **** 	/* A notification copies the internal notification word to this. */
 301:Ourwares/MailboxTask.c **** 	uint32_t noteval = 0;    // Receives notification word upon an API notify
 302:Ourwares/MailboxTask.c **** 
 303:Ourwares/MailboxTask.c **** 	/* notification bits processed after a 'Wait. */
 304:Ourwares/MailboxTask.c **** 	uint32_t noteused = 0;
 305:Ourwares/MailboxTask.c **** 
 306:Ourwares/MailboxTask.c ****   /* Infinite MailboxTask loop */
 307:Ourwares/MailboxTask.c ****   for(;;)
 308:Ourwares/MailboxTask.c ****   {
 309:Ourwares/MailboxTask.c **** 		/* Wait for a CAN module to load its circular buffer. */
 310:Ourwares/MailboxTask.c **** 		/* The notification bit identifies the CAN module. */
 311:Ourwares/MailboxTask.c **** 		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
 312:Ourwares/MailboxTask.c **** 		noteused = 0;	// Accumulate bits in 'noteval' processed.
 313:Ourwares/MailboxTask.c **** 
 314:Ourwares/MailboxTask.c **** 		/* Step through possible notification bits */
 315:Ourwares/MailboxTask.c **** 		for (i = 0; i < STM32MAXCANNUM; i++)
 316:Ourwares/MailboxTask.c **** 		{
 317:Ourwares/MailboxTask.c **** //			flag = 0;
ARM GAS  /tmp/ccXgWVek.s 			page 7


 318:Ourwares/MailboxTask.c **** 			if ((noteval & (1 << i)) != 0)
 319:Ourwares/MailboxTask.c **** 			{	
 320:Ourwares/MailboxTask.c **** 				noteused |= (1 << i);
 321:Ourwares/MailboxTask.c **** 				pmbxnum = &mbxcannum[i]; // Pt to CAN module mailbox control block
 322:Ourwares/MailboxTask.c **** if (pmbxnum == NULL) morse_trap(77); // Debug trap
 323:Ourwares/MailboxTask.c **** 				do
 324:Ourwares/MailboxTask.c **** 				{
 325:Ourwares/MailboxTask.c **** 					/* Get a pointer to the circular buffer w CAN msgs. */
 326:Ourwares/MailboxTask.c **** 					pncan = can_iface_get_CANmsg(pmbxnum->ptake);
 327:Ourwares/MailboxTask.c **** 
 328:Ourwares/MailboxTask.c **** 					if (pncan != NULL)
 329:Ourwares/MailboxTask.c **** 					{ // Here, CAN msg is available
 330:Ourwares/MailboxTask.c **** //						flag = 1;
 331:Ourwares/MailboxTask.c **** 						loadmbx(pmbxnum, pncan); // Load mailbox. if CANID is in list
 332:Ourwares/MailboxTask.c **** 					}
 333:Ourwares/MailboxTask.c **** 				} while (pncan != NULL);
 334:Ourwares/MailboxTask.c **** 
 335:Ourwares/MailboxTask.c ****   #ifdef GATEWAYTASKINCLUDED
 336:Ourwares/MailboxTask.c **** 				/* Notify GatewayTask that one or more CAN msgs in circular buffer. */
 337:Ourwares/MailboxTask.c **** 				if ( (GatewayTaskHandle != NULL) && ((noteval & (1 << i)) != 0) && (flag != 0) )
 338:Ourwares/MailboxTask.c **** 				{
 339:Ourwares/MailboxTask.c **** 					xTaskNotify(GatewayTaskHandle, (1 << i), eSetBits);
 340:Ourwares/MailboxTask.c **** 				}
 341:Ourwares/MailboxTask.c ****   #endif
 342:Ourwares/MailboxTask.c **** 			}
 343:Ourwares/MailboxTask.c **** 		}
 344:Ourwares/MailboxTask.c ****   }
 345:Ourwares/MailboxTask.c **** }
 346:Ourwares/MailboxTask.c **** /* *************************************************************************
 347:Ourwares/MailboxTask.c ****  * static struct MAILBOXCAN* lookup(struct MAILBOXCANNUM* pmbxnum, struct CANRCVBUFN* pncan);
 348:Ourwares/MailboxTask.c ****  *	@brief	: (Bonehead) Lookup CAN ID by a straight pass down the array of mailbox pointers
 349:Ourwares/MailboxTask.c ****  * @param	: pmbxnum = pointer to mailbox control block
 350:Ourwares/MailboxTask.c ****  * @param	: pncan = pointer to CAN msg in can_face.c circular buffer
 351:Ourwares/MailboxTask.c ****  * *************************************************************************/
 352:Ourwares/MailboxTask.c **** static struct MAILBOXCAN* lookup(struct MAILBOXCANNUM* pmbxnum, struct CANRCVBUFN* pncan)
 353:Ourwares/MailboxTask.c **** {
  27              		.loc 1 353 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 70B4     		push	{r4, r5, r6}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 6, -4
 354:Ourwares/MailboxTask.c **** 	struct MAILBOXCAN** ppmbx;
 355:Ourwares/MailboxTask.c **** 	struct MAILBOXCAN*   pmbx;
 356:Ourwares/MailboxTask.c **** 	int i;
 357:Ourwares/MailboxTask.c **** 
 358:Ourwares/MailboxTask.c **** 	ppmbx = pmbxnum->pmbxarray;
  39              		.loc 1 358 0
  40 0002 4668     		ldr	r6, [r0, #4]
  41              	.LVL1:
 359:Ourwares/MailboxTask.c **** 	for (i = 0; i < pmbxnum->arraysizecur; i++)
ARM GAS  /tmp/ccXgWVek.s 			page 8


  42              		.loc 1 359 0
  43 0004 0023     		movs	r3, #0
  44 0006 10E0     		b	.L2
  45              	.LVL2:
  46              	.L5:
 360:Ourwares/MailboxTask.c **** 	{
 361:Ourwares/MailboxTask.c **** 		pmbx = *(ppmbx + i); // Point to mailbox[i]
  47              		.loc 1 361 0
  48 0008 56F82340 		ldr	r4, [r6, r3, lsl #2]
  49              	.LVL3:
 362:Ourwares/MailboxTask.c **** 		if (pmbx->ncan.can.id == pncan->can.id)
  50              		.loc 1 362 0
  51 000c 2568     		ldr	r5, [r4]
  52 000e 0A68     		ldr	r2, [r1]
  53 0010 9542     		cmp	r5, r2
  54 0012 09D1     		bne	.L3
 363:Ourwares/MailboxTask.c **** 		{ // Here, found!
 364:Ourwares/MailboxTask.c **** 			pmbx->ncan = *pncan; // Copy CAN msg to mailbox
  55              		.loc 1 364 0
  56 0014 2646     		mov	r6, r4
  57              	.LVL4:
  58 0016 0D46     		mov	r5, r1
  59 0018 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
  60              	.LVL5:
  61 001a 0FC6     		stmia	r6!, {r0, r1, r2, r3}
  62              	.LVL6:
  63 001c 95E80300 		ldmia	r5, {r0, r1}
  64 0020 86E80300 		stmia	r6, {r0, r1}
 365:Ourwares/MailboxTask.c **** 			return pmbx;
  65              		.loc 1 365 0
  66 0024 2046     		mov	r0, r4
  67 0026 04E0     		b	.L4
  68              	.LVL7:
  69              	.L3:
 359:Ourwares/MailboxTask.c **** 	{
  70              		.loc 1 359 0 discriminator 2
  71 0028 0133     		adds	r3, r3, #1
  72              	.LVL8:
  73              	.L2:
 359:Ourwares/MailboxTask.c **** 	{
  74              		.loc 1 359 0 is_stmt 0 discriminator 1
  75 002a 428A     		ldrh	r2, [r0, #18]
  76 002c 9342     		cmp	r3, r2
  77 002e EBDB     		blt	.L5
 366:Ourwares/MailboxTask.c **** 		}
 367:Ourwares/MailboxTask.c **** 	}
 368:Ourwares/MailboxTask.c **** 	return NULL;
  78              		.loc 1 368 0 is_stmt 1
  79 0030 0020     		movs	r0, #0
  80              	.LVL9:
  81              	.L4:
 369:Ourwares/MailboxTask.c **** }
  82              		.loc 1 369 0
  83 0032 70BC     		pop	{r4, r5, r6}
  84              	.LCFI1:
  85              		.cfi_restore 6
  86              		.cfi_restore 5
ARM GAS  /tmp/ccXgWVek.s 			page 9


  87              		.cfi_restore 4
  88              		.cfi_def_cfa_offset 0
  89 0034 7047     		bx	lr
  90              		.cfi_endproc
  91              	.LFE76:
  93 0036 00BF     		.section	.text.noteskip,"ax",%progbits
  94              		.align	2
  95              		.thumb
  96              		.thumb_func
  98              	noteskip:
  99              	.LFB70:
  86:Ourwares/MailboxTask.c **** 	osThreadId tskhandle = xTaskGetCurrentTaskHandle();
 100              		.loc 1 86 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              	.LVL10:
 105 0000 38B5     		push	{r3, r4, r5, lr}
 106              	.LCFI2:
 107              		.cfi_def_cfa_offset 16
 108              		.cfi_offset 3, -16
 109              		.cfi_offset 4, -12
 110              		.cfi_offset 5, -8
 111              		.cfi_offset 14, -4
 112 0002 0446     		mov	r4, r0
 113 0004 0D46     		mov	r5, r1
  87:Ourwares/MailboxTask.c **** 	struct CANNOTIFYLIST* pnotetmp;	
 114              		.loc 1 87 0
 115 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 116              	.LVL11:
  92:Ourwares/MailboxTask.c **** 	if (pnotetmp == NULL) return NULL; // No notifications setup!
 117              		.loc 1 92 0
 118 000a 236B     		ldr	r3, [r4, #48]
 119              	.LVL12:
  93:Ourwares/MailboxTask.c **** 	do 
 120              		.loc 1 93 0
 121 000c 0BB9     		cbnz	r3, .L10
 122 000e 0BE0     		b	.L11
 123              	.LVL13:
 124              	.L12:
 102:Ourwares/MailboxTask.c **** 	} while (pnotetmp != pnotex);
 125              		.loc 1 102 0
 126 0010 1346     		mov	r3, r2
 127              	.LVL14:
 128              	.L10:
  96:Ourwares/MailboxTask.c **** 		{ // Notification for "this" task found
 129              		.loc 1 96 0
 130 0012 5A68     		ldr	r2, [r3, #4]
 131 0014 9042     		cmp	r0, r2
 132 0016 02D1     		bne	.L9
  98:Ourwares/MailboxTask.c **** 			return pnotetmp; // Ptr to notification struct
 133              		.loc 1 98 0
 134 0018 1D73     		strb	r5, [r3, #12]
  99:Ourwares/MailboxTask.c **** 		}
 135              		.loc 1 99 0
 136 001a 1846     		mov	r0, r3
 137              	.LVL15:
ARM GAS  /tmp/ccXgWVek.s 			page 10


 138 001c 38BD     		pop	{r3, r4, r5, pc}
 139              	.LVL16:
 140              	.L9:
 102:Ourwares/MailboxTask.c **** 	} while (pnotetmp != pnotex);
 141              		.loc 1 102 0
 142 001e 1A68     		ldr	r2, [r3]
 143              	.LVL17:
 103:Ourwares/MailboxTask.c **** 	return NULL; // Here, the current running task not found
 144              		.loc 1 103 0
 145 0020 9342     		cmp	r3, r2
 146 0022 F5D1     		bne	.L12
 104:Ourwares/MailboxTask.c **** }
 147              		.loc 1 104 0
 148 0024 0020     		movs	r0, #0
 149              	.LVL18:
 150 0026 38BD     		pop	{r3, r4, r5, pc}
 151              	.LVL19:
 152              	.L11:
  93:Ourwares/MailboxTask.c **** 	do 
 153              		.loc 1 93 0
 154 0028 0020     		movs	r0, #0
 155              	.LVL20:
 105:Ourwares/MailboxTask.c **** struct CANNOTIFYLIST* MailboxTask_disable_notifications(struct MAILBOXCAN* pmbx)
 156              		.loc 1 105 0
 157 002a 38BD     		pop	{r3, r4, r5, pc}
 158              		.cfi_endproc
 159              	.LFE70:
 161              		.section	.text.loadmbx,"ax",%progbits
 162              		.align	2
 163              		.thumb
 164              		.thumb_func
 166              	loadmbx:
 167              	.LFB77:
 370:Ourwares/MailboxTask.c **** 
 371:Ourwares/MailboxTask.c **** /* ************************************************************************* 
 372:Ourwares/MailboxTask.c ****  * static struct MAILBOXCAN loadmbx(struct MAILBOXCANNUM* pmbxnum, struct CANRCVBUFN* pncan);
 373:Ourwares/MailboxTask.c ****  *	@brief	: Lookup CAN ID and load mailbox with extract payload reading(s)
 374:Ourwares/MailboxTask.c ****  * @param	: pmbxnum = pointer to mailbox control block
 375:Ourwares/MailboxTask.c ****  * @param	: pncan = pointer to CAN msg in can_face.c circular buffer
 376:Ourwares/MailboxTask.c ****  * *************************************************************************/
 377:Ourwares/MailboxTask.c **** uint32_t dbgmbxctr;
 378:Ourwares/MailboxTask.c **** 
 379:Ourwares/MailboxTask.c **** static struct MAILBOXCAN* loadmbx(struct MAILBOXCANNUM* pmbxnum, struct CANRCVBUFN* pncan)
 380:Ourwares/MailboxTask.c **** {
 168              		.loc 1 380 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              	.LVL21:
 173 0000 38B5     		push	{r3, r4, r5, lr}
 174              	.LCFI3:
 175              		.cfi_def_cfa_offset 16
 176              		.cfi_offset 3, -16
 177              		.cfi_offset 4, -12
 178              		.cfi_offset 5, -8
 179              		.cfi_offset 14, -4
 381:Ourwares/MailboxTask.c **** 	struct CANNOTIFYLIST* pnotetmp;	
ARM GAS  /tmp/ccXgWVek.s 			page 11


 382:Ourwares/MailboxTask.c **** 	struct CANNOTIFYLIST* pnotex;
 383:Ourwares/MailboxTask.c **** //	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 384:Ourwares/MailboxTask.c **** 
 385:Ourwares/MailboxTask.c **** 	/* Check if received CAN id is in the mailbox CAN id list. */
 386:Ourwares/MailboxTask.c **** 	// 'lookup' is a straight loop; use 'lookupq' for binary search (when implemented)
 387:Ourwares/MailboxTask.c **** 	struct MAILBOXCAN* pmbx = lookup(pmbxnum, pncan);
 180              		.loc 1 387 0
 181 0002 FFF7FEFF 		bl	lookup
 182              	.LVL22:
 388:Ourwares/MailboxTask.c **** 	if (pmbx == NULL) return NULL; // Return: CAN id not in mailbox list
 183              		.loc 1 388 0
 184 0006 E0B1     		cbz	r0, .L18
 185 0008 0546     		mov	r5, r0
 389:Ourwares/MailboxTask.c **** 
 390:Ourwares/MailboxTask.c **** 	/* Here, this CAN msg has a mailbox. */
 391:Ourwares/MailboxTask.c **** 	// Extract payload (above 'lookup' copied ncan into mailbox)
 392:Ourwares/MailboxTask.c **** 	payload_extract(pmbx);
 186              		.loc 1 392 0
 187 000a FFF7FEFF 		bl	payload_extract
 188              	.LVL23:
 393:Ourwares/MailboxTask.c **** 
 394:Ourwares/MailboxTask.c **** 	/* Execute notifications */
 395:Ourwares/MailboxTask.c **** 	pnotetmp = pmbx->pnote; // Get ptr to head of linked list
 189              		.loc 1 395 0
 190 000e 2C6B     		ldr	r4, [r5, #48]
 191              	.LVL24:
 396:Ourwares/MailboxTask.c **** 	if (pnotetmp == NULL) return pmbx; // CANID found, but no notifications
 192              		.loc 1 396 0
 193 0010 CCB1     		cbz	r4, .L19
 397:Ourwares/MailboxTask.c **** 
 398:Ourwares/MailboxTask.c **** 	pmbx->ctr += 1; // Count updates
 194              		.loc 1 398 0
 195 0012 6B6B     		ldr	r3, [r5, #52]
 196 0014 0133     		adds	r3, r3, #1
 197 0016 6B63     		str	r3, [r5, #52]
 198 0018 00E0     		b	.L17
 199              	.LVL25:
 200              	.L20:
 399:Ourwares/MailboxTask.c **** 	
 400:Ourwares/MailboxTask.c **** 	// Traverse linked list making notifications
 401:Ourwares/MailboxTask.c **** 	do 
 402:Ourwares/MailboxTask.c **** 	{
 403:Ourwares/MailboxTask.c **** 		/* Make a notification if "not skip" and 'taskhandle and 'notebit' were setup */
 404:Ourwares/MailboxTask.c **** 		if ((pnotetmp->skip == 0) && (pnotetmp->tskhandle != NULL) && (pnotetmp->notebit != 0))
 405:Ourwares/MailboxTask.c **** 		{
 406:Ourwares/MailboxTask.c **** dbgmbxctr += 1;
 407:Ourwares/MailboxTask.c **** 			xTaskNotify(pnotetmp->tskhandle, pnotetmp->notebit, eSetBits);	
 408:Ourwares/MailboxTask.c **** 		}
 409:Ourwares/MailboxTask.c **** 
 410:Ourwares/MailboxTask.c **** 		/* Step to next item in list. */
 411:Ourwares/MailboxTask.c **** 			pnotex   = pnotetmp;
 412:Ourwares/MailboxTask.c **** 			pnotetmp = pnotetmp->pnext;
 201              		.loc 1 412 0
 202 001a 1C46     		mov	r4, r3
 203              	.LVL26:
 204              	.L17:
 404:Ourwares/MailboxTask.c **** 		{
ARM GAS  /tmp/ccXgWVek.s 			page 12


 205              		.loc 1 404 0
 206 001c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 207 001e 5BB9     		cbnz	r3, .L16
 404:Ourwares/MailboxTask.c **** 		{
 208              		.loc 1 404 0 is_stmt 0 discriminator 1
 209 0020 6068     		ldr	r0, [r4, #4]
 210 0022 48B1     		cbz	r0, .L16
 404:Ourwares/MailboxTask.c **** 		{
 211              		.loc 1 404 0 discriminator 2
 212 0024 A168     		ldr	r1, [r4, #8]
 213 0026 39B1     		cbz	r1, .L16
 406:Ourwares/MailboxTask.c **** 			xTaskNotify(pnotetmp->tskhandle, pnotetmp->notebit, eSetBits);	
 214              		.loc 1 406 0 is_stmt 1
 215 0028 084A     		ldr	r2, .L22
 216 002a 1368     		ldr	r3, [r2]
 217 002c 0133     		adds	r3, r3, #1
 218 002e 1360     		str	r3, [r2]
 407:Ourwares/MailboxTask.c **** 		}
 219              		.loc 1 407 0
 220 0030 0023     		movs	r3, #0
 221 0032 0122     		movs	r2, #1
 222 0034 FFF7FEFF 		bl	xTaskGenericNotify
 223              	.LVL27:
 224              	.L16:
 225              		.loc 1 412 0
 226 0038 2368     		ldr	r3, [r4]
 227              	.LVL28:
 413:Ourwares/MailboxTask.c **** 
 414:Ourwares/MailboxTask.c **** 	} while (pnotetmp != pnotex);
 228              		.loc 1 414 0
 229 003a 9C42     		cmp	r4, r3
 230 003c EDD1     		bne	.L20
 415:Ourwares/MailboxTask.c **** 
 416:Ourwares/MailboxTask.c **** 	return pmbx;
 231              		.loc 1 416 0
 232 003e 2846     		mov	r0, r5
 233 0040 38BD     		pop	{r3, r4, r5, pc}
 234              	.LVL29:
 235              	.L18:
 388:Ourwares/MailboxTask.c **** 
 236              		.loc 1 388 0
 237 0042 0020     		movs	r0, #0
 238              	.LVL30:
 239 0044 38BD     		pop	{r3, r4, r5, pc}
 240              	.LVL31:
 241              	.L19:
 396:Ourwares/MailboxTask.c **** 
 242              		.loc 1 396 0
 243 0046 2846     		mov	r0, r5
 417:Ourwares/MailboxTask.c **** }
 244              		.loc 1 417 0
 245 0048 38BD     		pop	{r3, r4, r5, pc}
 246              	.LVL32:
 247              	.L23:
 248 004a 00BF     		.align	2
 249              	.L22:
 250 004c 00000000 		.word	dbgmbxctr
ARM GAS  /tmp/ccXgWVek.s 			page 13


 251              		.cfi_endproc
 252              	.LFE77:
 254              		.section	.text.StartMailboxTask,"ax",%progbits
 255              		.align	2
 256              		.global	StartMailboxTask
 257              		.thumb
 258              		.thumb_func
 260              	StartMailboxTask:
 261              	.LFB75:
 281:Ourwares/MailboxTask.c **** 	struct MAILBOXCANNUM* pmbxnum;
 262              		.loc 1 281 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 8
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              	.LVL33:
 267 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 268              	.LCFI4:
 269              		.cfi_def_cfa_offset 20
 270              		.cfi_offset 4, -20
 271              		.cfi_offset 5, -16
 272              		.cfi_offset 6, -12
 273              		.cfi_offset 7, -8
 274              		.cfi_offset 14, -4
 275 0002 83B0     		sub	sp, sp, #12
 276              	.LCFI5:
 277              		.cfi_def_cfa_offset 32
 278              	.LVL34:
 291:Ourwares/MailboxTask.c **** 	{
 279              		.loc 1 291 0
 280 0004 0024     		movs	r4, #0
 281 0006 15E0     		b	.L25
 282              	.LVL35:
 283              	.L27:
 293:Ourwares/MailboxTask.c **** 		{ // Here, array of pointers was initialized
 284              		.loc 1 293 0
 285 0008 04EB8402 		add	r2, r4, r4, lsl #2
 286 000c 9300     		lsls	r3, r2, #2
 287 000e 204A     		ldr	r2, .L35
 288 0010 1344     		add	r3, r3, r2
 289 0012 5B68     		ldr	r3, [r3, #4]
 290 0014 6BB1     		cbz	r3, .L26
 295:Ourwares/MailboxTask.c **** 			if (ptake[i] == NULL) morse_trap(22);
 291              		.loc 1 295 0
 292 0016 04EB8402 		add	r2, r4, r4, lsl #2
 293 001a 9300     		lsls	r3, r2, #2
 294 001c 0122     		movs	r2, #1
 295 001e A240     		lsls	r2, r2, r4
 296 0020 0021     		movs	r1, #0
 297 0022 1B48     		ldr	r0, .L35
 298 0024 C058     		ldr	r0, [r0, r3]
 299 0026 FFF7FEFF 		bl	can_iface_mbx_init
 300              	.LVL36:
 296:Ourwares/MailboxTask.c **** 		}
 301              		.loc 1 296 0
 302 002a 10B9     		cbnz	r0, .L26
 296:Ourwares/MailboxTask.c **** 		}
 303              		.loc 1 296 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccXgWVek.s 			page 14


 304 002c 1620     		movs	r0, #22
 305 002e FFF7FEFF 		bl	morse_trap
 306              	.LVL37:
 307              	.L26:
 291:Ourwares/MailboxTask.c **** 	{
 308              		.loc 1 291 0 is_stmt 1 discriminator 2
 309 0032 0134     		adds	r4, r4, #1
 310              	.LVL38:
 311              	.L25:
 291:Ourwares/MailboxTask.c **** 	{
 312              		.loc 1 291 0 is_stmt 0 discriminator 1
 313 0034 002C     		cmp	r4, #0
 314 0036 E7DD     		ble	.L27
 301:Ourwares/MailboxTask.c **** 
 315              		.loc 1 301 0 is_stmt 1
 316 0038 0027     		movs	r7, #0
 317 003a 0197     		str	r7, [sp, #4]
 318              	.LVL39:
 319              	.L33:
 311:Ourwares/MailboxTask.c **** 		noteused = 0;	// Accumulate bits in 'noteval' processed.
 320              		.loc 1 311 0
 321 003c 4FF0FF33 		mov	r3, #-1
 322 0040 01AA     		add	r2, sp, #4
 323 0042 0021     		movs	r1, #0
 324 0044 3846     		mov	r0, r7
 325 0046 FFF7FEFF 		bl	xTaskNotifyWait
 326              	.LVL40:
 312:Ourwares/MailboxTask.c **** 
 327              		.loc 1 312 0
 328 004a 0027     		movs	r7, #0
 315:Ourwares/MailboxTask.c **** 		{
 329              		.loc 1 315 0
 330 004c 3D46     		mov	r5, r7
 331 004e 1BE0     		b	.L28
 332              	.LVL41:
 333              	.L32:
 318:Ourwares/MailboxTask.c **** 			{	
 334              		.loc 1 318 0
 335 0050 0123     		movs	r3, #1
 336 0052 AB40     		lsls	r3, r3, r5
 337 0054 019A     		ldr	r2, [sp, #4]
 338 0056 1342     		tst	r3, r2
 339 0058 15D0     		beq	.L29
 320:Ourwares/MailboxTask.c **** 				pmbxnum = &mbxcannum[i]; // Pt to CAN module mailbox control block
 340              		.loc 1 320 0
 341 005a 1F43     		orrs	r7, r7, r3
 342              	.LVL42:
 321:Ourwares/MailboxTask.c **** if (pmbxnum == NULL) morse_trap(77); // Debug trap
 343              		.loc 1 321 0
 344 005c 05EB8502 		add	r2, r5, r5, lsl #2
 345 0060 9300     		lsls	r3, r2, #2
 346 0062 0B4E     		ldr	r6, .L35
 347 0064 1E44     		add	r6, r6, r3
 348              	.LVL43:
 349              	.L31:
 326:Ourwares/MailboxTask.c **** 
 350              		.loc 1 326 0
ARM GAS  /tmp/ccXgWVek.s 			page 15


 351 0066 05EB8502 		add	r2, r5, r5, lsl #2
 352 006a 9300     		lsls	r3, r2, #2
 353 006c 084A     		ldr	r2, .L35
 354 006e 1344     		add	r3, r3, r2
 355 0070 9868     		ldr	r0, [r3, #8]
 356 0072 FFF7FEFF 		bl	can_iface_get_CANmsg
 357              	.LVL44:
 328:Ourwares/MailboxTask.c **** 					{ // Here, CAN msg is available
 358              		.loc 1 328 0
 359 0076 0446     		mov	r4, r0
 360 0078 18B1     		cbz	r0, .L30
 331:Ourwares/MailboxTask.c **** 					}
 361              		.loc 1 331 0
 362 007a 0146     		mov	r1, r0
 363 007c 3046     		mov	r0, r6
 364              	.LVL45:
 365 007e FFF7FEFF 		bl	loadmbx
 366              	.LVL46:
 367              	.L30:
 333:Ourwares/MailboxTask.c **** 
 368              		.loc 1 333 0
 369 0082 002C     		cmp	r4, #0
 370 0084 EFD1     		bne	.L31
 371              	.LVL47:
 372              	.L29:
 315:Ourwares/MailboxTask.c **** 		{
 373              		.loc 1 315 0 discriminator 2
 374 0086 0135     		adds	r5, r5, #1
 375              	.LVL48:
 376              	.L28:
 315:Ourwares/MailboxTask.c **** 		{
 377              		.loc 1 315 0 is_stmt 0 discriminator 1
 378 0088 002D     		cmp	r5, #0
 379 008a E1DD     		ble	.L32
 380 008c D6E7     		b	.L33
 381              	.L36:
 382 008e 00BF     		.align	2
 383              	.L35:
 384 0090 00000000 		.word	.LANCHOR0
 385              		.cfi_endproc
 386              	.LFE75:
 388              		.section	.text.MailboxTask_add_CANlist,"ax",%progbits
 389              		.align	2
 390              		.global	MailboxTask_add_CANlist
 391              		.thumb
 392              		.thumb_func
 394              	MailboxTask_add_CANlist:
 395              	.LFB69:
  39:Ourwares/MailboxTask.c **** 	struct MAILBOXCAN** ppmbxarray; // Pointer to array of pointers to mailboxes
 396              		.loc 1 39 0 is_stmt 1
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              	.LVL49:
 401 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 402              	.LCFI6:
 403              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccXgWVek.s 			page 16


 404              		.cfi_offset 4, -24
 405              		.cfi_offset 5, -20
 406              		.cfi_offset 6, -16
 407              		.cfi_offset 7, -12
 408              		.cfi_offset 8, -8
 409              		.cfi_offset 14, -4
 410 0004 0F46     		mov	r7, r1
  42:Ourwares/MailboxTask.c **** 
 411              		.loc 1 42 0
 412 0006 0446     		mov	r4, r0
 413 0008 10B9     		cbnz	r0, .L38
  42:Ourwares/MailboxTask.c **** 
 414              		.loc 1 42 0 is_stmt 0 discriminator 1
 415 000a 1520     		movs	r0, #21
 416              	.LVL50:
 417 000c FFF7FEFF 		bl	morse_trap
 418              	.LVL51:
 419              	.L38:
  44:Ourwares/MailboxTask.c **** 
 420              		.loc 1 44 0 is_stmt 1
 421 0010 17B9     		cbnz	r7, .L39
  44:Ourwares/MailboxTask.c **** 
 422              		.loc 1 44 0 is_stmt 0 discriminator 1
 423 0012 1620     		movs	r0, #22
 424 0014 FFF7FEFF 		bl	morse_trap
 425              	.LVL52:
 426              	.L39:
  46:Ourwares/MailboxTask.c **** 
 427              		.loc 1 46 0 is_stmt 1
 428 0018 FFF7FEFF 		bl	vPortEnterCritical
 429              	.LVL53:
  49:Ourwares/MailboxTask.c **** 
 430              		.loc 1 49 0
 431 001c 94F8B130 		ldrb	r3, [r4, #177]	@ zero_extendqisi2
 432 0020 2049     		ldr	r1, .L43
 433 0022 9800     		lsls	r0, r3, #2
 434 0024 C518     		adds	r5, r0, r3
 435 0026 AA00     		lsls	r2, r5, #2
 436 0028 1546     		mov	r5, r2
 437 002a 0A44     		add	r2, r2, r1
 438 002c 1782     		strh	r7, [r2, #16]	@ movhi
  52:Ourwares/MailboxTask.c **** 
 439              		.loc 1 52 0
 440 002e 4C51     		str	r4, [r1, r5]
  55:Ourwares/MailboxTask.c **** 	if (ppmbxarray == NULL) {taskEXIT_CRITICAL(); morse_trap(23);}
 441              		.loc 1 55 0
 442 0030 0421     		movs	r1, #4
 443 0032 3846     		mov	r0, r7
 444 0034 FFF7FEFF 		bl	calloc
 445              	.LVL54:
  56:Ourwares/MailboxTask.c **** 
 446              		.loc 1 56 0
 447 0038 8046     		mov	r8, r0
 448 003a 20B9     		cbnz	r0, .L40
  56:Ourwares/MailboxTask.c **** 
 449              		.loc 1 56 0 is_stmt 0 discriminator 1
 450 003c FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccXgWVek.s 			page 17


 451              	.LVL55:
 452 0040 1720     		movs	r0, #23
 453 0042 FFF7FEFF 		bl	morse_trap
 454              	.LVL56:
 455              	.L40:
  59:Ourwares/MailboxTask.c **** 
 456              		.loc 1 59 0 is_stmt 1
 457 0046 184B     		ldr	r3, .L43+4
 458 0048 1B68     		ldr	r3, [r3]
 459 004a 23B9     		cbnz	r3, .L41
  59:Ourwares/MailboxTask.c **** 
 460              		.loc 1 59 0 is_stmt 0 discriminator 1
 461 004c FFF7FEFF 		bl	vPortExitCritical
 462              	.LVL57:
 463 0050 1820     		movs	r0, #24
 464 0052 FFF7FEFF 		bl	morse_trap
 465              	.LVL58:
 466              	.L41:
  63:Ourwares/MailboxTask.c **** 
 467              		.loc 1 63 0 is_stmt 1
 468 0056 94F8B150 		ldrb	r5, [r4, #177]	@ zero_extendqisi2
 469 005a 0122     		movs	r2, #1
 470 005c AA40     		lsls	r2, r2, r5
 471 005e 124B     		ldr	r3, .L43+4
 472 0060 1968     		ldr	r1, [r3]
 473 0062 2046     		mov	r0, r4
 474 0064 FFF7FEFF 		bl	can_iface_mbx_init
 475              	.LVL59:
 476 0068 0E4E     		ldr	r6, .L43
 477 006a 05EB8505 		add	r5, r5, r5, lsl #2
 478 006e AB00     		lsls	r3, r5, #2
 479 0070 3344     		add	r3, r3, r6
 480 0072 9860     		str	r0, [r3, #8]
  66:Ourwares/MailboxTask.c **** 
 481              		.loc 1 66 0
 482 0074 94F8B130 		ldrb	r3, [r4, #177]	@ zero_extendqisi2
 483 0078 9900     		lsls	r1, r3, #2
 484 007a C818     		adds	r0, r1, r3
 485 007c 8200     		lsls	r2, r0, #2
 486 007e 1046     		mov	r0, r2
 487 0080 3244     		add	r2, r2, r6
 488 0082 C2F80480 		str	r8, [r2, #4]
  69:Ourwares/MailboxTask.c **** 
 489              		.loc 1 69 0
 490 0086 1782     		strh	r7, [r2, #16]	@ movhi
  72:Ourwares/MailboxTask.c **** 
 491              		.loc 1 72 0
 492 0088 0246     		mov	r2, r0
 493 008a 3244     		add	r2, r2, r6
 494 008c 0023     		movs	r3, #0
 495 008e 5382     		strh	r3, [r2, #18]	@ movhi
  75:Ourwares/MailboxTask.c **** 	return &mbxcannum[pctl->canidx];
 496              		.loc 1 75 0
 497 0090 FFF7FEFF 		bl	vPortExitCritical
 498              	.LVL60:
  76:Ourwares/MailboxTask.c **** }
 499              		.loc 1 76 0
ARM GAS  /tmp/ccXgWVek.s 			page 18


 500 0094 94F8B130 		ldrb	r3, [r4, #177]	@ zero_extendqisi2
 501 0098 03EB8303 		add	r3, r3, r3, lsl #2
 502 009c 9800     		lsls	r0, r3, #2
  77:Ourwares/MailboxTask.c **** /* *************************************************************************
 503              		.loc 1 77 0
 504 009e 3044     		add	r0, r0, r6
 505 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 506              	.LVL61:
 507              	.L44:
 508              		.align	2
 509              	.L43:
 510 00a4 00000000 		.word	.LANCHOR0
 511 00a8 00000000 		.word	MailboxTaskHandle
 512              		.cfi_endproc
 513              	.LFE69:
 515              		.section	.text.MailboxTask_disable_notifications,"ax",%progbits
 516              		.align	2
 517              		.global	MailboxTask_disable_notifications
 518              		.thumb
 519              		.thumb_func
 521              	MailboxTask_disable_notifications:
 522              	.LFB71:
 107:Ourwares/MailboxTask.c **** 	return noteskip(pmbx, 1);
 523              		.loc 1 107 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              	.LVL62:
 528 0000 08B5     		push	{r3, lr}
 529              	.LCFI7:
 530              		.cfi_def_cfa_offset 8
 531              		.cfi_offset 3, -8
 532              		.cfi_offset 14, -4
 108:Ourwares/MailboxTask.c **** }
 533              		.loc 1 108 0
 534 0002 0121     		movs	r1, #1
 535 0004 FFF7FEFF 		bl	noteskip
 536              	.LVL63:
 109:Ourwares/MailboxTask.c **** struct CANNOTIFYLIST* MailboxTask_enable_notifications(struct MAILBOXCAN* pmbx)
 537              		.loc 1 109 0
 538 0008 08BD     		pop	{r3, pc}
 539              		.cfi_endproc
 540              	.LFE71:
 542 000a 00BF     		.section	.text.MailboxTask_enable_notifications,"ax",%progbits
 543              		.align	2
 544              		.global	MailboxTask_enable_notifications
 545              		.thumb
 546              		.thumb_func
 548              	MailboxTask_enable_notifications:
 549              	.LFB72:
 111:Ourwares/MailboxTask.c **** 	return noteskip(pmbx, 0);
 550              		.loc 1 111 0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 0
 553              		@ frame_needed = 0, uses_anonymous_args = 0
 554              	.LVL64:
 555 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccXgWVek.s 			page 19


 556              	.LCFI8:
 557              		.cfi_def_cfa_offset 8
 558              		.cfi_offset 3, -8
 559              		.cfi_offset 14, -4
 112:Ourwares/MailboxTask.c **** }
 560              		.loc 1 112 0
 561 0002 0021     		movs	r1, #0
 562 0004 FFF7FEFF 		bl	noteskip
 563              	.LVL65:
 113:Ourwares/MailboxTask.c **** 
 564              		.loc 1 113 0
 565 0008 08BD     		pop	{r3, pc}
 566              		.cfi_endproc
 567              	.LFE72:
 569 000a 00BF     		.section	.text.MailboxTask_add,"ax",%progbits
 570              		.align	2
 571              		.global	MailboxTask_add
 572              		.thumb
 573              		.thumb_func
 575              	MailboxTask_add:
 576              	.LFB73:
 137:Ourwares/MailboxTask.c **** 	int j;
 577              		.loc 1 137 0
 578              		.cfi_startproc
 579              		@ args = 8, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              	.LVL66:
 582 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 583              	.LCFI9:
 584              		.cfi_def_cfa_offset 40
 585              		.cfi_offset 3, -40
 586              		.cfi_offset 4, -36
 587              		.cfi_offset 5, -32
 588              		.cfi_offset 6, -28
 589              		.cfi_offset 7, -24
 590              		.cfi_offset 8, -20
 591              		.cfi_offset 9, -16
 592              		.cfi_offset 10, -12
 593              		.cfi_offset 11, -8
 594              		.cfi_offset 14, -4
 595 0004 0546     		mov	r5, r0
 596 0006 9146     		mov	r9, r2
 597 0008 9846     		mov	r8, r3
 598 000a 9DF828A0 		ldrb	r10, [sp, #40]	@ zero_extendqisi2
 145:Ourwares/MailboxTask.c **** 	if (pctl  == NULL) morse_trap(26); //return NULL;
 599              		.loc 1 145 0
 600 000e 0E46     		mov	r6, r1
 601 0010 11B9     		cbnz	r1, .L50
 145:Ourwares/MailboxTask.c **** 	if (pctl  == NULL) morse_trap(26); //return NULL;
 602              		.loc 1 145 0 is_stmt 0 discriminator 1
 603 0012 1920     		movs	r0, #25
 604              	.LVL67:
 605 0014 FFF7FEFF 		bl	morse_trap
 606              	.LVL68:
 607              	.L50:
 146:Ourwares/MailboxTask.c **** 	if (pctl->canidx >= STM32MAXCANNUM) morse_trap(27);       //return NULL;
 608              		.loc 1 146 0 is_stmt 1
ARM GAS  /tmp/ccXgWVek.s 			page 20


 609 0018 15B9     		cbnz	r5, .L51
 146:Ourwares/MailboxTask.c **** 	if (pctl->canidx >= STM32MAXCANNUM) morse_trap(27);       //return NULL;
 610              		.loc 1 146 0 is_stmt 0 discriminator 1
 611 001a 1A20     		movs	r0, #26
 612 001c FFF7FEFF 		bl	morse_trap
 613              	.LVL69:
 614              	.L51:
 147:Ourwares/MailboxTask.c **** 	if (mbxcannum[pctl->canidx].pctl == NULL) morse_trap(28); //return NULL;
 615              		.loc 1 147 0 is_stmt 1
 616 0020 95F8B130 		ldrb	r3, [r5, #177]	@ zero_extendqisi2
 617 0024 13B1     		cbz	r3, .L52
 147:Ourwares/MailboxTask.c **** 	if (mbxcannum[pctl->canidx].pctl == NULL) morse_trap(28); //return NULL;
 618              		.loc 1 147 0 is_stmt 0 discriminator 1
 619 0026 1B20     		movs	r0, #27
 620 0028 FFF7FEFF 		bl	morse_trap
 621              	.LVL70:
 622              	.L52:
 148:Ourwares/MailboxTask.c **** 
 623              		.loc 1 148 0 is_stmt 1
 624 002c 95F8B130 		ldrb	r3, [r5, #177]	@ zero_extendqisi2
 625 0030 03EB8303 		add	r3, r3, r3, lsl #2
 626 0034 9A00     		lsls	r2, r3, #2
 627 0036 5C4B     		ldr	r3, .L69
 628 0038 9B58     		ldr	r3, [r3, r2]
 629 003a 13B9     		cbnz	r3, .L53
 148:Ourwares/MailboxTask.c **** 
 630              		.loc 1 148 0 is_stmt 0 discriminator 1
 631 003c 1C20     		movs	r0, #28
 632 003e FFF7FEFF 		bl	morse_trap
 633              	.LVL71:
 634              	.L53:
 150:Ourwares/MailboxTask.c **** 		tskhandle = xTaskGetCurrentTaskHandle();
 635              		.loc 1 150 0 is_stmt 1
 636 0042 B9F1000F 		cmp	r9, #0
 637 0046 02D1     		bne	.L54
 151:Ourwares/MailboxTask.c **** 
 638              		.loc 1 151 0
 639 0048 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 640              	.LVL72:
 641 004c 8146     		mov	r9, r0
 642              	.LVL73:
 643              	.L54:
 154:Ourwares/MailboxTask.c **** 
 644              		.loc 1 154 0
 645 004e 95F8B130 		ldrb	r3, [r5, #177]	@ zero_extendqisi2
 646 0052 03EB8303 		add	r3, r3, r3, lsl #2
 647 0056 9A00     		lsls	r2, r3, #2
 648 0058 534B     		ldr	r3, .L69
 649 005a 1A44     		add	r2, r2, r3
 650 005c 5768     		ldr	r7, [r2, #4]
 651              	.LVL74:
 156:Ourwares/MailboxTask.c **** 
 652              		.loc 1 156 0
 653 005e FFF7FEFF 		bl	vPortEnterCritical
 654              	.LVL75:
 160:Ourwares/MailboxTask.c **** 	{
 655              		.loc 1 160 0
ARM GAS  /tmp/ccXgWVek.s 			page 21


 656 0062 0024     		movs	r4, #0
 657 0064 41E0     		b	.L55
 658              	.LVL76:
 659              	.L62:
 162:Ourwares/MailboxTask.c **** 		if (pmbx == NULL) morse_trap(23); // jic|debug
 660              		.loc 1 162 0
 661 0066 57F824B0 		ldr	fp, [r7, r4, lsl #2]
 662              	.LVL77:
 163:Ourwares/MailboxTask.c **** 		if (pmbx->ncan.can.id == canid)
 663              		.loc 1 163 0
 664 006a BBF1000F 		cmp	fp, #0
 665 006e 02D1     		bne	.L56
 163:Ourwares/MailboxTask.c **** 		if (pmbx->ncan.can.id == canid)
 666              		.loc 1 163 0 is_stmt 0 discriminator 1
 667 0070 1720     		movs	r0, #23
 668 0072 FFF7FEFF 		bl	morse_trap
 669              	.LVL78:
 670              	.L56:
 164:Ourwares/MailboxTask.c **** 		{ // Here, CAN id already has a mailbox, so a notification must be wanted by this task
 671              		.loc 1 164 0 is_stmt 1
 672 0076 DBF80030 		ldr	r3, [fp]
 673 007a 9E42     		cmp	r6, r3
 674 007c 34D1     		bne	.L57
 166:Ourwares/MailboxTask.c **** 			{ // Here add a notification to the existing mailbox
 675              		.loc 1 166 0
 676 007e B8F1000F 		cmp	r8, #0
 677 0082 2CD0     		beq	.L58
 170:Ourwares/MailboxTask.c **** 				if (pnotex == NULL){taskEXIT_CRITICAL(); morse_trap(29);}//return NULL;}
 678              		.loc 1 170 0
 679 0084 1021     		movs	r1, #16
 680 0086 0120     		movs	r0, #1
 681 0088 FFF7FEFF 		bl	calloc
 682              	.LVL79:
 171:Ourwares/MailboxTask.c **** 
 683              		.loc 1 171 0
 684 008c 0446     		mov	r4, r0
 685              	.LVL80:
 686 008e 20B9     		cbnz	r0, .L59
 171:Ourwares/MailboxTask.c **** 
 687              		.loc 1 171 0 is_stmt 0 discriminator 1
 688 0090 FFF7FEFF 		bl	vPortExitCritical
 689              	.LVL81:
 690 0094 1D20     		movs	r0, #29
 691 0096 FFF7FEFF 		bl	morse_trap
 692              	.LVL82:
 693              	.L59:
 174:Ourwares/MailboxTask.c **** 				{ // This is the first notification for this mailbox.
 694              		.loc 1 174 0 is_stmt 1
 695 009a DBF83030 		ldr	r3, [fp, #48]
 696 009e 73B9     		cbnz	r3, .L60
 176:Ourwares/MailboxTask.c **** 					pnotex->pnext     = pnotex;	// Last on list points to self
 697              		.loc 1 176 0
 698 00a0 CBF83040 		str	r4, [fp, #48]
 177:Ourwares/MailboxTask.c **** 					pnotex->tskhandle = tskhandle;
 699              		.loc 1 177 0
 700 00a4 2460     		str	r4, [r4]
 178:Ourwares/MailboxTask.c ****  					pnotex->notebit   = notebit;  // Notification bit to use
ARM GAS  /tmp/ccXgWVek.s 			page 22


 701              		.loc 1 178 0
 702 00a6 C4F80490 		str	r9, [r4, #4]
 179:Ourwares/MailboxTask.c **** 					pnotex->skip      = noteskip; // Skip notification flag
 703              		.loc 1 179 0
 704 00aa C4F80880 		str	r8, [r4, #8]
 180:Ourwares/MailboxTask.c **** 					/* Here, there is no need to sort array on CANID for a binary lookup
 705              		.loc 1 180 0
 706 00ae 84F80CA0 		strb	r10, [r4, #12]
 183:Ourwares/MailboxTask.c **** 					return pmbx;
 707              		.loc 1 183 0
 708 00b2 FFF7FEFF 		bl	vPortExitCritical
 709              	.LVL83:
 184:Ourwares/MailboxTask.c **** 				}
 710              		.loc 1 184 0
 711 00b6 5846     		mov	r0, fp
 712 00b8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 713              	.LVL84:
 714              	.L67:
 190:Ourwares/MailboxTask.c **** 
 715              		.loc 1 190 0
 716 00bc 1346     		mov	r3, r2
 717              	.LVL85:
 718              	.L60:
 190:Ourwares/MailboxTask.c **** 
 719              		.loc 1 190 0 is_stmt 0 discriminator 1
 720 00be 1A68     		ldr	r2, [r3]
 721 00c0 9342     		cmp	r3, r2
 722 00c2 FBD1     		bne	.L67
 193:Ourwares/MailboxTask.c **** 					pnotex->pnext     = pnotex; // New block points to self
 723              		.loc 1 193 0 is_stmt 1
 724 00c4 1C60     		str	r4, [r3]
 194:Ourwares/MailboxTask.c **** 					pnotex->tskhandle = tskhandle;
 725              		.loc 1 194 0
 726 00c6 2460     		str	r4, [r4]
 195:Ourwares/MailboxTask.c ****  					pnotex->notebit   = notebit;  // Notification bit to use
 727              		.loc 1 195 0
 728 00c8 C4F80490 		str	r9, [r4, #4]
 196:Ourwares/MailboxTask.c **** 					pnotex->skip      = noteskip; // Skip notification flag
 729              		.loc 1 196 0
 730 00cc C4F80880 		str	r8, [r4, #8]
 197:Ourwares/MailboxTask.c **** 					/* Here, there is no need to sort array on CANID for a binary lookup
 731              		.loc 1 197 0
 732 00d0 84F80CA0 		strb	r10, [r4, #12]
 200:Ourwares/MailboxTask.c **** 					return pmbx;
 733              		.loc 1 200 0
 734 00d4 FFF7FEFF 		bl	vPortExitCritical
 735              	.LVL86:
 201:Ourwares/MailboxTask.c **** 				}
 736              		.loc 1 201 0
 737 00d8 5846     		mov	r0, fp
 738 00da BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 739              	.LVL87:
 740              	.L58:
 206:Ourwares/MailboxTask.c **** 		}
 741              		.loc 1 206 0
 742 00de FFF7FEFF 		bl	vPortExitCritical
 743              	.LVL88:
ARM GAS  /tmp/ccXgWVek.s 			page 23


 744 00e2 2220     		movs	r0, #34
 745 00e4 FFF7FEFF 		bl	morse_trap
 746              	.LVL89:
 747              	.L57:
 160:Ourwares/MailboxTask.c **** 	{
 748              		.loc 1 160 0 discriminator 2
 749 00e8 0134     		adds	r4, r4, #1
 750              	.LVL90:
 751              	.L55:
 160:Ourwares/MailboxTask.c **** 	{
 752              		.loc 1 160 0 is_stmt 0 discriminator 1
 753 00ea 95F8B130 		ldrb	r3, [r5, #177]	@ zero_extendqisi2
 754 00ee 03EB8303 		add	r3, r3, r3, lsl #2
 755 00f2 9A00     		lsls	r2, r3, #2
 756 00f4 2C4B     		ldr	r3, .L69
 757 00f6 1A44     		add	r2, r2, r3
 758 00f8 538A     		ldrh	r3, [r2, #18]
 759 00fa 9C42     		cmp	r4, r3
 760 00fc B3DB     		blt	.L62
 761              	.LVL91:
 222:Ourwares/MailboxTask.c **** 	if (pmbx == NULL){taskEXIT_CRITICAL();morse_trap(33);}//return NULL;}
 762              		.loc 1 222 0 is_stmt 1
 763 00fe 4021     		movs	r1, #64
 764 0100 0120     		movs	r0, #1
 765 0102 FFF7FEFF 		bl	calloc
 766              	.LVL92:
 223:Ourwares/MailboxTask.c **** 
 767              		.loc 1 223 0
 768 0106 0446     		mov	r4, r0
 769              	.LVL93:
 770 0108 20B9     		cbnz	r0, .L63
 223:Ourwares/MailboxTask.c **** 
 771              		.loc 1 223 0 is_stmt 0 discriminator 1
 772 010a FFF7FEFF 		bl	vPortExitCritical
 773              	.LVL94:
 774 010e 2120     		movs	r0, #33
 775 0110 FFF7FEFF 		bl	morse_trap
 776              	.LVL95:
 777              	.L63:
 225:Ourwares/MailboxTask.c **** 	pmbx->pnote        = NULL;    // Redundant (calloc set it zero)
 778              		.loc 1 225 0 is_stmt 1
 779 0114 0023     		movs	r3, #0
 780 0116 6363     		str	r3, [r4, #52]
 226:Ourwares/MailboxTask.c **** 	pmbx->paytype      = paytype; // Payload layout code
 781              		.loc 1 226 0
 782 0118 2363     		str	r3, [r4, #48]
 227:Ourwares/MailboxTask.c **** 	pmbx->ncan.can.id  = canid;   // Save CAN id
 783              		.loc 1 227 0
 784 011a 9DF82C30 		ldrb	r3, [sp, #44]	@ zero_extendqisi2
 785 011e 84F83830 		strb	r3, [r4, #56]
 228:Ourwares/MailboxTask.c **** 	pmbx->ncan.toa     = DTWTIME; // Set current time for initial time-of-arrival
 786              		.loc 1 228 0
 787 0122 2660     		str	r6, [r4]
 229:Ourwares/MailboxTask.c **** 
 788              		.loc 1 229 0
 789 0124 214B     		ldr	r3, .L69+4
 790 0126 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccXgWVek.s 			page 24


 791 0128 6361     		str	r3, [r4, #20]
 231:Ourwares/MailboxTask.c **** 	{ // Here, a notification is requested.  Add first instance of notification  
 792              		.loc 1 231 0
 793 012a B8F1000F 		cmp	r8, #0
 794 012e 12D0     		beq	.L64
 233:Ourwares/MailboxTask.c **** 		if (pnotex == NULL){ taskEXIT_CRITICAL();morse_trap(31);}//return NULL;}
 795              		.loc 1 233 0
 796 0130 1021     		movs	r1, #16
 797 0132 0120     		movs	r0, #1
 798 0134 FFF7FEFF 		bl	calloc
 799              	.LVL96:
 234:Ourwares/MailboxTask.c **** 
 800              		.loc 1 234 0
 801 0138 0646     		mov	r6, r0
 802              	.LVL97:
 803 013a 20B9     		cbnz	r0, .L65
 234:Ourwares/MailboxTask.c **** 
 804              		.loc 1 234 0 is_stmt 0 discriminator 1
 805 013c FFF7FEFF 		bl	vPortExitCritical
 806              	.LVL98:
 807 0140 1F20     		movs	r0, #31
 808 0142 FFF7FEFF 		bl	morse_trap
 809              	.LVL99:
 810              	.L65:
 236:Ourwares/MailboxTask.c **** 		pnotex->pnext     = pnotex;	 // Last on list points to self
 811              		.loc 1 236 0 is_stmt 1
 812 0146 2663     		str	r6, [r4, #48]
 237:Ourwares/MailboxTask.c **** 		pnotex->tskhandle = tskhandle; // Task to notify
 813              		.loc 1 237 0
 814 0148 3660     		str	r6, [r6]
 238:Ourwares/MailboxTask.c **** 		pnotex->notebit   = notebit;   // Notification bit to use
 815              		.loc 1 238 0
 816 014a C6F80490 		str	r9, [r6, #4]
 239:Ourwares/MailboxTask.c **** 		pnotex->skip      = noteskip;  // Skip notification flag
 817              		.loc 1 239 0
 818 014e C6F80880 		str	r8, [r6, #8]
 240:Ourwares/MailboxTask.c **** 	} 
 819              		.loc 1 240 0
 820 0152 86F80CA0 		strb	r10, [r6, #12]
 821              	.LVL100:
 822              	.L64:
 244:Ourwares/MailboxTask.c **** 
 823              		.loc 1 244 0
 824 0156 95F8B130 		ldrb	r3, [r5, #177]	@ zero_extendqisi2
 825 015a 1348     		ldr	r0, .L69
 826 015c 9900     		lsls	r1, r3, #2
 827 015e CE18     		adds	r6, r1, r3
 828 0160 B200     		lsls	r2, r6, #2
 829 0162 0244     		add	r2, r2, r0
 830 0164 5668     		ldr	r6, [r2, #4]
 831 0166 0B44     		add	r3, r3, r1
 832 0168 9A00     		lsls	r2, r3, #2
 833 016a 0244     		add	r2, r2, r0
 834 016c 538A     		ldrh	r3, [r2, #18]
 835 016e 46F82340 		str	r4, [r6, r3, lsl #2]
 247:Ourwares/MailboxTask.c **** 	if (mbxcannum[pctl->canidx].arraysizecur 
 836              		.loc 1 247 0
ARM GAS  /tmp/ccXgWVek.s 			page 25


 837 0172 95F8B120 		ldrb	r2, [r5, #177]	@ zero_extendqisi2
 838 0176 9500     		lsls	r5, r2, #2
 839              	.LVL101:
 840 0178 AB18     		adds	r3, r5, r2
 841 017a 9900     		lsls	r1, r3, #2
 842 017c 0144     		add	r1, r1, r0
 843 017e 4B8A     		ldrh	r3, [r1, #18]
 844 0180 0133     		adds	r3, r3, #1
 845 0182 9BB2     		uxth	r3, r3
 846 0184 4B82     		strh	r3, [r1, #18]	@ movhi
 250:Ourwares/MailboxTask.c **** 	{ // Here, the next addition will exceed size calloc'ed earlier!
 847              		.loc 1 250 0
 848 0186 2A44     		add	r2, r2, r5
 849 0188 9100     		lsls	r1, r2, #2
 850 018a 0144     		add	r1, r1, r0
 851 018c 0A8A     		ldrh	r2, [r1, #16]
 248:Ourwares/MailboxTask.c ****                              >=
 852              		.loc 1 248 0
 853 018e 9342     		cmp	r3, r2
 854 0190 04D3     		bcc	.L66
 252:Ourwares/MailboxTask.c **** 	}
 855              		.loc 1 252 0
 856 0192 FFF7FEFF 		bl	vPortExitCritical
 857              	.LVL102:
 858 0196 1F20     		movs	r0, #31
 859 0198 FFF7FEFF 		bl	morse_trap
 860              	.LVL103:
 861              	.L66:
 256:Ourwares/MailboxTask.c **** 	return pmbx;
 862              		.loc 1 256 0
 863 019c FFF7FEFF 		bl	vPortExitCritical
 864              	.LVL104:
 257:Ourwares/MailboxTask.c **** }
 865              		.loc 1 257 0
 866 01a0 2046     		mov	r0, r4
 258:Ourwares/MailboxTask.c **** 
 867              		.loc 1 258 0
 868 01a2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 869              	.LVL105:
 870              	.L70:
 871 01a6 00BF     		.align	2
 872              	.L69:
 873 01a8 00000000 		.word	.LANCHOR0
 874 01ac 041000E0 		.word	-536866812
 875              		.cfi_endproc
 876              	.LFE73:
 878              		.section	.text.xMailboxTaskCreate,"ax",%progbits
 879              		.align	2
 880              		.global	xMailboxTaskCreate
 881              		.thumb
 882              		.thumb_func
 884              	xMailboxTaskCreate:
 885              	.LFB74:
 267:Ourwares/MailboxTask.c ****  /* definition and creation of CanTask */
 886              		.loc 1 267 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/ccXgWVek.s 			page 26


 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              	.LVL106:
 891 0000 70B5     		push	{r4, r5, r6, lr}
 892              	.LCFI10:
 893              		.cfi_def_cfa_offset 16
 894              		.cfi_offset 4, -16
 895              		.cfi_offset 5, -12
 896              		.cfi_offset 6, -8
 897              		.cfi_offset 14, -4
 898 0002 88B0     		sub	sp, sp, #32
 899              	.LCFI11:
 900              		.cfi_def_cfa_offset 48
 901 0004 0646     		mov	r6, r0
 269:Ourwares/MailboxTask.c **** 
 902              		.loc 1 269 0
 903 0006 01AC     		add	r4, sp, #4
 904 0008 094D     		ldr	r5, .L73
 905 000a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 906              	.LVL107:
 907 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 908 000e 95E80700 		ldmia	r5, {r0, r1, r2}
 909 0012 84E80700 		stmia	r4, {r0, r1, r2}
 271:Ourwares/MailboxTask.c **** 
 910              		.loc 1 271 0
 911 0016 0021     		movs	r1, #0
 912 0018 01A8     		add	r0, sp, #4
 913 001a FFF7FEFF 		bl	osThreadCreate
 914              	.LVL108:
 915 001e 054C     		ldr	r4, .L73+4
 916 0020 2060     		str	r0, [r4]
 273:Ourwares/MailboxTask.c **** 	return MailboxTaskHandle;
 917              		.loc 1 273 0
 918 0022 3146     		mov	r1, r6
 919 0024 FFF7FEFF 		bl	vTaskPrioritySet
 920              	.LVL109:
 275:Ourwares/MailboxTask.c **** /* *************************************************************************
 921              		.loc 1 275 0
 922 0028 2068     		ldr	r0, [r4]
 923 002a 08B0     		add	sp, sp, #32
 924              	.LCFI12:
 925              		.cfi_def_cfa_offset 16
 926              		@ sp needed
 927 002c 70BD     		pop	{r4, r5, r6, pc}
 928              	.LVL110:
 929              	.L74:
 930 002e 00BF     		.align	2
 931              	.L73:
 932 0030 00000000 		.word	.LANCHOR1
 933 0034 00000000 		.word	MailboxTaskHandle
 934              		.cfi_endproc
 935              	.LFE74:
 937              		.comm	dbgmbxctr,4,4
 938              		.comm	MailboxTaskHandle,4,4
 939              		.global	mbxcannum
 940              		.section	.rodata
 941              		.align	2
 942              		.set	.LANCHOR1,. + 0
ARM GAS  /tmp/ccXgWVek.s 			page 27


 943              	.LC2:
 944 0000 00000000 		.word	.LC0
 945 0004 00000000 		.word	StartMailboxTask
 946 0008 0000     		.short	0
 947 000a 0000     		.space	2
 948 000c 00000000 		.word	0
 949 0010 60000000 		.word	96
 950 0014 00000000 		.word	0
 951 0018 00000000 		.word	0
 952              		.section	.rodata.str1.4,"aMS",%progbits,1
 953              		.align	2
 954              	.LC0:
 955 0000 4D61696C 		.ascii	"MailboxTask\000"
 955      626F7854 
 955      61736B00 
 956              		.section	.bss.mbxcannum,"aw",%nobits
 957              		.align	2
 958              		.set	.LANCHOR0,. + 0
 961              	mbxcannum:
 962 0000 00000000 		.space	20
 962      00000000 
 962      00000000 
 962      00000000 
 962      00000000 
 963              		.text
 964              	.Letext0:
 965              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 966              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 967              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 968              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 969              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 970              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 971              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 972              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 973              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 974              		.file 11 "Ourwares/common_misc.h"
 975              		.file 12 "Ourwares/common_can.h"
 976              		.file 13 "Ourwares/can_iface.h"
 977              		.file 14 "Ourwares/MailboxTask.h"
 978              		.file 15 "Drivers/CMSIS/Include/core_cm3.h"
 979              		.file 16 "Ourwares/payload_extract.h"
 980              		.file 17 "Ourwares/morse.h"
 981              		.file 18 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/malloc.h"
ARM GAS  /tmp/ccXgWVek.s 			page 28


DEFINED SYMBOLS
                            *ABS*:00000000 MailboxTask.c
     /tmp/ccXgWVek.s:20     .text.lookup:00000000 $t
     /tmp/ccXgWVek.s:24     .text.lookup:00000000 lookup
     /tmp/ccXgWVek.s:94     .text.noteskip:00000000 $t
     /tmp/ccXgWVek.s:98     .text.noteskip:00000000 noteskip
     /tmp/ccXgWVek.s:162    .text.loadmbx:00000000 $t
     /tmp/ccXgWVek.s:166    .text.loadmbx:00000000 loadmbx
     /tmp/ccXgWVek.s:250    .text.loadmbx:0000004c $d
                            *COM*:00000004 dbgmbxctr
     /tmp/ccXgWVek.s:255    .text.StartMailboxTask:00000000 $t
     /tmp/ccXgWVek.s:260    .text.StartMailboxTask:00000000 StartMailboxTask
     /tmp/ccXgWVek.s:384    .text.StartMailboxTask:00000090 $d
     /tmp/ccXgWVek.s:389    .text.MailboxTask_add_CANlist:00000000 $t
     /tmp/ccXgWVek.s:394    .text.MailboxTask_add_CANlist:00000000 MailboxTask_add_CANlist
     /tmp/ccXgWVek.s:510    .text.MailboxTask_add_CANlist:000000a4 $d
                            *COM*:00000004 MailboxTaskHandle
     /tmp/ccXgWVek.s:516    .text.MailboxTask_disable_notifications:00000000 $t
     /tmp/ccXgWVek.s:521    .text.MailboxTask_disable_notifications:00000000 MailboxTask_disable_notifications
     /tmp/ccXgWVek.s:543    .text.MailboxTask_enable_notifications:00000000 $t
     /tmp/ccXgWVek.s:548    .text.MailboxTask_enable_notifications:00000000 MailboxTask_enable_notifications
     /tmp/ccXgWVek.s:570    .text.MailboxTask_add:00000000 $t
     /tmp/ccXgWVek.s:575    .text.MailboxTask_add:00000000 MailboxTask_add
     /tmp/ccXgWVek.s:873    .text.MailboxTask_add:000001a8 $d
     /tmp/ccXgWVek.s:879    .text.xMailboxTaskCreate:00000000 $t
     /tmp/ccXgWVek.s:884    .text.xMailboxTaskCreate:00000000 xMailboxTaskCreate
     /tmp/ccXgWVek.s:932    .text.xMailboxTaskCreate:00000030 $d
     /tmp/ccXgWVek.s:961    .bss.mbxcannum:00000000 mbxcannum
     /tmp/ccXgWVek.s:941    .rodata:00000000 $d
     /tmp/ccXgWVek.s:953    .rodata.str1.4:00000000 $d
     /tmp/ccXgWVek.s:957    .bss.mbxcannum:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xTaskGetCurrentTaskHandle
payload_extract
xTaskGenericNotify
can_iface_mbx_init
morse_trap
xTaskNotifyWait
can_iface_get_CANmsg
vPortEnterCritical
calloc
vPortExitCritical
osThreadCreate
vTaskPrioritySet
