ARM GAS  /tmp/ccfM3gki.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_hal_can.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  20              		.align	2
  21              		.weak	HAL_CAN_MspInit
  22              		.thumb
  23              		.thumb_func
  25              	HAL_CAN_MspInit:
  26              	.LFB66:
  27              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @file    stm32f1xx_hal_can.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @verbatim
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccfM3gki.s 			page 2


  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           functions:
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           messages.
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           can be used:
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==============================
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ================================
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccfM3gki.s 			page 3


  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           here.
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==================
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           be completed.
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           will be entered.
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @endverbatim
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @attention
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * Redistribution and use in source and binary forms, with or without modification,
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * are permitted provided that the following conditions are met:
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      this list of conditions and the following disclaimer.
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      this list of conditions and the following disclaimer in the documentation
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      and/or other materials provided with the distribution.
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      may be used to endorse or promote products derived from this software
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      without specific prior written permission.
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
ARM GAS  /tmp/ccfM3gki.s 			page 4


 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #include "stm32f1xx_hal.h"
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @addtogroup STM32F1xx_HAL_Driver
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if defined(CAN1)
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN CAN
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief CAN driver modules
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
ARM GAS  /tmp/ccfM3gki.s 			page 5


 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Exit from sleep mode */
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
ARM GAS  /tmp/ccfM3gki.s 			page 6


 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Request initialisation */
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Wait initialisation acknowledge */
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the time triggered communication mode */
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic bus-off management */
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic wake-up mode */
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/ccfM3gki.s 			page 7


 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic retransmission */
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the transmit FIFO priority */
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the bit timing register */
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the error code */
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the CAN state */
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         reset values.
ARM GAS  /tmp/ccfM3gki.s 			page 8


 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Stop the CAN module */
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN peripheral */
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Change CAN state */
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
  28              		.loc 1 415 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE66:
  38 0002 00BF     		.section	.text.HAL_CAN_Init,"ax",%progbits
  39              		.align	2
  40              		.global	HAL_CAN_Init
  41              		.thumb
  42              		.thumb_func
  44              	HAL_CAN_Init:
ARM GAS  /tmp/ccfM3gki.s 			page 9


  45              	.LFB64:
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  46              		.loc 1 223 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              	.LVL1:
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  51              		.loc 1 227 0
  52 0000 0028     		cmp	r0, #0
  53 0002 00F0A480 		beq	.L21
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  54              		.loc 1 223 0
  55 0006 38B5     		push	{r3, r4, r5, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 16
  58              		.cfi_offset 3, -16
  59              		.cfi_offset 4, -12
  60              		.cfi_offset 5, -8
  61              		.cfi_offset 14, -4
  62 0008 0446     		mov	r4, r0
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  63              		.loc 1 246 0
  64 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  65 000e 13F0FF0F 		tst	r3, #255
  66 0012 01D1     		bne	.L4
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
  67              		.loc 1 249 0
  68 0014 FFF7FEFF 		bl	HAL_CAN_MspInit
  69              	.LVL2:
  70              	.L4:
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  71              		.loc 1 253 0
  72 0018 2268     		ldr	r2, [r4]
  73 001a 1368     		ldr	r3, [r2]
  74 001c 23F00203 		bic	r3, r3, #2
  75 0020 1360     		str	r3, [r2]
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  76              		.loc 1 256 0
  77 0022 FFF7FEFF 		bl	HAL_GetTick
  78              	.LVL3:
  79 0026 0546     		mov	r5, r0
  80              	.LVL4:
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  81              		.loc 1 259 0
  82 0028 0DE0     		b	.L5
  83              	.LVL5:
  84              	.L6:
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
  85              		.loc 1 261 0
  86 002a FFF7FEFF 		bl	HAL_GetTick
  87              	.LVL6:
  88 002e 401B     		subs	r0, r0, r5
  89 0030 0A28     		cmp	r0, #10
  90 0032 08D9     		bls	.L5
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  91              		.loc 1 264 0
ARM GAS  /tmp/ccfM3gki.s 			page 10


  92 0034 636A     		ldr	r3, [r4, #36]
  93 0036 43F40033 		orr	r3, r3, #131072
  94 003a 6362     		str	r3, [r4, #36]
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  95              		.loc 1 267 0
  96 003c 0523     		movs	r3, #5
  97 003e 84F82030 		strb	r3, [r4, #32]
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
  98              		.loc 1 269 0
  99 0042 0120     		movs	r0, #1
 100 0044 38BD     		pop	{r3, r4, r5, pc}
 101              	.LVL7:
 102              	.L5:
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 103              		.loc 1 259 0
 104 0046 2368     		ldr	r3, [r4]
 105 0048 5A68     		ldr	r2, [r3, #4]
 106 004a 12F0020F 		tst	r2, #2
 107 004e ECD1     		bne	.L6
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 108              		.loc 1 274 0
 109 0050 1A68     		ldr	r2, [r3]
 110 0052 42F00102 		orr	r2, r2, #1
 111 0056 1A60     		str	r2, [r3]
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 112              		.loc 1 277 0
 113 0058 FFF7FEFF 		bl	HAL_GetTick
 114              	.LVL8:
 115 005c 0546     		mov	r5, r0
 116              	.LVL9:
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 117              		.loc 1 280 0
 118 005e 0DE0     		b	.L7
 119              	.LVL10:
 120              	.L8:
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 121              		.loc 1 282 0
 122 0060 FFF7FEFF 		bl	HAL_GetTick
 123              	.LVL11:
 124 0064 401B     		subs	r0, r0, r5
 125 0066 0A28     		cmp	r0, #10
 126 0068 08D9     		bls	.L7
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 127              		.loc 1 285 0
 128 006a 636A     		ldr	r3, [r4, #36]
 129 006c 43F40033 		orr	r3, r3, #131072
 130 0070 6362     		str	r3, [r4, #36]
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 131              		.loc 1 288 0
 132 0072 0523     		movs	r3, #5
 133 0074 84F82030 		strb	r3, [r4, #32]
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 134              		.loc 1 290 0
 135 0078 0120     		movs	r0, #1
 136 007a 38BD     		pop	{r3, r4, r5, pc}
 137              	.LVL12:
 138              	.L7:
ARM GAS  /tmp/ccfM3gki.s 			page 11


 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 139              		.loc 1 280 0
 140 007c 2368     		ldr	r3, [r4]
 141 007e 5A68     		ldr	r2, [r3, #4]
 142 0080 12F0010F 		tst	r2, #1
 143 0084 ECD0     		beq	.L8
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 144              		.loc 1 295 0
 145 0086 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 146 0088 012A     		cmp	r2, #1
 147 008a 04D1     		bne	.L9
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 148              		.loc 1 297 0
 149 008c 1A68     		ldr	r2, [r3]
 150 008e 42F08002 		orr	r2, r2, #128
 151 0092 1A60     		str	r2, [r3]
 152 0094 03E0     		b	.L10
 153              	.L9:
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 154              		.loc 1 301 0
 155 0096 1A68     		ldr	r2, [r3]
 156 0098 22F08002 		bic	r2, r2, #128
 157 009c 1A60     		str	r2, [r3]
 158              	.L10:
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 159              		.loc 1 305 0
 160 009e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 161 00a0 012B     		cmp	r3, #1
 162 00a2 05D1     		bne	.L11
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 163              		.loc 1 307 0
 164 00a4 2268     		ldr	r2, [r4]
 165 00a6 1368     		ldr	r3, [r2]
 166 00a8 43F04003 		orr	r3, r3, #64
 167 00ac 1360     		str	r3, [r2]
 168 00ae 04E0     		b	.L12
 169              	.L11:
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 170              		.loc 1 311 0
 171 00b0 2268     		ldr	r2, [r4]
 172 00b2 1368     		ldr	r3, [r2]
 173 00b4 23F04003 		bic	r3, r3, #64
 174 00b8 1360     		str	r3, [r2]
 175              	.L12:
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 176              		.loc 1 315 0
 177 00ba A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 178 00bc 012B     		cmp	r3, #1
 179 00be 05D1     		bne	.L13
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 180              		.loc 1 317 0
 181 00c0 2268     		ldr	r2, [r4]
 182 00c2 1368     		ldr	r3, [r2]
 183 00c4 43F02003 		orr	r3, r3, #32
 184 00c8 1360     		str	r3, [r2]
 185 00ca 04E0     		b	.L14
 186              	.L13:
ARM GAS  /tmp/ccfM3gki.s 			page 12


 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 187              		.loc 1 321 0
 188 00cc 2268     		ldr	r2, [r4]
 189 00ce 1368     		ldr	r3, [r2]
 190 00d0 23F02003 		bic	r3, r3, #32
 191 00d4 1360     		str	r3, [r2]
 192              	.L14:
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 193              		.loc 1 325 0
 194 00d6 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 195 00d8 012B     		cmp	r3, #1
 196 00da 05D1     		bne	.L15
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 197              		.loc 1 327 0
 198 00dc 2268     		ldr	r2, [r4]
 199 00de 1368     		ldr	r3, [r2]
 200 00e0 23F01003 		bic	r3, r3, #16
 201 00e4 1360     		str	r3, [r2]
 202 00e6 04E0     		b	.L16
 203              	.L15:
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 204              		.loc 1 331 0
 205 00e8 2268     		ldr	r2, [r4]
 206 00ea 1368     		ldr	r3, [r2]
 207 00ec 43F01003 		orr	r3, r3, #16
 208 00f0 1360     		str	r3, [r2]
 209              	.L16:
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 210              		.loc 1 335 0
 211 00f2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 212 00f4 012B     		cmp	r3, #1
 213 00f6 05D1     		bne	.L17
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 214              		.loc 1 337 0
 215 00f8 2268     		ldr	r2, [r4]
 216 00fa 1368     		ldr	r3, [r2]
 217 00fc 43F00803 		orr	r3, r3, #8
 218 0100 1360     		str	r3, [r2]
 219 0102 04E0     		b	.L18
 220              	.L17:
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 221              		.loc 1 341 0
 222 0104 2268     		ldr	r2, [r4]
 223 0106 1368     		ldr	r3, [r2]
 224 0108 23F00803 		bic	r3, r3, #8
 225 010c 1360     		str	r3, [r2]
 226              	.L18:
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 227              		.loc 1 345 0
 228 010e 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 229 0110 012B     		cmp	r3, #1
 230 0112 05D1     		bne	.L19
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 231              		.loc 1 347 0
 232 0114 2268     		ldr	r2, [r4]
 233 0116 1368     		ldr	r3, [r2]
 234 0118 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/ccfM3gki.s 			page 13


 235 011c 1360     		str	r3, [r2]
 236 011e 04E0     		b	.L20
 237              	.L19:
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 238              		.loc 1 351 0
 239 0120 2268     		ldr	r2, [r4]
 240 0122 1368     		ldr	r3, [r2]
 241 0124 23F00403 		bic	r3, r3, #4
 242 0128 1360     		str	r3, [r2]
 243              	.L20:
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 244              		.loc 1 355 0
 245 012a 2168     		ldr	r1, [r4]
 246 012c A268     		ldr	r2, [r4, #8]
 247 012e E368     		ldr	r3, [r4, #12]
 248 0130 1A43     		orrs	r2, r2, r3
 249 0132 2369     		ldr	r3, [r4, #16]
 250 0134 1A43     		orrs	r2, r2, r3
 251 0136 6369     		ldr	r3, [r4, #20]
 252 0138 1A43     		orrs	r2, r2, r3
 253 013a 6368     		ldr	r3, [r4, #4]
 254 013c 013B     		subs	r3, r3, #1
 255 013e 1343     		orrs	r3, r3, r2
 256 0140 CB61     		str	r3, [r1, #28]
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 257              		.loc 1 362 0
 258 0142 0020     		movs	r0, #0
 259 0144 6062     		str	r0, [r4, #36]
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 260              		.loc 1 365 0
 261 0146 0123     		movs	r3, #1
 262 0148 84F82030 		strb	r3, [r4, #32]
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 263              		.loc 1 368 0
 264 014c 38BD     		pop	{r3, r4, r5, pc}
 265              	.LVL13:
 266              	.L21:
 267              	.LCFI1:
 268              		.cfi_def_cfa_offset 0
 269              		.cfi_restore 3
 270              		.cfi_restore 4
 271              		.cfi_restore 5
 272              		.cfi_restore 14
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 273              		.loc 1 229 0
 274 014e 0120     		movs	r0, #1
 275              	.LVL14:
 276 0150 7047     		bx	lr
 277              		.cfi_endproc
 278              	.LFE64:
 280 0152 00BF     		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 281              		.align	2
 282              		.weak	HAL_CAN_MspDeInit
 283              		.thumb
 284              		.thumb_func
 286              	HAL_CAN_MspDeInit:
 287              	.LFB67:
ARM GAS  /tmp/ccfM3gki.s 			page 14


 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 288              		.loc 1 431 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293              	.LVL15:
 294 0000 7047     		bx	lr
 295              		.cfi_endproc
 296              	.LFE67:
 298 0002 00BF     		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 299              		.align	2
 300              		.global	HAL_CAN_ConfigFilter
 301              		.thumb
 302              		.thumb_func
 304              	HAL_CAN_ConfigFilter:
 305              	.LFB68:
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Configuration functions.
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Configuration functions #####
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
ARM GAS  /tmp/ccfM3gki.s 			page 15


 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         contains the filter configuration information.
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 306              		.loc 1 469 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311              	.LVL16:
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 312              		.loc 1 471 0
 313 0000 0268     		ldr	r2, [r0]
 314              	.LVL17:
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 315              		.loc 1 472 0
 316 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 317              	.LVL18:
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 318              		.loc 1 474 0
 319 0006 013B     		subs	r3, r3, #1
 320              	.LVL19:
 321 0008 DBB2     		uxtb	r3, r3
 322 000a 012B     		cmp	r3, #1
 323 000c 6DD8     		bhi	.L26
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 324              		.loc 1 469 0
 325 000e 70B4     		push	{r4, r5, r6}
 326              	.LCFI2:
 327              		.cfi_def_cfa_offset 12
 328              		.cfi_offset 4, -12
 329              		.cfi_offset 5, -8
 330              		.cfi_offset 6, -4
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
ARM GAS  /tmp/ccfM3gki.s 			page 16


 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select master instance to access the filter banks */
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     can_ip = CAN1;
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Initialisation mode for the filter */
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 331              		.loc 1 503 0
 332 0010 D2F80032 		ldr	r3, [r2, #512]
 333 0014 43F00103 		orr	r3, r3, #1
 334 0018 C2F80032 		str	r3, [r2, #512]
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Convert filter number into bit position */
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 335              		.loc 1 512 0
 336 001c 4B69     		ldr	r3, [r1, #20]
 337 001e 03F01F03 		and	r3, r3, #31
 338 0022 0120     		movs	r0, #1
 339              	.LVL20:
 340 0024 00FA03F3 		lsl	r3, r0, r3
 341              	.LVL21:
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Deactivation */
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 342              		.loc 1 515 0
 343 0028 D2F81C02 		ldr	r0, [r2, #540]
 344 002c DC43     		mvns	r4, r3
 345 002e 2040     		ands	r0, r0, r4
 346 0030 C2F81C02 		str	r0, [r2, #540]
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Scale */
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 347              		.loc 1 518 0
 348 0034 C869     		ldr	r0, [r1, #28]
 349 0036 A8B9     		cbnz	r0, .L27
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 16-bit scale for the filter */
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 350              		.loc 1 521 0
 351 0038 D2F80C02 		ldr	r0, [r2, #524]
 352 003c 2040     		ands	r0, r0, r4
 353 003e C2F80C02 		str	r0, [r2, #524]
ARM GAS  /tmp/ccfM3gki.s 			page 17


 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 354              		.loc 1 525 0
 355 0042 4869     		ldr	r0, [r1, #20]
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 356              		.loc 1 526 0
 357 0044 CE68     		ldr	r6, [r1, #12]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 358              		.loc 1 527 0
 359 0046 8D88     		ldrh	r5, [r1, #4]
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 360              		.loc 1 526 0
 361 0048 45EA0645 		orr	r5, r5, r6, lsl #16
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 362              		.loc 1 525 0
 363 004c 4830     		adds	r0, r0, #72
 364 004e 42F83050 		str	r5, [r2, r0, lsl #3]
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 365              		.loc 1 531 0
 366 0052 4869     		ldr	r0, [r1, #20]
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 367              		.loc 1 532 0
 368 0054 8E68     		ldr	r6, [r1, #8]
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 369              		.loc 1 533 0
 370 0056 0D88     		ldrh	r5, [r1]
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 371              		.loc 1 532 0
 372 0058 45EA0645 		orr	r5, r5, r6, lsl #16
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 373              		.loc 1 531 0
 374 005c 4830     		adds	r0, r0, #72
 375 005e 02EBC000 		add	r0, r2, r0, lsl #3
 376 0062 4560     		str	r5, [r0, #4]
 377              	.L27:
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 378              		.loc 1 536 0
 379 0064 C869     		ldr	r0, [r1, #28]
 380 0066 0128     		cmp	r0, #1
 381 0068 15D1     		bne	.L28
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit scale for the filter */
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 382              		.loc 1 539 0
 383 006a D2F80C02 		ldr	r0, [r2, #524]
 384 006e 1843     		orrs	r0, r0, r3
 385 0070 C2F80C02 		str	r0, [r2, #524]
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
ARM GAS  /tmp/ccfM3gki.s 			page 18


 386              		.loc 1 542 0
 387 0074 4869     		ldr	r0, [r1, #20]
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 388              		.loc 1 543 0
 389 0076 0E68     		ldr	r6, [r1]
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 390              		.loc 1 544 0
 391 0078 8D88     		ldrh	r5, [r1, #4]
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 392              		.loc 1 543 0
 393 007a 45EA0645 		orr	r5, r5, r6, lsl #16
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 394              		.loc 1 542 0
 395 007e 4830     		adds	r0, r0, #72
 396 0080 42F83050 		str	r5, [r2, r0, lsl #3]
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 397              		.loc 1 547 0
 398 0084 4869     		ldr	r0, [r1, #20]
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 399              		.loc 1 548 0
 400 0086 8E68     		ldr	r6, [r1, #8]
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 401              		.loc 1 549 0
 402 0088 8D89     		ldrh	r5, [r1, #12]
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 403              		.loc 1 548 0
 404 008a 45EA0645 		orr	r5, r5, r6, lsl #16
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 405              		.loc 1 547 0
 406 008e 4830     		adds	r0, r0, #72
 407 0090 02EBC000 		add	r0, r2, r0, lsl #3
 408 0094 4560     		str	r5, [r0, #4]
 409              	.L28:
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Mode */
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 410              		.loc 1 553 0
 411 0096 8869     		ldr	r0, [r1, #24]
 412 0098 28B9     		cbnz	r0, .L29
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 413              		.loc 1 556 0
 414 009a D2F80402 		ldr	r0, [r2, #516]
 415 009e 2040     		ands	r0, r0, r4
 416 00a0 C2F80402 		str	r0, [r2, #516]
 417 00a4 04E0     		b	.L30
 418              	.L29:
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Identifier list mode for the filter*/
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 419              		.loc 1 561 0
ARM GAS  /tmp/ccfM3gki.s 			page 19


 420 00a6 D2F80402 		ldr	r0, [r2, #516]
 421 00aa 1843     		orrs	r0, r0, r3
 422 00ac C2F80402 		str	r0, [r2, #516]
 423              	.L30:
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter FIFO assignment */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 424              		.loc 1 565 0
 425 00b0 0869     		ldr	r0, [r1, #16]
 426 00b2 28B9     		cbnz	r0, .L31
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 427              		.loc 1 568 0
 428 00b4 D2F81402 		ldr	r0, [r2, #532]
 429 00b8 0440     		ands	r4, r4, r0
 430 00ba C2F81442 		str	r4, [r2, #532]
 431 00be 04E0     		b	.L32
 432              	.L31:
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 433              		.loc 1 573 0
 434 00c0 D2F81402 		ldr	r0, [r2, #532]
 435 00c4 1843     		orrs	r0, r0, r3
 436 00c6 C2F81402 		str	r0, [r2, #532]
 437              	.L32:
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter activation */
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 438              		.loc 1 577 0
 439 00ca 096A     		ldr	r1, [r1, #32]
 440              	.LVL22:
 441 00cc 0129     		cmp	r1, #1
 442 00ce 04D1     		bne	.L33
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 443              		.loc 1 579 0
 444 00d0 D2F81C12 		ldr	r1, [r2, #540]
 445 00d4 0B43     		orrs	r3, r3, r1
 446              	.LVL23:
 447 00d6 C2F81C32 		str	r3, [r2, #540]
 448              	.L33:
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 449              		.loc 1 583 0
 450 00da D2F80032 		ldr	r3, [r2, #512]
 451 00de 23F00103 		bic	r3, r3, #1
 452 00e2 C2F80032 		str	r3, [r2, #512]
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
ARM GAS  /tmp/ccfM3gki.s 			page 20


 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 453              		.loc 1 586 0
 454 00e6 0020     		movs	r0, #0
 455 00e8 05E0     		b	.L34
 456              	.LVL24:
 457              	.L26:
 458              	.LCFI3:
 459              		.cfi_def_cfa_offset 0
 460              		.cfi_restore 4
 461              		.cfi_restore 5
 462              		.cfi_restore 6
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 463              		.loc 1 591 0
 464 00ea 436A     		ldr	r3, [r0, #36]
 465 00ec 43F48023 		orr	r3, r3, #262144
 466 00f0 4362     		str	r3, [r0, #36]
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 467              		.loc 1 593 0
 468 00f2 0120     		movs	r0, #1
 469              	.LVL25:
 470 00f4 7047     		bx	lr
 471              	.LVL26:
 472              	.L34:
 473              	.LCFI4:
 474              		.cfi_def_cfa_offset 12
 475              		.cfi_offset 4, -12
 476              		.cfi_offset 5, -8
 477              		.cfi_offset 6, -4
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 478              		.loc 1 595 0
 479 00f6 70BC     		pop	{r4, r5, r6}
 480              	.LCFI5:
 481              		.cfi_restore 6
 482              		.cfi_restore 5
 483              		.cfi_restore 4
 484              		.cfi_def_cfa_offset 0
 485 00f8 7047     		bx	lr
 486              		.cfi_endproc
 487              	.LFE68:
 489 00fa 00BF     		.section	.text.HAL_CAN_Start,"ax",%progbits
 490              		.align	2
 491              		.global	HAL_CAN_Start
 492              		.thumb
 493              		.thumb_func
 495              	HAL_CAN_Start:
 496              	.LFB69:
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccfM3gki.s 			page 21


 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Control functions
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                       ##### Control functions #####
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              and activate the corresponding
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              transmission request
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              pending on the selected Tx mailbox
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Start the CAN module.
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 497              		.loc 1 635 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 501              	.LVL27:
 502 0000 38B5     		push	{r3, r4, r5, lr}
 503              	.LCFI6:
 504              		.cfi_def_cfa_offset 16
 505              		.cfi_offset 3, -16
 506              		.cfi_offset 4, -12
 507              		.cfi_offset 5, -8
 508              		.cfi_offset 14, -4
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 509              		.loc 1 638 0
 510 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 511 0006 DBB2     		uxtb	r3, r3
 512 0008 012B     		cmp	r3, #1
 513 000a 22D1     		bne	.L38
 514 000c 0446     		mov	r4, r0
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/ccfM3gki.s 			page 22


 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 515              		.loc 1 641 0
 516 000e 0223     		movs	r3, #2
 517 0010 80F82030 		strb	r3, [r0, #32]
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request leave initialisation */
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 518              		.loc 1 644 0
 519 0014 0268     		ldr	r2, [r0]
 520 0016 1368     		ldr	r3, [r2]
 521 0018 23F00103 		bic	r3, r3, #1
 522 001c 1360     		str	r3, [r2]
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
 523              		.loc 1 647 0
 524 001e FFF7FEFF 		bl	HAL_GetTick
 525              	.LVL28:
 526 0022 0546     		mov	r5, r0
 527              	.LVL29:
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 528              		.loc 1 650 0
 529 0024 0DE0     		b	.L39
 530              	.LVL30:
 531              	.L41:
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 532              		.loc 1 653 0
 533 0026 FFF7FEFF 		bl	HAL_GetTick
 534              	.LVL31:
 535 002a 401B     		subs	r0, r0, r5
 536 002c 0A28     		cmp	r0, #10
 537 002e 08D9     		bls	.L39
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 538              		.loc 1 656 0
 539 0030 636A     		ldr	r3, [r4, #36]
 540 0032 43F40033 		orr	r3, r3, #131072
 541 0036 6362     		str	r3, [r4, #36]
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 542              		.loc 1 659 0
 543 0038 0523     		movs	r3, #5
 544 003a 84F82030 		strb	r3, [r4, #32]
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 545              		.loc 1 661 0
 546 003e 0120     		movs	r0, #1
 547 0040 38BD     		pop	{r3, r4, r5, pc}
 548              	.LVL32:
 549              	.L39:
ARM GAS  /tmp/ccfM3gki.s 			page 23


 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 550              		.loc 1 650 0
 551 0042 2368     		ldr	r3, [r4]
 552 0044 5B68     		ldr	r3, [r3, #4]
 553 0046 13F0010F 		tst	r3, #1
 554 004a ECD1     		bne	.L41
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset the CAN ErrorCode */
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 555              		.loc 1 666 0
 556 004c 0020     		movs	r0, #0
 557 004e 6062     		str	r0, [r4, #36]
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 558              		.loc 1 669 0
 559 0050 38BD     		pop	{r3, r4, r5, pc}
 560              	.LVL33:
 561              	.L38:
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 562              		.loc 1 674 0
 563 0052 436A     		ldr	r3, [r0, #36]
 564 0054 43F40023 		orr	r3, r3, #524288
 565 0058 4362     		str	r3, [r0, #36]
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 566              		.loc 1 676 0
 567 005a 0120     		movs	r0, #1
 568              	.LVL34:
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 569              		.loc 1 678 0
 570 005c 38BD     		pop	{r3, r4, r5, pc}
 571              		.cfi_endproc
 572              	.LFE69:
 574 005e 00BF     		.section	.text.HAL_CAN_Stop,"ax",%progbits
 575              		.align	2
 576              		.global	HAL_CAN_Stop
 577              		.thumb
 578              		.thumb_func
 580              	HAL_CAN_Stop:
 581              	.LFB70:
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
ARM GAS  /tmp/ccfM3gki.s 			page 24


 582              		.loc 1 687 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL35:
 587 0000 38B5     		push	{r3, r4, r5, lr}
 588              	.LCFI7:
 589              		.cfi_def_cfa_offset 16
 590              		.cfi_offset 3, -16
 591              		.cfi_offset 4, -12
 592              		.cfi_offset 5, -8
 593              		.cfi_offset 14, -4
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 594              		.loc 1 690 0
 595 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 596 0006 DBB2     		uxtb	r3, r3
 597 0008 022B     		cmp	r3, #2
 598 000a 25D1     		bne	.L44
 599 000c 0446     		mov	r4, r0
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request initialisation */
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 600              		.loc 1 693 0
 601 000e 0268     		ldr	r2, [r0]
 602 0010 1368     		ldr	r3, [r2]
 603 0012 43F00103 		orr	r3, r3, #1
 604 0016 1360     		str	r3, [r2]
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
 605              		.loc 1 696 0
 606 0018 FFF7FEFF 		bl	HAL_GetTick
 607              	.LVL36:
 608 001c 0546     		mov	r5, r0
 609              	.LVL37:
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 610              		.loc 1 699 0
 611 001e 0DE0     		b	.L45
 612              	.LVL38:
 613              	.L47:
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 614              		.loc 1 702 0
 615 0020 FFF7FEFF 		bl	HAL_GetTick
 616              	.LVL39:
 617 0024 401B     		subs	r0, r0, r5
 618 0026 0A28     		cmp	r0, #10
 619 0028 08D9     		bls	.L45
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 620              		.loc 1 705 0
ARM GAS  /tmp/ccfM3gki.s 			page 25


 621 002a 636A     		ldr	r3, [r4, #36]
 622 002c 43F40033 		orr	r3, r3, #131072
 623 0030 6362     		str	r3, [r4, #36]
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 624              		.loc 1 708 0
 625 0032 0523     		movs	r3, #5
 626 0034 84F82030 		strb	r3, [r4, #32]
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 627              		.loc 1 710 0
 628 0038 0120     		movs	r0, #1
 629 003a 38BD     		pop	{r3, r4, r5, pc}
 630              	.LVL40:
 631              	.L45:
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 632              		.loc 1 699 0
 633 003c 2368     		ldr	r3, [r4]
 634 003e 5A68     		ldr	r2, [r3, #4]
 635 0040 12F0010F 		tst	r2, #1
 636 0044 ECD0     		beq	.L47
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Exit from sleep mode */
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 637              		.loc 1 715 0
 638 0046 1A68     		ldr	r2, [r3]
 639 0048 22F00202 		bic	r2, r2, #2
 640 004c 1A60     		str	r2, [r3]
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 641              		.loc 1 718 0
 642 004e 0123     		movs	r3, #1
 643 0050 84F82030 		strb	r3, [r4, #32]
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 644              		.loc 1 721 0
 645 0054 0020     		movs	r0, #0
 646 0056 38BD     		pop	{r3, r4, r5, pc}
 647              	.LVL41:
 648              	.L44:
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 649              		.loc 1 726 0
 650 0058 436A     		ldr	r3, [r0, #36]
 651 005a 43F48013 		orr	r3, r3, #1048576
 652 005e 4362     		str	r3, [r0, #36]
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 653              		.loc 1 728 0
ARM GAS  /tmp/ccfM3gki.s 			page 26


 654 0060 0120     		movs	r0, #1
 655              	.LVL42:
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 656              		.loc 1 730 0
 657 0062 38BD     		pop	{r3, r4, r5, pc}
 658              		.cfi_endproc
 659              	.LFE70:
 661              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 662              		.align	2
 663              		.global	HAL_CAN_DeInit
 664              		.thumb
 665              		.thumb_func
 667              	HAL_CAN_DeInit:
 668              	.LFB65:
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 669              		.loc 1 379 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              	.LVL43:
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 674              		.loc 1 381 0
 675 0000 80B1     		cbz	r0, .L51
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 676              		.loc 1 379 0
 677 0002 10B5     		push	{r4, lr}
 678              	.LCFI8:
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 4, -8
 681              		.cfi_offset 14, -4
 682 0004 0446     		mov	r4, r0
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 683              		.loc 1 390 0
 684 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 685              	.LVL44:
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 686              		.loc 1 393 0
 687 000a 2046     		mov	r0, r4
 688 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 689              	.LVL45:
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 690              		.loc 1 396 0
 691 0010 2268     		ldr	r2, [r4]
 692 0012 1368     		ldr	r3, [r2]
 693 0014 43F40043 		orr	r3, r3, #32768
 694 0018 1360     		str	r3, [r2]
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 695              		.loc 1 399 0
 696 001a 0020     		movs	r0, #0
 697 001c 6062     		str	r0, [r4, #36]
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 698              		.loc 1 402 0
 699 001e 84F82000 		strb	r0, [r4, #32]
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 700              		.loc 1 405 0
 701 0022 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccfM3gki.s 			page 27


 702              	.LVL46:
 703              	.L51:
 704              	.LCFI9:
 705              		.cfi_def_cfa_offset 0
 706              		.cfi_restore 4
 707              		.cfi_restore 14
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 708              		.loc 1 383 0
 709 0024 0120     		movs	r0, #1
 710              	.LVL47:
 711 0026 7047     		bx	lr
 712              		.cfi_endproc
 713              	.LFE65:
 715              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 716              		.align	2
 717              		.global	HAL_CAN_RequestSleep
 718              		.thumb
 719              		.thumb_func
 721              	HAL_CAN_RequestSleep:
 722              	.LFB71:
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of a CAN frame) has been completed.
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 723              		.loc 1 742 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727              		@ link register save eliminated.
 728              	.LVL48:
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 729              		.loc 1 743 0
 730 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 731              	.LVL49:
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 732              		.loc 1 745 0
 733 0004 013B     		subs	r3, r3, #1
 734              	.LVL50:
 735 0006 DBB2     		uxtb	r3, r3
 736 0008 012B     		cmp	r3, #1
 737 000a 06D8     		bhi	.L55
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request Sleep mode */
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 738              		.loc 1 749 0
 739 000c 0268     		ldr	r2, [r0]
 740 000e 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccfM3gki.s 			page 28


 741 0010 43F00203 		orr	r3, r3, #2
 742 0014 1360     		str	r3, [r2]
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 743              		.loc 1 752 0
 744 0016 0020     		movs	r0, #0
 745              	.LVL51:
 746 0018 7047     		bx	lr
 747              	.LVL52:
 748              	.L55:
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 749              		.loc 1 757 0
 750 001a 436A     		ldr	r3, [r0, #36]
 751 001c 43F48023 		orr	r3, r3, #262144
 752 0020 4362     		str	r3, [r0, #36]
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 753              		.loc 1 760 0
 754 0022 0120     		movs	r0, #1
 755              	.LVL53:
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 756              		.loc 1 762 0
 757 0024 7047     		bx	lr
 758              		.cfi_endproc
 759              	.LFE71:
 761 0026 00BF     		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 762              		.align	2
 763              		.global	HAL_CAN_WakeUp
 764              		.thumb
 765              		.thumb_func
 767              	HAL_CAN_WakeUp:
 768              	.LFB72:
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Wake up from sleep mode.
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         is exited.
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 769              		.loc 1 773 0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 8
 772              		@ frame_needed = 0, uses_anonymous_args = 0
 773              		@ link register save eliminated.
 774              	.LVL54:
 775 0000 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccfM3gki.s 			page 29


 776              	.LCFI10:
 777              		.cfi_def_cfa_offset 8
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   __IO uint32_t count = 0;
 778              		.loc 1 774 0
 779 0002 0023     		movs	r3, #0
 780 0004 0193     		str	r3, [sp, #4]
 781              	.LVL55:
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timeout = 1000000U;
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 782              		.loc 1 776 0
 783 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 784              	.LVL56:
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 785              		.loc 1 778 0
 786 000a 013B     		subs	r3, r3, #1
 787              	.LVL57:
 788 000c DBB2     		uxtb	r3, r3
 789 000e 012B     		cmp	r3, #1
 790 0010 18D8     		bhi	.L58
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wake up request */
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 791              		.loc 1 782 0
 792 0012 0268     		ldr	r2, [r0]
 793 0014 1368     		ldr	r3, [r2]
 794 0016 23F00203 		bic	r3, r3, #2
 795 001a 1360     		str	r3, [r2]
 796              	.L61:
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait sleep mode is exited */
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     do
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Increment counter */
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       count++;
 797              		.loc 1 788 0
 798 001c 019B     		ldr	r3, [sp, #4]
 799 001e 0133     		adds	r3, r3, #1
 800 0020 0193     		str	r3, [sp, #4]
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check if timeout is reached */
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (count > timeout)
 801              		.loc 1 791 0
 802 0022 019A     		ldr	r2, [sp, #4]
 803 0024 0B4B     		ldr	r3, .L63
 804 0026 9A42     		cmp	r2, r3
 805 0028 05D9     		bls	.L59
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 806              		.loc 1 794 0
 807 002a 436A     		ldr	r3, [r0, #36]
 808 002c 43F40033 		orr	r3, r3, #131072
 809 0030 4362     		str	r3, [r0, #36]
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
ARM GAS  /tmp/ccfM3gki.s 			page 30


 810              		.loc 1 796 0
 811 0032 0120     		movs	r0, #1
 812              	.LVL58:
 813 0034 0BE0     		b	.L60
 814              	.LVL59:
 815              	.L59:
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 816              		.loc 1 799 0
 817 0036 0368     		ldr	r3, [r0]
 818 0038 5B68     		ldr	r3, [r3, #4]
 819 003a 13F0020F 		tst	r3, #2
 820 003e EDD1     		bne	.L61
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 821              		.loc 1 802 0
 822 0040 0020     		movs	r0, #0
 823              	.LVL60:
 824 0042 04E0     		b	.L60
 825              	.LVL61:
 826              	.L58:
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 827              		.loc 1 807 0
 828 0044 436A     		ldr	r3, [r0, #36]
 829 0046 43F48023 		orr	r3, r3, #262144
 830 004a 4362     		str	r3, [r0, #36]
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 831              		.loc 1 809 0
 832 004c 0120     		movs	r0, #1
 833              	.LVL62:
 834              	.L60:
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 835              		.loc 1 811 0
 836 004e 02B0     		add	sp, sp, #8
 837              	.LCFI11:
 838              		.cfi_def_cfa_offset 0
 839              		@ sp needed
 840 0050 7047     		bx	lr
 841              	.L64:
 842 0052 00BF     		.align	2
 843              	.L63:
 844 0054 40420F00 		.word	1000000
 845              		.cfi_endproc
 846              	.LFE72:
 848              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 849              		.align	2
 850              		.global	HAL_CAN_IsSleepActive
 851              		.thumb
 852              		.thumb_func
ARM GAS  /tmp/ccfM3gki.s 			page 31


 854              	HAL_CAN_IsSleepActive:
 855              	.LFB73:
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check is sleep mode is active.
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Sleep mode is active.
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 856              		.loc 1 822 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860              		@ link register save eliminated.
 861              	.LVL63:
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 862              		.loc 1 824 0
 863 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 864              	.LVL64:
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 865              		.loc 1 826 0
 866 0004 013B     		subs	r3, r3, #1
 867              	.LVL65:
 868 0006 DBB2     		uxtb	r3, r3
 869 0008 012B     		cmp	r3, #1
 870 000a 06D8     		bhi	.L67
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Sleep mode */
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 871              		.loc 1 830 0
 872 000c 0368     		ldr	r3, [r0]
 873 000e 5B68     		ldr	r3, [r3, #4]
 874 0010 13F0020F 		tst	r3, #2
 875 0014 03D1     		bne	.L68
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 876              		.loc 1 823 0
 877 0016 0020     		movs	r0, #0
 878              	.LVL66:
 879 0018 7047     		bx	lr
 880              	.LVL67:
 881              	.L67:
 882 001a 0020     		movs	r0, #0
 883              	.LVL68:
 884 001c 7047     		bx	lr
 885              	.LVL69:
 886              	.L68:
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 887              		.loc 1 832 0
 888 001e 0120     		movs	r0, #1
ARM GAS  /tmp/ccfM3gki.s 			page 32


 889              	.LVL70:
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 890              		.loc 1 838 0
 891 0020 7047     		bx	lr
 892              		.cfi_endproc
 893              	.LFE73:
 895 0022 00BF     		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 896              		.align	2
 897              		.global	HAL_CAN_AddTxMessage
 898              		.thumb
 899              		.thumb_func
 901              	HAL_CAN_AddTxMessage:
 902              	.LFB74:
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         corresponding transmission request.
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 903              		.loc 1 853 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 0
 906              		@ frame_needed = 0, uses_anonymous_args = 0
 907              		@ link register save eliminated.
 908              	.LVL71:
 909 0000 70B4     		push	{r4, r5, r6}
 910              	.LCFI12:
 911              		.cfi_def_cfa_offset 12
 912              		.cfi_offset 4, -12
 913              		.cfi_offset 5, -8
 914              		.cfi_offset 6, -4
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 915              		.loc 1 855 0
 916 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 917              	.LVL72:
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 918              		.loc 1 856 0
 919 0006 0568     		ldr	r5, [r0]
 920 0008 AD68     		ldr	r5, [r5, #8]
 921              	.LVL73:
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
ARM GAS  /tmp/ccfM3gki.s 			page 33


 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 922              		.loc 1 872 0
 923 000a 013C     		subs	r4, r4, #1
 924              	.LVL74:
 925 000c E4B2     		uxtb	r4, r4
 926 000e 012C     		cmp	r4, #1
 927 0010 62D8     		bhi	.L70
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
 928              		.loc 1 876 0
 929 0012 15F0E05F 		tst	r5, #469762048
 930 0016 59D0     		beq	.L71
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Select an empty transmit mailbox */
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 931              		.loc 1 881 0
 932 0018 C5F30165 		ubfx	r5, r5, #24, #2
 933              	.LVL75:
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check transmit mailbox value */
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (transmitmailbox > 2U)
 934              		.loc 1 884 0
 935 001c 022D     		cmp	r5, #2
 936 001e 05D9     		bls	.L72
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 937              		.loc 1 887 0
 938 0020 436A     		ldr	r3, [r0, #36]
 939              	.LVL76:
 940 0022 43F40003 		orr	r3, r3, #8388608
 941 0026 4362     		str	r3, [r0, #36]
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 942              		.loc 1 889 0
 943 0028 0120     		movs	r0, #1
 944              	.LVL77:
 945 002a 5AE0     		b	.L73
 946              	.LVL78:
 947              	.L72:
ARM GAS  /tmp/ccfM3gki.s 			page 34


 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Store the Tx mailbox */
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
 948              		.loc 1 893 0
 949 002c 0124     		movs	r4, #1
 950 002e AC40     		lsls	r4, r4, r5
 951 0030 1C60     		str	r4, [r3]
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Id */
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 952              		.loc 1 896 0
 953 0032 8B68     		ldr	r3, [r1, #8]
 954              	.LVL79:
 955 0034 4BB9     		cbnz	r3, .L74
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 956              		.loc 1 898 0
 957 0036 0468     		ldr	r4, [r0]
 958 0038 0E68     		ldr	r6, [r1]
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 959              		.loc 1 899 0
 960 003a CB68     		ldr	r3, [r1, #12]
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 961              		.loc 1 898 0
 962 003c 43EA4656 		orr	r6, r3, r6, lsl #21
 963 0040 05F11803 		add	r3, r5, #24
 964 0044 1B01     		lsls	r3, r3, #4
 965 0046 E650     		str	r6, [r4, r3]
 966 0048 09E0     		b	.L75
 967              	.L74:
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 968              		.loc 1 903 0
 969 004a 0668     		ldr	r6, [r0]
 970 004c 4C68     		ldr	r4, [r1, #4]
 971 004e 43EAC403 		orr	r3, r3, r4, lsl #3
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 972              		.loc 1 905 0
 973 0052 CC68     		ldr	r4, [r1, #12]
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 974              		.loc 1 904 0
 975 0054 2343     		orrs	r3, r3, r4
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 976              		.loc 1 903 0
 977 0056 05F11804 		add	r4, r5, #24
 978 005a 2401     		lsls	r4, r4, #4
 979 005c 3351     		str	r3, [r6, r4]
 980              	.L75:
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the DLC */
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 981              		.loc 1 909 0
ARM GAS  /tmp/ccfM3gki.s 			page 35


 982 005e 0368     		ldr	r3, [r0]
 983 0060 0C69     		ldr	r4, [r1, #16]
 984 0062 05F11806 		add	r6, r5, #24
 985 0066 03EB0613 		add	r3, r3, r6, lsl #4
 986 006a 5C60     		str	r4, [r3, #4]
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 987              		.loc 1 912 0
 988 006c 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 989 006e 012B     		cmp	r3, #1
 990 0070 06D1     		bne	.L76
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 991              		.loc 1 914 0
 992 0072 0368     		ldr	r3, [r0]
 993 0074 03EB0613 		add	r3, r3, r6, lsl #4
 994 0078 5968     		ldr	r1, [r3, #4]
 995              	.LVL80:
 996 007a 41F48071 		orr	r1, r1, #256
 997 007e 5960     		str	r1, [r3, #4]
 998              	.L76:
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the data field */
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 999              		.loc 1 918 0
 1000 0080 0168     		ldr	r1, [r0]
 1001 0082 D479     		ldrb	r4, [r2, #7]	@ zero_extendqisi2
 1002 0084 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1003 0086 1B04     		lsls	r3, r3, #16
 1004 0088 43EA0463 		orr	r3, r3, r4, lsl #24
 1005 008c 5479     		ldrb	r4, [r2, #5]	@ zero_extendqisi2
 1006 008e 43EA0423 		orr	r3, r3, r4, lsl #8
 1007 0092 1479     		ldrb	r4, [r2, #4]	@ zero_extendqisi2
 1008 0094 2343     		orrs	r3, r3, r4
 1009 0096 2C01     		lsls	r4, r5, #4
 1010 0098 2144     		add	r1, r1, r4
 1011 009a C1F88C31 		str	r3, [r1, #396]
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1012              		.loc 1 923 0
 1013 009e 0168     		ldr	r1, [r0]
 1014 00a0 D678     		ldrb	r6, [r2, #3]	@ zero_extendqisi2
 1015 00a2 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1016 00a4 1B04     		lsls	r3, r3, #16
 1017 00a6 43EA0663 		orr	r3, r3, r6, lsl #24
 1018 00aa 5678     		ldrb	r6, [r2, #1]	@ zero_extendqisi2
 1019 00ac 43EA0623 		orr	r3, r3, r6, lsl #8
 1020 00b0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1021              	.LVL81:
 1022 00b2 1343     		orrs	r3, r3, r2
 1023 00b4 2144     		add	r1, r1, r4
 1024 00b6 C1F88831 		str	r3, [r1, #392]
ARM GAS  /tmp/ccfM3gki.s 			page 36


 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Request transmission */
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1025              		.loc 1 930 0
 1026 00ba 0268     		ldr	r2, [r0]
 1027 00bc 1835     		adds	r5, r5, #24
 1028              	.LVL82:
 1029 00be 2D01     		lsls	r5, r5, #4
 1030              	.LVL83:
 1031 00c0 5359     		ldr	r3, [r2, r5]
 1032 00c2 43F00103 		orr	r3, r3, #1
 1033 00c6 5351     		str	r3, [r2, r5]
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Return function status */
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_OK;
 1034              		.loc 1 933 0
 1035 00c8 0020     		movs	r0, #0
 1036              	.LVL84:
 1037 00ca 0AE0     		b	.L73
 1038              	.LVL85:
 1039              	.L71:
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1040              		.loc 1 938 0
 1041 00cc 436A     		ldr	r3, [r0, #36]
 1042              	.LVL86:
 1043 00ce 43F40013 		orr	r3, r3, #2097152
 1044 00d2 4362     		str	r3, [r0, #36]
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 1045              		.loc 1 940 0
 1046 00d4 0120     		movs	r0, #1
 1047              	.LVL87:
 1048 00d6 04E0     		b	.L73
 1049              	.LVL88:
 1050              	.L70:
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1051              		.loc 1 946 0
 1052 00d8 436A     		ldr	r3, [r0, #36]
 1053              	.LVL89:
 1054 00da 43F48023 		orr	r3, r3, #262144
 1055 00de 4362     		str	r3, [r0, #36]
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1056              		.loc 1 948 0
ARM GAS  /tmp/ccfM3gki.s 			page 37


 1057 00e0 0120     		movs	r0, #1
 1058              	.LVL90:
 1059              	.L73:
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1060              		.loc 1 950 0
 1061 00e2 70BC     		pop	{r4, r5, r6}
 1062              	.LCFI13:
 1063              		.cfi_restore 6
 1064              		.cfi_restore 5
 1065              		.cfi_restore 4
 1066              		.cfi_def_cfa_offset 0
 1067 00e4 7047     		bx	lr
 1068              		.cfi_endproc
 1069              	.LFE74:
 1071 00e6 00BF     		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1072              		.align	2
 1073              		.global	HAL_CAN_AbortTxRequest
 1074              		.thumb
 1075              		.thumb_func
 1077              	HAL_CAN_AbortTxRequest:
 1078              	.LFB75:
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Abort transmission requests
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1079              		.loc 1 961 0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              		@ link register save eliminated.
 1084              	.LVL91:
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1085              		.loc 1 962 0
 1086 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1087              	.LVL92:
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1088              		.loc 1 967 0
 1089 0004 013B     		subs	r3, r3, #1
 1090              	.LVL93:
 1091 0006 DBB2     		uxtb	r3, r3
 1092 0008 012B     		cmp	r3, #1
 1093 000a 19D8     		bhi	.L79
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 */
ARM GAS  /tmp/ccfM3gki.s 			page 38


 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 1094              		.loc 1 971 0
 1095 000c 11F0010F 		tst	r1, #1
 1096 0010 04D0     		beq	.L80
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 1097              		.loc 1 974 0
 1098 0012 0268     		ldr	r2, [r0]
 1099 0014 9368     		ldr	r3, [r2, #8]
 1100 0016 43F08003 		orr	r3, r3, #128
 1101 001a 9360     		str	r3, [r2, #8]
 1102              	.L80:
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 */
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 1103              		.loc 1 978 0
 1104 001c 11F0020F 		tst	r1, #2
 1105 0020 04D0     		beq	.L81
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 1106              		.loc 1 981 0
 1107 0022 0268     		ldr	r2, [r0]
 1108 0024 9368     		ldr	r3, [r2, #8]
 1109 0026 43F40043 		orr	r3, r3, #32768
 1110 002a 9360     		str	r3, [r2, #8]
 1111              	.L81:
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 */
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 1112              		.loc 1 985 0
 1113 002c 11F0040F 		tst	r1, #4
 1114 0030 0CD0     		beq	.L83
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 1115              		.loc 1 988 0
 1116 0032 0268     		ldr	r2, [r0]
 1117 0034 9368     		ldr	r3, [r2, #8]
 1118 0036 43F40003 		orr	r3, r3, #8388608
 1119 003a 9360     		str	r3, [r2, #8]
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 1120              		.loc 1 992 0
 1121 003c 0020     		movs	r0, #0
 1122              	.LVL94:
 1123 003e 7047     		bx	lr
 1124              	.LVL95:
 1125              	.L79:
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/ccfM3gki.s 			page 39


 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1126              		.loc 1 997 0
 1127 0040 436A     		ldr	r3, [r0, #36]
 1128 0042 43F48023 		orr	r3, r3, #262144
 1129 0046 4362     		str	r3, [r0, #36]
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1130              		.loc 1 999 0
 1131 0048 0120     		movs	r0, #1
 1132              	.LVL96:
 1133 004a 7047     		bx	lr
 1134              	.LVL97:
 1135              	.L83:
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1136              		.loc 1 992 0
 1137 004c 0020     		movs	r0, #0
 1138              	.LVL98:
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1139              		.loc 1 1001 0
 1140 004e 7047     		bx	lr
 1141              		.cfi_endproc
 1142              	.LFE75:
 1144              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1145              		.align	2
 1146              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1147              		.thumb
 1148              		.thumb_func
 1150              	HAL_CAN_GetTxMailboxesFreeLevel:
 1151              	.LFB76:
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1152              		.loc 1 1010 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 0
 1155              		@ frame_needed = 0, uses_anonymous_args = 0
 1156              		@ link register save eliminated.
 1157              	.LVL99:
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t freelevel = 0U;
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1158              		.loc 1 1012 0
 1159 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1160              	.LVL100:
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1161              		.loc 1 1014 0
 1162 0004 013B     		subs	r3, r3, #1
 1163              	.LVL101:
 1164 0006 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccfM3gki.s 			page 40


 1165 0008 012B     		cmp	r3, #1
 1166 000a 12D8     		bhi	.L88
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 1167              		.loc 1 1018 0
 1168 000c 0368     		ldr	r3, [r0]
 1169 000e 9A68     		ldr	r2, [r3, #8]
 1170 0010 12F0806F 		tst	r2, #67108864
 1171 0014 01D1     		bne	.L89
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1172              		.loc 1 1011 0
 1173 0016 0020     		movs	r0, #0
 1174              	.LVL102:
 1175 0018 00E0     		b	.L86
 1176              	.LVL103:
 1177              	.L89:
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
 1178              		.loc 1 1020 0
 1179 001a 0120     		movs	r0, #1
 1180              	.LVL104:
 1181              	.L86:
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 1182              		.loc 1 1024 0
 1183 001c 9A68     		ldr	r2, [r3, #8]
 1184 001e 12F0006F 		tst	r2, #134217728
 1185 0022 00D0     		beq	.L87
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
 1186              		.loc 1 1026 0
 1187 0024 0130     		adds	r0, r0, #1
 1188              	.LVL105:
 1189              	.L87:
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 1190              		.loc 1 1030 0
 1191 0026 9B68     		ldr	r3, [r3, #8]
 1192 0028 13F0805F 		tst	r3, #268435456
 1193 002c 02D0     		beq	.L85
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
 1194              		.loc 1 1032 0
 1195 002e 0130     		adds	r0, r0, #1
 1196              	.LVL106:
 1197 0030 7047     		bx	lr
 1198              	.LVL107:
 1199              	.L88:
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1200              		.loc 1 1011 0
 1201 0032 0020     		movs	r0, #0
ARM GAS  /tmp/ccfM3gki.s 			page 41


 1202              	.LVL108:
 1203              	.L85:
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return freelevel;
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1204              		.loc 1 1038 0
 1205 0034 7047     		bx	lr
 1206              		.cfi_endproc
 1207              	.LFE76:
 1209 0036 00BF     		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1210              		.align	2
 1211              		.global	HAL_CAN_IsTxMessagePending
 1212              		.thumb
 1213              		.thumb_func
 1215              	HAL_CAN_IsTxMessagePending:
 1216              	.LFB77:
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         Mailboxes.
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *                Tx Mailbox.
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1217              		.loc 1 1053 0
 1218              		.cfi_startproc
 1219              		@ args = 0, pretend = 0, frame = 0
 1220              		@ frame_needed = 0, uses_anonymous_args = 0
 1221              		@ link register save eliminated.
 1222              	.LVL109:
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1223              		.loc 1 1055 0
 1224 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1225              	.LVL110:
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1226              		.loc 1 1060 0
 1227 0004 013B     		subs	r3, r3, #1
 1228              	.LVL111:
 1229 0006 DBB2     		uxtb	r3, r3
 1230 0008 012B     		cmp	r3, #1
 1231 000a 07D8     		bhi	.L92
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
ARM GAS  /tmp/ccfM3gki.s 			page 42


1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1232              		.loc 1 1064 0
 1233 000c 0368     		ldr	r3, [r0]
 1234 000e 9B68     		ldr	r3, [r3, #8]
 1235 0010 8906     		lsls	r1, r1, #26
 1236              	.LVL112:
 1237 0012 31EA0303 		bics	r3, r1, r3
 1238 0016 03D1     		bne	.L93
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1239              		.loc 1 1054 0
 1240 0018 0020     		movs	r0, #0
 1241              	.LVL113:
 1242 001a 7047     		bx	lr
 1243              	.LVL114:
 1244              	.L92:
 1245 001c 0020     		movs	r0, #0
 1246              	.LVL115:
 1247 001e 7047     		bx	lr
 1248              	.LVL116:
 1249              	.L93:
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 1250              		.loc 1 1066 0
 1251 0020 0120     		movs	r0, #1
 1252              	.LVL117:
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return status */
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1253              		.loc 1 1072 0
 1254 0022 7047     		bx	lr
 1255              		.cfi_endproc
 1256              	.LFE77:
 1258              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1259              		.align	2
 1260              		.global	HAL_CAN_GetTxTimestamp
 1261              		.thumb
 1262              		.thumb_func
 1264              	HAL_CAN_GetTxTimestamp:
 1265              	.LFB78:
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             mode is enabled.
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         read.
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
ARM GAS  /tmp/ccfM3gki.s 			page 43


 1266              		.loc 1 1085 0
 1267              		.cfi_startproc
 1268              		@ args = 0, pretend = 0, frame = 0
 1269              		@ frame_needed = 0, uses_anonymous_args = 0
 1270              		@ link register save eliminated.
 1271              	.LVL118:
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timestamp = 0U;
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1272              		.loc 1 1088 0
 1273 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1274              	.LVL119:
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1275              		.loc 1 1093 0
 1276 0004 013B     		subs	r3, r3, #1
 1277              	.LVL120:
 1278 0006 DBB2     		uxtb	r3, r3
 1279 0008 012B     		cmp	r3, #1
 1280 000a 0AD8     		bhi	.L96
 1281              	.LVL121:
 1282              	.LBB4:
 1283              	.LBB5:
 1284              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
ARM GAS  /tmp/ccfM3gki.s 			page 44


  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccfM3gki.s 			page 45


  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
ARM GAS  /tmp/ccfM3gki.s 			page 46


 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccfM3gki.s 			page 47


 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
ARM GAS  /tmp/ccfM3gki.s 			page 48


 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccfM3gki.s 			page 49


 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccfM3gki.s 			page 50


 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
ARM GAS  /tmp/ccfM3gki.s 			page 51


 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  /tmp/ccfM3gki.s 			page 52


 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1285              		.loc 2 531 0
 1286              		.syntax unified
 1287              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1288 000c 91FAA1F1 		rbit r1, r1
 1289              	@ 0 "" 2
 1290              	.LVL122:
 1291              		.thumb
 1292              		.syntax unified
 1293              	.LBE5:
 1294              	.LBE4:
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/ccfM3gki.s 			page 53


1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the Tx mailbox */
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
 1295              		.loc 1 1097 0
 1296 0010 B1FA81F1 		clz	r1, r1
 1297              	.LVL123:
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get timestamp */
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
 1298              		.loc 1 1100 0
 1299 0014 0368     		ldr	r3, [r0]
 1300 0016 1831     		adds	r1, r1, #24
 1301              	.LVL124:
 1302 0018 03EB0111 		add	r1, r3, r1, lsl #4
 1303              	.LVL125:
 1304 001c 4868     		ldr	r0, [r1, #4]
 1305              	.LVL126:
 1306 001e 000C     		lsrs	r0, r0, #16
 1307              	.LVL127:
 1308 0020 7047     		bx	lr
 1309              	.LVL128:
 1310              	.L96:
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 1311              		.loc 1 1086 0
 1312 0022 0020     		movs	r0, #0
 1313              	.LVL129:
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the timestamp */
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return timestamp;
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1314              		.loc 1 1105 0
 1315 0024 7047     		bx	lr
 1316              		.cfi_endproc
 1317              	.LFE78:
 1319 0026 00BF     		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1320              		.align	2
 1321              		.global	HAL_CAN_GetRxMessage
 1322              		.thumb
 1323              		.thumb_func
 1325              	HAL_CAN_GetRxMessage:
 1326              	.LFB79:
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of the Rx frame will be stored.
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1327              		.loc 1 1119 0
 1328              		.cfi_startproc
ARM GAS  /tmp/ccfM3gki.s 			page 54


 1329              		@ args = 0, pretend = 0, frame = 0
 1330              		@ frame_needed = 0, uses_anonymous_args = 0
 1331              		@ link register save eliminated.
 1332              	.LVL130:
 1333 0000 30B4     		push	{r4, r5}
 1334              	.LCFI14:
 1335              		.cfi_def_cfa_offset 8
 1336              		.cfi_offset 4, -8
 1337              		.cfi_offset 5, -4
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1338              		.loc 1 1120 0
 1339 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1340              	.LVL131:
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1341              		.loc 1 1124 0
 1342 0006 013C     		subs	r4, r4, #1
 1343              	.LVL132:
 1344 0008 E4B2     		uxtb	r4, r4
 1345 000a 012C     		cmp	r4, #1
 1346 000c 00F28A80 		bhi	.L98
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the Rx FIFO */
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1347              		.loc 1 1128 0
 1348 0010 51B9     		cbnz	r1, .L99
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 1349              		.loc 1 1131 0
 1350 0012 0468     		ldr	r4, [r0]
 1351 0014 E468     		ldr	r4, [r4, #12]
 1352 0016 14F0030F 		tst	r4, #3
 1353 001a 10D1     		bne	.L100
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1354              		.loc 1 1134 0
 1355 001c 436A     		ldr	r3, [r0, #36]
 1356              	.LVL133:
 1357 001e 43F40013 		orr	r3, r3, #2097152
 1358 0022 4362     		str	r3, [r0, #36]
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 1359              		.loc 1 1136 0
 1360 0024 0120     		movs	r0, #1
 1361              	.LVL134:
 1362 0026 82E0     		b	.L101
 1363              	.LVL135:
 1364              	.L99:
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/ccfM3gki.s 			page 55


1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 1365              		.loc 1 1142 0
 1366 0028 0468     		ldr	r4, [r0]
 1367 002a 2469     		ldr	r4, [r4, #16]
 1368 002c 14F0030F 		tst	r4, #3
 1369 0030 05D1     		bne	.L100
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1370              		.loc 1 1145 0
 1371 0032 436A     		ldr	r3, [r0, #36]
 1372              	.LVL136:
 1373 0034 43F40013 		orr	r3, r3, #2097152
 1374 0038 4362     		str	r3, [r0, #36]
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 1375              		.loc 1 1147 0
 1376 003a 0120     		movs	r0, #1
 1377              	.LVL137:
 1378 003c 77E0     		b	.L101
 1379              	.LVL138:
 1380              	.L100:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the header */
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1381              		.loc 1 1152 0
 1382 003e 0568     		ldr	r5, [r0]
 1383 0040 01F11B04 		add	r4, r1, #27
 1384 0044 2401     		lsls	r4, r4, #4
 1385 0046 2C59     		ldr	r4, [r5, r4]
 1386 0048 04F00404 		and	r4, r4, #4
 1387 004c 9460     		str	r4, [r2, #8]
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1388              		.loc 1 1153 0
 1389 004e 3CB9     		cbnz	r4, .L102
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1390              		.loc 1 1155 0
 1391 0050 0568     		ldr	r5, [r0]
 1392 0052 01F11B04 		add	r4, r1, #27
 1393 0056 2401     		lsls	r4, r4, #4
 1394 0058 2C59     		ldr	r4, [r5, r4]
 1395 005a 640D     		lsrs	r4, r4, #21
 1396 005c 1460     		str	r4, [r2]
 1397 005e 06E0     		b	.L103
 1398              	.L102:
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 1399              		.loc 1 1159 0
 1400 0060 0568     		ldr	r5, [r0]
 1401 0062 01F11B04 		add	r4, r1, #27
 1402 0066 2401     		lsls	r4, r4, #4
ARM GAS  /tmp/ccfM3gki.s 			page 56


 1403 0068 2C59     		ldr	r4, [r5, r4]
 1404 006a E408     		lsrs	r4, r4, #3
 1405 006c 5460     		str	r4, [r2, #4]
 1406              	.L103:
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 1407              		.loc 1 1161 0
 1408 006e 0568     		ldr	r5, [r0]
 1409 0070 01F11B04 		add	r4, r1, #27
 1410 0074 2401     		lsls	r4, r4, #4
 1411 0076 2D59     		ldr	r5, [r5, r4]
 1412 0078 C5F34005 		ubfx	r5, r5, #1, #1
 1413 007c D560     		str	r5, [r2, #12]
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1414              		.loc 1 1162 0
 1415 007e 0568     		ldr	r5, [r0]
 1416 0080 2544     		add	r5, r5, r4
 1417 0082 6D68     		ldr	r5, [r5, #4]
 1418 0084 05F00F05 		and	r5, r5, #15
 1419 0088 1561     		str	r5, [r2, #16]
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1420              		.loc 1 1163 0
 1421 008a 0568     		ldr	r5, [r0]
 1422 008c 2544     		add	r5, r5, r4
 1423 008e 6D68     		ldr	r5, [r5, #4]
 1424 0090 C5F30725 		ubfx	r5, r5, #8, #8
 1425 0094 9561     		str	r5, [r2, #24]
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1426              		.loc 1 1164 0
 1427 0096 0568     		ldr	r5, [r0]
 1428 0098 2C44     		add	r4, r4, r5
 1429 009a 6468     		ldr	r4, [r4, #4]
 1430 009c 240C     		lsrs	r4, r4, #16
 1431 009e 5461     		str	r4, [r2, #20]
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the data */
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1432              		.loc 1 1167 0
 1433 00a0 0468     		ldr	r4, [r0]
 1434 00a2 0A01     		lsls	r2, r1, #4
 1435              	.LVL139:
 1436 00a4 1444     		add	r4, r4, r2
 1437 00a6 D4F8B841 		ldr	r4, [r4, #440]
 1438 00aa 1C70     		strb	r4, [r3]
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1439              		.loc 1 1168 0
 1440 00ac 0468     		ldr	r4, [r0]
 1441 00ae 1444     		add	r4, r4, r2
 1442 00b0 D4F8B841 		ldr	r4, [r4, #440]
 1443 00b4 C4F30724 		ubfx	r4, r4, #8, #8
 1444 00b8 5C70     		strb	r4, [r3, #1]
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1445              		.loc 1 1169 0
 1446 00ba 0468     		ldr	r4, [r0]
 1447 00bc 1444     		add	r4, r4, r2
 1448 00be D4F8B841 		ldr	r4, [r4, #440]
 1449 00c2 C4F30744 		ubfx	r4, r4, #16, #8
ARM GAS  /tmp/ccfM3gki.s 			page 57


 1450 00c6 9C70     		strb	r4, [r3, #2]
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1451              		.loc 1 1170 0
 1452 00c8 0468     		ldr	r4, [r0]
 1453 00ca 1444     		add	r4, r4, r2
 1454 00cc D4F8B841 		ldr	r4, [r4, #440]
 1455 00d0 240E     		lsrs	r4, r4, #24
 1456 00d2 DC70     		strb	r4, [r3, #3]
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1457              		.loc 1 1171 0
 1458 00d4 0468     		ldr	r4, [r0]
 1459 00d6 1444     		add	r4, r4, r2
 1460 00d8 D4F8BC41 		ldr	r4, [r4, #444]
 1461 00dc 1C71     		strb	r4, [r3, #4]
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1462              		.loc 1 1172 0
 1463 00de 0468     		ldr	r4, [r0]
 1464 00e0 1444     		add	r4, r4, r2
 1465 00e2 D4F8BC41 		ldr	r4, [r4, #444]
 1466 00e6 C4F30724 		ubfx	r4, r4, #8, #8
 1467 00ea 5C71     		strb	r4, [r3, #5]
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1468              		.loc 1 1173 0
 1469 00ec 0468     		ldr	r4, [r0]
 1470 00ee 1444     		add	r4, r4, r2
 1471 00f0 D4F8BC41 		ldr	r4, [r4, #444]
 1472 00f4 C4F30744 		ubfx	r4, r4, #16, #8
 1473 00f8 9C71     		strb	r4, [r3, #6]
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1474              		.loc 1 1174 0
 1475 00fa 0468     		ldr	r4, [r0]
 1476 00fc 2244     		add	r2, r2, r4
 1477 00fe D2F8BC21 		ldr	r2, [r2, #444]
 1478 0102 120E     		lsrs	r2, r2, #24
 1479 0104 DA71     		strb	r2, [r3, #7]
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Release the FIFO */
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1480              		.loc 1 1177 0
 1481 0106 31B9     		cbnz	r1, .L104
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 0 */
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 1482              		.loc 1 1180 0
 1483 0108 0268     		ldr	r2, [r0]
 1484 010a D368     		ldr	r3, [r2, #12]
 1485              	.LVL140:
 1486 010c 43F02003 		orr	r3, r3, #32
 1487 0110 D360     		str	r3, [r2, #12]
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 1 */
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
ARM GAS  /tmp/ccfM3gki.s 			page 58


1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 1488              		.loc 1 1189 0
 1489 0112 0020     		movs	r0, #0
 1490              	.LVL141:
 1491 0114 0BE0     		b	.L101
 1492              	.LVL142:
 1493              	.L104:
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1494              		.loc 1 1185 0
 1495 0116 0268     		ldr	r2, [r0]
 1496 0118 1369     		ldr	r3, [r2, #16]
 1497              	.LVL143:
 1498 011a 43F02003 		orr	r3, r3, #32
 1499 011e 1361     		str	r3, [r2, #16]
 1500              		.loc 1 1189 0
 1501 0120 0020     		movs	r0, #0
 1502              	.LVL144:
 1503 0122 04E0     		b	.L101
 1504              	.LVL145:
 1505              	.L98:
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1506              		.loc 1 1194 0
 1507 0124 436A     		ldr	r3, [r0, #36]
 1508              	.LVL146:
 1509 0126 43F48023 		orr	r3, r3, #262144
 1510 012a 4362     		str	r3, [r0, #36]
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1511              		.loc 1 1196 0
 1512 012c 0120     		movs	r0, #1
 1513              	.LVL147:
 1514              	.L101:
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1515              		.loc 1 1198 0
 1516 012e 30BC     		pop	{r4, r5}
 1517              	.LCFI15:
 1518              		.cfi_restore 5
 1519              		.cfi_restore 4
 1520              		.cfi_def_cfa_offset 0
 1521 0130 7047     		bx	lr
 1522              		.cfi_endproc
 1523              	.LFE79:
 1525 0132 00BF     		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1526              		.align	2
 1527              		.global	HAL_CAN_GetRxFifoFillLevel
 1528              		.thumb
 1529              		.thumb_func
 1531              	HAL_CAN_GetRxFifoFillLevel:
 1532              	.LFB80:
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
ARM GAS  /tmp/ccfM3gki.s 			page 59


1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1533              		.loc 1 1209 0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537              		@ link register save eliminated.
 1538              	.LVL148:
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filllevel = 0U;
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1539              		.loc 1 1211 0
 1540 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1541              	.LVL149:
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1542              		.loc 1 1216 0
 1543 0004 013B     		subs	r3, r3, #1
 1544              	.LVL150:
 1545 0006 DBB2     		uxtb	r3, r3
 1546 0008 012B     		cmp	r3, #1
 1547 000a 0AD8     		bhi	.L109
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
 1548              		.loc 1 1219 0
 1549 000c 21B9     		cbnz	r1, .L108
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 1550              		.loc 1 1221 0
 1551 000e 0368     		ldr	r3, [r0]
 1552 0010 D868     		ldr	r0, [r3, #12]
 1553              	.LVL151:
 1554 0012 00F00300 		and	r0, r0, #3
 1555              	.LVL152:
 1556 0016 7047     		bx	lr
 1557              	.LVL153:
 1558              	.L108:
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 1559              		.loc 1 1225 0
 1560 0018 0368     		ldr	r3, [r0]
 1561 001a 1869     		ldr	r0, [r3, #16]
 1562              	.LVL154:
 1563 001c 00F00300 		and	r0, r0, #3
 1564              	.LVL155:
 1565 0020 7047     		bx	lr
ARM GAS  /tmp/ccfM3gki.s 			page 60


 1566              	.LVL156:
 1567              	.L109:
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1568              		.loc 1 1210 0
 1569 0022 0020     		movs	r0, #0
 1570              	.LVL157:
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Rx FIFO fill level */
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return filllevel;
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1571              		.loc 1 1231 0
 1572 0024 7047     		bx	lr
 1573              		.cfi_endproc
 1574              	.LFE80:
 1576 0026 00BF     		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1577              		.align	2
 1578              		.global	HAL_CAN_ActivateNotification
 1579              		.thumb
 1580              		.thumb_func
 1582              	HAL_CAN_ActivateNotification:
 1583              	.LFB81:
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Interrupts management
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                        ##### Interrupts management #####
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Enable interrupts.
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1584              		.loc 1 1262 0
 1585              		.cfi_startproc
 1586              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccfM3gki.s 			page 61


 1587              		@ frame_needed = 0, uses_anonymous_args = 0
 1588              		@ link register save eliminated.
 1589              	.LVL158:
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1590              		.loc 1 1263 0
 1591 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1592              	.LVL159:
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1593              		.loc 1 1268 0
 1594 0004 013B     		subs	r3, r3, #1
 1595              	.LVL160:
 1596 0006 DBB2     		uxtb	r3, r3
 1597 0008 012B     		cmp	r3, #1
 1598 000a 05D8     		bhi	.L111
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Enable the selected interrupts */
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 1599              		.loc 1 1272 0
 1600 000c 0368     		ldr	r3, [r0]
 1601 000e 5A69     		ldr	r2, [r3, #20]
 1602 0010 1143     		orrs	r1, r1, r2
 1603              	.LVL161:
 1604 0012 5961     		str	r1, [r3, #20]
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 1605              		.loc 1 1275 0
 1606 0014 0020     		movs	r0, #0
 1607              	.LVL162:
 1608 0016 7047     		bx	lr
 1609              	.LVL163:
 1610              	.L111:
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1611              		.loc 1 1280 0
 1612 0018 436A     		ldr	r3, [r0, #36]
 1613 001a 43F48023 		orr	r3, r3, #262144
 1614 001e 4362     		str	r3, [r0, #36]
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1615              		.loc 1 1282 0
 1616 0020 0120     		movs	r0, #1
 1617              	.LVL164:
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1618              		.loc 1 1284 0
 1619 0022 7047     		bx	lr
 1620              		.cfi_endproc
 1621              	.LFE81:
ARM GAS  /tmp/ccfM3gki.s 			page 62


 1623              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 1624              		.align	2
 1625              		.global	HAL_CAN_DeactivateNotification
 1626              		.thumb
 1627              		.thumb_func
 1629              	HAL_CAN_DeactivateNotification:
 1630              	.LFB82:
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Disable interrupts.
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1631              		.loc 1 1295 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
 1636              	.LVL165:
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1637              		.loc 1 1296 0
 1638 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1639              	.LVL166:
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1640              		.loc 1 1301 0
 1641 0004 013B     		subs	r3, r3, #1
 1642              	.LVL167:
 1643 0006 DBB2     		uxtb	r3, r3
 1644 0008 012B     		cmp	r3, #1
 1645 000a 06D8     		bhi	.L114
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Disable the selected interrupts */
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 1646              		.loc 1 1305 0
 1647 000c 0268     		ldr	r2, [r0]
 1648 000e 5369     		ldr	r3, [r2, #20]
 1649 0010 23EA0101 		bic	r1, r3, r1
 1650              	.LVL168:
 1651 0014 5161     		str	r1, [r2, #20]
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 1652              		.loc 1 1308 0
 1653 0016 0020     		movs	r0, #0
 1654              	.LVL169:
 1655 0018 7047     		bx	lr
 1656              	.LVL170:
ARM GAS  /tmp/ccfM3gki.s 			page 63


 1657              	.L114:
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1658              		.loc 1 1313 0
 1659 001a 436A     		ldr	r3, [r0, #36]
 1660 001c 43F48023 		orr	r3, r3, #262144
 1661 0020 4362     		str	r3, [r0, #36]
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1662              		.loc 1 1315 0
 1663 0022 0120     		movs	r0, #1
 1664              	.LVL171:
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1665              		.loc 1 1317 0
 1666 0024 7047     		bx	lr
 1667              		.cfi_endproc
 1668              	.LFE82:
 1670 0026 00BF     		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 1671              		.align	2
 1672              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1673              		.thumb
 1674              		.thumb_func
 1676              	HAL_CAN_TxMailbox0CompleteCallback:
 1677              	.LFB84:
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
ARM GAS  /tmp/ccfM3gki.s 			page 64


1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccfM3gki.s 			page 65


1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
ARM GAS  /tmp/ccfM3gki.s 			page 66


1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
ARM GAS  /tmp/ccfM3gki.s 			page 67


1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep Callback */
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear WakeUp Flag */
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* WakeUp Callback */
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Error interrupts management *********************************************/
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Warning Flag */
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Passive Flag */
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Bus-off Flag */
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
ARM GAS  /tmp/ccfM3gki.s 			page 68


1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Last Error Code Flag */
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_0):
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Stuff error */
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Form error */
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to CRC error */
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           default:
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Clear Last error code Flag */
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Clear ERRI Flag */
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code in handle */
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call Error callback function */
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call weak (surcharged) callback */
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
ARM GAS  /tmp/ccfM3gki.s 			page 69


1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief   CAN Callback functions
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                           ##### Callback functions #####
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides the following callback functions:
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1678              		.loc 1 1672 0
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 0
 1681              		@ frame_needed = 0, uses_anonymous_args = 0
 1682              		@ link register save eliminated.
 1683              	.LVL172:
 1684 0000 7047     		bx	lr
 1685              		.cfi_endproc
 1686              	.LFE84:
 1688 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 1689              		.align	2
 1690              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1691              		.thumb
 1692              		.thumb_func
 1694              	HAL_CAN_TxMailbox1CompleteCallback:
 1695              	.LFB85:
ARM GAS  /tmp/ccfM3gki.s 			page 70


1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1696              		.loc 1 1689 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 1700              		@ link register save eliminated.
 1701              	.LVL173:
 1702 0000 7047     		bx	lr
 1703              		.cfi_endproc
 1704              	.LFE85:
 1706 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1707              		.align	2
 1708              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1709              		.thumb
 1710              		.thumb_func
 1712              	HAL_CAN_TxMailbox2CompleteCallback:
 1713              	.LFB86:
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1714              		.loc 1 1706 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 0
 1717              		@ frame_needed = 0, uses_anonymous_args = 0
 1718              		@ link register save eliminated.
 1719              	.LVL174:
 1720 0000 7047     		bx	lr
ARM GAS  /tmp/ccfM3gki.s 			page 71


 1721              		.cfi_endproc
 1722              	.LFE86:
 1724 0002 00BF     		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 1725              		.align	2
 1726              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1727              		.thumb
 1728              		.thumb_func
 1730              	HAL_CAN_TxMailbox0AbortCallback:
 1731              	.LFB87:
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1732              		.loc 1 1723 0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 0
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
 1736              		@ link register save eliminated.
 1737              	.LVL175:
 1738 0000 7047     		bx	lr
 1739              		.cfi_endproc
 1740              	.LFE87:
 1742 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 1743              		.align	2
 1744              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1745              		.thumb
 1746              		.thumb_func
 1748              	HAL_CAN_TxMailbox1AbortCallback:
 1749              	.LFB88:
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
ARM GAS  /tmp/ccfM3gki.s 			page 72


1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1750              		.loc 1 1740 0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 0
 1753              		@ frame_needed = 0, uses_anonymous_args = 0
 1754              		@ link register save eliminated.
 1755              	.LVL176:
 1756 0000 7047     		bx	lr
 1757              		.cfi_endproc
 1758              	.LFE88:
 1760 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 1761              		.align	2
 1762              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1763              		.thumb
 1764              		.thumb_func
 1766              	HAL_CAN_TxMailbox2AbortCallback:
 1767              	.LFB89:
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1768              		.loc 1 1757 0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 1772              		@ link register save eliminated.
 1773              	.LVL177:
 1774 0000 7047     		bx	lr
 1775              		.cfi_endproc
 1776              	.LFE89:
 1778 0002 00BF     		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1779              		.align	2
 1780              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1781              		.thumb
 1782              		.thumb_func
 1784              	HAL_CAN_RxFifo0MsgPendingCallback:
 1785              	.LFB90:
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
ARM GAS  /tmp/ccfM3gki.s 			page 73


1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1786              		.loc 1 1774 0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 0
 1789              		@ frame_needed = 0, uses_anonymous_args = 0
 1790              		@ link register save eliminated.
 1791              	.LVL178:
 1792 0000 7047     		bx	lr
 1793              		.cfi_endproc
 1794              	.LFE90:
 1796 0002 00BF     		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1797              		.align	2
 1798              		.weak	HAL_CAN_RxFifo0FullCallback
 1799              		.thumb
 1800              		.thumb_func
 1802              	HAL_CAN_RxFifo0FullCallback:
 1803              	.LFB91:
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1804              		.loc 1 1791 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 0
 1807              		@ frame_needed = 0, uses_anonymous_args = 0
 1808              		@ link register save eliminated.
 1809              	.LVL179:
 1810 0000 7047     		bx	lr
 1811              		.cfi_endproc
 1812              	.LFE91:
 1814 0002 00BF     		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 1815              		.align	2
 1816              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 1817              		.thumb
ARM GAS  /tmp/ccfM3gki.s 			page 74


 1818              		.thumb_func
 1820              	HAL_CAN_RxFifo1MsgPendingCallback:
 1821              	.LFB92:
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1822              		.loc 1 1808 0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 1826              		@ link register save eliminated.
 1827              	.LVL180:
 1828 0000 7047     		bx	lr
 1829              		.cfi_endproc
 1830              	.LFE92:
 1832 0002 00BF     		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 1833              		.align	2
 1834              		.weak	HAL_CAN_RxFifo1FullCallback
 1835              		.thumb
 1836              		.thumb_func
 1838              	HAL_CAN_RxFifo1FullCallback:
 1839              	.LFB93:
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1840              		.loc 1 1825 0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 0
 1843              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccfM3gki.s 			page 75


 1844              		@ link register save eliminated.
 1845              	.LVL181:
 1846 0000 7047     		bx	lr
 1847              		.cfi_endproc
 1848              	.LFE93:
 1850 0002 00BF     		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 1851              		.align	2
 1852              		.weak	HAL_CAN_SleepCallback
 1853              		.thumb
 1854              		.thumb_func
 1856              	HAL_CAN_SleepCallback:
 1857              	.LFB94:
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Sleep callback.
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1858              		.loc 1 1842 0
 1859              		.cfi_startproc
 1860              		@ args = 0, pretend = 0, frame = 0
 1861              		@ frame_needed = 0, uses_anonymous_args = 0
 1862              		@ link register save eliminated.
 1863              	.LVL182:
 1864 0000 7047     		bx	lr
 1865              		.cfi_endproc
 1866              	.LFE94:
 1868 0002 00BF     		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 1869              		.align	2
 1870              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 1871              		.thumb
 1872              		.thumb_func
 1874              	HAL_CAN_WakeUpFromRxMsgCallback:
 1875              	.LFB95:
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  /tmp/ccfM3gki.s 			page 76


1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1876              		.loc 1 1858 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 1881              	.LVL183:
 1882 0000 7047     		bx	lr
 1883              		.cfi_endproc
 1884              	.LFE95:
 1886 0002 00BF     		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1887              		.align	2
 1888              		.weak	HAL_CAN_ErrorCallback
 1889              		.thumb
 1890              		.thumb_func
 1892              	HAL_CAN_ErrorCallback:
 1893              	.LFB96:
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Error CAN callback.
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1894              		.loc 1 1875 0
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 0
 1897              		@ frame_needed = 0, uses_anonymous_args = 0
 1898              		@ link register save eliminated.
 1899              	.LVL184:
 1900 0000 7047     		bx	lr
 1901              		.cfi_endproc
 1902              	.LFE96:
 1904 0002 00BF     		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 1905              		.align	2
 1906              		.global	HAL_CAN_IRQHandler
 1907              		.thumb
 1908              		.thumb_func
 1910              	HAL_CAN_IRQHandler:
 1911              	.LFB83:
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1912              		.loc 1 1326 0
 1913              		.cfi_startproc
 1914              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccfM3gki.s 			page 77


 1915              		@ frame_needed = 0, uses_anonymous_args = 0
 1916              	.LVL185:
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1917              		.loc 1 1326 0
 1918 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1919              	.LCFI16:
 1920              		.cfi_def_cfa_offset 40
 1921              		.cfi_offset 3, -40
 1922              		.cfi_offset 4, -36
 1923              		.cfi_offset 5, -32
 1924              		.cfi_offset 6, -28
 1925              		.cfi_offset 7, -24
 1926              		.cfi_offset 8, -20
 1927              		.cfi_offset 9, -16
 1928              		.cfi_offset 10, -12
 1929              		.cfi_offset 11, -8
 1930              		.cfi_offset 14, -4
 1931 0004 0546     		mov	r5, r0
 1932              	.LVL186:
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 1933              		.loc 1 1328 0
 1934 0006 0368     		ldr	r3, [r0]
 1935 0008 5C69     		ldr	r4, [r3, #20]
 1936              	.LVL187:
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 1937              		.loc 1 1329 0
 1938 000a 5F68     		ldr	r7, [r3, #4]
 1939              	.LVL188:
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 1940              		.loc 1 1330 0
 1941 000c 9E68     		ldr	r6, [r3, #8]
 1942              	.LVL189:
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 1943              		.loc 1 1331 0
 1944 000e D3F80C90 		ldr	r9, [r3, #12]
 1945              	.LVL190:
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 1946              		.loc 1 1332 0
 1947 0012 D3F81080 		ldr	r8, [r3, #16]
 1948              	.LVL191:
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1949              		.loc 1 1333 0
 1950 0016 D3F818A0 		ldr	r10, [r3, #24]
 1951              	.LVL192:
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 1952              		.loc 1 1336 0
 1953 001a 14F0010F 		tst	r4, #1
 1954 001e 5AD0     		beq	.L162
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1955              		.loc 1 1339 0
 1956 0020 16F0010F 		tst	r6, #1
 1957 0024 14D0     		beq	.L163
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1958              		.loc 1 1342 0
 1959 0026 0122     		movs	r2, #1
 1960 0028 9A60     		str	r2, [r3, #8]
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
ARM GAS  /tmp/ccfM3gki.s 			page 78


 1961              		.loc 1 1344 0
 1962 002a 16F0020F 		tst	r6, #2
 1963 002e 04D0     		beq	.L132
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1964              		.loc 1 1348 0
 1965 0030 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 1966              	.LVL193:
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 1967              		.loc 1 1327 0
 1968 0034 4FF0000B 		mov	fp, #0
 1969 0038 12E0     		b	.L131
 1970              	.LVL194:
 1971              	.L132:
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 1972              		.loc 1 1352 0
 1973 003a 16F0040F 		tst	r6, #4
 1974 003e 0AD1     		bne	.L164
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 1975              		.loc 1 1357 0
 1976 0040 16F0080F 		tst	r6, #8
 1977 0044 0AD1     		bne	.L165
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 1978              		.loc 1 1366 0
 1979 0046 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 1980              	.LVL195:
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 1981              		.loc 1 1327 0
 1982 004a 4FF0000B 		mov	fp, #0
 1983 004e 07E0     		b	.L131
 1984              	.LVL196:
 1985              	.L163:
 1986 0050 4FF0000B 		mov	fp, #0
 1987 0054 04E0     		b	.L131
 1988              	.L164:
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 1989              		.loc 1 1355 0
 1990 0056 4FF4006B 		mov	fp, #2048
 1991 005a 01E0     		b	.L131
 1992              	.L165:
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 1993              		.loc 1 1360 0
 1994 005c 4FF4805B 		mov	fp, #4096
 1995              	.LVL197:
 1996              	.L131:
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1997              		.loc 1 1372 0
 1998 0060 16F4807F 		tst	r6, #256
 1999 0064 19D0     		beq	.L133
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2000              		.loc 1 1375 0
 2001 0066 2B68     		ldr	r3, [r5]
 2002 0068 4FF48072 		mov	r2, #256
 2003 006c 9A60     		str	r2, [r3, #8]
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2004              		.loc 1 1377 0
 2005 006e 16F4007F 		tst	r6, #512
 2006 0072 03D0     		beq	.L134
ARM GAS  /tmp/ccfM3gki.s 			page 79


1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2007              		.loc 1 1381 0
 2008 0074 2846     		mov	r0, r5
 2009 0076 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2010              	.LVL198:
 2011 007a 0EE0     		b	.L133
 2012              	.L134:
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2013              		.loc 1 1385 0
 2014 007c 16F4806F 		tst	r6, #1024
 2015 0080 02D0     		beq	.L135
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2016              		.loc 1 1388 0
 2017 0082 4BF4005B 		orr	fp, fp, #8192
 2018              	.LVL199:
 2019 0086 08E0     		b	.L133
 2020              	.L135:
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2021              		.loc 1 1390 0
 2022 0088 16F4006F 		tst	r6, #2048
 2023 008c 02D0     		beq	.L136
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2024              		.loc 1 1393 0
 2025 008e 4BF4804B 		orr	fp, fp, #16384
 2026              	.LVL200:
 2027 0092 02E0     		b	.L133
 2028              	.L136:
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2029              		.loc 1 1399 0
 2030 0094 2846     		mov	r0, r5
 2031 0096 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2032              	.LVL201:
 2033              	.L133:
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2034              		.loc 1 1405 0
 2035 009a 16F4803F 		tst	r6, #65536
 2036 009e 1CD0     		beq	.L130
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2037              		.loc 1 1408 0
 2038 00a0 2B68     		ldr	r3, [r5]
 2039 00a2 4FF48032 		mov	r2, #65536
 2040 00a6 9A60     		str	r2, [r3, #8]
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2041              		.loc 1 1410 0
 2042 00a8 16F4003F 		tst	r6, #131072
 2043 00ac 03D0     		beq	.L137
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2044              		.loc 1 1414 0
 2045 00ae 2846     		mov	r0, r5
 2046 00b0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2047              	.LVL202:
 2048 00b4 11E0     		b	.L130
 2049              	.L137:
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2050              		.loc 1 1418 0
 2051 00b6 16F4802F 		tst	r6, #262144
 2052 00ba 02D0     		beq	.L138
ARM GAS  /tmp/ccfM3gki.s 			page 80


1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2053              		.loc 1 1421 0
 2054 00bc 4BF4004B 		orr	fp, fp, #32768
 2055              	.LVL203:
 2056 00c0 0BE0     		b	.L130
 2057              	.L138:
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2058              		.loc 1 1423 0
 2059 00c2 16F4002F 		tst	r6, #524288
 2060 00c6 02D0     		beq	.L139
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2061              		.loc 1 1426 0
 2062 00c8 4BF4803B 		orr	fp, fp, #65536
 2063              	.LVL204:
 2064 00cc 05E0     		b	.L130
 2065              	.L139:
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2066              		.loc 1 1432 0
 2067 00ce 2846     		mov	r0, r5
 2068 00d0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2069              	.LVL205:
 2070 00d4 01E0     		b	.L130
 2071              	.LVL206:
 2072              	.L162:
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2073              		.loc 1 1327 0
 2074 00d6 4FF0000B 		mov	fp, #0
 2075              	.LVL207:
 2076              	.L130:
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2077              		.loc 1 1439 0
 2078 00da 14F0080F 		tst	r4, #8
 2079 00de 07D0     		beq	.L140
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2080              		.loc 1 1441 0
 2081 00e0 19F0100F 		tst	r9, #16
 2082 00e4 04D0     		beq	.L140
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2083              		.loc 1 1444 0
 2084 00e6 4BF4007B 		orr	fp, fp, #512
 2085              	.LVL208:
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2086              		.loc 1 1447 0
 2087 00ea 2B68     		ldr	r3, [r5]
 2088 00ec 1022     		movs	r2, #16
 2089 00ee DA60     		str	r2, [r3, #12]
 2090              	.L140:
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2091              		.loc 1 1452 0
 2092 00f0 14F0040F 		tst	r4, #4
 2093 00f4 08D0     		beq	.L141
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2094              		.loc 1 1454 0
 2095 00f6 19F0080F 		tst	r9, #8
 2096 00fa 05D0     		beq	.L141
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2097              		.loc 1 1457 0
ARM GAS  /tmp/ccfM3gki.s 			page 81


 2098 00fc 2B68     		ldr	r3, [r5]
 2099 00fe 0822     		movs	r2, #8
 2100 0100 DA60     		str	r2, [r3, #12]
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2101              		.loc 1 1461 0
 2102 0102 2846     		mov	r0, r5
 2103 0104 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2104              	.LVL209:
 2105              	.L141:
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2106              		.loc 1 1466 0
 2107 0108 14F0020F 		tst	r4, #2
 2108 010c 07D0     		beq	.L142
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2109              		.loc 1 1469 0
 2110 010e 2B68     		ldr	r3, [r5]
 2111 0110 DB68     		ldr	r3, [r3, #12]
 2112 0112 13F0030F 		tst	r3, #3
 2113 0116 02D0     		beq	.L142
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2114              		.loc 1 1473 0
 2115 0118 2846     		mov	r0, r5
 2116 011a FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2117              	.LVL210:
 2118              	.L142:
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2119              		.loc 1 1478 0
 2120 011e 14F0400F 		tst	r4, #64
 2121 0122 07D0     		beq	.L143
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2122              		.loc 1 1480 0
 2123 0124 18F0100F 		tst	r8, #16
 2124 0128 04D0     		beq	.L143
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2125              		.loc 1 1483 0
 2126 012a 4BF4806B 		orr	fp, fp, #1024
 2127              	.LVL211:
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2128              		.loc 1 1486 0
 2129 012e 2B68     		ldr	r3, [r5]
 2130 0130 1022     		movs	r2, #16
 2131 0132 1A61     		str	r2, [r3, #16]
 2132              	.L143:
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2133              		.loc 1 1491 0
 2134 0134 14F0200F 		tst	r4, #32
 2135 0138 08D0     		beq	.L144
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2136              		.loc 1 1493 0
 2137 013a 18F0080F 		tst	r8, #8
 2138 013e 05D0     		beq	.L144
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2139              		.loc 1 1496 0
 2140 0140 2B68     		ldr	r3, [r5]
 2141 0142 0822     		movs	r2, #8
 2142 0144 1A61     		str	r2, [r3, #16]
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
ARM GAS  /tmp/ccfM3gki.s 			page 82


 2143              		.loc 1 1500 0
 2144 0146 2846     		mov	r0, r5
 2145 0148 FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2146              	.LVL212:
 2147              	.L144:
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2148              		.loc 1 1505 0
 2149 014c 14F0100F 		tst	r4, #16
 2150 0150 07D0     		beq	.L145
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2151              		.loc 1 1508 0
 2152 0152 2B68     		ldr	r3, [r5]
 2153 0154 1B69     		ldr	r3, [r3, #16]
 2154 0156 13F0030F 		tst	r3, #3
 2155 015a 02D0     		beq	.L145
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2156              		.loc 1 1512 0
 2157 015c 2846     		mov	r0, r5
 2158 015e FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2159              	.LVL213:
 2160              	.L145:
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2161              		.loc 1 1517 0
 2162 0162 14F4003F 		tst	r4, #131072
 2163 0166 08D0     		beq	.L146
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2164              		.loc 1 1519 0
 2165 0168 17F0100F 		tst	r7, #16
 2166 016c 05D0     		beq	.L146
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2167              		.loc 1 1522 0
 2168 016e 2B68     		ldr	r3, [r5]
 2169 0170 1022     		movs	r2, #16
 2170 0172 5A60     		str	r2, [r3, #4]
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2171              		.loc 1 1526 0
 2172 0174 2846     		mov	r0, r5
 2173 0176 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2174              	.LVL214:
 2175              	.L146:
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2176              		.loc 1 1531 0
 2177 017a 14F4803F 		tst	r4, #65536
 2178 017e 08D0     		beq	.L147
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2179              		.loc 1 1533 0
 2180 0180 17F0080F 		tst	r7, #8
 2181 0184 05D0     		beq	.L147
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2182              		.loc 1 1536 0
 2183 0186 2B68     		ldr	r3, [r5]
 2184 0188 0822     		movs	r2, #8
 2185 018a 5A60     		str	r2, [r3, #4]
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2186              		.loc 1 1540 0
 2187 018c 2846     		mov	r0, r5
 2188 018e FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
ARM GAS  /tmp/ccfM3gki.s 			page 83


 2189              	.LVL215:
 2190              	.L147:
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2191              		.loc 1 1545 0
 2192 0192 14F4004F 		tst	r4, #32768
 2193 0196 4ED0     		beq	.L148
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2194              		.loc 1 1547 0
 2195 0198 17F0040F 		tst	r7, #4
 2196 019c 48D0     		beq	.L149
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2197              		.loc 1 1550 0
 2198 019e 14F4807F 		tst	r4, #256
 2199 01a2 04D0     		beq	.L150
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2200              		.loc 1 1550 0 is_stmt 0 discriminator 1
 2201 01a4 1AF0010F 		tst	r10, #1
 2202 01a8 01D0     		beq	.L150
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2203              		.loc 1 1554 0 is_stmt 1
 2204 01aa 4BF0010B 		orr	fp, fp, #1
 2205              	.LVL216:
 2206              	.L150:
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2207              		.loc 1 1560 0
 2208 01ae 14F4007F 		tst	r4, #512
 2209 01b2 04D0     		beq	.L151
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2210              		.loc 1 1560 0 is_stmt 0 discriminator 1
 2211 01b4 1AF0020F 		tst	r10, #2
 2212 01b8 01D0     		beq	.L151
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2213              		.loc 1 1564 0 is_stmt 1
 2214 01ba 4BF0020B 		orr	fp, fp, #2
 2215              	.LVL217:
 2216              	.L151:
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2217              		.loc 1 1570 0
 2218 01be 14F4806F 		tst	r4, #1024
 2219 01c2 04D0     		beq	.L152
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2220              		.loc 1 1570 0 is_stmt 0 discriminator 1
 2221 01c4 1AF0040F 		tst	r10, #4
 2222 01c8 01D0     		beq	.L152
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2223              		.loc 1 1574 0 is_stmt 1
 2224 01ca 4BF0040B 		orr	fp, fp, #4
 2225              	.LVL218:
 2226              	.L152:
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2227              		.loc 1 1580 0
 2228 01ce 14F4006F 		tst	r4, #2048
 2229 01d2 2DD0     		beq	.L149
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2230              		.loc 1 1580 0 is_stmt 0 discriminator 1
 2231 01d4 1AF0700A 		ands	r10, r10, #112
 2232              	.LVL219:
ARM GAS  /tmp/ccfM3gki.s 			page 84


 2233 01d8 2AD0     		beq	.L149
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2234              		.loc 1 1583 0 is_stmt 1
 2235 01da BAF1300F 		cmp	r10, #48
 2236 01de 17D0     		beq	.L154
 2237 01e0 06D8     		bhi	.L155
 2238 01e2 BAF1100F 		cmp	r10, #16
 2239 01e6 0DD0     		beq	.L156
 2240 01e8 BAF1200F 		cmp	r10, #32
 2241 01ec 0DD0     		beq	.L157
 2242 01ee 1AE0     		b	.L153
 2243              	.L155:
 2244 01f0 BAF1500F 		cmp	r10, #80
 2245 01f4 12D0     		beq	.L158
 2246 01f6 BAF1600F 		cmp	r10, #96
 2247 01fa 12D0     		beq	.L159
 2248 01fc BAF1400F 		cmp	r10, #64
 2249 0200 11D1     		bne	.L153
 2250 0202 08E0     		b	.L160
 2251              	.L156:
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2252              		.loc 1 1587 0
 2253 0204 4BF0080B 		orr	fp, fp, #8
 2254              	.LVL220:
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2255              		.loc 1 1588 0
 2256 0208 0DE0     		b	.L153
 2257              	.L157:
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2258              		.loc 1 1591 0
 2259 020a 4BF0100B 		orr	fp, fp, #16
 2260              	.LVL221:
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2261              		.loc 1 1592 0
 2262 020e 0AE0     		b	.L153
 2263              	.L154:
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2264              		.loc 1 1595 0
 2265 0210 4BF0200B 		orr	fp, fp, #32
 2266              	.LVL222:
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2267              		.loc 1 1596 0
 2268 0214 07E0     		b	.L153
 2269              	.L160:
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2270              		.loc 1 1599 0
 2271 0216 4BF0400B 		orr	fp, fp, #64
 2272              	.LVL223:
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2273              		.loc 1 1600 0
 2274 021a 04E0     		b	.L153
 2275              	.L158:
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2276              		.loc 1 1603 0
 2277 021c 4BF0800B 		orr	fp, fp, #128
 2278              	.LVL224:
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
ARM GAS  /tmp/ccfM3gki.s 			page 85


 2279              		.loc 1 1604 0
 2280 0220 01E0     		b	.L153
 2281              	.L159:
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2282              		.loc 1 1607 0
 2283 0222 4BF4807B 		orr	fp, fp, #256
 2284              	.LVL225:
 2285              	.L153:
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2286              		.loc 1 1614 0
 2287 0226 2A68     		ldr	r2, [r5]
 2288 0228 9369     		ldr	r3, [r2, #24]
 2289 022a 23F07003 		bic	r3, r3, #112
 2290 022e 9361     		str	r3, [r2, #24]
 2291              	.L149:
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2292              		.loc 1 1619 0
 2293 0230 2B68     		ldr	r3, [r5]
 2294 0232 0422     		movs	r2, #4
 2295 0234 5A60     		str	r2, [r3, #4]
 2296              	.L148:
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2297              		.loc 1 1623 0
 2298 0236 BBF1000F 		cmp	fp, #0
 2299 023a 06D0     		beq	.L129
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2300              		.loc 1 1626 0
 2301 023c 6B6A     		ldr	r3, [r5, #36]
 2302 023e 4BEA0303 		orr	r3, fp, r3
 2303 0242 6B62     		str	r3, [r5, #36]
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2304              		.loc 1 1630 0
 2305 0244 2846     		mov	r0, r5
 2306 0246 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2307              	.LVL226:
 2308              	.L129:
 2309 024a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2310              		.cfi_endproc
 2311              	.LFE83:
 2313 024e 00BF     		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2314              		.align	2
 2315              		.global	HAL_CAN_GetState
 2316              		.thumb
 2317              		.thumb_func
 2319              	HAL_CAN_GetState:
 2320              	.LFB97:
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
ARM GAS  /tmp/ccfM3gki.s 			page 86


1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             ##### Peripheral State and Error functions #####
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides functions allowing to :
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN state.
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL state
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2321              		.loc 1 1912 0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 0
 2324              		@ frame_needed = 0, uses_anonymous_args = 0
 2325              		@ link register save eliminated.
 2326              	.LVL227:
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2327              		.loc 1 1913 0
 2328 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2329 0004 DBB2     		uxtb	r3, r3
 2330              	.LVL228:
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2331              		.loc 1 1915 0
 2332 0006 5A1E     		subs	r2, r3, #1
 2333 0008 D2B2     		uxtb	r2, r2
 2334 000a 012A     		cmp	r2, #1
 2335 000c 0CD8     		bhi	.L168
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 2336              		.loc 1 1919 0
 2337 000e 0268     		ldr	r2, [r0]
 2338 0010 5168     		ldr	r1, [r2, #4]
 2339 0012 11F0020F 		tst	r1, #2
 2340 0016 04D1     		bne	.L169
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode is active */
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
ARM GAS  /tmp/ccfM3gki.s 			page 87


1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode request flag */
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 2341              		.loc 1 1925 0
 2342 0018 1268     		ldr	r2, [r2]
 2343 001a 12F0020F 		tst	r2, #2
 2344 001e 02D1     		bne	.L170
 2345 0020 02E0     		b	.L168
 2346              	.L169:
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2347              		.loc 1 1922 0
 2348 0022 0423     		movs	r3, #4
 2349              	.LVL229:
 2350 0024 00E0     		b	.L168
 2351              	.LVL230:
 2352              	.L170:
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode request is pending */
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
 2353              		.loc 1 1928 0
 2354 0026 0323     		movs	r3, #3
 2355              	.LVL231:
 2356              	.L168:
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN state */
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return state;
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2357              		.loc 1 1938 0
 2358 0028 1846     		mov	r0, r3
 2359              	.LVL232:
 2360 002a 7047     		bx	lr
 2361              		.cfi_endproc
 2362              	.LFE97:
 2364              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2365              		.align	2
 2366              		.global	HAL_CAN_GetError
 2367              		.thumb
 2368              		.thumb_func
 2370              	HAL_CAN_GetError:
 2371              	.LFB98:
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN error code.
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval CAN Error Code
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2372              		.loc 1 1947 0
 2373              		.cfi_startproc
 2374              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccfM3gki.s 			page 88


 2375              		@ frame_needed = 0, uses_anonymous_args = 0
 2376              		@ link register save eliminated.
 2377              	.LVL233:
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN error code */
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return hcan->ErrorCode;
 2378              		.loc 1 1949 0
 2379 0000 406A     		ldr	r0, [r0, #36]
 2380              	.LVL234:
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2381              		.loc 1 1950 0
 2382 0002 7047     		bx	lr
 2383              		.cfi_endproc
 2384              	.LFE98:
 2386              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2387              		.align	2
 2388              		.global	HAL_CAN_ResetError
 2389              		.thumb
 2390              		.thumb_func
 2392              	HAL_CAN_ResetError:
 2393              	.LFB99:
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Reset the CAN error code.
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2394              		.loc 1 1959 0
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 0
 2397              		@ frame_needed = 0, uses_anonymous_args = 0
 2398              		@ link register save eliminated.
 2399              	.LVL235:
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2400              		.loc 1 1961 0
 2401 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2402              	.LVL236:
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2403              		.loc 1 1963 0
 2404 0004 013B     		subs	r3, r3, #1
 2405              	.LVL237:
 2406 0006 DBB2     		uxtb	r3, r3
 2407 0008 012B     		cmp	r3, #1
 2408 000a 03D8     		bhi	.L173
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset CAN error code */
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = 0U;
 2409              		.loc 1 1967 0
 2410 000c 0023     		movs	r3, #0
 2411 000e 4362     		str	r3, [r0, #36]
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2412              		.loc 1 1960 0
ARM GAS  /tmp/ccfM3gki.s 			page 89


 2413 0010 1846     		mov	r0, r3
 2414              	.LVL238:
 2415 0012 7047     		bx	lr
 2416              	.LVL239:
 2417              	.L173:
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2418              		.loc 1 1972 0
 2419 0014 436A     		ldr	r3, [r0, #36]
 2420 0016 43F48023 		orr	r3, r3, #262144
 2421 001a 4362     		str	r3, [r0, #36]
 2422              	.LVL240:
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status = HAL_ERROR;
 2423              		.loc 1 1974 0
 2424 001c 0120     		movs	r0, #1
 2425              	.LVL241:
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the status */
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2426              		.loc 1 1979 0
 2427 001e 7047     		bx	lr
 2428              		.cfi_endproc
 2429              	.LFE99:
 2431              		.text
 2432              	.Letext0:
 2433              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 2434              		.file 4 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 2435              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2436              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2437              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2438              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 2439              		.file 9 "Drivers/CMSIS/Include/core_cm3.h"
 2440              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccfM3gki.s 			page 90


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal_can.c
     /tmp/ccfM3gki.s:20     .text.HAL_CAN_MspInit:00000000 $t
     /tmp/ccfM3gki.s:25     .text.HAL_CAN_MspInit:00000000 HAL_CAN_MspInit
     /tmp/ccfM3gki.s:39     .text.HAL_CAN_Init:00000000 $t
     /tmp/ccfM3gki.s:44     .text.HAL_CAN_Init:00000000 HAL_CAN_Init
     /tmp/ccfM3gki.s:281    .text.HAL_CAN_MspDeInit:00000000 $t
     /tmp/ccfM3gki.s:286    .text.HAL_CAN_MspDeInit:00000000 HAL_CAN_MspDeInit
     /tmp/ccfM3gki.s:299    .text.HAL_CAN_ConfigFilter:00000000 $t
     /tmp/ccfM3gki.s:304    .text.HAL_CAN_ConfigFilter:00000000 HAL_CAN_ConfigFilter
     /tmp/ccfM3gki.s:490    .text.HAL_CAN_Start:00000000 $t
     /tmp/ccfM3gki.s:495    .text.HAL_CAN_Start:00000000 HAL_CAN_Start
     /tmp/ccfM3gki.s:575    .text.HAL_CAN_Stop:00000000 $t
     /tmp/ccfM3gki.s:580    .text.HAL_CAN_Stop:00000000 HAL_CAN_Stop
     /tmp/ccfM3gki.s:662    .text.HAL_CAN_DeInit:00000000 $t
     /tmp/ccfM3gki.s:667    .text.HAL_CAN_DeInit:00000000 HAL_CAN_DeInit
     /tmp/ccfM3gki.s:716    .text.HAL_CAN_RequestSleep:00000000 $t
     /tmp/ccfM3gki.s:721    .text.HAL_CAN_RequestSleep:00000000 HAL_CAN_RequestSleep
     /tmp/ccfM3gki.s:762    .text.HAL_CAN_WakeUp:00000000 $t
     /tmp/ccfM3gki.s:767    .text.HAL_CAN_WakeUp:00000000 HAL_CAN_WakeUp
     /tmp/ccfM3gki.s:844    .text.HAL_CAN_WakeUp:00000054 $d
     /tmp/ccfM3gki.s:849    .text.HAL_CAN_IsSleepActive:00000000 $t
     /tmp/ccfM3gki.s:854    .text.HAL_CAN_IsSleepActive:00000000 HAL_CAN_IsSleepActive
     /tmp/ccfM3gki.s:896    .text.HAL_CAN_AddTxMessage:00000000 $t
     /tmp/ccfM3gki.s:901    .text.HAL_CAN_AddTxMessage:00000000 HAL_CAN_AddTxMessage
     /tmp/ccfM3gki.s:1072   .text.HAL_CAN_AbortTxRequest:00000000 $t
     /tmp/ccfM3gki.s:1077   .text.HAL_CAN_AbortTxRequest:00000000 HAL_CAN_AbortTxRequest
     /tmp/ccfM3gki.s:1145   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 $t
     /tmp/ccfM3gki.s:1150   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccfM3gki.s:1210   .text.HAL_CAN_IsTxMessagePending:00000000 $t
     /tmp/ccfM3gki.s:1215   .text.HAL_CAN_IsTxMessagePending:00000000 HAL_CAN_IsTxMessagePending
     /tmp/ccfM3gki.s:1259   .text.HAL_CAN_GetTxTimestamp:00000000 $t
     /tmp/ccfM3gki.s:1264   .text.HAL_CAN_GetTxTimestamp:00000000 HAL_CAN_GetTxTimestamp
     /tmp/ccfM3gki.s:1320   .text.HAL_CAN_GetRxMessage:00000000 $t
     /tmp/ccfM3gki.s:1325   .text.HAL_CAN_GetRxMessage:00000000 HAL_CAN_GetRxMessage
     /tmp/ccfM3gki.s:1526   .text.HAL_CAN_GetRxFifoFillLevel:00000000 $t
     /tmp/ccfM3gki.s:1531   .text.HAL_CAN_GetRxFifoFillLevel:00000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccfM3gki.s:1577   .text.HAL_CAN_ActivateNotification:00000000 $t
     /tmp/ccfM3gki.s:1582   .text.HAL_CAN_ActivateNotification:00000000 HAL_CAN_ActivateNotification
     /tmp/ccfM3gki.s:1624   .text.HAL_CAN_DeactivateNotification:00000000 $t
     /tmp/ccfM3gki.s:1629   .text.HAL_CAN_DeactivateNotification:00000000 HAL_CAN_DeactivateNotification
     /tmp/ccfM3gki.s:1671   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 $t
     /tmp/ccfM3gki.s:1676   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccfM3gki.s:1689   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 $t
     /tmp/ccfM3gki.s:1694   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccfM3gki.s:1707   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 $t
     /tmp/ccfM3gki.s:1712   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccfM3gki.s:1725   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 $t
     /tmp/ccfM3gki.s:1730   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccfM3gki.s:1743   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 $t
     /tmp/ccfM3gki.s:1748   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccfM3gki.s:1761   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 $t
     /tmp/ccfM3gki.s:1766   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccfM3gki.s:1779   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
     /tmp/ccfM3gki.s:1784   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccfM3gki.s:1797   .text.HAL_CAN_RxFifo0FullCallback:00000000 $t
     /tmp/ccfM3gki.s:1802   .text.HAL_CAN_RxFifo0FullCallback:00000000 HAL_CAN_RxFifo0FullCallback
ARM GAS  /tmp/ccfM3gki.s 			page 91


     /tmp/ccfM3gki.s:1815   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 $t
     /tmp/ccfM3gki.s:1820   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccfM3gki.s:1833   .text.HAL_CAN_RxFifo1FullCallback:00000000 $t
     /tmp/ccfM3gki.s:1838   .text.HAL_CAN_RxFifo1FullCallback:00000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccfM3gki.s:1851   .text.HAL_CAN_SleepCallback:00000000 $t
     /tmp/ccfM3gki.s:1856   .text.HAL_CAN_SleepCallback:00000000 HAL_CAN_SleepCallback
     /tmp/ccfM3gki.s:1869   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 $t
     /tmp/ccfM3gki.s:1874   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccfM3gki.s:1887   .text.HAL_CAN_ErrorCallback:00000000 $t
     /tmp/ccfM3gki.s:1892   .text.HAL_CAN_ErrorCallback:00000000 HAL_CAN_ErrorCallback
     /tmp/ccfM3gki.s:1905   .text.HAL_CAN_IRQHandler:00000000 $t
     /tmp/ccfM3gki.s:1910   .text.HAL_CAN_IRQHandler:00000000 HAL_CAN_IRQHandler
     /tmp/ccfM3gki.s:2314   .text.HAL_CAN_GetState:00000000 $t
     /tmp/ccfM3gki.s:2319   .text.HAL_CAN_GetState:00000000 HAL_CAN_GetState
     /tmp/ccfM3gki.s:2365   .text.HAL_CAN_GetError:00000000 $t
     /tmp/ccfM3gki.s:2370   .text.HAL_CAN_GetError:00000000 HAL_CAN_GetError
     /tmp/ccfM3gki.s:2387   .text.HAL_CAN_ResetError:00000000 $t
     /tmp/ccfM3gki.s:2392   .text.HAL_CAN_ResetError:00000000 HAL_CAN_ResetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
