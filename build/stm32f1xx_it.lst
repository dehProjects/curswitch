ARM GAS  /tmp/ccXPsoPc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	2
  21              		.global	NMI_Handler
  22              		.thumb
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB69:
  27              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   *
   8:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2019 STMicroelectronics
   9:Src/stm32f1xx_it.c ****   *
  10:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  11:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  12:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  13:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  14:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  15:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  16:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  17:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  18:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  19:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  20:Src/stm32f1xx_it.c ****   *
  21:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  24:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  25:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  26:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  27:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  28:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  29:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  30:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:Src/stm32f1xx_it.c ****   *
ARM GAS  /tmp/ccXPsoPc.s 			page 2


  32:Src/stm32f1xx_it.c ****   ******************************************************************************
  33:Src/stm32f1xx_it.c ****   */
  34:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  35:Src/stm32f1xx_it.c **** 
  36:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  37:Src/stm32f1xx_it.c **** #include "main.h"
  38:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  39:Src/stm32f1xx_it.c **** #include "cmsis_os.h"
  40:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  41:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  42:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  43:Src/stm32f1xx_it.c **** 
  44:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  45:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  46:Src/stm32f1xx_it.c **** 
  47:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  48:Src/stm32f1xx_it.c **** 
  49:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  50:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  51:Src/stm32f1xx_it.c ****  
  52:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  53:Src/stm32f1xx_it.c **** 
  54:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  55:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  56:Src/stm32f1xx_it.c **** 
  57:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  58:Src/stm32f1xx_it.c **** 
  59:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  60:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  61:Src/stm32f1xx_it.c **** 
  62:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  63:Src/stm32f1xx_it.c **** 
  64:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  65:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  66:Src/stm32f1xx_it.c **** 
  67:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  68:Src/stm32f1xx_it.c **** 
  69:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  70:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  71:Src/stm32f1xx_it.c **** 
  72:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  73:Src/stm32f1xx_it.c **** 
  74:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  75:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc1;
  76:Src/stm32f1xx_it.c **** extern CAN_HandleTypeDef hcan;
  77:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  78:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_tx;
  79:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart1;
  80:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart3;
  81:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim2;
  82:Src/stm32f1xx_it.c **** 
  83:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  84:Src/stm32f1xx_it.c **** 
  85:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  86:Src/stm32f1xx_it.c **** 
  87:Src/stm32f1xx_it.c **** /******************************************************************************/
  88:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
ARM GAS  /tmp/ccXPsoPc.s 			page 3


  89:Src/stm32f1xx_it.c **** /******************************************************************************/
  90:Src/stm32f1xx_it.c **** /**
  91:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  92:Src/stm32f1xx_it.c ****   */
  93:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  94:Src/stm32f1xx_it.c **** {
  28              		.loc 1 94 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE69:
  37 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	2
  39              		.global	HardFault_Handler
  40              		.thumb
  41              		.thumb_func
  43              	HardFault_Handler:
  44              	.LFB70:
  95:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  96:Src/stm32f1xx_it.c **** 
  97:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  98:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  99:Src/stm32f1xx_it.c **** 
 100:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
 101:Src/stm32f1xx_it.c **** }
 102:Src/stm32f1xx_it.c **** 
 103:Src/stm32f1xx_it.c **** /**
 104:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
 105:Src/stm32f1xx_it.c ****   */
 106:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
 107:Src/stm32f1xx_it.c **** {
  45              		.loc 1 107 0
  46              		.cfi_startproc
  47              		@ Volatile: function does not return.
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.L3:
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE70:
  56 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  57              		.align	2
  58              		.global	MemManage_Handler
  59              		.thumb
  60              		.thumb_func
  62              	MemManage_Handler:
  63              	.LFB71:
 108:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 109:Src/stm32f1xx_it.c **** 
 110:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 111:Src/stm32f1xx_it.c ****   while (1)
 112:Src/stm32f1xx_it.c ****   {
 113:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
ARM GAS  /tmp/ccXPsoPc.s 			page 4


 114:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 115:Src/stm32f1xx_it.c ****   }
 116:Src/stm32f1xx_it.c **** }
 117:Src/stm32f1xx_it.c **** 
 118:Src/stm32f1xx_it.c **** /**
 119:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 120:Src/stm32f1xx_it.c ****   */
 121:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 122:Src/stm32f1xx_it.c **** {
  64              		.loc 1 122 0
  65              		.cfi_startproc
  66              		@ Volatile: function does not return.
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.L5:
  71 0000 FEE7     		b	.L5
  72              		.cfi_endproc
  73              	.LFE71:
  75 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  76              		.align	2
  77              		.global	BusFault_Handler
  78              		.thumb
  79              		.thumb_func
  81              	BusFault_Handler:
  82              	.LFB72:
 123:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 124:Src/stm32f1xx_it.c **** 
 125:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 126:Src/stm32f1xx_it.c ****   while (1)
 127:Src/stm32f1xx_it.c ****   {
 128:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 129:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 130:Src/stm32f1xx_it.c ****   }
 131:Src/stm32f1xx_it.c **** }
 132:Src/stm32f1xx_it.c **** 
 133:Src/stm32f1xx_it.c **** /**
 134:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 135:Src/stm32f1xx_it.c ****   */
 136:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 137:Src/stm32f1xx_it.c **** {
  83              		.loc 1 137 0
  84              		.cfi_startproc
  85              		@ Volatile: function does not return.
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.L7:
  90 0000 FEE7     		b	.L7
  91              		.cfi_endproc
  92              	.LFE72:
  94 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  95              		.align	2
  96              		.global	UsageFault_Handler
  97              		.thumb
  98              		.thumb_func
 100              	UsageFault_Handler:
ARM GAS  /tmp/ccXPsoPc.s 			page 5


 101              	.LFB73:
 138:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 139:Src/stm32f1xx_it.c **** 
 140:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 141:Src/stm32f1xx_it.c ****   while (1)
 142:Src/stm32f1xx_it.c ****   {
 143:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 144:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 145:Src/stm32f1xx_it.c ****   }
 146:Src/stm32f1xx_it.c **** }
 147:Src/stm32f1xx_it.c **** 
 148:Src/stm32f1xx_it.c **** /**
 149:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 150:Src/stm32f1xx_it.c ****   */
 151:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 152:Src/stm32f1xx_it.c **** {
 102              		.loc 1 152 0
 103              		.cfi_startproc
 104              		@ Volatile: function does not return.
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108              	.L9:
 109 0000 FEE7     		b	.L9
 110              		.cfi_endproc
 111              	.LFE73:
 113 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 114              		.align	2
 115              		.global	DebugMon_Handler
 116              		.thumb
 117              		.thumb_func
 119              	DebugMon_Handler:
 120              	.LFB74:
 153:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 154:Src/stm32f1xx_it.c **** 
 155:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 156:Src/stm32f1xx_it.c ****   while (1)
 157:Src/stm32f1xx_it.c ****   {
 158:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 159:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 160:Src/stm32f1xx_it.c ****   }
 161:Src/stm32f1xx_it.c **** }
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c **** /**
 164:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 165:Src/stm32f1xx_it.c ****   */
 166:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 167:Src/stm32f1xx_it.c **** {
 121              		.loc 1 167 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 7047     		bx	lr
 127              		.cfi_endproc
 128              	.LFE74:
 130 0002 00BF     		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccXPsoPc.s 			page 6


 131              		.align	2
 132              		.global	DMA1_Channel1_IRQHandler
 133              		.thumb
 134              		.thumb_func
 136              	DMA1_Channel1_IRQHandler:
 137              	.LFB75:
 168:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 169:Src/stm32f1xx_it.c **** 
 170:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 171:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 172:Src/stm32f1xx_it.c **** 
 173:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 174:Src/stm32f1xx_it.c **** }
 175:Src/stm32f1xx_it.c **** 
 176:Src/stm32f1xx_it.c **** /******************************************************************************/
 177:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 178:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 179:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 180:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 181:Src/stm32f1xx_it.c **** /******************************************************************************/
 182:Src/stm32f1xx_it.c **** 
 183:Src/stm32f1xx_it.c **** /**
 184:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel1 global interrupt.
 185:Src/stm32f1xx_it.c ****   */
 186:Src/stm32f1xx_it.c **** void DMA1_Channel1_IRQHandler(void)
 187:Src/stm32f1xx_it.c **** {
 138              		.loc 1 187 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		.loc 1 187 0
 143 0000 08B5     		push	{r3, lr}
 144              	.LCFI0:
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 3, -8
 147              		.cfi_offset 14, -4
 188:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
 189:Src/stm32f1xx_it.c **** 
 190:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 0 */
 191:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc1);
 148              		.loc 1 191 0
 149 0002 0248     		ldr	r0, .L13
 150 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 151              	.LVL0:
 152 0008 08BD     		pop	{r3, pc}
 153              	.L14:
 154 000a 00BF     		.align	2
 155              	.L13:
 156 000c 00000000 		.word	hdma_adc1
 157              		.cfi_endproc
 158              	.LFE75:
 160              		.section	.text.DMA1_Channel4_IRQHandler,"ax",%progbits
 161              		.align	2
 162              		.global	DMA1_Channel4_IRQHandler
 163              		.thumb
 164              		.thumb_func
 166              	DMA1_Channel4_IRQHandler:
ARM GAS  /tmp/ccXPsoPc.s 			page 7


 167              	.LFB76:
 192:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 193:Src/stm32f1xx_it.c **** 
 194:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 1 */
 195:Src/stm32f1xx_it.c **** }
 196:Src/stm32f1xx_it.c **** 
 197:Src/stm32f1xx_it.c **** /**
 198:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel4 global interrupt.
 199:Src/stm32f1xx_it.c ****   */
 200:Src/stm32f1xx_it.c **** void DMA1_Channel4_IRQHandler(void)
 201:Src/stm32f1xx_it.c **** {
 168              		.loc 1 201 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172 0000 08B5     		push	{r3, lr}
 173              	.LCFI1:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 3, -8
 176              		.cfi_offset 14, -4
 202:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 203:Src/stm32f1xx_it.c **** 
 204:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 205:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_tx);
 177              		.loc 1 205 0
 178 0002 0248     		ldr	r0, .L17
 179 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 180              	.LVL1:
 181 0008 08BD     		pop	{r3, pc}
 182              	.L18:
 183 000a 00BF     		.align	2
 184              	.L17:
 185 000c 00000000 		.word	hdma_usart1_tx
 186              		.cfi_endproc
 187              	.LFE76:
 189              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 190              		.align	2
 191              		.global	DMA1_Channel5_IRQHandler
 192              		.thumb
 193              		.thumb_func
 195              	DMA1_Channel5_IRQHandler:
 196              	.LFB77:
 206:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 207:Src/stm32f1xx_it.c **** 
 208:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 209:Src/stm32f1xx_it.c **** }
 210:Src/stm32f1xx_it.c **** 
 211:Src/stm32f1xx_it.c **** /**
 212:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel5 global interrupt.
 213:Src/stm32f1xx_it.c ****   */
 214:Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 215:Src/stm32f1xx_it.c **** {
 197              		.loc 1 215 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccXPsoPc.s 			page 8


 202              	.LCFI2:
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 3, -8
 205              		.cfi_offset 14, -4
 216:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 217:Src/stm32f1xx_it.c **** 
 218:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 219:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 206              		.loc 1 219 0
 207 0002 0248     		ldr	r0, .L21
 208 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 209              	.LVL2:
 210 0008 08BD     		pop	{r3, pc}
 211              	.L22:
 212 000a 00BF     		.align	2
 213              	.L21:
 214 000c 00000000 		.word	hdma_usart1_rx
 215              		.cfi_endproc
 216              	.LFE77:
 218              		.section	.text.USB_HP_CAN1_TX_IRQHandler,"ax",%progbits
 219              		.align	2
 220              		.global	USB_HP_CAN1_TX_IRQHandler
 221              		.thumb
 222              		.thumb_func
 224              	USB_HP_CAN1_TX_IRQHandler:
 225              	.LFB78:
 220:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 221:Src/stm32f1xx_it.c **** 
 222:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 223:Src/stm32f1xx_it.c **** }
 224:Src/stm32f1xx_it.c **** 
 225:Src/stm32f1xx_it.c **** /**
 226:Src/stm32f1xx_it.c ****   * @brief This function handles USB high priority or CAN TX interrupts.
 227:Src/stm32f1xx_it.c ****   */
 228:Src/stm32f1xx_it.c **** void USB_HP_CAN1_TX_IRQHandler(void)
 229:Src/stm32f1xx_it.c **** {
 226              		.loc 1 229 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI3:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
 230:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */
 231:Src/stm32f1xx_it.c **** 
 232:Src/stm32f1xx_it.c ****   /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
 233:Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 235              		.loc 1 233 0
 236 0002 0248     		ldr	r0, .L25
 237 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 238              	.LVL3:
 239 0008 08BD     		pop	{r3, pc}
 240              	.L26:
 241 000a 00BF     		.align	2
 242              	.L25:
ARM GAS  /tmp/ccXPsoPc.s 			page 9


 243 000c 00000000 		.word	hcan
 244              		.cfi_endproc
 245              	.LFE78:
 247              		.section	.text.USB_LP_CAN1_RX0_IRQHandler,"ax",%progbits
 248              		.align	2
 249              		.global	USB_LP_CAN1_RX0_IRQHandler
 250              		.thumb
 251              		.thumb_func
 253              	USB_LP_CAN1_RX0_IRQHandler:
 254              	.LFB79:
 234:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */
 235:Src/stm32f1xx_it.c **** 
 236:Src/stm32f1xx_it.c ****   /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
 237:Src/stm32f1xx_it.c **** }
 238:Src/stm32f1xx_it.c **** 
 239:Src/stm32f1xx_it.c **** /**
 240:Src/stm32f1xx_it.c ****   * @brief This function handles USB low priority or CAN RX0 interrupts.
 241:Src/stm32f1xx_it.c ****   */
 242:Src/stm32f1xx_it.c **** void USB_LP_CAN1_RX0_IRQHandler(void)
 243:Src/stm32f1xx_it.c **** {
 255              		.loc 1 243 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259 0000 08B5     		push	{r3, lr}
 260              	.LCFI4:
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 3, -8
 263              		.cfi_offset 14, -4
 244:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
 245:Src/stm32f1xx_it.c **** 
 246:Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
 247:Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 264              		.loc 1 247 0
 265 0002 0248     		ldr	r0, .L29
 266 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 267              	.LVL4:
 268 0008 08BD     		pop	{r3, pc}
 269              	.L30:
 270 000a 00BF     		.align	2
 271              	.L29:
 272 000c 00000000 		.word	hcan
 273              		.cfi_endproc
 274              	.LFE79:
 276              		.section	.text.CAN1_RX1_IRQHandler,"ax",%progbits
 277              		.align	2
 278              		.global	CAN1_RX1_IRQHandler
 279              		.thumb
 280              		.thumb_func
 282              	CAN1_RX1_IRQHandler:
 283              	.LFB80:
 248:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
 249:Src/stm32f1xx_it.c **** 
 250:Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
 251:Src/stm32f1xx_it.c **** }
 252:Src/stm32f1xx_it.c **** 
 253:Src/stm32f1xx_it.c **** /**
ARM GAS  /tmp/ccXPsoPc.s 			page 10


 254:Src/stm32f1xx_it.c ****   * @brief This function handles CAN RX1 interrupt.
 255:Src/stm32f1xx_it.c ****   */
 256:Src/stm32f1xx_it.c **** void CAN1_RX1_IRQHandler(void)
 257:Src/stm32f1xx_it.c **** {
 284              		.loc 1 257 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288 0000 08B5     		push	{r3, lr}
 289              	.LCFI5:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 3, -8
 292              		.cfi_offset 14, -4
 258:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
 259:Src/stm32f1xx_it.c **** 
 260:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 0 */
 261:Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 293              		.loc 1 261 0
 294 0002 0248     		ldr	r0, .L33
 295 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 296              	.LVL5:
 297 0008 08BD     		pop	{r3, pc}
 298              	.L34:
 299 000a 00BF     		.align	2
 300              	.L33:
 301 000c 00000000 		.word	hcan
 302              		.cfi_endproc
 303              	.LFE80:
 305              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 306              		.align	2
 307              		.global	TIM2_IRQHandler
 308              		.thumb
 309              		.thumb_func
 311              	TIM2_IRQHandler:
 312              	.LFB81:
 262:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
 263:Src/stm32f1xx_it.c **** 
 264:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 1 */
 265:Src/stm32f1xx_it.c **** }
 266:Src/stm32f1xx_it.c **** 
 267:Src/stm32f1xx_it.c **** /**
 268:Src/stm32f1xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 269:Src/stm32f1xx_it.c ****   */
 270:Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
 271:Src/stm32f1xx_it.c **** {
 313              		.loc 1 271 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317 0000 08B5     		push	{r3, lr}
 318              	.LCFI6:
 319              		.cfi_def_cfa_offset 8
 320              		.cfi_offset 3, -8
 321              		.cfi_offset 14, -4
 272:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 273:Src/stm32f1xx_it.c **** 
 274:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
ARM GAS  /tmp/ccXPsoPc.s 			page 11


 275:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 322              		.loc 1 275 0
 323 0002 0248     		ldr	r0, .L37
 324 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 325              	.LVL6:
 326 0008 08BD     		pop	{r3, pc}
 327              	.L38:
 328 000a 00BF     		.align	2
 329              	.L37:
 330 000c 00000000 		.word	htim2
 331              		.cfi_endproc
 332              	.LFE81:
 334              		.section	.text.USART1_IRQHandler,"ax",%progbits
 335              		.align	2
 336              		.global	USART1_IRQHandler
 337              		.thumb
 338              		.thumb_func
 340              	USART1_IRQHandler:
 341              	.LFB82:
 276:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 277:Src/stm32f1xx_it.c **** 
 278:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 279:Src/stm32f1xx_it.c **** }
 280:Src/stm32f1xx_it.c **** 
 281:Src/stm32f1xx_it.c **** /**
 282:Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 283:Src/stm32f1xx_it.c ****   */
 284:Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 285:Src/stm32f1xx_it.c **** {
 342              		.loc 1 285 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346 0000 08B5     		push	{r3, lr}
 347              	.LCFI7:
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 3, -8
 350              		.cfi_offset 14, -4
 286:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 287:Src/stm32f1xx_it.c **** 
 288:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 289:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 351              		.loc 1 289 0
 352 0002 0248     		ldr	r0, .L41
 353 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 354              	.LVL7:
 355 0008 08BD     		pop	{r3, pc}
 356              	.L42:
 357 000a 00BF     		.align	2
 358              	.L41:
 359 000c 00000000 		.word	huart1
 360              		.cfi_endproc
 361              	.LFE82:
 363              		.section	.text.USART3_IRQHandler,"ax",%progbits
 364              		.align	2
 365              		.global	USART3_IRQHandler
 366              		.thumb
ARM GAS  /tmp/ccXPsoPc.s 			page 12


 367              		.thumb_func
 369              	USART3_IRQHandler:
 370              	.LFB83:
 290:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 291:Src/stm32f1xx_it.c **** 
 292:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 293:Src/stm32f1xx_it.c **** }
 294:Src/stm32f1xx_it.c **** 
 295:Src/stm32f1xx_it.c **** /**
 296:Src/stm32f1xx_it.c ****   * @brief This function handles USART3 global interrupt.
 297:Src/stm32f1xx_it.c ****   */
 298:Src/stm32f1xx_it.c **** void USART3_IRQHandler(void)
 299:Src/stm32f1xx_it.c **** {
 371              		.loc 1 299 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375 0000 08B5     		push	{r3, lr}
 376              	.LCFI8:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 3, -8
 379              		.cfi_offset 14, -4
 300:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART3_IRQn 0 */
 301:Src/stm32f1xx_it.c **** 
 302:Src/stm32f1xx_it.c ****   /* USER CODE END USART3_IRQn 0 */
 303:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart3);
 380              		.loc 1 303 0
 381 0002 0248     		ldr	r0, .L45
 382 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 383              	.LVL8:
 384 0008 08BD     		pop	{r3, pc}
 385              	.L46:
 386 000a 00BF     		.align	2
 387              	.L45:
 388 000c 00000000 		.word	huart3
 389              		.cfi_endproc
 390              	.LFE83:
 392              		.text
 393              	.Letext0:
 394              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 395              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 396              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 397              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 398              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 399              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 400              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 401              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 402              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 403              		.file 11 "Drivers/CMSIS/Include/core_cm3.h"
ARM GAS  /tmp/ccXPsoPc.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_it.c
     /tmp/ccXPsoPc.s:20     .text.NMI_Handler:00000000 $t
     /tmp/ccXPsoPc.s:25     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/ccXPsoPc.s:38     .text.HardFault_Handler:00000000 $t
     /tmp/ccXPsoPc.s:43     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccXPsoPc.s:57     .text.MemManage_Handler:00000000 $t
     /tmp/ccXPsoPc.s:62     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/ccXPsoPc.s:76     .text.BusFault_Handler:00000000 $t
     /tmp/ccXPsoPc.s:81     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/ccXPsoPc.s:95     .text.UsageFault_Handler:00000000 $t
     /tmp/ccXPsoPc.s:100    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/ccXPsoPc.s:114    .text.DebugMon_Handler:00000000 $t
     /tmp/ccXPsoPc.s:119    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/ccXPsoPc.s:131    .text.DMA1_Channel1_IRQHandler:00000000 $t
     /tmp/ccXPsoPc.s:136    .text.DMA1_Channel1_IRQHandler:00000000 DMA1_Channel1_IRQHandler
     /tmp/ccXPsoPc.s:156    .text.DMA1_Channel1_IRQHandler:0000000c $d
     /tmp/ccXPsoPc.s:161    .text.DMA1_Channel4_IRQHandler:00000000 $t
     /tmp/ccXPsoPc.s:166    .text.DMA1_Channel4_IRQHandler:00000000 DMA1_Channel4_IRQHandler
     /tmp/ccXPsoPc.s:185    .text.DMA1_Channel4_IRQHandler:0000000c $d
     /tmp/ccXPsoPc.s:190    .text.DMA1_Channel5_IRQHandler:00000000 $t
     /tmp/ccXPsoPc.s:195    .text.DMA1_Channel5_IRQHandler:00000000 DMA1_Channel5_IRQHandler
     /tmp/ccXPsoPc.s:214    .text.DMA1_Channel5_IRQHandler:0000000c $d
     /tmp/ccXPsoPc.s:219    .text.USB_HP_CAN1_TX_IRQHandler:00000000 $t
     /tmp/ccXPsoPc.s:224    .text.USB_HP_CAN1_TX_IRQHandler:00000000 USB_HP_CAN1_TX_IRQHandler
     /tmp/ccXPsoPc.s:243    .text.USB_HP_CAN1_TX_IRQHandler:0000000c $d
     /tmp/ccXPsoPc.s:248    .text.USB_LP_CAN1_RX0_IRQHandler:00000000 $t
     /tmp/ccXPsoPc.s:253    .text.USB_LP_CAN1_RX0_IRQHandler:00000000 USB_LP_CAN1_RX0_IRQHandler
     /tmp/ccXPsoPc.s:272    .text.USB_LP_CAN1_RX0_IRQHandler:0000000c $d
     /tmp/ccXPsoPc.s:277    .text.CAN1_RX1_IRQHandler:00000000 $t
     /tmp/ccXPsoPc.s:282    .text.CAN1_RX1_IRQHandler:00000000 CAN1_RX1_IRQHandler
     /tmp/ccXPsoPc.s:301    .text.CAN1_RX1_IRQHandler:0000000c $d
     /tmp/ccXPsoPc.s:306    .text.TIM2_IRQHandler:00000000 $t
     /tmp/ccXPsoPc.s:311    .text.TIM2_IRQHandler:00000000 TIM2_IRQHandler
     /tmp/ccXPsoPc.s:330    .text.TIM2_IRQHandler:0000000c $d
     /tmp/ccXPsoPc.s:335    .text.USART1_IRQHandler:00000000 $t
     /tmp/ccXPsoPc.s:340    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/ccXPsoPc.s:359    .text.USART1_IRQHandler:0000000c $d
     /tmp/ccXPsoPc.s:364    .text.USART3_IRQHandler:00000000 $t
     /tmp/ccXPsoPc.s:369    .text.USART3_IRQHandler:00000000 USART3_IRQHandler
     /tmp/ccXPsoPc.s:388    .text.USART3_IRQHandler:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_DMA_IRQHandler
hdma_adc1
hdma_usart1_tx
hdma_usart1_rx
HAL_CAN_IRQHandler
hcan
HAL_TIM_IRQHandler
htim2
HAL_UART_IRQHandler
huart1
huart3
