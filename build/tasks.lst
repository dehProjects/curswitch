ARM GAS  /tmp/cciitH1F.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvTaskIsTaskSuspended:
  25              	.LFB15:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /tmp/cciitH1F.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  /tmp/cciitH1F.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
ARM GAS  /tmp/cciitH1F.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
ARM GAS  /tmp/cciitH1F.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
ARM GAS  /tmp/cciitH1F.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
ARM GAS  /tmp/cciitH1F.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
ARM GAS  /tmp/cciitH1F.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/cciitH1F.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  /tmp/cciitH1F.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/cciitH1F.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  /tmp/cciitH1F.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  /tmp/cciitH1F.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  /tmp/cciitH1F.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  /tmp/cciitH1F.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciitH1F.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cciitH1F.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
ARM GAS  /tmp/cciitH1F.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cciitH1F.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
ARM GAS  /tmp/cciitH1F.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
ARM GAS  /tmp/cciitH1F.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cciitH1F.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
ARM GAS  /tmp/cciitH1F.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/cciitH1F.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  /tmp/cciitH1F.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
ARM GAS  /tmp/cciitH1F.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cciitH1F.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cciitH1F.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cciitH1F.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
ARM GAS  /tmp/cciitH1F.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1657 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1665 0
  34 0000 0246     		mov	r2, r0
  35 0002 40B9     		cbnz	r0, .L2
  36              	.LBB102:
  37              	.LBB103:
  38              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/cciitH1F.s 			page 31


   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
ARM GAS  /tmp/cciitH1F.s 			page 32


  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
ARM GAS  /tmp/cciitH1F.s 			page 33


 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/cciitH1F.s 			page 34


 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/cciitH1F.s 			page 35


 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
  39              		.loc 2 237 0
  40              		.syntax unified
  41              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
  42 0004 4FF05003 			mov r3, #80												
  43 0008 83F31188 		msr basepri, r3											
  44 000c BFF36F8F 		isb														
  45 0010 BFF34F8F 		dsb														
  46              	
  47              	@ 0 "" 2
  48              	.LVL1:
  49              		.thumb
  50              		.syntax unified
  51              	.L3:
  52 0014 FEE7     		b	.L3
  53              	.L2:
  54              	.LBE103:
  55              	.LBE102:
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  56              		.loc 1 1668 0
  57 0016 4169     		ldr	r1, [r0, #20]
  58 0018 0A4B     		ldr	r3, .L12
  59 001a 9942     		cmp	r1, r3
  60 001c 01D1     		bne	.L7
  61 001e 0123     		movs	r3, #1
  62 0020 00E0     		b	.L4
  63              	.L7:
  64 0022 0023     		movs	r3, #0
  65              	.L4:
  66              		.loc 1 1668 0 is_stmt 0 discriminator 4
  67 0024 43B1     		cbz	r3, .L8
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  68              		.loc 1 1671 0 is_stmt 1
  69 0026 926A     		ldr	r2, [r2, #40]
  70 0028 0749     		ldr	r1, .L12+4
  71 002a 8A42     		cmp	r2, r1
  72 002c 06D0     		beq	.L9
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  73              		.loc 1 1675 0
  74 002e 02B1     		cbz	r2, .L6
  75 0030 0023     		movs	r3, #0
  76              	.L6:
  77              		.loc 1 1675 0 is_stmt 0 discriminator 4
  78 0032 2BB9     		cbnz	r3, .L11
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  79              		.loc 1 1658 0 is_stmt 1
  80 0034 0020     		movs	r0, #0
  81              	.LVL2:
  82 0036 7047     		bx	lr
  83              	.LVL3:
ARM GAS  /tmp/cciitH1F.s 			page 36


  84              	.L8:
  85 0038 0020     		movs	r0, #0
  86              	.LVL4:
  87 003a 7047     		bx	lr
  88              	.LVL5:
  89              	.L9:
  90 003c 0020     		movs	r0, #0
  91              	.LVL6:
  92 003e 7047     		bx	lr
  93              	.LVL7:
  94              	.L11:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  95              		.loc 1 1677 0
  96 0040 0120     		movs	r0, #1
  97              	.LVL8:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  98              		.loc 1 1695 0
  99 0042 7047     		bx	lr
 100              	.L13:
 101              		.align	2
 102              	.L12:
 103 0044 00000000 		.word	.LANCHOR0
 104 0048 00000000 		.word	.LANCHOR1
 105              		.cfi_endproc
 106              	.LFE15:
 108              		.section	.text.prvSearchForNameWithinSingleList,"ax",%progbits
 109              		.align	2
 110              		.thumb
 111              		.thumb_func
 113              	prvSearchForNameWithinSingleList:
 114              	.LFB26:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cciitH1F.s 			page 37


1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/cciitH1F.s 			page 38


1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cciitH1F.s 			page 39


1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/cciitH1F.s 			page 40


1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cciitH1F.s 			page 41


1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
ARM GAS  /tmp/cciitH1F.s 			page 42


1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/cciitH1F.s 			page 43


2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cciitH1F.s 			page 44


2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
ARM GAS  /tmp/cciitH1F.s 			page 45


2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 115              		.loc 1 2196 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              	.LVL9:
 120 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 121              	.LCFI0:
 122              		.cfi_def_cfa_offset 20
 123              		.cfi_offset 4, -20
 124              		.cfi_offset 5, -16
 125              		.cfi_offset 6, -12
 126              		.cfi_offset 7, -8
 127              		.cfi_offset 14, -4
 128              	.LVL10:
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciitH1F.s 			page 46


2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 129              		.loc 1 2203 0
 130 0002 0368     		ldr	r3, [r0]
 131 0004 3BB3     		cbz	r3, .L22
 132              	.LVL11:
 133              	.LBB104:
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 134              		.loc 1 2205 0
 135 0006 4368     		ldr	r3, [r0, #4]
 136 0008 5B68     		ldr	r3, [r3, #4]
 137 000a 4360     		str	r3, [r0, #4]
 138 000c 00F10807 		add	r7, r0, #8
 139 0010 BB42     		cmp	r3, r7
 140 0012 01D1     		bne	.L16
 141              		.loc 1 2205 0 is_stmt 0 discriminator 1
 142 0014 5B68     		ldr	r3, [r3, #4]
 143 0016 4360     		str	r3, [r0, #4]
 144              	.L16:
 145              		.loc 1 2205 0 discriminator 3
 146 0018 4368     		ldr	r3, [r0, #4]
 147 001a D3F80CE0 		ldr	lr, [r3, #12]
 148              	.LVL12:
 149              	.LBE104:
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 150              		.loc 1 2197 0 is_stmt 1 discriminator 3
 151 001e 0026     		movs	r6, #0
 152              	.LVL13:
 153              	.L21:
 154              	.LBB105:
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 155              		.loc 1 2209 0
 156 0020 4368     		ldr	r3, [r0, #4]
 157 0022 5B68     		ldr	r3, [r3, #4]
 158 0024 4360     		str	r3, [r0, #4]
 159 0026 9F42     		cmp	r7, r3
 160 0028 01D1     		bne	.L17
 161              		.loc 1 2209 0 is_stmt 0 discriminator 1
 162 002a 5B68     		ldr	r3, [r3, #4]
 163 002c 4360     		str	r3, [r0, #4]
 164              	.L17:
 165              		.loc 1 2209 0 discriminator 3
 166 002e 4368     		ldr	r3, [r0, #4]
 167 0030 DD68     		ldr	r5, [r3, #12]
 168              	.LVL14:
 169              	.LBE105:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 170              		.loc 1 2213 0 is_stmt 1 discriminator 3
 171 0032 0023     		movs	r3, #0
 172 0034 07E0     		b	.L18
 173              	.LVL15:
ARM GAS  /tmp/cciitH1F.s 			page 47


 174              	.L20:
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
 175              		.loc 1 2215 0
 176 0036 EA18     		adds	r2, r5, r3
 177 0038 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 178              	.LVL16:
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
 179              		.loc 1 2217 0
 180 003c CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2
 181 003e A242     		cmp	r2, r4
 182 0040 05D1     		bne	.L19
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
 183              		.loc 1 2222 0
 184 0042 1AB1     		cbz	r2, .L23
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 185              		.loc 1 2213 0 discriminator 2
 186 0044 0133     		adds	r3, r3, #1
 187              	.LVL17:
 188              	.L18:
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 189              		.loc 1 2213 0 is_stmt 0 discriminator 1
 190 0046 0F2B     		cmp	r3, #15
 191 0048 F5D9     		bls	.L20
 192 004a 00E0     		b	.L19
 193              	.LVL18:
 194              	.L23:
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
 195              		.loc 1 2226 0 is_stmt 1
 196 004c 2E46     		mov	r6, r5
 197              	.LVL19:
 198              	.L19:
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
 199              		.loc 1 2235 0
 200 004e 1EB9     		cbnz	r6, .L15
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
ARM GAS  /tmp/cciitH1F.s 			page 48


 201              		.loc 1 2241 0
 202 0050 AE45     		cmp	lr, r5
 203 0052 E5D1     		bne	.L21
 204 0054 00E0     		b	.L15
 205              	.LVL20:
 206              	.L22:
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
 207              		.loc 1 2197 0
 208 0056 0026     		movs	r6, #0
 209              	.LVL21:
 210              	.L15:
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 211              		.loc 1 2249 0
 212 0058 3046     		mov	r0, r6
 213              	.LVL22:
 214 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 215              		.cfi_endproc
 216              	.LFE26:
 218              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 219              		.align	2
 220              		.thumb
 221              		.thumb_func
 223              	prvTaskCheckFreeStackSpace:
 224              	.LFB41:
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/cciitH1F.s 			page 49


2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
ARM GAS  /tmp/cciitH1F.s 			page 50


2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciitH1F.s 			page 51


2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
ARM GAS  /tmp/cciitH1F.s 			page 52


2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
ARM GAS  /tmp/cciitH1F.s 			page 53


2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
ARM GAS  /tmp/cciitH1F.s 			page 54


2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
ARM GAS  /tmp/cciitH1F.s 			page 55


2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cciitH1F.s 			page 56


2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
ARM GAS  /tmp/cciitH1F.s 			page 57


2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
ARM GAS  /tmp/cciitH1F.s 			page 58


2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
ARM GAS  /tmp/cciitH1F.s 			page 59


2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
ARM GAS  /tmp/cciitH1F.s 			page 60


2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/cciitH1F.s 			page 61


2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cciitH1F.s 			page 62


3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/cciitH1F.s 			page 63


3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  /tmp/cciitH1F.s 			page 64


3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cciitH1F.s 			page 65


3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
ARM GAS  /tmp/cciitH1F.s 			page 66


3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
ARM GAS  /tmp/cciitH1F.s 			page 67


3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
ARM GAS  /tmp/cciitH1F.s 			page 68


3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
ARM GAS  /tmp/cciitH1F.s 			page 69


3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
ARM GAS  /tmp/cciitH1F.s 			page 70


3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cciitH1F.s 			page 71


3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 225              		.loc 1 3534 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230              	.LVL23:
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 231              		.loc 1 3535 0
 232 0000 0023     		movs	r3, #0
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 233              		.loc 1 3537 0
 234 0002 01E0     		b	.L26
 235              	.LVL24:
 236              	.L27:
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 237              		.loc 1 3539 0
 238 0004 0130     		adds	r0, r0, #1
 239              	.LVL25:
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 240              		.loc 1 3540 0
 241 0006 0133     		adds	r3, r3, #1
 242              	.LVL26:
 243              	.L26:
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 244              		.loc 1 3537 0
 245 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 246 000a A52A     		cmp	r2, #165
 247 000c FAD0     		beq	.L27
 248              	.LVL27:
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 249              		.loc 1 3546 0
 250 000e C3F38F00 		ubfx	r0, r3, #2, #16
 251              	.LVL28:
 252 0012 7047     		bx	lr
 253              		.cfi_endproc
 254              	.LFE41:
 256              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 257              		.align	2
 258              		.thumb
 259              		.thumb_func
 261              	prvResetNextTaskUnblockTime:
 262              	.LFB44:
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cciitH1F.s 			page 72


3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
ARM GAS  /tmp/cciitH1F.s 			page 73


3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 263              		.loc 1 3636 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 268              		.loc 1 3639 0
 269 0000 0A4B     		ldr	r3, .L33
 270 0002 1B68     		ldr	r3, [r3]
 271 0004 1B68     		ldr	r3, [r3]
 272 0006 0BB9     		cbnz	r3, .L32
 273 0008 0123     		movs	r3, #1
 274 000a 00E0     		b	.L29
 275              	.L32:
 276 000c 0023     		movs	r3, #0
 277              	.L29:
 278              		.loc 1 3639 0 is_stmt 0 discriminator 4
 279 000e 23B1     		cbz	r3, .L30
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 280              		.loc 1 3645 0 is_stmt 1
ARM GAS  /tmp/cciitH1F.s 			page 74


 281 0010 4FF0FF32 		mov	r2, #-1
 282 0014 064B     		ldr	r3, .L33+4
 283 0016 1A60     		str	r2, [r3]
 284 0018 7047     		bx	lr
 285              	.L30:
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 286              		.loc 1 3653 0
 287 001a 044B     		ldr	r3, .L33
 288 001c 1B68     		ldr	r3, [r3]
 289 001e DB68     		ldr	r3, [r3, #12]
 290 0020 DB68     		ldr	r3, [r3, #12]
 291              	.LVL29:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 292              		.loc 1 3654 0
 293 0022 5A68     		ldr	r2, [r3, #4]
 294 0024 024B     		ldr	r3, .L33+4
 295              	.LVL30:
 296 0026 1A60     		str	r2, [r3]
 297 0028 7047     		bx	lr
 298              	.L34:
 299 002a 00BF     		.align	2
 300              	.L33:
 301 002c 00000000 		.word	.LANCHOR2
 302 0030 00000000 		.word	.LANCHOR3
 303              		.cfi_endproc
 304              	.LFE44:
 306              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 307              		.align	2
 308              		.thumb
 309              		.thumb_func
 311              	prvInitialiseNewTask:
 312              	.LFB7:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 313              		.loc 1 775 0
 314              		.cfi_startproc
 315              		@ args = 16, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              	.LVL31:
 318 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 319              	.LCFI1:
 320              		.cfi_def_cfa_offset 32
 321              		.cfi_offset 4, -32
 322              		.cfi_offset 5, -28
 323              		.cfi_offset 6, -24
 324              		.cfi_offset 7, -20
 325              		.cfi_offset 8, -16
 326              		.cfi_offset 9, -12
 327              		.cfi_offset 10, -8
 328              		.cfi_offset 14, -4
 329 0004 8146     		mov	r9, r0
ARM GAS  /tmp/cciitH1F.s 			page 75


 330 0006 0D46     		mov	r5, r1
 331 0008 1746     		mov	r7, r2
 332 000a 9A46     		mov	r10, r3
 333 000c 089E     		ldr	r6, [sp, #32]
 334 000e DDF82480 		ldr	r8, [sp, #36]
 335 0012 0A9C     		ldr	r4, [sp, #40]
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 336              		.loc 1 797 0
 337 0014 9200     		lsls	r2, r2, #2
 338              	.LVL32:
 339 0016 A521     		movs	r1, #165
 340              	.LVL33:
 341 0018 206B     		ldr	r0, [r4, #48]
 342              	.LVL34:
 343 001a FFF7FEFF 		bl	memset
 344              	.LVL35:
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 345              		.loc 1 807 0
 346 001e 236B     		ldr	r3, [r4, #48]
 347 0020 07F18042 		add	r2, r7, #1073741824
 348 0024 013A     		subs	r2, r2, #1
 349 0026 03EB8207 		add	r7, r3, r2, lsl #2
 350              	.LVL36:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 351              		.loc 1 808 0
 352 002a 27F00707 		bic	r7, r7, #7
 353              	.LVL37:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 354              		.loc 1 827 0
 355 002e 0023     		movs	r3, #0
 356 0030 06E0     		b	.L36
 357              	.LVL38:
 358              	.L38:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359              		.loc 1 829 0
 360 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 361 0034 E218     		adds	r2, r4, r3
 362 0036 82F83410 		strb	r1, [r2, #52]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 363              		.loc 1 834 0
 364 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 365 003c 12B1     		cbz	r2, .L37
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 366              		.loc 1 827 0 discriminator 2
 367 003e 0133     		adds	r3, r3, #1
 368              	.LVL39:
 369              	.L36:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 370              		.loc 1 827 0 is_stmt 0 discriminator 1
 371 0040 0F2B     		cmp	r3, #15
 372 0042 F6D9     		bls	.L38
 373              	.L37:
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374              		.loc 1 846 0 is_stmt 1
 375 0044 0023     		movs	r3, #0
 376              	.LVL40:
 377 0046 84F84330 		strb	r3, [r4, #67]
ARM GAS  /tmp/cciitH1F.s 			page 76


 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 378              		.loc 1 850 0
 379 004a 062E     		cmp	r6, #6
 380 004c 00D9     		bls	.L39
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 381              		.loc 1 852 0
 382 004e 0626     		movs	r6, #6
 383              	.L39:
 384              	.LVL41:
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 385              		.loc 1 859 0
 386 0050 E662     		str	r6, [r4, #44]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 387              		.loc 1 862 0
 388 0052 6664     		str	r6, [r4, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 389              		.loc 1 863 0
 390 0054 0025     		movs	r5, #0
 391              	.LVL42:
 392 0056 A564     		str	r5, [r4, #72]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 393              		.loc 1 867 0
 394 0058 201D     		adds	r0, r4, #4
 395 005a FFF7FEFF 		bl	vListInitialiseItem
 396              	.LVL43:
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397              		.loc 1 868 0
 398 005e 04F11800 		add	r0, r4, #24
 399 0062 FFF7FEFF 		bl	vListInitialiseItem
 400              	.LVL44:
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401              		.loc 1 872 0
 402 0066 2461     		str	r4, [r4, #16]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 403              		.loc 1 875 0
 404 0068 C6F10706 		rsb	r6, r6, #7
 405              	.LVL45:
 406 006c A661     		str	r6, [r4, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407              		.loc 1 876 0
 408 006e 6462     		str	r4, [r4, #36]
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 409              		.loc 1 918 0
 410 0070 E564     		str	r5, [r4, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 411              		.loc 1 919 0
 412 0072 84F85050 		strb	r5, [r4, #80]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 413              		.loc 1 946 0
 414 0076 5246     		mov	r2, r10
 415 0078 4946     		mov	r1, r9
 416 007a 3846     		mov	r0, r7
 417 007c FFF7FEFF 		bl	pxPortInitialiseStack
 418              	.LVL46:
 419 0080 2060     		str	r0, [r4]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 420              		.loc 1 950 0
ARM GAS  /tmp/cciitH1F.s 			page 77


 421 0082 B8F1000F 		cmp	r8, #0
 422 0086 01D0     		beq	.L35
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 423              		.loc 1 954 0
 424 0088 C8F80040 		str	r4, [r8]
 425              	.L35:
 426 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 427              		.cfi_endproc
 428              	.LFE7:
 430              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 431              		.align	2
 432              		.thumb
 433              		.thumb_func
 435              	prvInitialiseTaskLists:
 436              	.LFB39:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 437              		.loc 1 3334 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441 0000 38B5     		push	{r3, r4, r5, lr}
 442              	.LCFI2:
 443              		.cfi_def_cfa_offset 16
 444              		.cfi_offset 3, -16
 445              		.cfi_offset 4, -12
 446              		.cfi_offset 5, -8
 447              		.cfi_offset 14, -4
 448              	.LVL47:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 449              		.loc 1 3337 0
 450 0002 0024     		movs	r4, #0
 451 0004 07E0     		b	.L44
 452              	.LVL48:
 453              	.L45:
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 454              		.loc 1 3339 0 discriminator 3
 455 0006 04EB8402 		add	r2, r4, r4, lsl #2
 456 000a 9300     		lsls	r3, r2, #2
 457 000c 0E48     		ldr	r0, .L47
 458 000e 1844     		add	r0, r0, r3
 459 0010 FFF7FEFF 		bl	vListInitialise
 460              	.LVL49:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 461              		.loc 1 3337 0 discriminator 3
 462 0014 0134     		adds	r4, r4, #1
 463              	.LVL50:
 464              	.L44:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 465              		.loc 1 3337 0 is_stmt 0 discriminator 1
 466 0016 062C     		cmp	r4, #6
 467 0018 F5D9     		bls	.L45
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 468              		.loc 1 3342 0 is_stmt 1
 469 001a 0C4D     		ldr	r5, .L47+4
 470 001c 2846     		mov	r0, r5
 471 001e FFF7FEFF 		bl	vListInitialise
 472              	.LVL51:
ARM GAS  /tmp/cciitH1F.s 			page 78


3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 473              		.loc 1 3343 0
 474 0022 0B4C     		ldr	r4, .L47+8
 475              	.LVL52:
 476 0024 2046     		mov	r0, r4
 477 0026 FFF7FEFF 		bl	vListInitialise
 478              	.LVL53:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 479              		.loc 1 3344 0
 480 002a 0A48     		ldr	r0, .L47+12
 481 002c FFF7FEFF 		bl	vListInitialise
 482              	.LVL54:
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 483              		.loc 1 3348 0
 484 0030 0948     		ldr	r0, .L47+16
 485 0032 FFF7FEFF 		bl	vListInitialise
 486              	.LVL55:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 487              		.loc 1 3354 0
 488 0036 0948     		ldr	r0, .L47+20
 489 0038 FFF7FEFF 		bl	vListInitialise
 490              	.LVL56:
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 491              		.loc 1 3360 0
 492 003c 084B     		ldr	r3, .L47+24
 493 003e 1D60     		str	r5, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 494              		.loc 1 3361 0
 495 0040 084B     		ldr	r3, .L47+28
 496 0042 1C60     		str	r4, [r3]
 497 0044 38BD     		pop	{r3, r4, r5, pc}
 498              	.L48:
 499 0046 00BF     		.align	2
 500              	.L47:
 501 0048 00000000 		.word	.LANCHOR4
 502 004c 00000000 		.word	.LANCHOR5
 503 0050 00000000 		.word	.LANCHOR6
 504 0054 00000000 		.word	.LANCHOR1
 505 0058 00000000 		.word	.LANCHOR7
 506 005c 00000000 		.word	.LANCHOR0
 507 0060 00000000 		.word	.LANCHOR2
 508 0064 00000000 		.word	.LANCHOR8
 509              		.cfi_endproc
 510              	.LFE39:
 512              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 513              		.align	2
 514              		.thumb
 515              		.thumb_func
 517              	prvAddNewTaskToReadyList:
 518              	.LFB8:
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 519              		.loc 1 964 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              	.LVL57:
 524 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cciitH1F.s 			page 79


 525              	.LCFI3:
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 4, -8
 528              		.cfi_offset 14, -4
 529 0002 0446     		mov	r4, r0
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 530              		.loc 1 967 0
 531 0004 FFF7FEFF 		bl	vPortEnterCritical
 532              	.LVL58:
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 533              		.loc 1 969 0
 534 0008 204A     		ldr	r2, .L54
 535 000a 1368     		ldr	r3, [r2]
 536 000c 0133     		adds	r3, r3, #1
 537 000e 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 538              		.loc 1 970 0
 539 0010 1F4B     		ldr	r3, .L54+4
 540 0012 1B68     		ldr	r3, [r3]
 541 0014 3BB9     		cbnz	r3, .L50
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542              		.loc 1 974 0
 543 0016 1E4B     		ldr	r3, .L54+4
 544 0018 1C60     		str	r4, [r3]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 545              		.loc 1 976 0
 546 001a 1368     		ldr	r3, [r2]
 547 001c 012B     		cmp	r3, #1
 548 001e 0DD1     		bne	.L51
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 549              		.loc 1 981 0
 550 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 551              	.LVL59:
 552 0024 0AE0     		b	.L51
 553              	.L50:
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 554              		.loc 1 993 0
 555 0026 1B4B     		ldr	r3, .L54+8
 556 0028 1B68     		ldr	r3, [r3]
 557 002a 3BB9     		cbnz	r3, .L51
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 558              		.loc 1 995 0
 559 002c 184B     		ldr	r3, .L54+4
 560 002e 1B68     		ldr	r3, [r3]
 561 0030 DA6A     		ldr	r2, [r3, #44]
 562 0032 E36A     		ldr	r3, [r4, #44]
 563 0034 9A42     		cmp	r2, r3
 564 0036 01D8     		bhi	.L51
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 565              		.loc 1 997 0
 566 0038 154B     		ldr	r3, .L54+4
 567 003a 1C60     		str	r4, [r3]
 568              	.L51:
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569              		.loc 1 1010 0
 570 003c 164A     		ldr	r2, .L54+12
 571 003e 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cciitH1F.s 			page 80


 572 0040 0133     		adds	r3, r3, #1
 573 0042 1360     		str	r3, [r2]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574              		.loc 1 1020 0
 575 0044 E36A     		ldr	r3, [r4, #44]
 576 0046 0122     		movs	r2, #1
 577 0048 02FA03F1 		lsl	r1, r2, r3
 578 004c 1348     		ldr	r0, .L54+16
 579 004e 0268     		ldr	r2, [r0]
 580 0050 0A43     		orrs	r2, r2, r1
 581 0052 0260     		str	r2, [r0]
 582 0054 03EB8303 		add	r3, r3, r3, lsl #2
 583 0058 9A00     		lsls	r2, r3, #2
 584 005a 211D     		adds	r1, r4, #4
 585 005c 1048     		ldr	r0, .L54+20
 586 005e 1044     		add	r0, r0, r2
 587 0060 FFF7FEFF 		bl	vListInsertEnd
 588              	.LVL60:
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589              		.loc 1 1024 0
 590 0064 FFF7FEFF 		bl	vPortExitCritical
 591              	.LVL61:
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 592              		.loc 1 1026 0
 593 0068 0A4B     		ldr	r3, .L54+8
 594 006a 1B68     		ldr	r3, [r3]
 595 006c 6BB1     		cbz	r3, .L49
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 596              		.loc 1 1030 0
 597 006e 084B     		ldr	r3, .L54+4
 598 0070 1B68     		ldr	r3, [r3]
 599 0072 DA6A     		ldr	r2, [r3, #44]
 600 0074 E36A     		ldr	r3, [r4, #44]
 601 0076 9A42     		cmp	r2, r3
 602 0078 07D2     		bcs	.L49
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 603              		.loc 1 1032 0
 604 007a 4FF08052 		mov	r2, #268435456
 605 007e 094B     		ldr	r3, .L54+24
 606 0080 1A60     		str	r2, [r3]
 607              		.syntax unified
 608              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 609 0082 BFF34F8F 		dsb
 610              	@ 0 "" 2
 611              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 612 0086 BFF36F8F 		isb
 613              	@ 0 "" 2
 614              		.thumb
 615              		.syntax unified
 616              	.L49:
 617 008a 10BD     		pop	{r4, pc}
 618              	.LVL62:
 619              	.L55:
 620              		.align	2
 621              	.L54:
 622 008c 00000000 		.word	.LANCHOR9
 623 0090 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/cciitH1F.s 			page 81


 624 0094 00000000 		.word	.LANCHOR11
 625 0098 00000000 		.word	.LANCHOR12
 626 009c 00000000 		.word	.LANCHOR13
 627 00a0 00000000 		.word	.LANCHOR4
 628 00a4 04ED00E0 		.word	-536810236
 629              		.cfi_endproc
 630              	.LFE8:
 632              		.section	.text.prvDeleteTCB,"ax",%progbits
 633              		.align	2
 634              		.thumb
 635              		.thumb_func
 637              	prvDeleteTCB:
 638              	.LFB43:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 639              		.loc 1 3582 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643              	.LVL63:
 644 0000 10B5     		push	{r4, lr}
 645              	.LCFI4:
 646              		.cfi_def_cfa_offset 8
 647              		.cfi_offset 4, -8
 648              		.cfi_offset 14, -4
 649 0002 0446     		mov	r4, r0
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 650              		.loc 1 3608 0
 651 0004 90F85130 		ldrb	r3, [r0, #81]	@ zero_extendqisi2
 652 0008 33B9     		cbnz	r3, .L57
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 653              		.loc 1 3612 0
 654 000a 006B     		ldr	r0, [r0, #48]
 655              	.LVL64:
 656 000c FFF7FEFF 		bl	vPortFree
 657              	.LVL65:
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 658              		.loc 1 3613 0
 659 0010 2046     		mov	r0, r4
 660 0012 FFF7FEFF 		bl	vPortFree
 661              	.LVL66:
 662 0016 10BD     		pop	{r4, pc}
 663              	.LVL67:
 664              	.L57:
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 665              		.loc 1 3615 0
 666 0018 012B     		cmp	r3, #1
 667 001a 02D1     		bne	.L59
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 668              		.loc 1 3619 0
 669 001c FFF7FEFF 		bl	vPortFree
 670              	.LVL68:
 671 0020 10BD     		pop	{r4, pc}
 672              	.LVL69:
 673              	.L59:
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 674              		.loc 1 3625 0
 675 0022 022B     		cmp	r3, #2
ARM GAS  /tmp/cciitH1F.s 			page 82


 676 0024 08D0     		beq	.L56
 677              	.LBB106:
 678              	.LBB107:
 679              		.loc 2 237 0
 680              		.syntax unified
 681              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 682 0026 4FF05003 			mov r3, #80												
 683 002a 83F31188 		msr basepri, r3											
 684 002e BFF36F8F 		isb														
 685 0032 BFF34F8F 		dsb														
 686              	
 687              	@ 0 "" 2
 688              	.LVL70:
 689              		.thumb
 690              		.syntax unified
 691              	.L60:
 692 0036 FEE7     		b	.L60
 693              	.L56:
 694 0038 10BD     		pop	{r4, pc}
 695              	.LBE107:
 696              	.LBE106:
 697              		.cfi_endproc
 698              	.LFE43:
 700 003a 00BF     		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 701              		.align	2
 702              		.thumb
 703              		.thumb_func
 705              	prvAddCurrentTaskToDelayedList:
 706              	.LFB57:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
ARM GAS  /tmp/cciitH1F.s 			page 83


3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/cciitH1F.s 			page 84


3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
ARM GAS  /tmp/cciitH1F.s 			page 85


3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
ARM GAS  /tmp/cciitH1F.s 			page 86


3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciitH1F.s 			page 87


3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
ARM GAS  /tmp/cciitH1F.s 			page 88


3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
ARM GAS  /tmp/cciitH1F.s 			page 89


4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
ARM GAS  /tmp/cciitH1F.s 			page 90


4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
ARM GAS  /tmp/cciitH1F.s 			page 91


4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
ARM GAS  /tmp/cciitH1F.s 			page 92


4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cciitH1F.s 			page 93


4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
ARM GAS  /tmp/cciitH1F.s 			page 94


4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
ARM GAS  /tmp/cciitH1F.s 			page 95


4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
ARM GAS  /tmp/cciitH1F.s 			page 96


4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
ARM GAS  /tmp/cciitH1F.s 			page 97


4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
ARM GAS  /tmp/cciitH1F.s 			page 98


4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
ARM GAS  /tmp/cciitH1F.s 			page 99


4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cciitH1F.s 			page 100


4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 707              		.loc 1 4693 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              	.LVL71:
 712 0000 70B5     		push	{r4, r5, r6, lr}
 713              	.LCFI5:
 714              		.cfi_def_cfa_offset 16
 715              		.cfi_offset 4, -16
 716              		.cfi_offset 5, -12
 717              		.cfi_offset 6, -8
 718              		.cfi_offset 14, -4
 719 0002 0446     		mov	r4, r0
 720 0004 0E46     		mov	r6, r1
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
ARM GAS  /tmp/cciitH1F.s 			page 101


4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 721              		.loc 1 4695 0
 722 0006 1D4B     		ldr	r3, .L68
 723 0008 1D68     		ldr	r5, [r3]
 724              	.LVL72:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 725              		.loc 1 4708 0
 726 000a 1D4B     		ldr	r3, .L68+4
 727 000c 1868     		ldr	r0, [r3]
 728              	.LVL73:
 729 000e 0430     		adds	r0, r0, #4
 730 0010 FFF7FEFF 		bl	uxListRemove
 731              	.LVL74:
 732 0014 50B9     		cbnz	r0, .L63
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 733              		.loc 1 4712 0
 734 0016 1A4B     		ldr	r3, .L68+4
 735 0018 1B68     		ldr	r3, [r3]
 736 001a DA6A     		ldr	r2, [r3, #44]
 737 001c 0123     		movs	r3, #1
 738 001e 03FA02F2 		lsl	r2, r3, r2
 739 0022 1849     		ldr	r1, .L68+8
 740 0024 0B68     		ldr	r3, [r1]
 741 0026 23EA0203 		bic	r3, r3, r2
 742 002a 0B60     		str	r3, [r1]
 743              	.L63:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 744              		.loc 1 4721 0
 745 002c B4F1FF3F 		cmp	r4, #-1
 746 0030 07D1     		bne	.L64
 747              		.loc 1 4721 0 is_stmt 0 discriminator 1
 748 0032 36B1     		cbz	r6, .L64
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
ARM GAS  /tmp/cciitH1F.s 			page 102


4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 749              		.loc 1 4726 0 is_stmt 1
 750 0034 124B     		ldr	r3, .L68+4
 751 0036 1968     		ldr	r1, [r3]
 752 0038 0431     		adds	r1, r1, #4
 753 003a 1348     		ldr	r0, .L68+12
 754 003c FFF7FEFF 		bl	vListInsertEnd
 755              	.LVL75:
 756 0040 70BD     		pop	{r4, r5, r6, pc}
 757              	.LVL76:
 758              	.L64:
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 759              		.loc 1 4733 0
 760 0042 2C44     		add	r4, r4, r5
 761              	.LVL77:
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 762              		.loc 1 4736 0
 763 0044 0E4B     		ldr	r3, .L68+4
 764 0046 1B68     		ldr	r3, [r3]
 765 0048 5C60     		str	r4, [r3, #4]
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 766              		.loc 1 4738 0
 767 004a A542     		cmp	r5, r4
 768 004c 07D9     		bls	.L66
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 769              		.loc 1 4742 0
 770 004e 0F4B     		ldr	r3, .L68+16
 771 0050 1868     		ldr	r0, [r3]
 772 0052 0B4B     		ldr	r3, .L68+4
 773 0054 1968     		ldr	r1, [r3]
 774 0056 0431     		adds	r1, r1, #4
 775 0058 FFF7FEFF 		bl	vListInsert
 776              	.LVL78:
 777 005c 70BD     		pop	{r4, r5, r6, pc}
 778              	.LVL79:
 779              	.L66:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 780              		.loc 1 4748 0
ARM GAS  /tmp/cciitH1F.s 			page 103


 781 005e 0C4B     		ldr	r3, .L68+20
 782 0060 1868     		ldr	r0, [r3]
 783 0062 074B     		ldr	r3, .L68+4
 784 0064 1968     		ldr	r1, [r3]
 785 0066 0431     		adds	r1, r1, #4
 786 0068 FFF7FEFF 		bl	vListInsert
 787              	.LVL80:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 788              		.loc 1 4753 0
 789 006c 094B     		ldr	r3, .L68+24
 790 006e 1B68     		ldr	r3, [r3]
 791 0070 9C42     		cmp	r4, r3
 792 0072 01D2     		bcs	.L62
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 793              		.loc 1 4755 0
 794 0074 074B     		ldr	r3, .L68+24
 795 0076 1C60     		str	r4, [r3]
 796              	.L62:
 797 0078 70BD     		pop	{r4, r5, r6, pc}
 798              	.LVL81:
 799              	.L69:
 800 007a 00BF     		.align	2
 801              	.L68:
 802 007c 00000000 		.word	.LANCHOR14
 803 0080 00000000 		.word	.LANCHOR10
 804 0084 00000000 		.word	.LANCHOR13
 805 0088 00000000 		.word	.LANCHOR0
 806 008c 00000000 		.word	.LANCHOR8
 807 0090 00000000 		.word	.LANCHOR2
 808 0094 00000000 		.word	.LANCHOR3
 809              		.cfi_endproc
 810              	.LFE57:
 812              		.section	.text.xTaskCreateStatic,"ax",%progbits
 813              		.align	2
 814              		.global	xTaskCreateStatic
 815              		.thumb
 816              		.thumb_func
 818              	xTaskCreateStatic:
 819              	.LFB5:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 820              		.loc 1 593 0
 821              		.cfi_startproc
 822              		@ args = 12, pretend = 0, frame = 8
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              	.LVL82:
 825 0000 30B5     		push	{r4, r5, lr}
 826              	.LCFI6:
 827              		.cfi_def_cfa_offset 12
 828              		.cfi_offset 4, -12
 829              		.cfi_offset 5, -8
 830              		.cfi_offset 14, -4
 831 0002 87B0     		sub	sp, sp, #28
ARM GAS  /tmp/cciitH1F.s 			page 104


 832              	.LCFI7:
 833              		.cfi_def_cfa_offset 40
 834 0004 0B9D     		ldr	r5, [sp, #44]
 835 0006 0C9C     		ldr	r4, [sp, #48]
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 836              		.loc 1 597 0
 837 0008 45B9     		cbnz	r5, .L71
 838              	.LBB108:
 839              	.LBB109:
 840              		.loc 2 237 0
 841              		.syntax unified
 842              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 843 000a 4FF05003 			mov r3, #80												
 844 000e 83F31188 		msr basepri, r3											
 845 0012 BFF36F8F 		isb														
 846 0016 BFF34F8F 		dsb														
 847              	
 848              	@ 0 "" 2
 849              	.LVL83:
 850              		.thumb
 851              		.syntax unified
 852              	.L72:
 853 001a FEE7     		b	.L72
 854              	.LVL84:
 855              	.L71:
 856              	.LBE109:
 857              	.LBE108:
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858              		.loc 1 598 0
 859 001c 44B9     		cbnz	r4, .L73
 860              	.LBB110:
 861              	.LBB111:
 862              		.loc 2 237 0
 863              		.syntax unified
 864              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 865 001e 4FF05003 			mov r3, #80												
 866 0022 83F31188 		msr basepri, r3											
 867 0026 BFF36F8F 		isb														
 868 002a BFF34F8F 		dsb														
 869              	
 870              	@ 0 "" 2
 871              	.LVL85:
 872              		.thumb
 873              		.syntax unified
 874              	.L74:
 875 002e FEE7     		b	.L74
 876              	.LVL86:
 877              	.L73:
 878              	.LBE111:
 879              	.LBE110:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 880              		.loc 1 600 0
 881 0030 8CB1     		cbz	r4, .L75
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 882              		.loc 1 600 0 is_stmt 0 discriminator 1
 883 0032 85B1     		cbz	r5, .L75
 884              	.LVL87:
ARM GAS  /tmp/cciitH1F.s 			page 105


 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885              		.loc 1 605 0 is_stmt 1
 886 0034 2563     		str	r5, [r4, #48]
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 887              		.loc 1 611 0
 888 0036 0225     		movs	r5, #2
 889 0038 84F85150 		strb	r5, [r4, #81]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 890              		.loc 1 615 0
 891 003c 0025     		movs	r5, #0
 892 003e 0395     		str	r5, [sp, #12]
 893 0040 0294     		str	r4, [sp, #8]
 894 0042 05AD     		add	r5, sp, #20
 895 0044 0195     		str	r5, [sp, #4]
 896 0046 0A9D     		ldr	r5, [sp, #40]
 897 0048 0095     		str	r5, [sp]
 898 004a FFF7FEFF 		bl	prvInitialiseNewTask
 899              	.LVL88:
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900              		.loc 1 616 0
 901 004e 2046     		mov	r0, r4
 902 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 903              	.LVL89:
 904 0054 01E0     		b	.L76
 905              	.LVL90:
 906              	.L75:
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907              		.loc 1 620 0
 908 0056 0023     		movs	r3, #0
 909              	.LVL91:
 910 0058 0593     		str	r3, [sp, #20]
 911              	.LVL92:
 912              	.L76:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 913              		.loc 1 624 0
 914 005a 0598     		ldr	r0, [sp, #20]
 915 005c 07B0     		add	sp, sp, #28
 916              	.LCFI8:
 917              		.cfi_def_cfa_offset 12
 918              		@ sp needed
 919 005e 30BD     		pop	{r4, r5, pc}
 920              		.cfi_endproc
 921              	.LFE5:
 923              		.section	.text.xTaskCreate,"ax",%progbits
 924              		.align	2
 925              		.global	xTaskCreate
 926              		.thumb
 927              		.thumb_func
 929              	xTaskCreate:
 930              	.LFB6:
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 931              		.loc 1 682 0
 932              		.cfi_startproc
 933              		@ args = 8, pretend = 0, frame = 0
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 935              	.LVL93:
 936 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /tmp/cciitH1F.s 			page 106


 937              	.LCFI9:
 938              		.cfi_def_cfa_offset 28
 939              		.cfi_offset 4, -28
 940              		.cfi_offset 5, -24
 941              		.cfi_offset 6, -20
 942              		.cfi_offset 7, -16
 943              		.cfi_offset 8, -12
 944              		.cfi_offset 9, -8
 945              		.cfi_offset 14, -4
 946 0004 85B0     		sub	sp, sp, #20
 947              	.LCFI10:
 948              		.cfi_def_cfa_offset 48
 949 0006 0646     		mov	r6, r0
 950 0008 0F46     		mov	r7, r1
 951 000a 1546     		mov	r5, r2
 952 000c 9846     		mov	r8, r3
 953              	.LBB112:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954              		.loc 1 716 0
 955 000e 9000     		lsls	r0, r2, #2
 956              	.LVL94:
 957 0010 FFF7FEFF 		bl	pvPortMalloc
 958              	.LVL95:
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 959              		.loc 1 718 0
 960 0014 60B1     		cbz	r0, .L82
 961 0016 8146     		mov	r9, r0
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 962              		.loc 1 721 0
 963 0018 5420     		movs	r0, #84
 964              	.LVL96:
 965 001a FFF7FEFF 		bl	pvPortMalloc
 966              	.LVL97:
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 967              		.loc 1 723 0
 968 001e 0446     		mov	r4, r0
 969 0020 10B1     		cbz	r0, .L80
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 970              		.loc 1 726 0
 971 0022 C0F83090 		str	r9, [r0, #48]
 972 0026 04E0     		b	.L79
 973              	.L80:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 974              		.loc 1 732 0
 975 0028 4846     		mov	r0, r9
 976              	.LVL98:
 977 002a FFF7FEFF 		bl	vPortFree
 978              	.LVL99:
 979 002e 00E0     		b	.L79
 980              	.LVL100:
 981              	.L82:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 982              		.loc 1 737 0
 983 0030 0024     		movs	r4, #0
 984              	.LVL101:
 985              	.L79:
 986              	.LBE112:
ARM GAS  /tmp/cciitH1F.s 			page 107


 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 987              		.loc 1 742 0
 988 0032 9CB1     		cbz	r4, .L83
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 989              		.loc 1 748 0
 990 0034 0023     		movs	r3, #0
 991 0036 84F85130 		strb	r3, [r4, #81]
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 992              		.loc 1 752 0
 993 003a 0393     		str	r3, [sp, #12]
 994 003c 0294     		str	r4, [sp, #8]
 995 003e 0D9B     		ldr	r3, [sp, #52]
 996 0040 0193     		str	r3, [sp, #4]
 997 0042 0C9B     		ldr	r3, [sp, #48]
 998 0044 0093     		str	r3, [sp]
 999 0046 4346     		mov	r3, r8
 1000 0048 2A46     		mov	r2, r5
 1001 004a 3946     		mov	r1, r7
 1002 004c 3046     		mov	r0, r6
 1003 004e FFF7FEFF 		bl	prvInitialiseNewTask
 1004              	.LVL102:
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1005              		.loc 1 753 0
 1006 0052 2046     		mov	r0, r4
 1007 0054 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1008              	.LVL103:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1009              		.loc 1 754 0
 1010 0058 0120     		movs	r0, #1
 1011 005a 01E0     		b	.L81
 1012              	.LVL104:
 1013              	.L83:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1014              		.loc 1 758 0
 1015 005c 4FF0FF30 		mov	r0, #-1
 1016              	.L81:
 1017              	.LVL105:
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1018              		.loc 1 762 0
 1019 0060 05B0     		add	sp, sp, #20
 1020              	.LCFI11:
 1021              		.cfi_def_cfa_offset 28
 1022              		@ sp needed
 1023 0062 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1024              		.cfi_endproc
 1025              	.LFE6:
 1027 0066 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 1028              		.align	2
 1029              		.global	vTaskDelete
 1030              		.thumb
 1031              		.thumb_func
 1033              	vTaskDelete:
 1034              	.LFB9:
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1035              		.loc 1 1049 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cciitH1F.s 			page 108


 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039              	.LVL106:
 1040 0000 38B5     		push	{r3, r4, r5, lr}
 1041              	.LCFI12:
 1042              		.cfi_def_cfa_offset 16
 1043              		.cfi_offset 3, -16
 1044              		.cfi_offset 4, -12
 1045              		.cfi_offset 5, -8
 1046              		.cfi_offset 14, -4
 1047 0002 0446     		mov	r4, r0
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1048              		.loc 1 1052 0
 1049 0004 FFF7FEFF 		bl	vPortEnterCritical
 1050              	.LVL107:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1051              		.loc 1 1056 0
 1052 0008 0CB9     		cbnz	r4, .L86
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1053              		.loc 1 1056 0 is_stmt 0 discriminator 1
 1054 000a 2A4B     		ldr	r3, .L95
 1055 000c 1C68     		ldr	r4, [r3]
 1056              	.LVL108:
 1057              	.L86:
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1058              		.loc 1 1059 0 is_stmt 1 discriminator 4
 1059 000e 251D     		adds	r5, r4, #4
 1060 0010 2846     		mov	r0, r5
 1061 0012 FFF7FEFF 		bl	uxListRemove
 1062              	.LVL109:
 1063 0016 70B9     		cbnz	r0, .L87
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1064              		.loc 1 1061 0
 1065 0018 E26A     		ldr	r2, [r4, #44]
 1066 001a 02EB8201 		add	r1, r2, r2, lsl #2
 1067 001e 8B00     		lsls	r3, r1, #2
 1068 0020 2549     		ldr	r1, .L95+4
 1069 0022 CB58     		ldr	r3, [r1, r3]
 1070 0024 3BB9     		cbnz	r3, .L87
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1071              		.loc 1 1061 0 is_stmt 0 discriminator 1
 1072 0026 0123     		movs	r3, #1
 1073 0028 03FA02F2 		lsl	r2, r3, r2
 1074 002c 2349     		ldr	r1, .L95+8
 1075 002e 0B68     		ldr	r3, [r1]
 1076 0030 23EA0203 		bic	r3, r3, r2
 1077 0034 0B60     		str	r3, [r1]
 1078              	.L87:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1079              		.loc 1 1069 0 is_stmt 1
 1080 0036 A36A     		ldr	r3, [r4, #40]
 1081 0038 1BB1     		cbz	r3, .L88
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1082              		.loc 1 1071 0
 1083 003a 04F11800 		add	r0, r4, #24
 1084 003e FFF7FEFF 		bl	uxListRemove
 1085              	.LVL110:
 1086              	.L88:
ARM GAS  /tmp/cciitH1F.s 			page 109


1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1087              		.loc 1 1082 0
 1088 0042 1F4A     		ldr	r2, .L95+12
 1089 0044 1368     		ldr	r3, [r2]
 1090 0046 0133     		adds	r3, r3, #1
 1091 0048 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1092              		.loc 1 1084 0
 1093 004a 1A4B     		ldr	r3, .L95
 1094 004c 1B68     		ldr	r3, [r3]
 1095 004e 9C42     		cmp	r4, r3
 1096 0050 08D1     		bne	.L89
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1097              		.loc 1 1091 0
 1098 0052 2946     		mov	r1, r5
 1099 0054 1B48     		ldr	r0, .L95+16
 1100 0056 FFF7FEFF 		bl	vListInsertEnd
 1101              	.LVL111:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1102              		.loc 1 1096 0
 1103 005a 1B4A     		ldr	r2, .L95+20
 1104 005c 1368     		ldr	r3, [r2]
 1105 005e 0133     		adds	r3, r3, #1
 1106 0060 1360     		str	r3, [r2]
 1107 0062 08E0     		b	.L90
 1108              	.L89:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1109              		.loc 1 1107 0
 1110 0064 194A     		ldr	r2, .L95+24
 1111 0066 1368     		ldr	r3, [r2]
 1112 0068 013B     		subs	r3, r3, #1
 1113 006a 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1114              		.loc 1 1108 0
 1115 006c 2046     		mov	r0, r4
 1116 006e FFF7FEFF 		bl	prvDeleteTCB
 1117              	.LVL112:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1118              		.loc 1 1112 0
 1119 0072 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1120              	.LVL113:
 1121              	.L90:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1122              		.loc 1 1117 0
 1123 0076 FFF7FEFF 		bl	vPortExitCritical
 1124              	.LVL114:
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1125              		.loc 1 1121 0
 1126 007a 154B     		ldr	r3, .L95+28
 1127 007c 1B68     		ldr	r3, [r3]
 1128 007e BBB1     		cbz	r3, .L85
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1129              		.loc 1 1123 0
 1130 0080 0C4B     		ldr	r3, .L95
 1131 0082 1B68     		ldr	r3, [r3]
 1132 0084 9C42     		cmp	r4, r3
 1133 0086 13D1     		bne	.L85
ARM GAS  /tmp/cciitH1F.s 			page 110


1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1134              		.loc 1 1125 0
 1135 0088 124B     		ldr	r3, .L95+32
 1136 008a 1B68     		ldr	r3, [r3]
 1137 008c 43B1     		cbz	r3, .L92
 1138              	.LBB113:
 1139              	.LBB114:
 1140              		.loc 2 237 0
 1141              		.syntax unified
 1142              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1143 008e 4FF05003 			mov r3, #80												
 1144 0092 83F31188 		msr basepri, r3											
 1145 0096 BFF36F8F 		isb														
 1146 009a BFF34F8F 		dsb														
 1147              	
 1148              	@ 0 "" 2
 1149              	.LVL115:
 1150              		.thumb
 1151              		.syntax unified
 1152              	.L93:
 1153 009e FEE7     		b	.L93
 1154              	.L92:
 1155              	.LBE114:
 1156              	.LBE113:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1157              		.loc 1 1126 0
 1158 00a0 4FF08052 		mov	r2, #268435456
 1159 00a4 0C4B     		ldr	r3, .L95+36
 1160 00a6 1A60     		str	r2, [r3]
 1161              		.syntax unified
 1162              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1163 00a8 BFF34F8F 		dsb
 1164              	@ 0 "" 2
 1165              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1166 00ac BFF36F8F 		isb
 1167              	@ 0 "" 2
 1168              		.thumb
 1169              		.syntax unified
 1170              	.L85:
 1171 00b0 38BD     		pop	{r3, r4, r5, pc}
 1172              	.LVL116:
 1173              	.L96:
 1174 00b2 00BF     		.align	2
 1175              	.L95:
 1176 00b4 00000000 		.word	.LANCHOR10
 1177 00b8 00000000 		.word	.LANCHOR4
 1178 00bc 00000000 		.word	.LANCHOR13
 1179 00c0 00000000 		.word	.LANCHOR12
 1180 00c4 00000000 		.word	.LANCHOR7
 1181 00c8 00000000 		.word	.LANCHOR15
 1182 00cc 00000000 		.word	.LANCHOR9
 1183 00d0 00000000 		.word	.LANCHOR11
 1184 00d4 00000000 		.word	.LANCHOR16
 1185 00d8 04ED00E0 		.word	-536810236
 1186              		.cfi_endproc
 1187              	.LFE9:
 1189              		.section	.text.uxTaskPriorityGet,"ax",%progbits
ARM GAS  /tmp/cciitH1F.s 			page 111


 1190              		.align	2
 1191              		.global	uxTaskPriorityGet
 1192              		.thumb
 1193              		.thumb_func
 1195              	uxTaskPriorityGet:
 1196              	.LFB11:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1197              		.loc 1 1341 0
 1198              		.cfi_startproc
 1199              		@ args = 0, pretend = 0, frame = 0
 1200              		@ frame_needed = 0, uses_anonymous_args = 0
 1201              	.LVL117:
 1202 0000 10B5     		push	{r4, lr}
 1203              	.LCFI13:
 1204              		.cfi_def_cfa_offset 8
 1205              		.cfi_offset 4, -8
 1206              		.cfi_offset 14, -4
 1207 0002 0446     		mov	r4, r0
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1208              		.loc 1 1345 0
 1209 0004 FFF7FEFF 		bl	vPortEnterCritical
 1210              	.LVL118:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1211              		.loc 1 1349 0
 1212 0008 0CB9     		cbnz	r4, .L98
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1213              		.loc 1 1349 0 is_stmt 0 discriminator 1
 1214 000a 034B     		ldr	r3, .L100
 1215 000c 1C68     		ldr	r4, [r3]
 1216              	.LVL119:
 1217              	.L98:
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1218              		.loc 1 1350 0 is_stmt 1 discriminator 4
 1219 000e E46A     		ldr	r4, [r4, #44]
 1220              	.LVL120:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1221              		.loc 1 1352 0 discriminator 4
 1222 0010 FFF7FEFF 		bl	vPortExitCritical
 1223              	.LVL121:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1224              		.loc 1 1355 0 discriminator 4
 1225 0014 2046     		mov	r0, r4
 1226 0016 10BD     		pop	{r4, pc}
 1227              	.LVL122:
 1228              	.L101:
 1229              		.align	2
 1230              	.L100:
 1231 0018 00000000 		.word	.LANCHOR10
 1232              		.cfi_endproc
 1233              	.LFE11:
 1235              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1236              		.align	2
 1237              		.global	uxTaskPriorityGetFromISR
 1238              		.thumb
 1239              		.thumb_func
 1241              	uxTaskPriorityGetFromISR:
 1242              	.LFB12:
ARM GAS  /tmp/cciitH1F.s 			page 112


1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1243              		.loc 1 1363 0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 0
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 1247              	.LVL123:
 1248 0000 10B5     		push	{r4, lr}
 1249              	.LCFI14:
 1250              		.cfi_def_cfa_offset 8
 1251              		.cfi_offset 4, -8
 1252              		.cfi_offset 14, -4
 1253 0002 0446     		mov	r4, r0
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1254              		.loc 1 1383 0
 1255 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1256              	.LVL124:
 1257              	.LBB115:
 1258              	.LBB116:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1259              		.loc 2 253 0
 1260              		.syntax unified
 1261              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1262 0008 EFF31183 			mrs r3, basepri											
 1263 000c 4FF05002 		mov r2, #80												
 1264 0010 82F31188 		msr basepri, r2											
 1265 0014 BFF36F8F 		isb														
 1266 0018 BFF34F8F 		dsb														
 1267              	
 1268              	@ 0 "" 2
 1269              		.thumb
 1270              		.syntax unified
 1271              	.LBE116:
 1272              	.LBE115:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1273              		.loc 1 1389 0
 1274 001c 0CB9     		cbnz	r4, .L103
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1275              		.loc 1 1389 0 is_stmt 0 discriminator 1
 1276 001e 034A     		ldr	r2, .L105
 1277 0020 1468     		ldr	r4, [r2]
 1278              	.LVL125:
 1279              	.L103:
ARM GAS  /tmp/cciitH1F.s 			page 113


1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1280              		.loc 1 1390 0 is_stmt 1 discriminator 4
 1281 0022 E06A     		ldr	r0, [r4, #44]
 1282              	.LVL126:
 1283              	.LBB117:
 1284              	.LBB118:
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1285              		.loc 2 271 0 discriminator 4
 1286              		.syntax unified
 1287              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1288 0024 83F31188 			msr basepri, r3	
 1289              	@ 0 "" 2
 1290              	.LVL127:
 1291              		.thumb
 1292              		.syntax unified
 1293              	.LBE118:
 1294              	.LBE117:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1295              		.loc 1 1395 0 discriminator 4
 1296 0028 10BD     		pop	{r4, pc}
 1297              	.LVL128:
 1298              	.L106:
 1299 002a 00BF     		.align	2
 1300              	.L105:
 1301 002c 00000000 		.word	.LANCHOR10
 1302              		.cfi_endproc
 1303              	.LFE12:
 1305              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1306              		.align	2
 1307              		.global	vTaskPrioritySet
 1308              		.thumb
 1309              		.thumb_func
 1311              	vTaskPrioritySet:
 1312              	.LFB13:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1313              		.loc 1 1403 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 1317              	.LVL129:
ARM GAS  /tmp/cciitH1F.s 			page 114


 1318 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1319              	.LCFI15:
 1320              		.cfi_def_cfa_offset 24
 1321              		.cfi_offset 3, -24
 1322              		.cfi_offset 4, -20
 1323              		.cfi_offset 5, -16
 1324              		.cfi_offset 6, -12
 1325              		.cfi_offset 7, -8
 1326              		.cfi_offset 14, -4
 1327              	.LVL130:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1328              		.loc 1 1408 0
 1329 0002 0629     		cmp	r1, #6
 1330 0004 08D9     		bls	.L108
 1331              	.LBB119:
 1332              	.LBB120:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1333              		.loc 2 237 0
 1334              		.syntax unified
 1335              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1336 0006 4FF05003 			mov r3, #80												
 1337 000a 83F31188 		msr basepri, r3											
 1338 000e BFF36F8F 		isb														
 1339 0012 BFF34F8F 		dsb														
 1340              	
 1341              	@ 0 "" 2
 1342              	.LVL131:
 1343              		.thumb
 1344              		.syntax unified
 1345              	.L109:
 1346 0016 FEE7     		b	.L109
 1347              	.L108:
 1348 0018 0446     		mov	r4, r0
 1349 001a 0D46     		mov	r5, r1
 1350              	.LBE120:
 1351              	.LBE119:
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1352              		.loc 1 1411 0
 1353 001c 0629     		cmp	r1, #6
 1354 001e 00D9     		bls	.L110
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1355              		.loc 1 1413 0
 1356 0020 0625     		movs	r5, #6
 1357              	.L110:
 1358              	.LVL132:
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1359              		.loc 1 1420 0
 1360 0022 FFF7FEFF 		bl	vPortEnterCritical
 1361              	.LVL133:
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1362              		.loc 1 1424 0
 1363 0026 0CB9     		cbnz	r4, .L111
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1364              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1365 0028 2D4B     		ldr	r3, .L126
 1366 002a 1C68     		ldr	r4, [r3]
 1367              	.LVL134:
ARM GAS  /tmp/cciitH1F.s 			page 115


 1368              	.L111:
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1369              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1370 002c 636C     		ldr	r3, [r4, #68]
 1371              	.LVL135:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1372              		.loc 1 1438 0 discriminator 4
 1373 002e 9D42     		cmp	r5, r3
 1374 0030 53D0     		beq	.L112
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1375              		.loc 1 1442 0
 1376 0032 0AD9     		bls	.L113
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1377              		.loc 1 1444 0
 1378 0034 2A4A     		ldr	r2, .L126
 1379 0036 1268     		ldr	r2, [r2]
 1380 0038 9442     		cmp	r4, r2
 1381 003a 0CD0     		beq	.L121
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1382              		.loc 1 1449 0
 1383 003c 284A     		ldr	r2, .L126
 1384 003e 1268     		ldr	r2, [r2]
 1385 0040 D26A     		ldr	r2, [r2, #44]
 1386 0042 9542     		cmp	r5, r2
 1387 0044 09D2     		bcs	.L122
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1388              		.loc 1 1406 0
 1389 0046 0026     		movs	r6, #0
 1390 0048 0AE0     		b	.L114
 1391              	.L113:
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1392              		.loc 1 1465 0
 1393 004a 254A     		ldr	r2, .L126
 1394 004c 1268     		ldr	r2, [r2]
 1395 004e 9442     		cmp	r4, r2
 1396 0050 05D0     		beq	.L123
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1397              		.loc 1 1406 0
 1398 0052 0026     		movs	r6, #0
 1399 0054 04E0     		b	.L114
 1400              	.L121:
 1401 0056 0026     		movs	r6, #0
 1402 0058 02E0     		b	.L114
 1403              	.L122:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1404              		.loc 1 1451 0
 1405 005a 0126     		movs	r6, #1
 1406 005c 00E0     		b	.L114
 1407              	.L123:
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1408              		.loc 1 1470 0
 1409 005e 0126     		movs	r6, #1
 1410              	.L114:
 1411              	.LVL136:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1412              		.loc 1 1482 0
 1413 0060 E76A     		ldr	r7, [r4, #44]
ARM GAS  /tmp/cciitH1F.s 			page 116


 1414              	.LVL137:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1415              		.loc 1 1488 0
 1416 0062 BB42     		cmp	r3, r7
 1417 0064 00D1     		bne	.L115
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1418              		.loc 1 1490 0
 1419 0066 E562     		str	r5, [r4, #44]
 1420              	.L115:
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1421              		.loc 1 1498 0
 1422 0068 6564     		str	r5, [r4, #68]
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1423              		.loc 1 1508 0
 1424 006a A369     		ldr	r3, [r4, #24]
 1425              	.LVL138:
 1426 006c 002B     		cmp	r3, #0
 1427 006e 02DB     		blt	.L116
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1428              		.loc 1 1510 0
 1429 0070 C5F10705 		rsb	r5, r5, #7
 1430              	.LVL139:
 1431 0074 A561     		str	r5, [r4, #24]
 1432              	.L116:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1433              		.loc 1 1521 0
 1434 0076 6169     		ldr	r1, [r4, #20]
 1435 0078 07EB8702 		add	r2, r7, r7, lsl #2
 1436 007c 9300     		lsls	r3, r2, #2
 1437 007e 194A     		ldr	r2, .L126+4
 1438 0080 1344     		add	r3, r3, r2
 1439 0082 9942     		cmp	r1, r3
 1440 0084 01D1     		bne	.L124
 1441 0086 0123     		movs	r3, #1
 1442 0088 00E0     		b	.L117
 1443              	.L124:
 1444 008a 0023     		movs	r3, #0
 1445              	.L117:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1446              		.loc 1 1521 0 is_stmt 0 discriminator 4
 1447 008c E3B1     		cbz	r3, .L118
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1448              		.loc 1 1526 0 is_stmt 1
 1449 008e 251D     		adds	r5, r4, #4
 1450 0090 2846     		mov	r0, r5
 1451 0092 FFF7FEFF 		bl	uxListRemove
 1452              	.LVL140:
 1453 0096 38B9     		cbnz	r0, .L119
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1454              		.loc 1 1531 0
 1455 0098 0123     		movs	r3, #1
 1456 009a 03FA07F7 		lsl	r7, r3, r7
 1457              	.LVL141:
 1458 009e 124A     		ldr	r2, .L126+8
 1459 00a0 1368     		ldr	r3, [r2]
 1460 00a2 23EA0703 		bic	r3, r3, r7
 1461 00a6 1360     		str	r3, [r2]
ARM GAS  /tmp/cciitH1F.s 			page 117


 1462              	.L119:
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1463              		.loc 1 1537 0
 1464 00a8 E36A     		ldr	r3, [r4, #44]
 1465 00aa 0122     		movs	r2, #1
 1466 00ac 02FA03F1 		lsl	r1, r2, r3
 1467 00b0 0D48     		ldr	r0, .L126+8
 1468 00b2 0268     		ldr	r2, [r0]
 1469 00b4 0A43     		orrs	r2, r2, r1
 1470 00b6 0260     		str	r2, [r0]
 1471 00b8 03EB8303 		add	r3, r3, r3, lsl #2
 1472 00bc 9A00     		lsls	r2, r3, #2
 1473 00be 2946     		mov	r1, r5
 1474 00c0 0848     		ldr	r0, .L126+4
 1475 00c2 1044     		add	r0, r0, r2
 1476 00c4 FFF7FEFF 		bl	vListInsertEnd
 1477              	.LVL142:
 1478              	.L118:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1479              		.loc 1 1544 0
 1480 00c8 3EB1     		cbz	r6, .L112
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1481              		.loc 1 1546 0
 1482 00ca 4FF08052 		mov	r2, #268435456
 1483 00ce 074B     		ldr	r3, .L126+12
 1484 00d0 1A60     		str	r2, [r3]
 1485              		.syntax unified
 1486              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1487 00d2 BFF34F8F 		dsb
 1488              	@ 0 "" 2
 1489              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1490 00d6 BFF36F8F 		isb
 1491              	@ 0 "" 2
 1492              	.LVL143:
 1493              		.thumb
 1494              		.syntax unified
 1495              	.L112:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1496              		.loc 1 1558 0
 1497 00da FFF7FEFF 		bl	vPortExitCritical
 1498              	.LVL144:
 1499 00de F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1500              	.LVL145:
 1501              	.L127:
 1502              		.align	2
 1503              	.L126:
 1504 00e0 00000000 		.word	.LANCHOR10
 1505 00e4 00000000 		.word	.LANCHOR4
 1506 00e8 00000000 		.word	.LANCHOR13
 1507 00ec 04ED00E0 		.word	-536810236
 1508              		.cfi_endproc
 1509              	.LFE13:
 1511              		.section	.text.vTaskResume,"ax",%progbits
 1512              		.align	2
 1513              		.global	vTaskResume
 1514              		.thumb
 1515              		.thumb_func
ARM GAS  /tmp/cciitH1F.s 			page 118


 1517              	vTaskResume:
 1518              	.LFB16:
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1519              		.loc 1 1703 0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 0
 1522              		@ frame_needed = 0, uses_anonymous_args = 0
 1523              	.LVL146:
 1524 0000 38B5     		push	{r3, r4, r5, lr}
 1525              	.LCFI16:
 1526              		.cfi_def_cfa_offset 16
 1527              		.cfi_offset 3, -16
 1528              		.cfi_offset 4, -12
 1529              		.cfi_offset 5, -8
 1530              		.cfi_offset 14, -4
 1531              	.LVL147:
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1532              		.loc 1 1707 0
 1533 0002 40B9     		cbnz	r0, .L129
 1534              	.LBB121:
 1535              	.LBB122:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1536              		.loc 2 237 0
 1537              		.syntax unified
 1538              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1539 0004 4FF05003 			mov r3, #80												
 1540 0008 83F31188 		msr basepri, r3											
 1541 000c BFF36F8F 		isb														
 1542 0010 BFF34F8F 		dsb														
 1543              	
 1544              	@ 0 "" 2
 1545              	.LVL148:
 1546              		.thumb
 1547              		.syntax unified
 1548              	.L130:
 1549 0014 FEE7     		b	.L130
 1550              	.L129:
 1551 0016 0446     		mov	r4, r0
 1552              	.LBE122:
 1553              	.LBE121:
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1554              		.loc 1 1711 0
 1555 0018 68B3     		cbz	r0, .L128
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1556              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1557 001a 174B     		ldr	r3, .L134
 1558 001c 1B68     		ldr	r3, [r3]
 1559 001e 9842     		cmp	r0, r3
 1560 0020 29D0     		beq	.L128
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1561              		.loc 1 1713 0 is_stmt 1
 1562 0022 FFF7FEFF 		bl	vPortEnterCritical
 1563              	.LVL149:
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1564              		.loc 1 1715 0
 1565 0026 2046     		mov	r0, r4
 1566 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended
ARM GAS  /tmp/cciitH1F.s 			page 119


 1567              	.LVL150:
 1568 002c 08B3     		cbz	r0, .L132
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1569              		.loc 1 1721 0
 1570 002e 251D     		adds	r5, r4, #4
 1571 0030 2846     		mov	r0, r5
 1572 0032 FFF7FEFF 		bl	uxListRemove
 1573              	.LVL151:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1574              		.loc 1 1722 0
 1575 0036 E36A     		ldr	r3, [r4, #44]
 1576 0038 0122     		movs	r2, #1
 1577 003a 02FA03F1 		lsl	r1, r2, r3
 1578 003e 0F48     		ldr	r0, .L134+4
 1579 0040 0268     		ldr	r2, [r0]
 1580 0042 0A43     		orrs	r2, r2, r1
 1581 0044 0260     		str	r2, [r0]
 1582 0046 03EB8303 		add	r3, r3, r3, lsl #2
 1583 004a 9A00     		lsls	r2, r3, #2
 1584 004c 2946     		mov	r1, r5
 1585 004e 0C48     		ldr	r0, .L134+8
 1586 0050 1044     		add	r0, r0, r2
 1587 0052 FFF7FEFF 		bl	vListInsertEnd
 1588              	.LVL152:
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1589              		.loc 1 1725 0
 1590 0056 E26A     		ldr	r2, [r4, #44]
 1591 0058 074B     		ldr	r3, .L134
 1592 005a 1B68     		ldr	r3, [r3]
 1593 005c DB6A     		ldr	r3, [r3, #44]
 1594 005e 9A42     		cmp	r2, r3
 1595 0060 07D3     		bcc	.L132
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1596              		.loc 1 1730 0
 1597 0062 4FF08052 		mov	r2, #268435456
 1598 0066 074B     		ldr	r3, .L134+12
 1599 0068 1A60     		str	r2, [r3]
 1600              		.syntax unified
 1601              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1602 006a BFF34F8F 		dsb
 1603              	@ 0 "" 2
 1604              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1605 006e BFF36F8F 		isb
 1606              	@ 0 "" 2
 1607              		.thumb
 1608              		.syntax unified
 1609              	.L132:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1610              		.loc 1 1742 0
 1611 0072 FFF7FEFF 		bl	vPortExitCritical
 1612              	.LVL153:
 1613              	.L128:
 1614 0076 38BD     		pop	{r3, r4, r5, pc}
 1615              	.LVL154:
 1616              	.L135:
 1617              		.align	2
 1618              	.L134:
ARM GAS  /tmp/cciitH1F.s 			page 120


 1619 0078 00000000 		.word	.LANCHOR10
 1620 007c 00000000 		.word	.LANCHOR13
 1621 0080 00000000 		.word	.LANCHOR4
 1622 0084 04ED00E0 		.word	-536810236
 1623              		.cfi_endproc
 1624              	.LFE16:
 1626              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1627              		.align	2
 1628              		.global	xTaskResumeFromISR
 1629              		.thumb
 1630              		.thumb_func
 1632              	xTaskResumeFromISR:
 1633              	.LFB17:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1634              		.loc 1 1757 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 0
 1637              		@ frame_needed = 0, uses_anonymous_args = 0
 1638              	.LVL155:
 1639 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1640              	.LCFI17:
 1641              		.cfi_def_cfa_offset 24
 1642              		.cfi_offset 3, -24
 1643              		.cfi_offset 4, -20
 1644              		.cfi_offset 5, -16
 1645              		.cfi_offset 6, -12
 1646              		.cfi_offset 7, -8
 1647              		.cfi_offset 14, -4
 1648              	.LVL156:
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1649              		.loc 1 1762 0
 1650 0002 40B9     		cbnz	r0, .L137
 1651              	.LBB123:
 1652              	.LBB124:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1653              		.loc 2 237 0
 1654              		.syntax unified
 1655              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1656 0004 4FF05003 			mov r3, #80												
 1657 0008 83F31188 		msr basepri, r3											
 1658 000c BFF36F8F 		isb														
 1659 0010 BFF34F8F 		dsb														
 1660              	
 1661              	@ 0 "" 2
 1662              	.LVL157:
 1663              		.thumb
 1664              		.syntax unified
 1665              	.L138:
 1666 0014 FEE7     		b	.L138
 1667              	.L137:
 1668 0016 0446     		mov	r4, r0
 1669              	.LBE124:
 1670              	.LBE123:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1671              		.loc 1 1780 0
 1672 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1673              	.LVL158:
ARM GAS  /tmp/cciitH1F.s 			page 121


 1674              	.LBB125:
 1675              	.LBB126:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1676              		.loc 2 253 0
 1677              		.syntax unified
 1678              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1679 001c EFF31187 			mrs r7, basepri											
 1680 0020 4FF05003 		mov r3, #80												
 1681 0024 83F31188 		msr basepri, r3											
 1682 0028 BFF36F8F 		isb														
 1683 002c BFF34F8F 		dsb														
 1684              	
 1685              	@ 0 "" 2
 1686              		.thumb
 1687              		.syntax unified
 1688              	.LBE126:
 1689              	.LBE125:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1690              		.loc 1 1784 0
 1691 0030 2046     		mov	r0, r4
 1692 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1693              	.LVL159:
 1694 0036 38B3     		cbz	r0, .L142
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1695              		.loc 1 1789 0
 1696 0038 164B     		ldr	r3, .L145
 1697 003a 1B68     		ldr	r3, [r3]
 1698 003c EBB9     		cbnz	r3, .L140
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1699              		.loc 1 1793 0
 1700 003e E26A     		ldr	r2, [r4, #44]
 1701 0040 154B     		ldr	r3, .L145+4
 1702 0042 1B68     		ldr	r3, [r3]
 1703 0044 DB6A     		ldr	r3, [r3, #44]
 1704 0046 9A42     		cmp	r2, r3
 1705 0048 01D2     		bcs	.L143
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1706              		.loc 1 1758 0
 1707 004a 0025     		movs	r5, #0
 1708 004c 00E0     		b	.L141
 1709              	.L143:
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1710              		.loc 1 1795 0
 1711 004e 0125     		movs	r5, #1
 1712              	.L141:
 1713              	.LVL160:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1714              		.loc 1 1802 0
 1715 0050 261D     		adds	r6, r4, #4
 1716 0052 3046     		mov	r0, r6
 1717 0054 FFF7FEFF 		bl	uxListRemove
 1718              	.LVL161:
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1719              		.loc 1 1803 0
 1720 0058 E36A     		ldr	r3, [r4, #44]
 1721 005a 0122     		movs	r2, #1
 1722 005c 02FA03F1 		lsl	r1, r2, r3
ARM GAS  /tmp/cciitH1F.s 			page 122


 1723 0060 0E48     		ldr	r0, .L145+8
 1724 0062 0268     		ldr	r2, [r0]
 1725 0064 0A43     		orrs	r2, r2, r1
 1726 0066 0260     		str	r2, [r0]
 1727 0068 03EB8303 		add	r3, r3, r3, lsl #2
 1728 006c 9A00     		lsls	r2, r3, #2
 1729 006e 3146     		mov	r1, r6
 1730 0070 0B48     		ldr	r0, .L145+12
 1731 0072 1044     		add	r0, r0, r2
 1732 0074 FFF7FEFF 		bl	vListInsertEnd
 1733              	.LVL162:
 1734 0078 07E0     		b	.L139
 1735              	.LVL163:
 1736              	.L140:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1737              		.loc 1 1810 0
 1738 007a 04F11801 		add	r1, r4, #24
 1739 007e 0948     		ldr	r0, .L145+16
 1740 0080 FFF7FEFF 		bl	vListInsertEnd
 1741              	.LVL164:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1742              		.loc 1 1758 0
 1743 0084 0025     		movs	r5, #0
 1744 0086 00E0     		b	.L139
 1745              	.L142:
 1746 0088 0025     		movs	r5, #0
 1747              	.LVL165:
 1748              	.L139:
 1749              	.LBB127:
 1750              	.LBB128:
 1751              		.loc 2 271 0
 1752              		.syntax unified
 1753              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1754 008a 87F31188 			msr basepri, r7	
 1755              	@ 0 "" 2
 1756              	.LVL166:
 1757              		.thumb
 1758              		.syntax unified
 1759              	.LBE128:
 1760              	.LBE127:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1761              		.loc 1 1821 0
 1762 008e 2846     		mov	r0, r5
 1763 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1764              	.LVL167:
 1765              	.L146:
 1766 0092 00BF     		.align	2
 1767              	.L145:
 1768 0094 00000000 		.word	.LANCHOR16
 1769 0098 00000000 		.word	.LANCHOR10
 1770 009c 00000000 		.word	.LANCHOR13
 1771 00a0 00000000 		.word	.LANCHOR4
 1772 00a4 00000000 		.word	.LANCHOR1
 1773              		.cfi_endproc
 1774              	.LFE17:
 1776              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1777              		.align	2
ARM GAS  /tmp/cciitH1F.s 			page 123


 1778              		.global	vTaskStartScheduler
 1779              		.thumb
 1780              		.thumb_func
 1782              	vTaskStartScheduler:
 1783              	.LFB18:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1784              		.loc 1 1827 0
 1785              		.cfi_startproc
 1786              		@ args = 0, pretend = 0, frame = 16
 1787              		@ frame_needed = 0, uses_anonymous_args = 0
 1788 0000 10B5     		push	{r4, lr}
 1789              	.LCFI18:
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 4, -8
 1792              		.cfi_offset 14, -4
 1793 0002 88B0     		sub	sp, sp, #32
 1794              	.LCFI19:
 1795              		.cfi_def_cfa_offset 40
 1796              	.LBB129:
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1797              		.loc 1 1833 0
 1798 0004 0024     		movs	r4, #0
 1799 0006 0594     		str	r4, [sp, #20]
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1800              		.loc 1 1834 0
 1801 0008 0694     		str	r4, [sp, #24]
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1802              		.loc 1 1839 0
 1803 000a 07AA     		add	r2, sp, #28
 1804 000c 06A9     		add	r1, sp, #24
 1805 000e 05A8     		add	r0, sp, #20
 1806 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1807              	.LVL168:
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
 1808              		.loc 1 1840 0
 1809 0014 059B     		ldr	r3, [sp, #20]
 1810 0016 0293     		str	r3, [sp, #8]
 1811 0018 069B     		ldr	r3, [sp, #24]
 1812 001a 0193     		str	r3, [sp, #4]
 1813 001c 0094     		str	r4, [sp]
 1814 001e 2346     		mov	r3, r4
 1815 0020 079A     		ldr	r2, [sp, #28]
 1816 0022 1849     		ldr	r1, .L155
 1817 0024 1848     		ldr	r0, .L155+4
 1818 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1819              	.LVL169:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1820              		.loc 1 1848 0
 1821 002a 08B1     		cbz	r0, .L153
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1822              		.loc 1 1850 0
 1823 002c 0120     		movs	r0, #1
 1824 002e 00E0     		b	.L148
 1825              	.L153:
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1826              		.loc 1 1854 0
 1827 0030 0020     		movs	r0, #0
ARM GAS  /tmp/cciitH1F.s 			page 124


 1828              	.L148:
 1829              	.LVL170:
 1830              	.LBE129:
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1831              		.loc 1 1870 0
 1832 0032 0128     		cmp	r0, #1
 1833 0034 01D1     		bne	.L149
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1834              		.loc 1 1872 0
 1835 0036 FFF7FEFF 		bl	xTimerCreateTimerTask
 1836              	.LVL171:
 1837              	.L149:
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1838              		.loc 1 1881 0
 1839 003a 0128     		cmp	r0, #1
 1840 003c 14D1     		bne	.L150
 1841              	.LBB130:
 1842              	.LBB131:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1843              		.loc 2 237 0
 1844              		.syntax unified
 1845              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1846 003e 4FF05003 			mov r3, #80												
 1847 0042 83F31188 		msr basepri, r3											
 1848 0046 BFF36F8F 		isb														
 1849 004a BFF34F8F 		dsb														
 1850              	
 1851              	@ 0 "" 2
 1852              		.thumb
 1853              		.syntax unified
 1854              	.LBE131:
 1855              	.LBE130:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1856              		.loc 1 1898 0
 1857 004e 4FF0FF32 		mov	r2, #-1
 1858 0052 0E4B     		ldr	r3, .L155+8
 1859 0054 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1860              		.loc 1 1899 0
 1861 0056 0122     		movs	r2, #1
 1862 0058 0D4B     		ldr	r3, .L155+12
 1863 005a 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1864              		.loc 1 1900 0
 1865 005c 0022     		movs	r2, #0
 1866 005e 0D4B     		ldr	r3, .L155+16
 1867 0060 1A60     		str	r2, [r3]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1868              		.loc 1 1909 0
 1869 0062 FFF7FEFF 		bl	xPortStartScheduler
 1870              	.LVL172:
 1871 0066 0BE0     		b	.L147
 1872              	.LVL173:
 1873              	.L150:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1874              		.loc 1 1924 0
 1875 0068 B0F1FF3F 		cmp	r0, #-1
ARM GAS  /tmp/cciitH1F.s 			page 125


 1876 006c 08D1     		bne	.L147
 1877              	.LBB132:
 1878              	.LBB133:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1879              		.loc 2 237 0
 1880              		.syntax unified
 1881              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1882 006e 4FF05003 			mov r3, #80												
 1883 0072 83F31188 		msr basepri, r3											
 1884 0076 BFF36F8F 		isb														
 1885 007a BFF34F8F 		dsb														
 1886              	
 1887              	@ 0 "" 2
 1888              	.LVL174:
 1889              		.thumb
 1890              		.syntax unified
 1891              	.L152:
 1892 007e FEE7     		b	.L152
 1893              	.LVL175:
 1894              	.L147:
 1895              	.LBE133:
 1896              	.LBE132:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1897              		.loc 1 1930 0
 1898 0080 08B0     		add	sp, sp, #32
 1899              	.LCFI20:
 1900              		.cfi_def_cfa_offset 8
 1901              		@ sp needed
 1902 0082 10BD     		pop	{r4, pc}
 1903              	.L156:
 1904              		.align	2
 1905              	.L155:
 1906 0084 00000000 		.word	.LC0
 1907 0088 00000000 		.word	prvIdleTask
 1908 008c 00000000 		.word	.LANCHOR3
 1909 0090 00000000 		.word	.LANCHOR11
 1910 0094 00000000 		.word	.LANCHOR14
 1911              		.cfi_endproc
 1912              	.LFE18:
 1914              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1915              		.align	2
 1916              		.global	vTaskEndScheduler
 1917              		.thumb
 1918              		.thumb_func
 1920              	vTaskEndScheduler:
 1921              	.LFB19:
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1922              		.loc 1 1934 0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 0
 1925              		@ frame_needed = 0, uses_anonymous_args = 0
 1926 0000 08B5     		push	{r3, lr}
 1927              	.LCFI21:
 1928              		.cfi_def_cfa_offset 8
 1929              		.cfi_offset 3, -8
 1930              		.cfi_offset 14, -4
 1931              	.LBB134:
ARM GAS  /tmp/cciitH1F.s 			page 126


 1932              	.LBB135:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1933              		.loc 2 237 0
 1934              		.syntax unified
 1935              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1936 0002 4FF05003 			mov r3, #80												
 1937 0006 83F31188 		msr basepri, r3											
 1938 000a BFF36F8F 		isb														
 1939 000e BFF34F8F 		dsb														
 1940              	
 1941              	@ 0 "" 2
 1942              		.thumb
 1943              		.syntax unified
 1944              	.LBE135:
 1945              	.LBE134:
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1946              		.loc 1 1939 0
 1947 0012 0022     		movs	r2, #0
 1948 0014 024B     		ldr	r3, .L159
 1949 0016 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1950              		.loc 1 1940 0
 1951 0018 FFF7FEFF 		bl	vPortEndScheduler
 1952              	.LVL176:
 1953 001c 08BD     		pop	{r3, pc}
 1954              	.L160:
 1955 001e 00BF     		.align	2
 1956              	.L159:
 1957 0020 00000000 		.word	.LANCHOR11
 1958              		.cfi_endproc
 1959              	.LFE19:
 1961              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1962              		.align	2
 1963              		.global	vTaskSuspendAll
 1964              		.thumb
 1965              		.thumb_func
 1967              	vTaskSuspendAll:
 1968              	.LFB20:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1969              		.loc 1 1945 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              		@ link register save eliminated.
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1974              		.loc 1 1950 0
 1975 0000 024A     		ldr	r2, .L162
 1976 0002 1368     		ldr	r3, [r2]
 1977 0004 0133     		adds	r3, r3, #1
 1978 0006 1360     		str	r3, [r2]
 1979 0008 7047     		bx	lr
 1980              	.L163:
 1981 000a 00BF     		.align	2
 1982              	.L162:
 1983 000c 00000000 		.word	.LANCHOR16
 1984              		.cfi_endproc
 1985              	.LFE20:
ARM GAS  /tmp/cciitH1F.s 			page 127


 1987              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1988              		.align	2
 1989              		.global	xTaskGetTickCount
 1990              		.thumb
 1991              		.thumb_func
 1993              	xTaskGetTickCount:
 1994              	.LFB22:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1995              		.loc 1 2128 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              		@ link register save eliminated.
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2000              		.loc 1 2134 0
 2001 0000 014B     		ldr	r3, .L165
 2002 0002 1868     		ldr	r0, [r3]
 2003              	.LVL177:
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2004              		.loc 1 2139 0
 2005 0004 7047     		bx	lr
 2006              	.L166:
 2007 0006 00BF     		.align	2
 2008              	.L165:
 2009 0008 00000000 		.word	.LANCHOR14
 2010              		.cfi_endproc
 2011              	.LFE22:
 2013              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2014              		.align	2
 2015              		.global	xTaskGetTickCountFromISR
 2016              		.thumb
 2017              		.thumb_func
 2019              	xTaskGetTickCountFromISR:
 2020              	.LFB23:
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2021              		.loc 1 2143 0
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 0
 2024              		@ frame_needed = 0, uses_anonymous_args = 0
 2025 0000 08B5     		push	{r3, lr}
 2026              	.LCFI22:
 2027              		.cfi_def_cfa_offset 8
 2028              		.cfi_offset 3, -8
 2029              		.cfi_offset 14, -4
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2030              		.loc 1 2161 0
 2031 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2032              	.LVL178:
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2033              		.loc 1 2165 0
 2034 0006 014B     		ldr	r3, .L169
 2035 0008 1868     		ldr	r0, [r3]
 2036              	.LVL179:
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2037              		.loc 1 2170 0
 2038 000a 08BD     		pop	{r3, pc}
 2039              	.L170:
ARM GAS  /tmp/cciitH1F.s 			page 128


 2040              		.align	2
 2041              	.L169:
 2042 000c 00000000 		.word	.LANCHOR14
 2043              		.cfi_endproc
 2044              	.LFE23:
 2046              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2047              		.align	2
 2048              		.global	uxTaskGetNumberOfTasks
 2049              		.thumb
 2050              		.thumb_func
 2052              	uxTaskGetNumberOfTasks:
 2053              	.LFB24:
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2054              		.loc 1 2174 0
 2055              		.cfi_startproc
 2056              		@ args = 0, pretend = 0, frame = 0
 2057              		@ frame_needed = 0, uses_anonymous_args = 0
 2058              		@ link register save eliminated.
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2059              		.loc 1 2177 0
 2060 0000 014B     		ldr	r3, .L172
 2061 0002 1868     		ldr	r0, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2062              		.loc 1 2178 0
 2063 0004 7047     		bx	lr
 2064              	.L173:
 2065 0006 00BF     		.align	2
 2066              	.L172:
 2067 0008 00000000 		.word	.LANCHOR9
 2068              		.cfi_endproc
 2069              	.LFE24:
 2071              		.section	.text.pcTaskGetName,"ax",%progbits
 2072              		.align	2
 2073              		.global	pcTaskGetName
 2074              		.thumb
 2075              		.thumb_func
 2077              	pcTaskGetName:
 2078              	.LFB25:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2079              		.loc 1 2182 0
 2080              		.cfi_startproc
 2081              		@ args = 0, pretend = 0, frame = 0
 2082              		@ frame_needed = 0, uses_anonymous_args = 0
 2083              		@ link register save eliminated.
 2084              	.LVL180:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2085              		.loc 1 2187 0
 2086 0000 0346     		mov	r3, r0
 2087 0002 08B9     		cbnz	r0, .L175
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2088              		.loc 1 2187 0 is_stmt 0 discriminator 1
 2089 0004 074B     		ldr	r3, .L178
 2090 0006 1B68     		ldr	r3, [r3]
 2091              	.LVL181:
 2092              	.L175:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2093              		.loc 1 2188 0 is_stmt 1 discriminator 4
ARM GAS  /tmp/cciitH1F.s 			page 129


 2094 0008 43B9     		cbnz	r3, .L176
 2095              	.LBB136:
 2096              	.LBB137:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2097              		.loc 2 237 0
 2098              		.syntax unified
 2099              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2100 000a 4FF05003 			mov r3, #80												
 2101 000e 83F31188 		msr basepri, r3											
 2102 0012 BFF36F8F 		isb														
 2103 0016 BFF34F8F 		dsb														
 2104              	
 2105              	@ 0 "" 2
 2106              	.LVL182:
 2107              		.thumb
 2108              		.syntax unified
 2109              	.L177:
 2110 001a FEE7     		b	.L177
 2111              	.LVL183:
 2112              	.L176:
 2113              	.LBE137:
 2114              	.LBE136:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2115              		.loc 1 2190 0
 2116 001c 03F13400 		add	r0, r3, #52
 2117 0020 7047     		bx	lr
 2118              	.L179:
 2119 0022 00BF     		.align	2
 2120              	.L178:
 2121 0024 00000000 		.word	.LANCHOR10
 2122              		.cfi_endproc
 2123              	.LFE25:
 2125              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2126              		.align	2
 2127              		.global	xTaskIncrementTick
 2128              		.thumb
 2129              		.thumb_func
 2131              	xTaskIncrementTick:
 2132              	.LFB28:
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2133              		.loc 1 2500 0
 2134              		.cfi_startproc
 2135              		@ args = 0, pretend = 0, frame = 0
 2136              		@ frame_needed = 0, uses_anonymous_args = 0
 2137 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2138              	.LCFI23:
 2139              		.cfi_def_cfa_offset 24
 2140              		.cfi_offset 3, -24
 2141              		.cfi_offset 4, -20
 2142              		.cfi_offset 5, -16
 2143              		.cfi_offset 6, -12
 2144              		.cfi_offset 7, -8
 2145              		.cfi_offset 14, -4
 2146              	.LVL184:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2147              		.loc 1 2509 0
 2148 0002 3D4B     		ldr	r3, .L201
ARM GAS  /tmp/cciitH1F.s 			page 130


 2149 0004 1B68     		ldr	r3, [r3]
 2150 0006 002B     		cmp	r3, #0
 2151 0008 69D1     		bne	.L181
 2152              	.LBB138:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2153              		.loc 1 2513 0
 2154 000a 3C4B     		ldr	r3, .L201+4
 2155 000c 1D68     		ldr	r5, [r3]
 2156 000e 0135     		adds	r5, r5, #1
 2157              	.LVL185:
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2158              		.loc 1 2517 0
 2159 0010 1D60     		str	r5, [r3]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2160              		.loc 1 2519 0
 2161 0012 C5B9     		cbnz	r5, .L182
 2162              	.LBB139:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2163              		.loc 1 2521 0
 2164 0014 3A4B     		ldr	r3, .L201+8
 2165 0016 1B68     		ldr	r3, [r3]
 2166 0018 1B68     		ldr	r3, [r3]
 2167 001a 43B1     		cbz	r3, .L183
 2168              	.LBB140:
 2169              	.LBB141:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2170              		.loc 2 237 0
 2171              		.syntax unified
 2172              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2173 001c 4FF05003 			mov r3, #80												
 2174 0020 83F31188 		msr basepri, r3											
 2175 0024 BFF36F8F 		isb														
 2176 0028 BFF34F8F 		dsb														
 2177              	
 2178              	@ 0 "" 2
 2179              	.LVL186:
 2180              		.thumb
 2181              		.syntax unified
 2182              	.L184:
 2183 002c FEE7     		b	.L184
 2184              	.L183:
 2185              	.LBE141:
 2186              	.LBE140:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2187              		.loc 1 2521 0 discriminator 2
 2188 002e 344A     		ldr	r2, .L201+8
 2189 0030 1168     		ldr	r1, [r2]
 2190              	.LVL187:
 2191 0032 344B     		ldr	r3, .L201+12
 2192 0034 1868     		ldr	r0, [r3]
 2193 0036 1060     		str	r0, [r2]
 2194 0038 1960     		str	r1, [r3]
 2195 003a 334A     		ldr	r2, .L201+16
 2196 003c 1368     		ldr	r3, [r2]
 2197 003e 0133     		adds	r3, r3, #1
 2198 0040 1360     		str	r3, [r2]
 2199 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
ARM GAS  /tmp/cciitH1F.s 			page 131


 2200              	.LVL188:
 2201              	.L182:
 2202              	.LBE139:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2203              		.loc 1 2532 0
 2204 0046 314B     		ldr	r3, .L201+20
 2205 0048 1B68     		ldr	r3, [r3]
 2206 004a 9D42     		cmp	r5, r3
 2207 004c 03D2     		bcs	.L195
 2208              	.LBE138:
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2209              		.loc 1 2503 0
 2210 004e 0024     		movs	r4, #0
 2211 0050 3AE0     		b	.L186
 2212              	.LVL189:
 2213              	.L197:
 2214              	.LBB142:
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2215              		.loc 1 2598 0
 2216 0052 0124     		movs	r4, #1
 2217              	.LVL190:
 2218 0054 00E0     		b	.L185
 2219              	.LVL191:
 2220              	.L195:
 2221 0056 0024     		movs	r4, #0
 2222              	.LVL192:
 2223              	.L185:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2224              		.loc 1 2536 0
 2225 0058 294B     		ldr	r3, .L201+8
 2226 005a 1B68     		ldr	r3, [r3]
 2227 005c 1B68     		ldr	r3, [r3]
 2228 005e 0BB9     		cbnz	r3, .L196
 2229 0060 0123     		movs	r3, #1
 2230 0062 00E0     		b	.L187
 2231              	.L196:
 2232 0064 0023     		movs	r3, #0
 2233              	.L187:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2234              		.loc 1 2536 0 is_stmt 0 discriminator 4
 2235 0066 23B1     		cbz	r3, .L188
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2236              		.loc 1 2543 0 is_stmt 1
 2237 0068 4FF0FF32 		mov	r2, #-1
 2238 006c 274B     		ldr	r3, .L201+20
 2239 006e 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2240              		.loc 1 2544 0
 2241 0070 2AE0     		b	.L186
 2242              	.L188:
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2243              		.loc 1 2552 0
 2244 0072 234B     		ldr	r3, .L201+8
 2245 0074 1B68     		ldr	r3, [r3]
 2246 0076 DB68     		ldr	r3, [r3, #12]
 2247 0078 DE68     		ldr	r6, [r3, #12]
 2248              	.LVL193:
ARM GAS  /tmp/cciitH1F.s 			page 132


2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2249              		.loc 1 2553 0
 2250 007a 7368     		ldr	r3, [r6, #4]
 2251              	.LVL194:
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2252              		.loc 1 2555 0
 2253 007c 9D42     		cmp	r5, r3
 2254 007e 02D2     		bcs	.L189
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2255              		.loc 1 2562 0
 2256 0080 224A     		ldr	r2, .L201+20
 2257 0082 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2258              		.loc 1 2563 0
 2259 0084 20E0     		b	.L186
 2260              	.L189:
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2261              		.loc 1 2571 0
 2262 0086 371D     		adds	r7, r6, #4
 2263 0088 3846     		mov	r0, r7
 2264 008a FFF7FEFF 		bl	uxListRemove
 2265              	.LVL195:
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2266              		.loc 1 2575 0
 2267 008e B36A     		ldr	r3, [r6, #40]
 2268 0090 1BB1     		cbz	r3, .L190
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2269              		.loc 1 2577 0
 2270 0092 06F11800 		add	r0, r6, #24
 2271 0096 FFF7FEFF 		bl	uxListRemove
 2272              	.LVL196:
 2273              	.L190:
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2274              		.loc 1 2586 0
 2275 009a F36A     		ldr	r3, [r6, #44]
 2276 009c 0122     		movs	r2, #1
 2277 009e 02FA03F1 		lsl	r1, r2, r3
 2278 00a2 1B48     		ldr	r0, .L201+24
 2279 00a4 0268     		ldr	r2, [r0]
 2280 00a6 0A43     		orrs	r2, r2, r1
 2281 00a8 0260     		str	r2, [r0]
 2282 00aa 03EB8303 		add	r3, r3, r3, lsl #2
 2283 00ae 9A00     		lsls	r2, r3, #2
 2284 00b0 3946     		mov	r1, r7
 2285 00b2 1848     		ldr	r0, .L201+28
 2286 00b4 1044     		add	r0, r0, r2
 2287 00b6 FFF7FEFF 		bl	vListInsertEnd
 2288              	.LVL197:
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2289              		.loc 1 2596 0
 2290 00ba F26A     		ldr	r2, [r6, #44]
 2291 00bc 164B     		ldr	r3, .L201+32
 2292 00be 1B68     		ldr	r3, [r3]
 2293 00c0 DB6A     		ldr	r3, [r3, #44]
 2294 00c2 9A42     		cmp	r2, r3
 2295 00c4 C5D2     		bcs	.L197
 2296 00c6 C7E7     		b	.L185
ARM GAS  /tmp/cciitH1F.s 			page 133


 2297              	.LVL198:
 2298              	.L186:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2299              		.loc 1 2615 0
 2300 00c8 134B     		ldr	r3, .L201+32
 2301 00ca 1B68     		ldr	r3, [r3]
 2302 00cc DB6A     		ldr	r3, [r3, #44]
 2303 00ce 03EB8303 		add	r3, r3, r3, lsl #2
 2304 00d2 9A00     		lsls	r2, r3, #2
 2305 00d4 0F4B     		ldr	r3, .L201+28
 2306 00d6 9B58     		ldr	r3, [r3, r2]
 2307 00d8 012B     		cmp	r3, #1
 2308 00da 06D8     		bhi	.L198
 2309 00dc 06E0     		b	.L193
 2310              	.LVL199:
 2311              	.L181:
 2312              	.LBE142:
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2313              		.loc 1 2643 0
 2314 00de 0F4A     		ldr	r2, .L201+36
 2315 00e0 1368     		ldr	r3, [r2]
 2316 00e2 0133     		adds	r3, r3, #1
 2317 00e4 1360     		str	r3, [r2]
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2318              		.loc 1 2503 0
 2319 00e6 0024     		movs	r4, #0
 2320 00e8 00E0     		b	.L193
 2321              	.LVL200:
 2322              	.L198:
 2323              	.LBB143:
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2324              		.loc 1 2617 0
 2325 00ea 0124     		movs	r4, #1
 2326              	.LVL201:
 2327              	.L193:
 2328              	.LBE143:
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2329              		.loc 1 2656 0
 2330 00ec 0C4B     		ldr	r3, .L201+40
 2331 00ee 1B68     		ldr	r3, [r3]
 2332 00f0 03B1     		cbz	r3, .L194
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2333              		.loc 1 2658 0
 2334 00f2 0124     		movs	r4, #1
 2335              	.LVL202:
 2336              	.L194:
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2337              		.loc 1 2668 0
 2338 00f4 2046     		mov	r0, r4
 2339 00f6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2340              	.LVL203:
 2341              	.L202:
 2342              		.align	2
 2343              	.L201:
 2344 00f8 00000000 		.word	.LANCHOR16
 2345 00fc 00000000 		.word	.LANCHOR14
 2346 0100 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/cciitH1F.s 			page 134


 2347 0104 00000000 		.word	.LANCHOR8
 2348 0108 00000000 		.word	.LANCHOR17
 2349 010c 00000000 		.word	.LANCHOR3
 2350 0110 00000000 		.word	.LANCHOR13
 2351 0114 00000000 		.word	.LANCHOR4
 2352 0118 00000000 		.word	.LANCHOR10
 2353 011c 00000000 		.word	.LANCHOR18
 2354 0120 00000000 		.word	.LANCHOR19
 2355              		.cfi_endproc
 2356              	.LFE28:
 2358              		.section	.text.xTaskResumeAll,"ax",%progbits
 2359              		.align	2
 2360              		.global	xTaskResumeAll
 2361              		.thumb
 2362              		.thumb_func
 2364              	xTaskResumeAll:
 2365              	.LFB21:
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2366              		.loc 1 2018 0
 2367              		.cfi_startproc
 2368              		@ args = 0, pretend = 0, frame = 0
 2369              		@ frame_needed = 0, uses_anonymous_args = 0
 2370 0000 38B5     		push	{r3, r4, r5, lr}
 2371              	.LCFI24:
 2372              		.cfi_def_cfa_offset 16
 2373              		.cfi_offset 3, -16
 2374              		.cfi_offset 4, -12
 2375              		.cfi_offset 5, -8
 2376              		.cfi_offset 14, -4
 2377              	.LVL204:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2378              		.loc 1 2024 0
 2379 0002 344B     		ldr	r3, .L218
 2380 0004 1B68     		ldr	r3, [r3]
 2381 0006 43B9     		cbnz	r3, .L204
 2382              	.LBB144:
 2383              	.LBB145:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2384              		.loc 2 237 0
 2385              		.syntax unified
 2386              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2387 0008 4FF05003 			mov r3, #80												
 2388 000c 83F31188 		msr basepri, r3											
 2389 0010 BFF36F8F 		isb														
 2390 0014 BFF34F8F 		dsb														
 2391              	
 2392              	@ 0 "" 2
 2393              	.LVL205:
 2394              		.thumb
 2395              		.syntax unified
 2396              	.L205:
 2397 0018 FEE7     		b	.L205
 2398              	.L204:
 2399              	.LBE145:
 2400              	.LBE144:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2401              		.loc 1 2031 0
ARM GAS  /tmp/cciitH1F.s 			page 135


 2402 001a FFF7FEFF 		bl	vPortEnterCritical
 2403              	.LVL206:
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2404              		.loc 1 2033 0
 2405 001e 2D4B     		ldr	r3, .L218
 2406 0020 1A68     		ldr	r2, [r3]
 2407 0022 013A     		subs	r2, r2, #1
 2408 0024 1A60     		str	r2, [r3]
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2409              		.loc 1 2035 0
 2410 0026 1B68     		ldr	r3, [r3]
 2411 0028 002B     		cmp	r3, #0
 2412 002a 4CD1     		bne	.L214
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2413              		.loc 1 2037 0
 2414 002c 2A4B     		ldr	r3, .L218+4
 2415 002e 1B68     		ldr	r3, [r3]
 2416 0030 33BB     		cbnz	r3, .L215
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2417              		.loc 1 2020 0
 2418 0032 0024     		movs	r4, #0
 2419 0034 4AE0     		b	.L206
 2420              	.LVL207:
 2421              	.L209:
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2422              		.loc 1 2043 0
 2423 0036 294B     		ldr	r3, .L218+8
 2424 0038 DB68     		ldr	r3, [r3, #12]
 2425 003a DC68     		ldr	r4, [r3, #12]
 2426              	.LVL208:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2427              		.loc 1 2044 0
 2428 003c 04F11800 		add	r0, r4, #24
 2429 0040 FFF7FEFF 		bl	uxListRemove
 2430              	.LVL209:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2431              		.loc 1 2045 0
 2432 0044 251D     		adds	r5, r4, #4
 2433 0046 2846     		mov	r0, r5
 2434 0048 FFF7FEFF 		bl	uxListRemove
 2435              	.LVL210:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2436              		.loc 1 2046 0
 2437 004c E36A     		ldr	r3, [r4, #44]
 2438 004e 0122     		movs	r2, #1
 2439 0050 02FA03F1 		lsl	r1, r2, r3
 2440 0054 2248     		ldr	r0, .L218+12
 2441 0056 0268     		ldr	r2, [r0]
 2442 0058 0A43     		orrs	r2, r2, r1
 2443 005a 0260     		str	r2, [r0]
 2444 005c 03EB8303 		add	r3, r3, r3, lsl #2
 2445 0060 9A00     		lsls	r2, r3, #2
 2446 0062 2946     		mov	r1, r5
 2447 0064 1F48     		ldr	r0, .L218+16
 2448 0066 1044     		add	r0, r0, r2
 2449 0068 FFF7FEFF 		bl	vListInsertEnd
 2450              	.LVL211:
ARM GAS  /tmp/cciitH1F.s 			page 136


2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2451              		.loc 1 2050 0
 2452 006c E26A     		ldr	r2, [r4, #44]
 2453 006e 1E4B     		ldr	r3, .L218+20
 2454 0070 1B68     		ldr	r3, [r3]
 2455 0072 DB6A     		ldr	r3, [r3, #44]
 2456 0074 9A42     		cmp	r2, r3
 2457 0076 04D3     		bcc	.L207
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2458              		.loc 1 2052 0
 2459 0078 0122     		movs	r2, #1
 2460 007a 1C4B     		ldr	r3, .L218+24
 2461 007c 1A60     		str	r2, [r3]
 2462 007e 00E0     		b	.L207
 2463              	.LVL212:
 2464              	.L215:
 2465 0080 0024     		movs	r4, #0
 2466              	.LVL213:
 2467              	.L207:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2468              		.loc 1 2041 0
 2469 0082 164B     		ldr	r3, .L218+8
 2470 0084 1B68     		ldr	r3, [r3]
 2471 0086 002B     		cmp	r3, #0
 2472 0088 D5D1     		bne	.L209
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2473              		.loc 1 2060 0
 2474 008a 0CB1     		cbz	r4, .L210
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2475              		.loc 1 2068 0
 2476 008c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2477              	.LVL214:
 2478              	.L210:
 2479              	.LBB146:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2480              		.loc 1 2076 0
 2481 0090 174B     		ldr	r3, .L218+28
 2482 0092 1C68     		ldr	r4, [r3]
 2483              	.LVL215:
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2484              		.loc 1 2078 0
 2485 0094 54B1     		cbz	r4, .L211
 2486              	.L213:
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2487              		.loc 1 2082 0
 2488 0096 FFF7FEFF 		bl	xTaskIncrementTick
 2489              	.LVL216:
 2490 009a 10B1     		cbz	r0, .L212
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2491              		.loc 1 2084 0
 2492 009c 0122     		movs	r2, #1
 2493 009e 134B     		ldr	r3, .L218+24
 2494 00a0 1A60     		str	r2, [r3]
 2495              	.L212:
 2496              	.LVL217:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2497              		.loc 1 2091 0
ARM GAS  /tmp/cciitH1F.s 			page 137


 2498 00a2 013C     		subs	r4, r4, #1
 2499              	.LVL218:
 2500 00a4 F7D1     		bne	.L213
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2501              		.loc 1 2093 0
 2502 00a6 0022     		movs	r2, #0
 2503 00a8 114B     		ldr	r3, .L218+28
 2504 00aa 1A60     		str	r2, [r3]
 2505              	.L211:
 2506              	.LBE146:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2507              		.loc 1 2101 0
 2508 00ac 0F4B     		ldr	r3, .L218+24
 2509 00ae 1B68     		ldr	r3, [r3]
 2510 00b0 5BB1     		cbz	r3, .L216
 2511              	.LVL219:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2512              		.loc 1 2108 0
 2513 00b2 4FF08052 		mov	r2, #268435456
 2514 00b6 0F4B     		ldr	r3, .L218+32
 2515 00b8 1A60     		str	r2, [r3]
 2516              		.syntax unified
 2517              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2518 00ba BFF34F8F 		dsb
 2519              	@ 0 "" 2
 2520              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2521 00be BFF36F8F 		isb
 2522              	@ 0 "" 2
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2523              		.loc 1 2105 0
 2524              		.thumb
 2525              		.syntax unified
 2526 00c2 0124     		movs	r4, #1
 2527              	.LVL220:
 2528 00c4 02E0     		b	.L206
 2529              	.LVL221:
 2530              	.L214:
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2531              		.loc 1 2020 0
 2532 00c6 0024     		movs	r4, #0
 2533 00c8 00E0     		b	.L206
 2534              	.LVL222:
 2535              	.L216:
 2536 00ca 0024     		movs	r4, #0
 2537              	.LVL223:
 2538              	.L206:
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2539              		.loc 1 2121 0
 2540 00cc FFF7FEFF 		bl	vPortExitCritical
 2541              	.LVL224:
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2542              		.loc 1 2124 0
 2543 00d0 2046     		mov	r0, r4
 2544 00d2 38BD     		pop	{r3, r4, r5, pc}
 2545              	.LVL225:
 2546              	.L219:
 2547              		.align	2
ARM GAS  /tmp/cciitH1F.s 			page 138


 2548              	.L218:
 2549 00d4 00000000 		.word	.LANCHOR16
 2550 00d8 00000000 		.word	.LANCHOR9
 2551 00dc 00000000 		.word	.LANCHOR1
 2552 00e0 00000000 		.word	.LANCHOR13
 2553 00e4 00000000 		.word	.LANCHOR4
 2554 00e8 00000000 		.word	.LANCHOR10
 2555 00ec 00000000 		.word	.LANCHOR19
 2556 00f0 00000000 		.word	.LANCHOR18
 2557 00f4 04ED00E0 		.word	-536810236
 2558              		.cfi_endproc
 2559              	.LFE21:
 2561              		.section	.text.vTaskDelay,"ax",%progbits
 2562              		.align	2
 2563              		.global	vTaskDelay
 2564              		.thumb
 2565              		.thumb_func
 2567              	vTaskDelay:
 2568              	.LFB10:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2569              		.loc 1 1225 0
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 0
 2572              		@ frame_needed = 0, uses_anonymous_args = 0
 2573              	.LVL226:
 2574 0000 10B5     		push	{r4, lr}
 2575              	.LCFI25:
 2576              		.cfi_def_cfa_offset 8
 2577              		.cfi_offset 4, -8
 2578              		.cfi_offset 14, -4
 2579              	.LVL227:
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2580              		.loc 1 1229 0
 2581 0002 A8B1     		cbz	r0, .L225
 2582 0004 0446     		mov	r4, r0
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2583              		.loc 1 1231 0
 2584 0006 104B     		ldr	r3, .L227
 2585 0008 1B68     		ldr	r3, [r3]
 2586 000a 43B1     		cbz	r3, .L222
 2587              	.LBB147:
 2588              	.LBB148:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2589              		.loc 2 237 0
 2590              		.syntax unified
 2591              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2592 000c 4FF05003 			mov r3, #80												
 2593 0010 83F31188 		msr basepri, r3											
 2594 0014 BFF36F8F 		isb														
 2595 0018 BFF34F8F 		dsb														
 2596              	
 2597              	@ 0 "" 2
 2598              	.LVL228:
 2599              		.thumb
 2600              		.syntax unified
 2601              	.L223:
 2602 001c FEE7     		b	.L223
ARM GAS  /tmp/cciitH1F.s 			page 139


 2603              	.L222:
 2604              	.LBE148:
 2605              	.LBE147:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2606              		.loc 1 1232 0
 2607 001e FFF7FEFF 		bl	vTaskSuspendAll
 2608              	.LVL229:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2609              		.loc 1 1243 0
 2610 0022 0021     		movs	r1, #0
 2611 0024 2046     		mov	r0, r4
 2612 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2613              	.LVL230:
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2614              		.loc 1 1245 0
 2615 002a FFF7FEFF 		bl	xTaskResumeAll
 2616              	.LVL231:
 2617 002e 00E0     		b	.L221
 2618              	.LVL232:
 2619              	.L225:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2620              		.loc 1 1226 0
 2621 0030 0020     		movs	r0, #0
 2622              	.LVL233:
 2623              	.L221:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2624              		.loc 1 1254 0
 2625 0032 38B9     		cbnz	r0, .L220
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2626              		.loc 1 1256 0
 2627 0034 4FF08052 		mov	r2, #268435456
 2628 0038 044B     		ldr	r3, .L227+4
 2629 003a 1A60     		str	r2, [r3]
 2630              		.syntax unified
 2631              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2632 003c BFF34F8F 		dsb
 2633              	@ 0 "" 2
 2634              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2635 0040 BFF36F8F 		isb
 2636              	@ 0 "" 2
 2637              		.thumb
 2638              		.syntax unified
 2639              	.L220:
 2640 0044 10BD     		pop	{r4, pc}
 2641              	.L228:
 2642 0046 00BF     		.align	2
 2643              	.L227:
 2644 0048 00000000 		.word	.LANCHOR16
 2645 004c 04ED00E0 		.word	-536810236
 2646              		.cfi_endproc
 2647              	.LFE10:
 2649              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2650              		.align	2
 2651              		.thumb
 2652              		.thumb_func
 2654              	prvCheckTasksWaitingTermination:
 2655              	.LFB40:
ARM GAS  /tmp/cciitH1F.s 			page 140


3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2656              		.loc 1 3366 0
 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 0, uses_anonymous_args = 0
 2660 0000 10B5     		push	{r4, lr}
 2661              	.LCFI26:
 2662              		.cfi_def_cfa_offset 8
 2663              		.cfi_offset 4, -8
 2664              		.cfi_offset 14, -4
 2665              	.LBB149:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2666              		.loc 1 3376 0
 2667 0002 1BE0     		b	.L231
 2668              	.L232:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2669              		.loc 1 3378 0
 2670 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2671              	.LVL234:
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2672              		.loc 1 3380 0
 2673 0008 0F4B     		ldr	r3, .L234
 2674 000a 1C68     		ldr	r4, [r3]
 2675              	.LVL235:
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2676              		.loc 1 3382 0
 2677 000c FFF7FEFF 		bl	xTaskResumeAll
 2678              	.LVL236:
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2679              		.loc 1 3384 0
 2680 0010 A4B1     		cbz	r4, .L231
 2681              	.LBB150:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2682              		.loc 1 3388 0
 2683 0012 FFF7FEFF 		bl	vPortEnterCritical
 2684              	.LVL237:
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2685              		.loc 1 3390 0
 2686 0016 0C4B     		ldr	r3, .L234
 2687 0018 DB68     		ldr	r3, [r3, #12]
 2688 001a DC68     		ldr	r4, [r3, #12]
 2689              	.LVL238:
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2690              		.loc 1 3391 0
 2691 001c 201D     		adds	r0, r4, #4
 2692 001e FFF7FEFF 		bl	uxListRemove
 2693              	.LVL239:
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2694              		.loc 1 3392 0
 2695 0022 0A4A     		ldr	r2, .L234+4
 2696 0024 1368     		ldr	r3, [r2]
 2697 0026 013B     		subs	r3, r3, #1
 2698 0028 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2699              		.loc 1 3393 0
 2700 002a 094A     		ldr	r2, .L234+8
 2701 002c 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cciitH1F.s 			page 141


 2702 002e 013B     		subs	r3, r3, #1
 2703 0030 1360     		str	r3, [r2]
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2704              		.loc 1 3395 0
 2705 0032 FFF7FEFF 		bl	vPortExitCritical
 2706              	.LVL240:
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2707              		.loc 1 3397 0
 2708 0036 2046     		mov	r0, r4
 2709 0038 FFF7FEFF 		bl	prvDeleteTCB
 2710              	.LVL241:
 2711              	.L231:
 2712              	.LBE150:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2713              		.loc 1 3376 0
 2714 003c 044B     		ldr	r3, .L234+8
 2715 003e 1B68     		ldr	r3, [r3]
 2716 0040 002B     		cmp	r3, #0
 2717 0042 DFD1     		bne	.L232
 2718              	.LBE149:
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2719              		.loc 1 3406 0
 2720 0044 10BD     		pop	{r4, pc}
 2721              	.L235:
 2722 0046 00BF     		.align	2
 2723              	.L234:
 2724 0048 00000000 		.word	.LANCHOR7
 2725 004c 00000000 		.word	.LANCHOR9
 2726 0050 00000000 		.word	.LANCHOR15
 2727              		.cfi_endproc
 2728              	.LFE40:
 2730              		.section	.text.prvIdleTask,"ax",%progbits
 2731              		.align	2
 2732              		.thumb
 2733              		.thumb_func
 2735              	prvIdleTask:
 2736              	.LFB38:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 2737              		.loc 1 3132 0
 2738              		.cfi_startproc
 2739              		@ Volatile: function does not return.
 2740              		@ args = 0, pretend = 0, frame = 0
 2741              		@ frame_needed = 0, uses_anonymous_args = 0
 2742              	.LVL242:
 2743 0000 08B5     		push	{r3, lr}
 2744              	.LCFI27:
 2745              		.cfi_def_cfa_offset 8
 2746              		.cfi_offset 3, -8
 2747              		.cfi_offset 14, -4
 2748              	.LVL243:
 2749              	.L237:
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2750              		.loc 1 3143 0
 2751 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2752              	.LVL244:
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2753              		.loc 1 3166 0
ARM GAS  /tmp/cciitH1F.s 			page 142


 2754 0006 064B     		ldr	r3, .L240
 2755 0008 1B68     		ldr	r3, [r3]
 2756 000a 012B     		cmp	r3, #1
 2757 000c F9D9     		bls	.L237
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2758              		.loc 1 3168 0
 2759 000e 4FF08052 		mov	r2, #268435456
 2760 0012 044B     		ldr	r3, .L240+4
 2761 0014 1A60     		str	r2, [r3]
 2762              		.syntax unified
 2763              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2764 0016 BFF34F8F 		dsb
 2765              	@ 0 "" 2
 2766              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2767 001a BFF36F8F 		isb
 2768              	@ 0 "" 2
 2769              		.thumb
 2770              		.syntax unified
 2771 001e F0E7     		b	.L237
 2772              	.L241:
 2773              		.align	2
 2774              	.L240:
 2775 0020 00000000 		.word	.LANCHOR4
 2776 0024 04ED00E0 		.word	-536810236
 2777              		.cfi_endproc
 2778              	.LFE38:
 2780              		.section	.text.xTaskGetHandle,"ax",%progbits
 2781              		.align	2
 2782              		.global	xTaskGetHandle
 2783              		.thumb
 2784              		.thumb_func
 2786              	xTaskGetHandle:
 2787              	.LFB27:
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
 2788              		.loc 1 2257 0
 2789              		.cfi_startproc
 2790              		@ args = 0, pretend = 0, frame = 0
 2791              		@ frame_needed = 0, uses_anonymous_args = 0
 2792              	.LVL245:
 2793 0000 70B5     		push	{r4, r5, r6, lr}
 2794              	.LCFI28:
 2795              		.cfi_def_cfa_offset 16
 2796              		.cfi_offset 4, -16
 2797              		.cfi_offset 5, -12
 2798              		.cfi_offset 6, -8
 2799              		.cfi_offset 14, -4
 2800 0002 0546     		mov	r5, r0
 2801              	.LVL246:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2802              		.loc 1 2262 0
 2803 0004 FFF7FEFF 		bl	strlen
 2804              	.LVL247:
 2805 0008 0F28     		cmp	r0, #15
 2806 000a 08D9     		bls	.L243
 2807              	.LBB151:
 2808              	.LBB152:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  /tmp/cciitH1F.s 			page 143


 2809              		.loc 2 237 0
 2810              		.syntax unified
 2811              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2812 000c 4FF05003 			mov r3, #80												
 2813 0010 83F31188 		msr basepri, r3											
 2814 0014 BFF36F8F 		isb														
 2815 0018 BFF34F8F 		dsb														
 2816              	
 2817              	@ 0 "" 2
 2818              	.LVL248:
 2819              		.thumb
 2820              		.syntax unified
 2821              	.L244:
 2822 001c FEE7     		b	.L244
 2823              	.L243:
 2824              	.LBE152:
 2825              	.LBE151:
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2826              		.loc 1 2264 0
 2827 001e FFF7FEFF 		bl	vTaskSuspendAll
 2828              	.LVL249:
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
 2829              		.loc 1 2258 0
 2830 0022 0726     		movs	r6, #7
 2831              	.LVL250:
 2832              	.L246:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
 2833              		.loc 1 2269 0
 2834 0024 013E     		subs	r6, r6, #1
 2835              	.LVL251:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2836              		.loc 1 2270 0
 2837 0026 06EB8602 		add	r2, r6, r6, lsl #2
 2838 002a 9300     		lsls	r3, r2, #2
 2839 002c 2946     		mov	r1, r5
 2840 002e 1348     		ldr	r0, .L252
 2841 0030 1844     		add	r0, r0, r3
 2842 0032 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 2843              	.LVL252:
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2844              		.loc 1 2272 0
 2845 0036 0446     		mov	r4, r0
 2846 0038 08B9     		cbnz	r0, .L245
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2847              		.loc 1 2278 0
 2848 003a 002E     		cmp	r6, #0
 2849 003c F2D1     		bne	.L246
 2850              	.L245:
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2851              		.loc 1 2281 0
 2852 003e 2CB9     		cbnz	r4, .L247
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2853              		.loc 1 2283 0
 2854 0040 0F4B     		ldr	r3, .L252+4
 2855 0042 1868     		ldr	r0, [r3]
 2856              	.LVL253:
 2857 0044 2946     		mov	r1, r5
ARM GAS  /tmp/cciitH1F.s 			page 144


 2858 0046 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 2859              	.LVL254:
 2860 004a 0446     		mov	r4, r0
 2861              	.LVL255:
 2862              	.L247:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2863              		.loc 1 2286 0
 2864 004c 2CB9     		cbnz	r4, .L248
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2865              		.loc 1 2288 0
 2866 004e 0D4B     		ldr	r3, .L252+8
 2867 0050 1868     		ldr	r0, [r3]
 2868              	.LVL256:
 2869 0052 2946     		mov	r1, r5
 2870 0054 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 2871              	.LVL257:
 2872 0058 0446     		mov	r4, r0
 2873              	.LVL258:
 2874              	.L248:
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2875              		.loc 1 2293 0
 2876 005a 24B9     		cbnz	r4, .L249
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2877              		.loc 1 2296 0
 2878 005c 2946     		mov	r1, r5
 2879 005e 0A48     		ldr	r0, .L252+12
 2880              	.LVL259:
 2881 0060 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 2882              	.LVL260:
 2883 0064 0446     		mov	r4, r0
 2884              	.LVL261:
 2885              	.L249:
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2886              		.loc 1 2303 0
 2887 0066 24B9     		cbnz	r4, .L250
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2888              		.loc 1 2306 0
 2889 0068 2946     		mov	r1, r5
 2890 006a 0848     		ldr	r0, .L252+16
 2891              	.LVL262:
 2892 006c FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 2893              	.LVL263:
 2894 0070 0446     		mov	r4, r0
 2895              	.LVL264:
 2896              	.L250:
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2897              		.loc 1 2311 0
 2898 0072 FFF7FEFF 		bl	xTaskResumeAll
 2899              	.LVL265:
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2900              		.loc 1 2314 0
 2901 0076 2046     		mov	r0, r4
 2902 0078 70BD     		pop	{r4, r5, r6, pc}
 2903              	.LVL266:
 2904              	.L253:
 2905 007a 00BF     		.align	2
 2906              	.L252:
ARM GAS  /tmp/cciitH1F.s 			page 145


 2907 007c 00000000 		.word	.LANCHOR4
 2908 0080 00000000 		.word	.LANCHOR2
 2909 0084 00000000 		.word	.LANCHOR8
 2910 0088 00000000 		.word	.LANCHOR0
 2911 008c 00000000 		.word	.LANCHOR7
 2912              		.cfi_endproc
 2913              	.LFE27:
 2915              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2916              		.align	2
 2917              		.global	vTaskSwitchContext
 2918              		.thumb
 2919              		.thumb_func
 2921              	vTaskSwitchContext:
 2922              	.LFB29:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2923              		.loc 1 2762 0
 2924              		.cfi_startproc
 2925              		@ args = 0, pretend = 0, frame = 0
 2926              		@ frame_needed = 0, uses_anonymous_args = 0
 2927 0000 38B5     		push	{r3, r4, r5, lr}
 2928              	.LCFI29:
 2929              		.cfi_def_cfa_offset 16
 2930              		.cfi_offset 3, -16
 2931              		.cfi_offset 4, -12
 2932              		.cfi_offset 5, -8
 2933              		.cfi_offset 14, -4
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2934              		.loc 1 2763 0
 2935 0002 2B4B     		ldr	r3, .L263
 2936 0004 1B68     		ldr	r3, [r3]
 2937 0006 1BB1     		cbz	r3, .L255
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2938              		.loc 1 2767 0
 2939 0008 0122     		movs	r2, #1
 2940 000a 2A4B     		ldr	r3, .L263+4
 2941 000c 1A60     		str	r2, [r3]
 2942 000e 38BD     		pop	{r3, r4, r5, pc}
 2943              	.L255:
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2944              		.loc 1 2771 0
 2945 0010 0022     		movs	r2, #0
 2946 0012 284B     		ldr	r3, .L263+4
 2947 0014 1A60     		str	r2, [r3]
 2948              	.LBB153:
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2949              		.loc 1 2802 0
 2950 0016 284B     		ldr	r3, .L263+8
 2951 0018 1B68     		ldr	r3, [r3]
 2952 001a 1B6B     		ldr	r3, [r3, #48]
 2953              	.LVL267:
 2954 001c 1A68     		ldr	r2, [r3]
 2955 001e B2F1A53F 		cmp	r2, #-1515870811
 2956 0022 0BD1     		bne	.L257
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2957              		.loc 1 2802 0 is_stmt 0 discriminator 2
 2958 0024 5A68     		ldr	r2, [r3, #4]
 2959 0026 B2F1A53F 		cmp	r2, #-1515870811
ARM GAS  /tmp/cciitH1F.s 			page 146


 2960 002a 07D1     		bne	.L257
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2961              		.loc 1 2802 0 discriminator 4
 2962 002c 9A68     		ldr	r2, [r3, #8]
 2963 002e B2F1A53F 		cmp	r2, #-1515870811
 2964 0032 03D1     		bne	.L257
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2965              		.loc 1 2802 0 discriminator 6
 2966 0034 DB68     		ldr	r3, [r3, #12]
 2967              	.LVL268:
 2968 0036 B3F1A53F 		cmp	r3, #-1515870811
 2969 003a 05D0     		beq	.L258
 2970              	.L257:
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2971              		.loc 1 2802 0 discriminator 7
 2972 003c 1E4B     		ldr	r3, .L263+8
 2973 003e 1868     		ldr	r0, [r3]
 2974 0040 1968     		ldr	r1, [r3]
 2975 0042 3431     		adds	r1, r1, #52
 2976 0044 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2977              	.LVL269:
 2978              	.L258:
 2979              	.LBE153:
 2980              	.LBB154:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2981              		.loc 1 2806 0 is_stmt 1
 2982 0048 1C4B     		ldr	r3, .L263+12
 2983 004a 1B68     		ldr	r3, [r3]
 2984              	.LVL270:
 2985              	.LBB155:
 2986              	.LBB156:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2987              		.loc 2 176 0
 2988              		.syntax unified
 2989              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2990 004c B3FA83F3 		clz r3, r3
 2991              	@ 0 "" 2
 2992              	.LVL271:
 2993              		.thumb
 2994              		.syntax unified
 2995 0050 DBB2     		uxtb	r3, r3
 2996              	.LBE156:
 2997              	.LBE155:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2998              		.loc 1 2806 0
 2999 0052 C3F11F03 		rsb	r3, r3, #31
 3000              	.LVL272:
 3001 0056 03EB8301 		add	r1, r3, r3, lsl #2
 3002 005a 8A00     		lsls	r2, r1, #2
 3003 005c 1849     		ldr	r1, .L263+16
 3004 005e 8A58     		ldr	r2, [r1, r2]
 3005 0060 42B9     		cbnz	r2, .L259
 3006              	.LBB157:
 3007              	.LBB158:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3008              		.loc 2 237 0
 3009              		.syntax unified
ARM GAS  /tmp/cciitH1F.s 			page 147


 3010              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3011 0062 4FF05003 			mov r3, #80												
 3012 0066 83F31188 		msr basepri, r3											
 3013 006a BFF36F8F 		isb														
 3014 006e BFF34F8F 		dsb														
 3015              	
 3016              	@ 0 "" 2
 3017              	.LVL273:
 3018              		.thumb
 3019              		.syntax unified
 3020              	.L260:
 3021 0072 FEE7     		b	.L260
 3022              	.LVL274:
 3023              	.L259:
 3024              	.LBE158:
 3025              	.LBE157:
 3026              	.LBB159:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3027              		.loc 1 2806 0 discriminator 2
 3028 0074 124D     		ldr	r5, .L263+16
 3029 0076 9900     		lsls	r1, r3, #2
 3030 0078 CA18     		adds	r2, r1, r3
 3031 007a 9000     		lsls	r0, r2, #2
 3032 007c 2844     		add	r0, r0, r5
 3033 007e 4268     		ldr	r2, [r0, #4]
 3034 0080 5468     		ldr	r4, [r2, #4]
 3035 0082 4460     		str	r4, [r0, #4]
 3036 0084 1944     		add	r1, r1, r3
 3037 0086 8A00     		lsls	r2, r1, #2
 3038 0088 0832     		adds	r2, r2, #8
 3039 008a 2A44     		add	r2, r2, r5
 3040 008c 9442     		cmp	r4, r2
 3041 008e 05D1     		bne	.L261
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3042              		.loc 1 2806 0 is_stmt 0 discriminator 3
 3043 0090 6068     		ldr	r0, [r4, #4]
 3044 0092 03EB8301 		add	r1, r3, r3, lsl #2
 3045 0096 8A00     		lsls	r2, r1, #2
 3046 0098 2A44     		add	r2, r2, r5
 3047 009a 5060     		str	r0, [r2, #4]
 3048              	.L261:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3049              		.loc 1 2806 0 discriminator 5
 3050 009c 03EB8303 		add	r3, r3, r3, lsl #2
 3051              	.LVL275:
 3052 00a0 9A00     		lsls	r2, r3, #2
 3053 00a2 074B     		ldr	r3, .L263+16
 3054 00a4 1A44     		add	r2, r2, r3
 3055 00a6 5368     		ldr	r3, [r2, #4]
 3056 00a8 DA68     		ldr	r2, [r3, #12]
 3057 00aa 034B     		ldr	r3, .L263+8
 3058 00ac 1A60     		str	r2, [r3]
 3059 00ae 38BD     		pop	{r3, r4, r5, pc}
 3060              	.L264:
 3061              		.align	2
 3062              	.L263:
 3063 00b0 00000000 		.word	.LANCHOR16
ARM GAS  /tmp/cciitH1F.s 			page 148


 3064 00b4 00000000 		.word	.LANCHOR19
 3065 00b8 00000000 		.word	.LANCHOR10
 3066 00bc 00000000 		.word	.LANCHOR13
 3067 00c0 00000000 		.word	.LANCHOR4
 3068              	.LBE159:
 3069              	.LBE154:
 3070              		.cfi_endproc
 3071              	.LFE29:
 3073              		.section	.text.vTaskSuspend,"ax",%progbits
 3074              		.align	2
 3075              		.global	vTaskSuspend
 3076              		.thumb
 3077              		.thumb_func
 3079              	vTaskSuspend:
 3080              	.LFB14:
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3081              		.loc 1 1567 0 is_stmt 1
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 0
 3084              		@ frame_needed = 0, uses_anonymous_args = 0
 3085              	.LVL276:
 3086 0000 38B5     		push	{r3, r4, r5, lr}
 3087              	.LCFI30:
 3088              		.cfi_def_cfa_offset 16
 3089              		.cfi_offset 3, -16
 3090              		.cfi_offset 4, -12
 3091              		.cfi_offset 5, -8
 3092              		.cfi_offset 14, -4
 3093 0002 0446     		mov	r4, r0
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3094              		.loc 1 1570 0
 3095 0004 FFF7FEFF 		bl	vPortEnterCritical
 3096              	.LVL277:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3097              		.loc 1 1574 0
 3098 0008 0CB9     		cbnz	r4, .L266
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3099              		.loc 1 1574 0 is_stmt 0 discriminator 1
 3100 000a 2A4B     		ldr	r3, .L276
 3101 000c 1C68     		ldr	r4, [r3]
 3102              	.LVL278:
 3103              	.L266:
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3104              		.loc 1 1580 0 is_stmt 1 discriminator 4
 3105 000e 251D     		adds	r5, r4, #4
 3106 0010 2846     		mov	r0, r5
 3107 0012 FFF7FEFF 		bl	uxListRemove
 3108              	.LVL279:
 3109 0016 70B9     		cbnz	r0, .L267
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3110              		.loc 1 1582 0
 3111 0018 E26A     		ldr	r2, [r4, #44]
 3112 001a 02EB8201 		add	r1, r2, r2, lsl #2
 3113 001e 8B00     		lsls	r3, r1, #2
 3114 0020 2549     		ldr	r1, .L276+4
 3115 0022 CB58     		ldr	r3, [r1, r3]
 3116 0024 3BB9     		cbnz	r3, .L267
ARM GAS  /tmp/cciitH1F.s 			page 149


1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3117              		.loc 1 1582 0 is_stmt 0 discriminator 1
 3118 0026 0123     		movs	r3, #1
 3119 0028 03FA02F2 		lsl	r2, r3, r2
 3120 002c 2349     		ldr	r1, .L276+8
 3121 002e 0B68     		ldr	r3, [r1]
 3122 0030 23EA0203 		bic	r3, r3, r2
 3123 0034 0B60     		str	r3, [r1]
 3124              	.L267:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3125              		.loc 1 1590 0 is_stmt 1
 3126 0036 A36A     		ldr	r3, [r4, #40]
 3127 0038 1BB1     		cbz	r3, .L268
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3128              		.loc 1 1592 0
 3129 003a 04F11800 		add	r0, r4, #24
 3130 003e FFF7FEFF 		bl	uxListRemove
 3131              	.LVL280:
 3132              	.L268:
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3133              		.loc 1 1599 0
 3134 0042 2946     		mov	r1, r5
 3135 0044 1E48     		ldr	r0, .L276+12
 3136 0046 FFF7FEFF 		bl	vListInsertEnd
 3137              	.LVL281:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3138              		.loc 1 1601 0
 3139 004a FFF7FEFF 		bl	vPortExitCritical
 3140              	.LVL282:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3141              		.loc 1 1603 0
 3142 004e 1D4B     		ldr	r3, .L276+16
 3143 0050 1B68     		ldr	r3, [r3]
 3144 0052 2BB1     		cbz	r3, .L269
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3145              		.loc 1 1607 0
 3146 0054 FFF7FEFF 		bl	vPortEnterCritical
 3147              	.LVL283:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3148              		.loc 1 1609 0
 3149 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3150              	.LVL284:
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3151              		.loc 1 1611 0
 3152 005c FFF7FEFF 		bl	vPortExitCritical
 3153              	.LVL285:
 3154              	.L269:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3155              		.loc 1 1618 0
 3156 0060 144B     		ldr	r3, .L276
 3157 0062 1B68     		ldr	r3, [r3]
 3158 0064 9C42     		cmp	r4, r3
 3159 0066 23D1     		bne	.L265
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3160              		.loc 1 1620 0
 3161 0068 164B     		ldr	r3, .L276+16
 3162 006a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciitH1F.s 			page 150


 3163 006c A3B1     		cbz	r3, .L271
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3164              		.loc 1 1623 0
 3165 006e 164B     		ldr	r3, .L276+20
 3166 0070 1B68     		ldr	r3, [r3]
 3167 0072 43B1     		cbz	r3, .L272
 3168              	.LBB160:
 3169              	.LBB161:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3170              		.loc 2 237 0
 3171              		.syntax unified
 3172              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3173 0074 4FF05003 			mov r3, #80												
 3174 0078 83F31188 		msr basepri, r3											
 3175 007c BFF36F8F 		isb														
 3176 0080 BFF34F8F 		dsb														
 3177              	
 3178              	@ 0 "" 2
 3179              	.LVL286:
 3180              		.thumb
 3181              		.syntax unified
 3182              	.L273:
 3183 0084 FEE7     		b	.L273
 3184              	.L272:
 3185              	.LBE161:
 3186              	.LBE160:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3187              		.loc 1 1624 0
 3188 0086 4FF08052 		mov	r2, #268435456
 3189 008a 104B     		ldr	r3, .L276+24
 3190 008c 1A60     		str	r2, [r3]
 3191              		.syntax unified
 3192              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3193 008e BFF34F8F 		dsb
 3194              	@ 0 "" 2
 3195              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3196 0092 BFF36F8F 		isb
 3197              	@ 0 "" 2
 3198              		.thumb
 3199              		.syntax unified
 3200 0096 38BD     		pop	{r3, r4, r5, pc}
 3201              	.LVL287:
 3202              	.L271:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3203              		.loc 1 1631 0
 3204 0098 094B     		ldr	r3, .L276+12
 3205 009a 1A68     		ldr	r2, [r3]
 3206 009c 0C4B     		ldr	r3, .L276+28
 3207 009e 1B68     		ldr	r3, [r3]
 3208 00a0 9A42     		cmp	r2, r3
 3209 00a2 03D1     		bne	.L274
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3210              		.loc 1 1637 0
 3211 00a4 0022     		movs	r2, #0
 3212 00a6 034B     		ldr	r3, .L276
 3213 00a8 1A60     		str	r2, [r3]
 3214 00aa 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/cciitH1F.s 			page 151


 3215              	.LVL288:
 3216              	.L274:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3217              		.loc 1 1641 0
 3218 00ac FFF7FEFF 		bl	vTaskSwitchContext
 3219              	.LVL289:
 3220              	.L265:
 3221 00b0 38BD     		pop	{r3, r4, r5, pc}
 3222              	.LVL290:
 3223              	.L277:
 3224 00b2 00BF     		.align	2
 3225              	.L276:
 3226 00b4 00000000 		.word	.LANCHOR10
 3227 00b8 00000000 		.word	.LANCHOR4
 3228 00bc 00000000 		.word	.LANCHOR13
 3229 00c0 00000000 		.word	.LANCHOR0
 3230 00c4 00000000 		.word	.LANCHOR11
 3231 00c8 00000000 		.word	.LANCHOR16
 3232 00cc 04ED00E0 		.word	-536810236
 3233 00d0 00000000 		.word	.LANCHOR9
 3234              		.cfi_endproc
 3235              	.LFE14:
 3237              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3238              		.align	2
 3239              		.global	vTaskPlaceOnEventList
 3240              		.thumb
 3241              		.thumb_func
 3243              	vTaskPlaceOnEventList:
 3244              	.LFB30:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3245              		.loc 1 2821 0
 3246              		.cfi_startproc
 3247              		@ args = 0, pretend = 0, frame = 0
 3248              		@ frame_needed = 0, uses_anonymous_args = 0
 3249              	.LVL291:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3250              		.loc 1 2822 0
 3251 0000 40B9     		cbnz	r0, .L279
 3252              	.LBB162:
 3253              	.LBB163:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3254              		.loc 2 237 0
 3255              		.syntax unified
 3256              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3257 0002 4FF05003 			mov r3, #80												
 3258 0006 83F31188 		msr basepri, r3											
 3259 000a BFF36F8F 		isb														
 3260 000e BFF34F8F 		dsb														
 3261              	
 3262              	@ 0 "" 2
 3263              	.LVL292:
 3264              		.thumb
 3265              		.syntax unified
 3266              	.L280:
 3267 0012 FEE7     		b	.L280
 3268              	.L279:
 3269              	.LBE163:
ARM GAS  /tmp/cciitH1F.s 			page 152


 3270              	.LBE162:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3271              		.loc 1 2821 0
 3272 0014 10B5     		push	{r4, lr}
 3273              	.LCFI31:
 3274              		.cfi_def_cfa_offset 8
 3275              		.cfi_offset 4, -8
 3276              		.cfi_offset 14, -4
 3277 0016 0C46     		mov	r4, r1
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3278              		.loc 1 2831 0
 3279 0018 044B     		ldr	r3, .L282
 3280 001a 1968     		ldr	r1, [r3]
 3281              	.LVL293:
 3282 001c 1831     		adds	r1, r1, #24
 3283 001e FFF7FEFF 		bl	vListInsert
 3284              	.LVL294:
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3285              		.loc 1 2833 0
 3286 0022 0121     		movs	r1, #1
 3287 0024 2046     		mov	r0, r4
 3288 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3289              	.LVL295:
 3290 002a 10BD     		pop	{r4, pc}
 3291              	.LVL296:
 3292              	.L283:
 3293              		.align	2
 3294              	.L282:
 3295 002c 00000000 		.word	.LANCHOR10
 3296              		.cfi_endproc
 3297              	.LFE30:
 3299              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3300              		.align	2
 3301              		.global	vTaskPlaceOnUnorderedEventList
 3302              		.thumb
 3303              		.thumb_func
 3305              	vTaskPlaceOnUnorderedEventList:
 3306              	.LFB31:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3307              		.loc 1 2838 0
 3308              		.cfi_startproc
 3309              		@ args = 0, pretend = 0, frame = 0
 3310              		@ frame_needed = 0, uses_anonymous_args = 0
 3311              	.LVL297:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3312              		.loc 1 2839 0
 3313 0000 40B9     		cbnz	r0, .L285
 3314              	.LBB164:
 3315              	.LBB165:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3316              		.loc 2 237 0
 3317              		.syntax unified
 3318              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3319 0002 4FF05003 			mov r3, #80												
 3320 0006 83F31188 		msr basepri, r3											
 3321 000a BFF36F8F 		isb														
 3322 000e BFF34F8F 		dsb														
ARM GAS  /tmp/cciitH1F.s 			page 153


 3323              	
 3324              	@ 0 "" 2
 3325              	.LVL298:
 3326              		.thumb
 3327              		.syntax unified
 3328              	.L286:
 3329 0012 FEE7     		b	.L286
 3330              	.L285:
 3331 0014 0346     		mov	r3, r0
 3332              	.LBE165:
 3333              	.LBE164:
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3334              		.loc 1 2843 0
 3335 0016 0F48     		ldr	r0, .L290
 3336              	.LVL299:
 3337 0018 0068     		ldr	r0, [r0]
 3338 001a 40B9     		cbnz	r0, .L287
 3339              	.LBB166:
 3340              	.LBB167:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3341              		.loc 2 237 0
 3342              		.syntax unified
 3343              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3344 001c 4FF05003 			mov r3, #80												
 3345 0020 83F31188 		msr basepri, r3											
 3346 0024 BFF36F8F 		isb														
 3347 0028 BFF34F8F 		dsb														
 3348              	
 3349              	@ 0 "" 2
 3350              	.LVL300:
 3351              		.thumb
 3352              		.syntax unified
 3353              	.L288:
 3354 002c FEE7     		b	.L288
 3355              	.LVL301:
 3356              	.L287:
 3357              	.LBE167:
 3358              	.LBE166:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3359              		.loc 1 2838 0
 3360 002e 10B5     		push	{r4, lr}
 3361              	.LCFI32:
 3362              		.cfi_def_cfa_offset 8
 3363              		.cfi_offset 4, -8
 3364              		.cfi_offset 14, -4
 3365 0030 1846     		mov	r0, r3
 3366 0032 1446     		mov	r4, r2
 3367 0034 0B46     		mov	r3, r1
 3368              	.LVL302:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3369              		.loc 1 2848 0
 3370 0036 084A     		ldr	r2, .L290+4
 3371              	.LVL303:
 3372 0038 1168     		ldr	r1, [r2]
 3373              	.LVL304:
 3374 003a 43F00043 		orr	r3, r3, #-2147483648
 3375              	.LVL305:
ARM GAS  /tmp/cciitH1F.s 			page 154


 3376 003e 8B61     		str	r3, [r1, #24]
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3377              		.loc 1 2855 0
 3378 0040 1168     		ldr	r1, [r2]
 3379 0042 1831     		adds	r1, r1, #24
 3380 0044 FFF7FEFF 		bl	vListInsertEnd
 3381              	.LVL306:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3382              		.loc 1 2857 0
 3383 0048 0121     		movs	r1, #1
 3384 004a 2046     		mov	r0, r4
 3385 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3386              	.LVL307:
 3387 0050 10BD     		pop	{r4, pc}
 3388              	.LVL308:
 3389              	.L291:
 3390 0052 00BF     		.align	2
 3391              	.L290:
 3392 0054 00000000 		.word	.LANCHOR16
 3393 0058 00000000 		.word	.LANCHOR10
 3394              		.cfi_endproc
 3395              	.LFE31:
 3397              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3398              		.align	2
 3399              		.global	vTaskPlaceOnEventListRestricted
 3400              		.thumb
 3401              		.thumb_func
 3403              	vTaskPlaceOnEventListRestricted:
 3404              	.LFB32:
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3405              		.loc 1 2864 0
 3406              		.cfi_startproc
 3407              		@ args = 0, pretend = 0, frame = 0
 3408              		@ frame_needed = 0, uses_anonymous_args = 0
 3409              	.LVL309:
 3410 0000 38B5     		push	{r3, r4, r5, lr}
 3411              	.LCFI33:
 3412              		.cfi_def_cfa_offset 16
 3413              		.cfi_offset 3, -16
 3414              		.cfi_offset 4, -12
 3415              		.cfi_offset 5, -8
 3416              		.cfi_offset 14, -4
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3417              		.loc 1 2865 0
 3418 0002 40B9     		cbnz	r0, .L293
 3419              	.LBB168:
 3420              	.LBB169:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3421              		.loc 2 237 0
 3422              		.syntax unified
 3423              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3424 0004 4FF05003 			mov r3, #80												
 3425 0008 83F31188 		msr basepri, r3											
 3426 000c BFF36F8F 		isb														
 3427 0010 BFF34F8F 		dsb														
 3428              	
 3429              	@ 0 "" 2
ARM GAS  /tmp/cciitH1F.s 			page 155


 3430              	.LVL310:
 3431              		.thumb
 3432              		.syntax unified
 3433              	.L294:
 3434 0014 FEE7     		b	.L294
 3435              	.L293:
 3436 0016 0C46     		mov	r4, r1
 3437 0018 1546     		mov	r5, r2
 3438              	.LBE169:
 3439              	.LBE168:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3440              		.loc 1 2877 0
 3441 001a 064A     		ldr	r2, .L298
 3442              	.LVL311:
 3443 001c 1168     		ldr	r1, [r2]
 3444              	.LVL312:
 3445 001e 1831     		adds	r1, r1, #24
 3446 0020 FFF7FEFF 		bl	vListInsertEnd
 3447              	.LVL313:
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3448              		.loc 1 2882 0
 3449 0024 0DB1     		cbz	r5, .L295
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3450              		.loc 1 2884 0
 3451 0026 4FF0FF34 		mov	r4, #-1
 3452              	.LVL314:
 3453              	.L295:
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3454              		.loc 1 2888 0
 3455 002a 2946     		mov	r1, r5
 3456 002c 2046     		mov	r0, r4
 3457 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3458              	.LVL315:
 3459 0032 38BD     		pop	{r3, r4, r5, pc}
 3460              	.LVL316:
 3461              	.L299:
 3462              		.align	2
 3463              	.L298:
 3464 0034 00000000 		.word	.LANCHOR10
 3465              		.cfi_endproc
 3466              	.LFE32:
 3468              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3469              		.align	2
 3470              		.global	xTaskRemoveFromEventList
 3471              		.thumb
 3472              		.thumb_func
 3474              	xTaskRemoveFromEventList:
 3475              	.LFB33:
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3476              		.loc 1 2895 0
 3477              		.cfi_startproc
 3478              		@ args = 0, pretend = 0, frame = 0
 3479              		@ frame_needed = 0, uses_anonymous_args = 0
 3480              	.LVL317:
 3481 0000 38B5     		push	{r3, r4, r5, lr}
 3482              	.LCFI34:
 3483              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cciitH1F.s 			page 156


 3484              		.cfi_offset 3, -16
 3485              		.cfi_offset 4, -12
 3486              		.cfi_offset 5, -8
 3487              		.cfi_offset 14, -4
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3488              		.loc 1 2912 0
 3489 0002 C368     		ldr	r3, [r0, #12]
 3490 0004 DC68     		ldr	r4, [r3, #12]
 3491              	.LVL318:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3492              		.loc 1 2913 0
 3493 0006 44B9     		cbnz	r4, .L301
 3494              	.LBB170:
 3495              	.LBB171:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3496              		.loc 2 237 0
 3497              		.syntax unified
 3498              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3499 0008 4FF05003 			mov r3, #80												
 3500 000c 83F31188 		msr basepri, r3											
 3501 0010 BFF36F8F 		isb														
 3502 0014 BFF34F8F 		dsb														
 3503              	
 3504              	@ 0 "" 2
 3505              	.LVL319:
 3506              		.thumb
 3507              		.syntax unified
 3508              	.L302:
 3509 0018 FEE7     		b	.L302
 3510              	.L301:
 3511              	.LBE171:
 3512              	.LBE170:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3513              		.loc 1 2914 0
 3514 001a 04F11805 		add	r5, r4, #24
 3515 001e 2846     		mov	r0, r5
 3516              	.LVL320:
 3517 0020 FFF7FEFF 		bl	uxListRemove
 3518              	.LVL321:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3519              		.loc 1 2916 0
 3520 0024 134B     		ldr	r3, .L308
 3521 0026 1B68     		ldr	r3, [r3]
 3522 0028 A3B9     		cbnz	r3, .L303
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3523              		.loc 1 2918 0
 3524 002a 251D     		adds	r5, r4, #4
 3525 002c 2846     		mov	r0, r5
 3526 002e FFF7FEFF 		bl	uxListRemove
 3527              	.LVL322:
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3528              		.loc 1 2919 0
 3529 0032 E36A     		ldr	r3, [r4, #44]
 3530 0034 0122     		movs	r2, #1
 3531 0036 02FA03F1 		lsl	r1, r2, r3
 3532 003a 0F48     		ldr	r0, .L308+4
 3533 003c 0268     		ldr	r2, [r0]
ARM GAS  /tmp/cciitH1F.s 			page 157


 3534 003e 0A43     		orrs	r2, r2, r1
 3535 0040 0260     		str	r2, [r0]
 3536 0042 03EB8303 		add	r3, r3, r3, lsl #2
 3537 0046 9A00     		lsls	r2, r3, #2
 3538 0048 2946     		mov	r1, r5
 3539 004a 0C48     		ldr	r0, .L308+8
 3540 004c 1044     		add	r0, r0, r2
 3541 004e FFF7FEFF 		bl	vListInsertEnd
 3542              	.LVL323:
 3543 0052 03E0     		b	.L304
 3544              	.L303:
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3545              		.loc 1 2925 0
 3546 0054 2946     		mov	r1, r5
 3547 0056 0A48     		ldr	r0, .L308+12
 3548 0058 FFF7FEFF 		bl	vListInsertEnd
 3549              	.LVL324:
 3550              	.L304:
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3551              		.loc 1 2928 0
 3552 005c E26A     		ldr	r2, [r4, #44]
 3553 005e 094B     		ldr	r3, .L308+16
 3554 0060 1B68     		ldr	r3, [r3]
 3555 0062 DB6A     		ldr	r3, [r3, #44]
 3556 0064 9A42     		cmp	r2, r3
 3557 0066 03D9     		bls	.L306
 3558              	.LVL325:
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3559              		.loc 1 2937 0
 3560 0068 0120     		movs	r0, #1
 3561 006a 074B     		ldr	r3, .L308+20
 3562 006c 1860     		str	r0, [r3]
 3563 006e 38BD     		pop	{r3, r4, r5, pc}
 3564              	.LVL326:
 3565              	.L306:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3566              		.loc 1 2941 0
 3567 0070 0020     		movs	r0, #0
 3568              	.LVL327:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3569              		.loc 1 2959 0
 3570 0072 38BD     		pop	{r3, r4, r5, pc}
 3571              	.LVL328:
 3572              	.L309:
 3573              		.align	2
 3574              	.L308:
 3575 0074 00000000 		.word	.LANCHOR16
 3576 0078 00000000 		.word	.LANCHOR13
 3577 007c 00000000 		.word	.LANCHOR4
 3578 0080 00000000 		.word	.LANCHOR1
 3579 0084 00000000 		.word	.LANCHOR10
 3580 0088 00000000 		.word	.LANCHOR19
 3581              		.cfi_endproc
 3582              	.LFE33:
 3584              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3585              		.align	2
 3586              		.global	xTaskRemoveFromUnorderedEventList
ARM GAS  /tmp/cciitH1F.s 			page 158


 3587              		.thumb
 3588              		.thumb_func
 3590              	xTaskRemoveFromUnorderedEventList:
 3591              	.LFB34:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3592              		.loc 1 2963 0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 0
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596              	.LVL329:
 3597 0000 38B5     		push	{r3, r4, r5, lr}
 3598              	.LCFI35:
 3599              		.cfi_def_cfa_offset 16
 3600              		.cfi_offset 3, -16
 3601              		.cfi_offset 4, -12
 3602              		.cfi_offset 5, -8
 3603              		.cfi_offset 14, -4
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3604              		.loc 1 2969 0
 3605 0002 1E4B     		ldr	r3, .L318
 3606 0004 1B68     		ldr	r3, [r3]
 3607 0006 43B9     		cbnz	r3, .L311
 3608              	.LBB172:
 3609              	.LBB173:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3610              		.loc 2 237 0
 3611              		.syntax unified
 3612              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3613 0008 4FF05003 			mov r3, #80												
 3614 000c 83F31188 		msr basepri, r3											
 3615 0010 BFF36F8F 		isb														
 3616 0014 BFF34F8F 		dsb														
 3617              	
 3618              	@ 0 "" 2
 3619              	.LVL330:
 3620              		.thumb
 3621              		.syntax unified
 3622              	.L312:
 3623 0018 FEE7     		b	.L312
 3624              	.L311:
 3625              	.LBE173:
 3626              	.LBE172:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3627              		.loc 1 2972 0
 3628 001a 41F00043 		orr	r3, r1, #-2147483648
 3629 001e 0360     		str	r3, [r0]
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3630              		.loc 1 2976 0
 3631 0020 C468     		ldr	r4, [r0, #12]
 3632              	.LVL331:
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3633              		.loc 1 2977 0
 3634 0022 44B9     		cbnz	r4, .L313
 3635              	.LBB174:
 3636              	.LBB175:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3637              		.loc 2 237 0
ARM GAS  /tmp/cciitH1F.s 			page 159


 3638              		.syntax unified
 3639              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3640 0024 4FF05003 			mov r3, #80												
 3641 0028 83F31188 		msr basepri, r3											
 3642 002c BFF36F8F 		isb														
 3643 0030 BFF34F8F 		dsb														
 3644              	
 3645              	@ 0 "" 2
 3646              	.LVL332:
 3647              		.thumb
 3648              		.syntax unified
 3649              	.L314:
 3650 0034 FEE7     		b	.L314
 3651              	.L313:
 3652              	.LBE175:
 3653              	.LBE174:
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3654              		.loc 1 2978 0
 3655 0036 FFF7FEFF 		bl	uxListRemove
 3656              	.LVL333:
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3657              		.loc 1 2983 0
 3658 003a 251D     		adds	r5, r4, #4
 3659 003c 2846     		mov	r0, r5
 3660 003e FFF7FEFF 		bl	uxListRemove
 3661              	.LVL334:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3662              		.loc 1 2984 0
 3663 0042 E36A     		ldr	r3, [r4, #44]
 3664 0044 0122     		movs	r2, #1
 3665 0046 02FA03F1 		lsl	r1, r2, r3
 3666 004a 0D48     		ldr	r0, .L318+4
 3667 004c 0268     		ldr	r2, [r0]
 3668 004e 0A43     		orrs	r2, r2, r1
 3669 0050 0260     		str	r2, [r0]
 3670 0052 03EB8303 		add	r3, r3, r3, lsl #2
 3671 0056 9A00     		lsls	r2, r3, #2
 3672 0058 2946     		mov	r1, r5
 3673 005a 0A48     		ldr	r0, .L318+8
 3674 005c 1044     		add	r0, r0, r2
 3675 005e FFF7FEFF 		bl	vListInsertEnd
 3676              	.LVL335:
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3677              		.loc 1 2986 0
 3678 0062 E26A     		ldr	r2, [r4, #44]
 3679 0064 084B     		ldr	r3, .L318+12
 3680 0066 1B68     		ldr	r3, [r3]
 3681 0068 DB6A     		ldr	r3, [r3, #44]
 3682 006a 9A42     		cmp	r2, r3
 3683 006c 03D9     		bls	.L316
 3684              	.LVL336:
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3685              		.loc 1 2996 0
 3686 006e 0120     		movs	r0, #1
 3687 0070 064B     		ldr	r3, .L318+16
 3688 0072 1860     		str	r0, [r3]
 3689 0074 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/cciitH1F.s 			page 160


 3690              	.LVL337:
 3691              	.L316:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3692              		.loc 1 3000 0
 3693 0076 0020     		movs	r0, #0
 3694              	.LVL338:
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3695              		.loc 1 3004 0
 3696 0078 38BD     		pop	{r3, r4, r5, pc}
 3697              	.LVL339:
 3698              	.L319:
 3699 007a 00BF     		.align	2
 3700              	.L318:
 3701 007c 00000000 		.word	.LANCHOR16
 3702 0080 00000000 		.word	.LANCHOR13
 3703 0084 00000000 		.word	.LANCHOR4
 3704 0088 00000000 		.word	.LANCHOR10
 3705 008c 00000000 		.word	.LANCHOR19
 3706              		.cfi_endproc
 3707              	.LFE34:
 3709              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3710              		.align	2
 3711              		.global	vTaskSetTimeOutState
 3712              		.thumb
 3713              		.thumb_func
 3715              	vTaskSetTimeOutState:
 3716              	.LFB35:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3717              		.loc 1 3008 0
 3718              		.cfi_startproc
 3719              		@ args = 0, pretend = 0, frame = 0
 3720              		@ frame_needed = 0, uses_anonymous_args = 0
 3721              		@ link register save eliminated.
 3722              	.LVL340:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3723              		.loc 1 3009 0
 3724 0000 40B9     		cbnz	r0, .L321
 3725              	.LBB176:
 3726              	.LBB177:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3727              		.loc 2 237 0
 3728              		.syntax unified
 3729              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3730 0002 4FF05003 			mov r3, #80												
 3731 0006 83F31188 		msr basepri, r3											
 3732 000a BFF36F8F 		isb														
 3733 000e BFF34F8F 		dsb														
 3734              	
 3735              	@ 0 "" 2
 3736              	.LVL341:
 3737              		.thumb
 3738              		.syntax unified
 3739              	.L322:
 3740 0012 FEE7     		b	.L322
 3741              	.L321:
 3742              	.LBE177:
 3743              	.LBE176:
ARM GAS  /tmp/cciitH1F.s 			page 161


3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3744              		.loc 1 3010 0
 3745 0014 034A     		ldr	r2, .L323
 3746 0016 1268     		ldr	r2, [r2]
 3747 0018 0260     		str	r2, [r0]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3748              		.loc 1 3011 0
 3749 001a 034A     		ldr	r2, .L323+4
 3750 001c 1268     		ldr	r2, [r2]
 3751 001e 4260     		str	r2, [r0, #4]
 3752 0020 7047     		bx	lr
 3753              	.L324:
 3754 0022 00BF     		.align	2
 3755              	.L323:
 3756 0024 00000000 		.word	.LANCHOR17
 3757 0028 00000000 		.word	.LANCHOR14
 3758              		.cfi_endproc
 3759              	.LFE35:
 3761              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3762              		.align	2
 3763              		.global	xTaskCheckForTimeOut
 3764              		.thumb
 3765              		.thumb_func
 3767              	xTaskCheckForTimeOut:
 3768              	.LFB36:
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3769              		.loc 1 3016 0
 3770              		.cfi_startproc
 3771              		@ args = 0, pretend = 0, frame = 0
 3772              		@ frame_needed = 0, uses_anonymous_args = 0
 3773              	.LVL342:
 3774 0000 38B5     		push	{r3, r4, r5, lr}
 3775              	.LCFI36:
 3776              		.cfi_def_cfa_offset 16
 3777              		.cfi_offset 3, -16
 3778              		.cfi_offset 4, -12
 3779              		.cfi_offset 5, -8
 3780              		.cfi_offset 14, -4
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3781              		.loc 1 3019 0
 3782 0002 40B9     		cbnz	r0, .L326
 3783              	.LBB178:
 3784              	.LBB179:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3785              		.loc 2 237 0
 3786              		.syntax unified
 3787              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3788 0004 4FF05003 			mov r3, #80												
 3789 0008 83F31188 		msr basepri, r3											
 3790 000c BFF36F8F 		isb														
 3791 0010 BFF34F8F 		dsb														
 3792              	
 3793              	@ 0 "" 2
 3794              	.LVL343:
 3795              		.thumb
 3796              		.syntax unified
 3797              	.L327:
ARM GAS  /tmp/cciitH1F.s 			page 162


 3798 0014 FEE7     		b	.L327
 3799              	.L326:
 3800 0016 0446     		mov	r4, r0
 3801              	.LBE179:
 3802              	.LBE178:
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3803              		.loc 1 3020 0
 3804 0018 41B9     		cbnz	r1, .L328
 3805              	.LBB180:
 3806              	.LBB181:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3807              		.loc 2 237 0
 3808              		.syntax unified
 3809              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3810 001a 4FF05003 			mov r3, #80												
 3811 001e 83F31188 		msr basepri, r3											
 3812 0022 BFF36F8F 		isb														
 3813 0026 BFF34F8F 		dsb														
 3814              	
 3815              	@ 0 "" 2
 3816              	.LVL344:
 3817              		.thumb
 3818              		.syntax unified
 3819              	.L329:
 3820 002a FEE7     		b	.L329
 3821              	.L328:
 3822 002c 0D46     		mov	r5, r1
 3823              	.LBE181:
 3824              	.LBE180:
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3825              		.loc 1 3022 0
 3826 002e FFF7FEFF 		bl	vPortEnterCritical
 3827              	.LVL345:
 3828              	.LBB182:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3829              		.loc 1 3025 0
 3830 0032 114B     		ldr	r3, .L336
 3831 0034 1968     		ldr	r1, [r3]
 3832              	.LVL346:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3833              		.loc 1 3039 0
 3834 0036 2A68     		ldr	r2, [r5]
 3835 0038 B2F1FF3F 		cmp	r2, #-1
 3836 003c 13D0     		beq	.L332
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3837              		.loc 1 3049 0
 3838 003e 2068     		ldr	r0, [r4]
 3839 0040 0E4B     		ldr	r3, .L336+4
 3840 0042 1B68     		ldr	r3, [r3]
 3841 0044 9842     		cmp	r0, r3
 3842 0046 02D0     		beq	.L331
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3843              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3844 0048 6368     		ldr	r3, [r4, #4]
 3845 004a 9942     		cmp	r1, r3
 3846 004c 0DD2     		bcs	.L333
 3847              	.L331:
ARM GAS  /tmp/cciitH1F.s 			page 163


3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3848              		.loc 1 3058 0 is_stmt 1
 3849 004e 6368     		ldr	r3, [r4, #4]
 3850 0050 C81A     		subs	r0, r1, r3
 3851 0052 8242     		cmp	r2, r0
 3852 0054 0BD9     		bls	.L334
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3853              		.loc 1 3061 0
 3854 0056 5B1A     		subs	r3, r3, r1
 3855 0058 1344     		add	r3, r3, r2
 3856 005a 2B60     		str	r3, [r5]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3857              		.loc 1 3062 0
 3858 005c 2046     		mov	r0, r4
 3859 005e FFF7FEFF 		bl	vTaskSetTimeOutState
 3860              	.LVL347:
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3861              		.loc 1 3063 0
 3862 0062 0024     		movs	r4, #0
 3863              	.LVL348:
 3864 0064 04E0     		b	.L330
 3865              	.LVL349:
 3866              	.L332:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3867              		.loc 1 3044 0
 3868 0066 0024     		movs	r4, #0
 3869              	.LVL350:
 3870 0068 02E0     		b	.L330
 3871              	.LVL351:
 3872              	.L333:
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3873              		.loc 1 3056 0
 3874 006a 0124     		movs	r4, #1
 3875              	.LVL352:
 3876 006c 00E0     		b	.L330
 3877              	.LVL353:
 3878              	.L334:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3879              		.loc 1 3067 0
 3880 006e 0124     		movs	r4, #1
 3881              	.LVL354:
 3882              	.L330:
 3883              	.LBE182:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3884              		.loc 1 3070 0
 3885 0070 FFF7FEFF 		bl	vPortExitCritical
 3886              	.LVL355:
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3887              		.loc 1 3073 0
 3888 0074 2046     		mov	r0, r4
 3889 0076 38BD     		pop	{r3, r4, r5, pc}
 3890              	.LVL356:
 3891              	.L337:
 3892              		.align	2
 3893              	.L336:
 3894 0078 00000000 		.word	.LANCHOR14
 3895 007c 00000000 		.word	.LANCHOR17
ARM GAS  /tmp/cciitH1F.s 			page 164


 3896              		.cfi_endproc
 3897              	.LFE36:
 3899              		.section	.text.vTaskMissedYield,"ax",%progbits
 3900              		.align	2
 3901              		.global	vTaskMissedYield
 3902              		.thumb
 3903              		.thumb_func
 3905              	vTaskMissedYield:
 3906              	.LFB37:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3907              		.loc 1 3077 0
 3908              		.cfi_startproc
 3909              		@ args = 0, pretend = 0, frame = 0
 3910              		@ frame_needed = 0, uses_anonymous_args = 0
 3911              		@ link register save eliminated.
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3912              		.loc 1 3078 0
 3913 0000 0122     		movs	r2, #1
 3914 0002 014B     		ldr	r3, .L339
 3915 0004 1A60     		str	r2, [r3]
 3916 0006 7047     		bx	lr
 3917              	.L340:
 3918              		.align	2
 3919              	.L339:
 3920 0008 00000000 		.word	.LANCHOR19
 3921              		.cfi_endproc
 3922              	.LFE37:
 3924              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3925              		.align	2
 3926              		.global	uxTaskGetStackHighWaterMark
 3927              		.thumb
 3928              		.thumb_func
 3930              	uxTaskGetStackHighWaterMark:
 3931              	.LFB42:
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3932              		.loc 1 3554 0
 3933              		.cfi_startproc
 3934              		@ args = 0, pretend = 0, frame = 0
 3935              		@ frame_needed = 0, uses_anonymous_args = 0
 3936              	.LVL357:
 3937 0000 08B5     		push	{r3, lr}
 3938              	.LCFI37:
 3939              		.cfi_def_cfa_offset 8
 3940              		.cfi_offset 3, -8
 3941              		.cfi_offset 14, -4
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3942              		.loc 1 3559 0
 3943 0002 0346     		mov	r3, r0
 3944 0004 08B9     		cbnz	r0, .L342
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3945              		.loc 1 3559 0 is_stmt 0 discriminator 1
 3946 0006 034B     		ldr	r3, .L344
 3947 0008 1B68     		ldr	r3, [r3]
 3948              	.LVL358:
 3949              	.L342:
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3950              		.loc 1 3571 0 is_stmt 1 discriminator 4
ARM GAS  /tmp/cciitH1F.s 			page 165


 3951 000a 186B     		ldr	r0, [r3, #48]
 3952 000c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3953              	.LVL359:
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3954              		.loc 1 3574 0 discriminator 4
 3955 0010 08BD     		pop	{r3, pc}
 3956              	.L345:
 3957 0012 00BF     		.align	2
 3958              	.L344:
 3959 0014 00000000 		.word	.LANCHOR10
 3960              		.cfi_endproc
 3961              	.LFE42:
 3963              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3964              		.align	2
 3965              		.global	xTaskGetCurrentTaskHandle
 3966              		.thumb
 3967              		.thumb_func
 3969              	xTaskGetCurrentTaskHandle:
 3970              	.LFB45:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3971              		.loc 1 3662 0
 3972              		.cfi_startproc
 3973              		@ args = 0, pretend = 0, frame = 0
 3974              		@ frame_needed = 0, uses_anonymous_args = 0
 3975              		@ link register save eliminated.
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3976              		.loc 1 3668 0
 3977 0000 014B     		ldr	r3, .L347
 3978 0002 1868     		ldr	r0, [r3]
 3979              	.LVL360:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3980              		.loc 1 3671 0
 3981 0004 7047     		bx	lr
 3982              	.L348:
 3983 0006 00BF     		.align	2
 3984              	.L347:
 3985 0008 00000000 		.word	.LANCHOR10
 3986              		.cfi_endproc
 3987              	.LFE45:
 3989              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3990              		.align	2
 3991              		.global	xTaskGetSchedulerState
 3992              		.thumb
 3993              		.thumb_func
 3995              	xTaskGetSchedulerState:
 3996              	.LFB46:
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3997              		.loc 1 3679 0
 3998              		.cfi_startproc
 3999              		@ args = 0, pretend = 0, frame = 0
 4000              		@ frame_needed = 0, uses_anonymous_args = 0
 4001              		@ link register save eliminated.
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4002              		.loc 1 3682 0
 4003 0000 054B     		ldr	r3, .L353
 4004 0002 1B68     		ldr	r3, [r3]
 4005 0004 23B1     		cbz	r3, .L351
ARM GAS  /tmp/cciitH1F.s 			page 166


3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4006              		.loc 1 3688 0
 4007 0006 054B     		ldr	r3, .L353+4
 4008 0008 1B68     		ldr	r3, [r3]
 4009 000a 1BB9     		cbnz	r3, .L352
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4010              		.loc 1 3690 0
 4011 000c 0220     		movs	r0, #2
 4012 000e 7047     		bx	lr
 4013              	.L351:
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4014              		.loc 1 3684 0
 4015 0010 0120     		movs	r0, #1
 4016 0012 7047     		bx	lr
 4017              	.L352:
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4018              		.loc 1 3694 0
 4019 0014 0020     		movs	r0, #0
 4020              	.LVL361:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4021              		.loc 1 3699 0
 4022 0016 7047     		bx	lr
 4023              	.L354:
 4024              		.align	2
 4025              	.L353:
 4026 0018 00000000 		.word	.LANCHOR11
 4027 001c 00000000 		.word	.LANCHOR16
 4028              		.cfi_endproc
 4029              	.LFE46:
 4031              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4032              		.align	2
 4033              		.global	vTaskPriorityInherit
 4034              		.thumb
 4035              		.thumb_func
 4037              	vTaskPriorityInherit:
 4038              	.LFB47:
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4039              		.loc 1 3707 0
 4040              		.cfi_startproc
 4041              		@ args = 0, pretend = 0, frame = 0
 4042              		@ frame_needed = 0, uses_anonymous_args = 0
 4043              	.LVL362:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4044              		.loc 1 3712 0
 4045 0000 0028     		cmp	r0, #0
 4046 0002 4AD0     		beq	.L363
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4047              		.loc 1 3707 0
 4048 0004 38B5     		push	{r3, r4, r5, lr}
 4049              	.LCFI38:
 4050              		.cfi_def_cfa_offset 16
 4051              		.cfi_offset 3, -16
 4052              		.cfi_offset 4, -12
 4053              		.cfi_offset 5, -8
 4054              		.cfi_offset 14, -4
 4055 0006 0246     		mov	r2, r0
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cciitH1F.s 			page 167


 4056              		.loc 1 3717 0
 4057 0008 C36A     		ldr	r3, [r0, #44]
 4058 000a 2449     		ldr	r1, .L364
 4059 000c 0968     		ldr	r1, [r1]
 4060 000e C96A     		ldr	r1, [r1, #44]
 4061 0010 8B42     		cmp	r3, r1
 4062 0012 41D2     		bcs	.L355
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4063              		.loc 1 3722 0
 4064 0014 8169     		ldr	r1, [r0, #24]
 4065 0016 0029     		cmp	r1, #0
 4066 0018 05DB     		blt	.L357
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4067              		.loc 1 3724 0
 4068 001a 2049     		ldr	r1, .L364
 4069 001c 0968     		ldr	r1, [r1]
 4070 001e C96A     		ldr	r1, [r1, #44]
 4071 0020 C1F10701 		rsb	r1, r1, #7
 4072 0024 8161     		str	r1, [r0, #24]
 4073              	.L357:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4074              		.loc 1 3733 0
 4075 0026 5069     		ldr	r0, [r2, #20]
 4076              	.LVL363:
 4077 0028 03EB8303 		add	r3, r3, r3, lsl #2
 4078 002c 9900     		lsls	r1, r3, #2
 4079 002e 1C4B     		ldr	r3, .L364+4
 4080 0030 1944     		add	r1, r1, r3
 4081 0032 8842     		cmp	r0, r1
 4082 0034 01D1     		bne	.L361
 4083 0036 0123     		movs	r3, #1
 4084 0038 00E0     		b	.L358
 4085              	.L361:
 4086 003a 0023     		movs	r3, #0
 4087              	.L358:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4088              		.loc 1 3733 0 is_stmt 0 discriminator 4
 4089 003c 43B3     		cbz	r3, .L359
 4090 003e 1446     		mov	r4, r2
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4091              		.loc 1 3735 0 is_stmt 1
 4092 0040 151D     		adds	r5, r2, #4
 4093 0042 2846     		mov	r0, r5
 4094 0044 FFF7FEFF 		bl	uxListRemove
 4095              	.LVL364:
 4096 0048 70B9     		cbnz	r0, .L360
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4097              		.loc 1 3737 0
 4098 004a E36A     		ldr	r3, [r4, #44]
 4099 004c 03EB8301 		add	r1, r3, r3, lsl #2
 4100 0050 8A00     		lsls	r2, r1, #2
 4101 0052 1349     		ldr	r1, .L364+4
 4102 0054 8A58     		ldr	r2, [r1, r2]
 4103 0056 3AB9     		cbnz	r2, .L360
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4104              		.loc 1 3737 0 is_stmt 0 discriminator 1
 4105 0058 0122     		movs	r2, #1
ARM GAS  /tmp/cciitH1F.s 			page 168


 4106 005a 02FA03F3 		lsl	r3, r2, r3
 4107 005e 1149     		ldr	r1, .L364+8
 4108 0060 0A68     		ldr	r2, [r1]
 4109 0062 22EA0303 		bic	r3, r2, r3
 4110 0066 0B60     		str	r3, [r1]
 4111              	.L360:
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4112              		.loc 1 3745 0 is_stmt 1
 4113 0068 0C4B     		ldr	r3, .L364
 4114 006a 1B68     		ldr	r3, [r3]
 4115 006c DB6A     		ldr	r3, [r3, #44]
 4116 006e E362     		str	r3, [r4, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4117              		.loc 1 3746 0
 4118 0070 0122     		movs	r2, #1
 4119 0072 02FA03F1 		lsl	r1, r2, r3
 4120 0076 0B48     		ldr	r0, .L364+8
 4121 0078 0268     		ldr	r2, [r0]
 4122 007a 0A43     		orrs	r2, r2, r1
 4123 007c 0260     		str	r2, [r0]
 4124 007e 03EB8303 		add	r3, r3, r3, lsl #2
 4125 0082 9A00     		lsls	r2, r3, #2
 4126 0084 2946     		mov	r1, r5
 4127 0086 0648     		ldr	r0, .L364+4
 4128 0088 1044     		add	r0, r0, r2
 4129 008a FFF7FEFF 		bl	vListInsertEnd
 4130              	.LVL365:
 4131 008e 38BD     		pop	{r3, r4, r5, pc}
 4132              	.LVL366:
 4133              	.L359:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4134              		.loc 1 3751 0
 4135 0090 024B     		ldr	r3, .L364
 4136 0092 1B68     		ldr	r3, [r3]
 4137 0094 DB6A     		ldr	r3, [r3, #44]
 4138 0096 D362     		str	r3, [r2, #44]
 4139              	.L355:
 4140 0098 38BD     		pop	{r3, r4, r5, pc}
 4141              	.LVL367:
 4142              	.L363:
 4143              	.LCFI39:
 4144              		.cfi_def_cfa_offset 0
 4145              		.cfi_restore 3
 4146              		.cfi_restore 4
 4147              		.cfi_restore 5
 4148              		.cfi_restore 14
 4149 009a 7047     		bx	lr
 4150              	.L365:
 4151              		.align	2
 4152              	.L364:
 4153 009c 00000000 		.word	.LANCHOR10
 4154 00a0 00000000 		.word	.LANCHOR4
 4155 00a4 00000000 		.word	.LANCHOR13
 4156              		.cfi_endproc
 4157              	.LFE47:
 4159              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4160              		.align	2
ARM GAS  /tmp/cciitH1F.s 			page 169


 4161              		.global	xTaskPriorityDisinherit
 4162              		.thumb
 4163              		.thumb_func
 4165              	xTaskPriorityDisinherit:
 4166              	.LFB48:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4167              		.loc 1 3773 0
 4168              		.cfi_startproc
 4169              		@ args = 0, pretend = 0, frame = 0
 4170              		@ frame_needed = 0, uses_anonymous_args = 0
 4171              	.LVL368:
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4172              		.loc 1 3777 0
 4173 0000 0028     		cmp	r0, #0
 4174 0002 4BD0     		beq	.L373
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4175              		.loc 1 3773 0
 4176 0004 38B5     		push	{r3, r4, r5, lr}
 4177              	.LCFI40:
 4178              		.cfi_def_cfa_offset 16
 4179              		.cfi_offset 3, -16
 4180              		.cfi_offset 4, -12
 4181              		.cfi_offset 5, -8
 4182              		.cfi_offset 14, -4
 4183 0006 0346     		mov	r3, r0
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4184              		.loc 1 3783 0
 4185 0008 274A     		ldr	r2, .L377
 4186 000a 1268     		ldr	r2, [r2]
 4187 000c 9042     		cmp	r0, r2
 4188 000e 08D0     		beq	.L368
 4189              	.LBB183:
 4190              	.LBB184:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4191              		.loc 2 237 0
 4192              		.syntax unified
 4193              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4194 0010 4FF05003 			mov r3, #80												
 4195 0014 83F31188 		msr basepri, r3											
 4196 0018 BFF36F8F 		isb														
 4197 001c BFF34F8F 		dsb														
 4198              	
 4199              	@ 0 "" 2
 4200              	.LVL369:
 4201              		.thumb
 4202              		.syntax unified
 4203              	.L369:
 4204 0020 FEE7     		b	.L369
 4205              	.L368:
 4206              	.LBE184:
 4207              	.LBE183:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4208              		.loc 1 3785 0
 4209 0022 826C     		ldr	r2, [r0, #72]
 4210 0024 42B9     		cbnz	r2, .L370
 4211              	.LBB185:
 4212              	.LBB186:
ARM GAS  /tmp/cciitH1F.s 			page 170


 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4213              		.loc 2 237 0
 4214              		.syntax unified
 4215              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4216 0026 4FF05003 			mov r3, #80												
 4217 002a 83F31188 		msr basepri, r3											
 4218 002e BFF36F8F 		isb														
 4219 0032 BFF34F8F 		dsb														
 4220              	
 4221              	@ 0 "" 2
 4222              	.LVL370:
 4223              		.thumb
 4224              		.syntax unified
 4225              	.L371:
 4226 0036 FEE7     		b	.L371
 4227              	.L370:
 4228              	.LBE186:
 4229              	.LBE185:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4230              		.loc 1 3786 0
 4231 0038 013A     		subs	r2, r2, #1
 4232 003a 8264     		str	r2, [r0, #72]
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4233              		.loc 1 3790 0
 4234 003c C06A     		ldr	r0, [r0, #44]
 4235              	.LVL371:
 4236 003e 596C     		ldr	r1, [r3, #68]
 4237 0040 8842     		cmp	r0, r1
 4238 0042 2DD0     		beq	.L374
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4239              		.loc 1 3793 0
 4240 0044 72BB     		cbnz	r2, .L375
 4241 0046 1C46     		mov	r4, r3
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4242              		.loc 1 3800 0
 4243 0048 1D1D     		adds	r5, r3, #4
 4244 004a 2846     		mov	r0, r5
 4245 004c FFF7FEFF 		bl	uxListRemove
 4246              	.LVL372:
 4247 0050 70B9     		cbnz	r0, .L372
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4248              		.loc 1 3802 0
 4249 0052 E26A     		ldr	r2, [r4, #44]
 4250 0054 02EB8201 		add	r1, r2, r2, lsl #2
 4251 0058 8B00     		lsls	r3, r1, #2
 4252 005a 1449     		ldr	r1, .L377+4
 4253 005c CB58     		ldr	r3, [r1, r3]
 4254 005e 3BB9     		cbnz	r3, .L372
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4255              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4256 0060 0123     		movs	r3, #1
 4257 0062 03FA02F2 		lsl	r2, r3, r2
 4258 0066 1249     		ldr	r1, .L377+8
 4259 0068 0B68     		ldr	r3, [r1]
 4260 006a 23EA0203 		bic	r3, r3, r2
 4261 006e 0B60     		str	r3, [r1]
 4262              	.L372:
ARM GAS  /tmp/cciitH1F.s 			page 171


3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4263              		.loc 1 3812 0 is_stmt 1
 4264 0070 636C     		ldr	r3, [r4, #68]
 4265 0072 E362     		str	r3, [r4, #44]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4266              		.loc 1 3817 0
 4267 0074 C3F10702 		rsb	r2, r3, #7
 4268 0078 A261     		str	r2, [r4, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4269              		.loc 1 3818 0
 4270 007a 0124     		movs	r4, #1
 4271              	.LVL373:
 4272 007c 04FA03F0 		lsl	r0, r4, r3
 4273 0080 0B49     		ldr	r1, .L377+8
 4274 0082 0A68     		ldr	r2, [r1]
 4275 0084 0243     		orrs	r2, r2, r0
 4276 0086 0A60     		str	r2, [r1]
 4277 0088 03EB8303 		add	r3, r3, r3, lsl #2
 4278 008c 9A00     		lsls	r2, r3, #2
 4279 008e 2946     		mov	r1, r5
 4280 0090 0648     		ldr	r0, .L377+4
 4281 0092 1044     		add	r0, r0, r2
 4282 0094 FFF7FEFF 		bl	vListInsertEnd
 4283              	.LVL374:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4284              		.loc 1 3828 0
 4285 0098 2046     		mov	r0, r4
 4286 009a 38BD     		pop	{r3, r4, r5, pc}
 4287              	.LVL375:
 4288              	.L373:
 4289              	.LCFI41:
 4290              		.cfi_def_cfa_offset 0
 4291              		.cfi_restore 3
 4292              		.cfi_restore 4
 4293              		.cfi_restore 5
 4294              		.cfi_restore 14
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4295              		.loc 1 3775 0
 4296 009c 0020     		movs	r0, #0
 4297              	.LVL376:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4298              		.loc 1 3846 0
 4299 009e 7047     		bx	lr
 4300              	.LVL377:
 4301              	.L374:
 4302              	.LCFI42:
 4303              		.cfi_def_cfa_offset 16
 4304              		.cfi_offset 3, -16
 4305              		.cfi_offset 4, -12
 4306              		.cfi_offset 5, -8
 4307              		.cfi_offset 14, -4
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4308              		.loc 1 3775 0
 4309 00a0 0020     		movs	r0, #0
 4310 00a2 38BD     		pop	{r3, r4, r5, pc}
 4311              	.LVL378:
 4312              	.L375:
ARM GAS  /tmp/cciitH1F.s 			page 172


 4313 00a4 0020     		movs	r0, #0
 4314              	.LVL379:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4315              		.loc 1 3846 0
 4316 00a6 38BD     		pop	{r3, r4, r5, pc}
 4317              	.LVL380:
 4318              	.L378:
 4319              		.align	2
 4320              	.L377:
 4321 00a8 00000000 		.word	.LANCHOR10
 4322 00ac 00000000 		.word	.LANCHOR4
 4323 00b0 00000000 		.word	.LANCHOR13
 4324              		.cfi_endproc
 4325              	.LFE48:
 4327              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4328              		.align	2
 4329              		.global	uxTaskResetEventItemValue
 4330              		.thumb
 4331              		.thumb_func
 4333              	uxTaskResetEventItemValue:
 4334              	.LFB49:
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4335              		.loc 1 4163 0
 4336              		.cfi_startproc
 4337              		@ args = 0, pretend = 0, frame = 0
 4338              		@ frame_needed = 0, uses_anonymous_args = 0
 4339              		@ link register save eliminated.
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4340              		.loc 1 4166 0
 4341 0000 044B     		ldr	r3, .L380
 4342 0002 1A68     		ldr	r2, [r3]
 4343 0004 9069     		ldr	r0, [r2, #24]
 4344              	.LVL381:
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4345              		.loc 1 4170 0
 4346 0006 1A68     		ldr	r2, [r3]
 4347 0008 1B68     		ldr	r3, [r3]
 4348 000a DB6A     		ldr	r3, [r3, #44]
 4349 000c C3F10703 		rsb	r3, r3, #7
 4350 0010 9361     		str	r3, [r2, #24]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4351              		.loc 1 4173 0
 4352 0012 7047     		bx	lr
 4353              	.L381:
 4354              		.align	2
 4355              	.L380:
 4356 0014 00000000 		.word	.LANCHOR10
 4357              		.cfi_endproc
 4358              	.LFE49:
 4360              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4361              		.align	2
 4362              		.global	pvTaskIncrementMutexHeldCount
 4363              		.thumb
 4364              		.thumb_func
 4366              	pvTaskIncrementMutexHeldCount:
 4367              	.LFB50:
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
ARM GAS  /tmp/cciitH1F.s 			page 173


 4368              		.loc 1 4179 0
 4369              		.cfi_startproc
 4370              		@ args = 0, pretend = 0, frame = 0
 4371              		@ frame_needed = 0, uses_anonymous_args = 0
 4372              		@ link register save eliminated.
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4373              		.loc 1 4182 0
 4374 0000 054B     		ldr	r3, .L384
 4375 0002 1B68     		ldr	r3, [r3]
 4376 0004 23B1     		cbz	r3, .L383
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4377              		.loc 1 4184 0
 4378 0006 044B     		ldr	r3, .L384
 4379 0008 1A68     		ldr	r2, [r3]
 4380 000a 936C     		ldr	r3, [r2, #72]
 4381 000c 0133     		adds	r3, r3, #1
 4382 000e 9364     		str	r3, [r2, #72]
 4383              	.L383:
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4384              		.loc 1 4187 0
 4385 0010 014B     		ldr	r3, .L384
 4386 0012 1868     		ldr	r0, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4387              		.loc 1 4188 0
 4388 0014 7047     		bx	lr
 4389              	.L385:
 4390 0016 00BF     		.align	2
 4391              	.L384:
 4392 0018 00000000 		.word	.LANCHOR10
 4393              		.cfi_endproc
 4394              	.LFE50:
 4396              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4397              		.align	2
 4398              		.global	ulTaskNotifyTake
 4399              		.thumb
 4400              		.thumb_func
 4402              	ulTaskNotifyTake:
 4403              	.LFB51:
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4404              		.loc 1 4196 0
 4405              		.cfi_startproc
 4406              		@ args = 0, pretend = 0, frame = 0
 4407              		@ frame_needed = 0, uses_anonymous_args = 0
 4408              	.LVL382:
 4409 0000 38B5     		push	{r3, r4, r5, lr}
 4410              	.LCFI43:
 4411              		.cfi_def_cfa_offset 16
 4412              		.cfi_offset 3, -16
 4413              		.cfi_offset 4, -12
 4414              		.cfi_offset 5, -8
 4415              		.cfi_offset 14, -4
 4416 0002 0546     		mov	r5, r0
 4417 0004 0C46     		mov	r4, r1
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4418              		.loc 1 4199 0
 4419 0006 FFF7FEFF 		bl	vPortEnterCritical
 4420              	.LVL383:
ARM GAS  /tmp/cciitH1F.s 			page 174


4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4421              		.loc 1 4202 0
 4422 000a 184B     		ldr	r3, .L391
 4423 000c 1B68     		ldr	r3, [r3]
 4424 000e DB6C     		ldr	r3, [r3, #76]
 4425 0010 8BB9     		cbnz	r3, .L387
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4426              		.loc 1 4205 0
 4427 0012 164B     		ldr	r3, .L391
 4428 0014 1B68     		ldr	r3, [r3]
 4429 0016 0122     		movs	r2, #1
 4430 0018 83F85020 		strb	r2, [r3, #80]
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4431              		.loc 1 4207 0
 4432 001c 5CB1     		cbz	r4, .L387
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4433              		.loc 1 4209 0
 4434 001e 1146     		mov	r1, r2
 4435 0020 2046     		mov	r0, r4
 4436 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4437              	.LVL384:
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4438              		.loc 1 4216 0
 4439 0026 4FF08052 		mov	r2, #268435456
 4440 002a 114B     		ldr	r3, .L391+4
 4441 002c 1A60     		str	r2, [r3]
 4442              		.syntax unified
 4443              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4444 002e BFF34F8F 		dsb
 4445              	@ 0 "" 2
 4446              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4447 0032 BFF36F8F 		isb
 4448              	@ 0 "" 2
 4449              		.thumb
 4450              		.syntax unified
 4451              	.L387:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4452              		.loc 1 4228 0
 4453 0036 FFF7FEFF 		bl	vPortExitCritical
 4454              	.LVL385:
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4455              		.loc 1 4230 0
 4456 003a FFF7FEFF 		bl	vPortEnterCritical
 4457              	.LVL386:
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4458              		.loc 1 4233 0
 4459 003e 0B4B     		ldr	r3, .L391
 4460 0040 1B68     		ldr	r3, [r3]
 4461 0042 DC6C     		ldr	r4, [r3, #76]
 4462              	.LVL387:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4463              		.loc 1 4235 0
 4464 0044 4CB1     		cbz	r4, .L388
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4465              		.loc 1 4237 0
 4466 0046 25B1     		cbz	r5, .L389
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cciitH1F.s 			page 175


 4467              		.loc 1 4239 0
 4468 0048 084B     		ldr	r3, .L391
 4469 004a 1B68     		ldr	r3, [r3]
 4470 004c 0022     		movs	r2, #0
 4471 004e DA64     		str	r2, [r3, #76]
 4472 0050 03E0     		b	.L388
 4473              	.L389:
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4474              		.loc 1 4243 0
 4475 0052 064B     		ldr	r3, .L391
 4476 0054 1B68     		ldr	r3, [r3]
 4477 0056 621E     		subs	r2, r4, #1
 4478 0058 DA64     		str	r2, [r3, #76]
 4479              	.L388:
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4480              		.loc 1 4251 0
 4481 005a 044B     		ldr	r3, .L391
 4482 005c 1B68     		ldr	r3, [r3]
 4483 005e 0022     		movs	r2, #0
 4484 0060 83F85020 		strb	r2, [r3, #80]
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4485              		.loc 1 4253 0
 4486 0064 FFF7FEFF 		bl	vPortExitCritical
 4487              	.LVL388:
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4488              		.loc 1 4256 0
 4489 0068 2046     		mov	r0, r4
 4490 006a 38BD     		pop	{r3, r4, r5, pc}
 4491              	.LVL389:
 4492              	.L392:
 4493              		.align	2
 4494              	.L391:
 4495 006c 00000000 		.word	.LANCHOR10
 4496 0070 04ED00E0 		.word	-536810236
 4497              		.cfi_endproc
 4498              	.LFE51:
 4500              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4501              		.align	2
 4502              		.global	xTaskNotifyWait
 4503              		.thumb
 4504              		.thumb_func
 4506              	xTaskNotifyWait:
 4507              	.LFB52:
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4508              		.loc 1 4264 0
 4509              		.cfi_startproc
 4510              		@ args = 0, pretend = 0, frame = 0
 4511              		@ frame_needed = 0, uses_anonymous_args = 0
 4512              	.LVL390:
 4513 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4514              	.LCFI44:
 4515              		.cfi_def_cfa_offset 24
 4516              		.cfi_offset 3, -24
 4517              		.cfi_offset 4, -20
 4518              		.cfi_offset 5, -16
 4519              		.cfi_offset 6, -12
 4520              		.cfi_offset 7, -8
ARM GAS  /tmp/cciitH1F.s 			page 176


 4521              		.cfi_offset 14, -4
 4522 0002 0746     		mov	r7, r0
 4523 0004 0C46     		mov	r4, r1
 4524 0006 1546     		mov	r5, r2
 4525 0008 1E46     		mov	r6, r3
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4526              		.loc 1 4267 0
 4527 000a FFF7FEFF 		bl	vPortEnterCritical
 4528              	.LVL391:
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4529              		.loc 1 4270 0
 4530 000e 204B     		ldr	r3, .L399
 4531 0010 1B68     		ldr	r3, [r3]
 4532 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4533 0016 DBB2     		uxtb	r3, r3
 4534 0018 022B     		cmp	r3, #2
 4535 001a 16D0     		beq	.L394
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4536              		.loc 1 4275 0
 4537 001c 1C4B     		ldr	r3, .L399
 4538 001e 1A68     		ldr	r2, [r3]
 4539 0020 D06C     		ldr	r0, [r2, #76]
 4540 0022 20EA0700 		bic	r0, r0, r7
 4541 0026 D064     		str	r0, [r2, #76]
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4542              		.loc 1 4278 0
 4543 0028 1B68     		ldr	r3, [r3]
 4544 002a 0122     		movs	r2, #1
 4545 002c 83F85020 		strb	r2, [r3, #80]
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4546              		.loc 1 4280 0
 4547 0030 5EB1     		cbz	r6, .L394
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4548              		.loc 1 4282 0
 4549 0032 1146     		mov	r1, r2
 4550 0034 3046     		mov	r0, r6
 4551 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4552              	.LVL392:
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4553              		.loc 1 4289 0
 4554 003a 4FF08052 		mov	r2, #268435456
 4555 003e 154B     		ldr	r3, .L399+4
 4556 0040 1A60     		str	r2, [r3]
 4557              		.syntax unified
 4558              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4559 0042 BFF34F8F 		dsb
 4560              	@ 0 "" 2
 4561              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4562 0046 BFF36F8F 		isb
 4563              	@ 0 "" 2
 4564              		.thumb
 4565              		.syntax unified
 4566              	.L394:
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4567              		.loc 1 4301 0
 4568 004a FFF7FEFF 		bl	vPortExitCritical
 4569              	.LVL393:
ARM GAS  /tmp/cciitH1F.s 			page 177


4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4570              		.loc 1 4303 0
 4571 004e FFF7FEFF 		bl	vPortEnterCritical
 4572              	.LVL394:
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4573              		.loc 1 4307 0
 4574 0052 1DB1     		cbz	r5, .L395
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4575              		.loc 1 4311 0
 4576 0054 0E4B     		ldr	r3, .L399
 4577 0056 1B68     		ldr	r3, [r3]
 4578 0058 DB6C     		ldr	r3, [r3, #76]
 4579 005a 2B60     		str	r3, [r5]
 4580              	.L395:
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4581              		.loc 1 4318 0
 4582 005c 0C4B     		ldr	r3, .L399
 4583 005e 1B68     		ldr	r3, [r3]
 4584 0060 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4585 0064 DBB2     		uxtb	r3, r3
 4586 0066 012B     		cmp	r3, #1
 4587 0068 07D0     		beq	.L397
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4588              		.loc 1 4327 0
 4589 006a 094B     		ldr	r3, .L399
 4590 006c 1B68     		ldr	r3, [r3]
 4591 006e D96C     		ldr	r1, [r3, #76]
 4592 0070 21EA0401 		bic	r1, r1, r4
 4593 0074 D964     		str	r1, [r3, #76]
 4594              	.LVL395:
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4595              		.loc 1 4328 0
 4596 0076 0124     		movs	r4, #1
 4597              	.LVL396:
 4598 0078 00E0     		b	.L396
 4599              	.LVL397:
 4600              	.L397:
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4601              		.loc 1 4321 0
 4602 007a 0024     		movs	r4, #0
 4603              	.LVL398:
 4604              	.L396:
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4605              		.loc 1 4331 0
 4606 007c 044B     		ldr	r3, .L399
 4607 007e 1B68     		ldr	r3, [r3]
 4608 0080 0022     		movs	r2, #0
 4609 0082 83F85020 		strb	r2, [r3, #80]
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4610              		.loc 1 4333 0
 4611 0086 FFF7FEFF 		bl	vPortExitCritical
 4612              	.LVL399:
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4613              		.loc 1 4336 0
 4614 008a 2046     		mov	r0, r4
 4615 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4616              	.LVL400:
ARM GAS  /tmp/cciitH1F.s 			page 178


 4617              	.L400:
 4618 008e 00BF     		.align	2
 4619              	.L399:
 4620 0090 00000000 		.word	.LANCHOR10
 4621 0094 04ED00E0 		.word	-536810236
 4622              		.cfi_endproc
 4623              	.LFE52:
 4625              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4626              		.align	2
 4627              		.global	xTaskGenericNotify
 4628              		.thumb
 4629              		.thumb_func
 4631              	xTaskGenericNotify:
 4632              	.LFB53:
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4633              		.loc 1 4344 0
 4634              		.cfi_startproc
 4635              		@ args = 0, pretend = 0, frame = 0
 4636              		@ frame_needed = 0, uses_anonymous_args = 0
 4637              	.LVL401:
 4638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4639              	.LCFI45:
 4640              		.cfi_def_cfa_offset 24
 4641              		.cfi_offset 3, -24
 4642              		.cfi_offset 4, -20
 4643              		.cfi_offset 5, -16
 4644              		.cfi_offset 6, -12
 4645              		.cfi_offset 7, -8
 4646              		.cfi_offset 14, -4
 4647              	.LVL402:
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4648              		.loc 1 4349 0
 4649 0002 40B9     		cbnz	r0, .L402
 4650              	.LBB187:
 4651              	.LBB188:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4652              		.loc 2 237 0
 4653              		.syntax unified
 4654              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4655 0004 4FF05003 			mov r3, #80												
 4656 0008 83F31188 		msr basepri, r3											
 4657 000c BFF36F8F 		isb														
 4658 0010 BFF34F8F 		dsb														
 4659              	
 4660              	@ 0 "" 2
 4661              	.LVL403:
 4662              		.thumb
 4663              		.syntax unified
 4664              	.L403:
 4665 0014 FEE7     		b	.L403
 4666              	.LVL404:
 4667              	.L402:
 4668 0016 0446     		mov	r4, r0
 4669 0018 1F46     		mov	r7, r3
 4670 001a 1546     		mov	r5, r2
 4671 001c 0E46     		mov	r6, r1
 4672              	.LVL405:
ARM GAS  /tmp/cciitH1F.s 			page 179


 4673              	.LBE188:
 4674              	.LBE187:
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4675              		.loc 1 4352 0
 4676 001e FFF7FEFF 		bl	vPortEnterCritical
 4677              	.LVL406:
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4678              		.loc 1 4354 0
 4679 0022 0FB1     		cbz	r7, .L404
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4680              		.loc 1 4356 0
 4681 0024 E36C     		ldr	r3, [r4, #76]
 4682 0026 3B60     		str	r3, [r7]
 4683              	.L404:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4684              		.loc 1 4359 0
 4685 0028 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4686 002c DBB2     		uxtb	r3, r3
 4687              	.LVL407:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4688              		.loc 1 4361 0
 4689 002e 0222     		movs	r2, #2
 4690 0030 84F85020 		strb	r2, [r4, #80]
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4691              		.loc 1 4363 0
 4692 0034 6A1E     		subs	r2, r5, #1
 4693 0036 032A     		cmp	r2, #3
 4694 0038 15D8     		bhi	.L414
 4695 003a DFE802F0 		tbb	[pc, r2]
 4696              	.L407:
 4697 003e 02       		.byte	(.L406-.L407)/2
 4698 003f 07       		.byte	(.L408-.L407)/2
 4699 0040 0C       		.byte	(.L409-.L407)/2
 4700 0041 0F       		.byte	(.L410-.L407)/2
 4701              		.p2align 1
 4702              	.L406:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4703              		.loc 1 4366 0
 4704 0042 E26C     		ldr	r2, [r4, #76]
 4705 0044 1643     		orrs	r6, r6, r2
 4706              	.LVL408:
 4707 0046 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4708              		.loc 1 4346 0
 4709 0048 0125     		movs	r5, #1
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4710              		.loc 1 4367 0
 4711 004a 0FE0     		b	.L405
 4712              	.LVL409:
 4713              	.L408:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4714              		.loc 1 4370 0
 4715 004c E26C     		ldr	r2, [r4, #76]
 4716 004e 0132     		adds	r2, r2, #1
 4717 0050 E264     		str	r2, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4718              		.loc 1 4346 0
ARM GAS  /tmp/cciitH1F.s 			page 180


 4719 0052 0125     		movs	r5, #1
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4720              		.loc 1 4371 0
 4721 0054 0AE0     		b	.L405
 4722              	.L409:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4723              		.loc 1 4374 0
 4724 0056 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4725              		.loc 1 4346 0
 4726 0058 0125     		movs	r5, #1
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4727              		.loc 1 4375 0
 4728 005a 07E0     		b	.L405
 4729              	.L410:
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4730              		.loc 1 4378 0
 4731 005c 022B     		cmp	r3, #2
 4732 005e 04D0     		beq	.L415
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4733              		.loc 1 4380 0
 4734 0060 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4735              		.loc 1 4346 0
 4736 0062 0125     		movs	r5, #1
 4737 0064 02E0     		b	.L405
 4738              	.L414:
 4739 0066 0125     		movs	r5, #1
 4740 0068 00E0     		b	.L405
 4741              	.L415:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4742              		.loc 1 4385 0
 4743 006a 0025     		movs	r5, #0
 4744              	.LVL410:
 4745              	.L405:
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4746              		.loc 1 4399 0
 4747 006c 012B     		cmp	r3, #1
 4748 006e 2CD1     		bne	.L411
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4749              		.loc 1 4401 0
 4750 0070 261D     		adds	r6, r4, #4
 4751 0072 3046     		mov	r0, r6
 4752 0074 FFF7FEFF 		bl	uxListRemove
 4753              	.LVL411:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4754              		.loc 1 4402 0
 4755 0078 E36A     		ldr	r3, [r4, #44]
 4756 007a 0122     		movs	r2, #1
 4757 007c 02FA03F1 		lsl	r1, r2, r3
 4758 0080 1448     		ldr	r0, .L417
 4759 0082 0268     		ldr	r2, [r0]
 4760 0084 0A43     		orrs	r2, r2, r1
 4761 0086 0260     		str	r2, [r0]
 4762 0088 03EB8303 		add	r3, r3, r3, lsl #2
 4763 008c 9A00     		lsls	r2, r3, #2
 4764 008e 3146     		mov	r1, r6
ARM GAS  /tmp/cciitH1F.s 			page 181


 4765 0090 1148     		ldr	r0, .L417+4
 4766 0092 1044     		add	r0, r0, r2
 4767 0094 FFF7FEFF 		bl	vListInsertEnd
 4768              	.LVL412:
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4769              		.loc 1 4405 0
 4770 0098 A36A     		ldr	r3, [r4, #40]
 4771 009a 43B1     		cbz	r3, .L412
 4772              	.LBB189:
 4773              	.LBB190:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4774              		.loc 2 237 0
 4775              		.syntax unified
 4776              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4777 009c 4FF05003 			mov r3, #80												
 4778 00a0 83F31188 		msr basepri, r3											
 4779 00a4 BFF36F8F 		isb														
 4780 00a8 BFF34F8F 		dsb														
 4781              	
 4782              	@ 0 "" 2
 4783              	.LVL413:
 4784              		.thumb
 4785              		.syntax unified
 4786              	.L413:
 4787 00ac FEE7     		b	.L413
 4788              	.L412:
 4789              	.LBE190:
 4790              	.LBE189:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4791              		.loc 1 4423 0
 4792 00ae E26A     		ldr	r2, [r4, #44]
 4793 00b0 0A4B     		ldr	r3, .L417+8
 4794 00b2 1B68     		ldr	r3, [r3]
 4795 00b4 DB6A     		ldr	r3, [r3, #44]
 4796 00b6 9A42     		cmp	r2, r3
 4797 00b8 07D9     		bls	.L411
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4798              		.loc 1 4427 0
 4799 00ba 4FF08052 		mov	r2, #268435456
 4800 00be 084B     		ldr	r3, .L417+12
 4801 00c0 1A60     		str	r2, [r3]
 4802              		.syntax unified
 4803              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4804 00c2 BFF34F8F 		dsb
 4805              	@ 0 "" 2
 4806              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4807 00c6 BFF36F8F 		isb
 4808              	@ 0 "" 2
 4809              		.thumb
 4810              		.syntax unified
 4811              	.L411:
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4812              		.loc 1 4439 0
 4813 00ca FFF7FEFF 		bl	vPortExitCritical
 4814              	.LVL414:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4815              		.loc 1 4442 0
ARM GAS  /tmp/cciitH1F.s 			page 182


 4816 00ce 2846     		mov	r0, r5
 4817 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4818              	.LVL415:
 4819              	.L418:
 4820 00d2 00BF     		.align	2
 4821              	.L417:
 4822 00d4 00000000 		.word	.LANCHOR13
 4823 00d8 00000000 		.word	.LANCHOR4
 4824 00dc 00000000 		.word	.LANCHOR10
 4825 00e0 04ED00E0 		.word	-536810236
 4826              		.cfi_endproc
 4827              	.LFE53:
 4829              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4830              		.align	2
 4831              		.global	xTaskGenericNotifyFromISR
 4832              		.thumb
 4833              		.thumb_func
 4835              	xTaskGenericNotifyFromISR:
 4836              	.LFB54:
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4837              		.loc 1 4450 0
 4838              		.cfi_startproc
 4839              		@ args = 4, pretend = 0, frame = 0
 4840              		@ frame_needed = 0, uses_anonymous_args = 0
 4841              	.LVL416:
 4842 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4843              	.LCFI46:
 4844              		.cfi_def_cfa_offset 32
 4845              		.cfi_offset 3, -32
 4846              		.cfi_offset 4, -28
 4847              		.cfi_offset 5, -24
 4848              		.cfi_offset 6, -20
 4849              		.cfi_offset 7, -16
 4850              		.cfi_offset 8, -12
 4851              		.cfi_offset 9, -8
 4852              		.cfi_offset 14, -4
 4853 0004 089E     		ldr	r6, [sp, #32]
 4854              	.LVL417:
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4855              		.loc 1 4456 0
 4856 0006 40B9     		cbnz	r0, .L420
 4857              	.LBB191:
 4858              	.LBB192:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4859              		.loc 2 237 0
 4860              		.syntax unified
 4861              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4862 0008 4FF05003 			mov r3, #80												
 4863 000c 83F31188 		msr basepri, r3											
 4864 0010 BFF36F8F 		isb														
 4865 0014 BFF34F8F 		dsb														
 4866              	
 4867              	@ 0 "" 2
 4868              	.LVL418:
 4869              		.thumb
 4870              		.syntax unified
 4871              	.L421:
ARM GAS  /tmp/cciitH1F.s 			page 183


 4872 0018 FEE7     		b	.L421
 4873              	.LVL419:
 4874              	.L420:
 4875 001a 0446     		mov	r4, r0
 4876 001c 9946     		mov	r9, r3
 4877 001e 1546     		mov	r5, r2
 4878 0020 8846     		mov	r8, r1
 4879              	.LBE192:
 4880              	.LBE191:
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4881              		.loc 1 4474 0
 4882 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4883              	.LVL420:
 4884              	.LBB193:
 4885              	.LBB194:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4886              		.loc 2 253 0
 4887              		.syntax unified
 4888              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4889 0026 EFF31187 			mrs r7, basepri											
 4890 002a 4FF05003 		mov r3, #80												
 4891 002e 83F31188 		msr basepri, r3											
 4892 0032 BFF36F8F 		isb														
 4893 0036 BFF34F8F 		dsb														
 4894              	
 4895              	@ 0 "" 2
 4896              		.thumb
 4897              		.syntax unified
 4898              	.LBE194:
 4899              	.LBE193:
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4900              		.loc 1 4480 0
 4901 003a B9F1000F 		cmp	r9, #0
 4902 003e 02D0     		beq	.L422
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4903              		.loc 1 4482 0
 4904 0040 E36C     		ldr	r3, [r4, #76]
 4905 0042 C9F80030 		str	r3, [r9]
 4906              	.L422:
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4907              		.loc 1 4485 0
 4908 0046 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4909 004a DBB2     		uxtb	r3, r3
 4910              	.LVL421:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4911              		.loc 1 4486 0
 4912 004c 0222     		movs	r2, #2
 4913 004e 84F85020 		strb	r2, [r4, #80]
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4914              		.loc 1 4488 0
 4915 0052 6A1E     		subs	r2, r5, #1
 4916 0054 032A     		cmp	r2, #3
 4917 0056 18D8     		bhi	.L435
 4918 0058 DFE802F0 		tbb	[pc, r2]
 4919              	.L425:
 4920 005c 02       		.byte	(.L424-.L425)/2
 4921 005d 08       		.byte	(.L426-.L425)/2
ARM GAS  /tmp/cciitH1F.s 			page 184


 4922 005e 0D       		.byte	(.L427-.L425)/2
 4923 005f 11       		.byte	(.L428-.L425)/2
 4924              		.p2align 1
 4925              	.L424:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4926              		.loc 1 4491 0
 4927 0060 E26C     		ldr	r2, [r4, #76]
 4928 0062 42EA0802 		orr	r2, r2, r8
 4929 0066 E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4930              		.loc 1 4453 0
 4931 0068 0125     		movs	r5, #1
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4932              		.loc 1 4492 0
 4933 006a 11E0     		b	.L423
 4934              	.L426:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4935              		.loc 1 4495 0
 4936 006c E26C     		ldr	r2, [r4, #76]
 4937 006e 0132     		adds	r2, r2, #1
 4938 0070 E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4939              		.loc 1 4453 0
 4940 0072 0125     		movs	r5, #1
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4941              		.loc 1 4496 0
 4942 0074 0CE0     		b	.L423
 4943              	.L427:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4944              		.loc 1 4499 0
 4945 0076 C4F84C80 		str	r8, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4946              		.loc 1 4453 0
 4947 007a 0125     		movs	r5, #1
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4948              		.loc 1 4500 0
 4949 007c 08E0     		b	.L423
 4950              	.L428:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4951              		.loc 1 4503 0
 4952 007e 022B     		cmp	r3, #2
 4953 0080 05D0     		beq	.L436
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4954              		.loc 1 4505 0
 4955 0082 C4F84C80 		str	r8, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4956              		.loc 1 4453 0
 4957 0086 0125     		movs	r5, #1
 4958 0088 02E0     		b	.L423
 4959              	.L435:
 4960 008a 0125     		movs	r5, #1
 4961 008c 00E0     		b	.L423
 4962              	.L436:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4963              		.loc 1 4510 0
 4964 008e 0025     		movs	r5, #0
 4965              	.L423:
ARM GAS  /tmp/cciitH1F.s 			page 185


 4966              	.LVL422:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4967              		.loc 1 4524 0
 4968 0090 012B     		cmp	r3, #1
 4969 0092 35D1     		bne	.L429
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4970              		.loc 1 4527 0
 4971 0094 A36A     		ldr	r3, [r4, #40]
 4972              	.LVL423:
 4973 0096 43B1     		cbz	r3, .L430
 4974              	.LBB195:
 4975              	.LBB196:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4976              		.loc 2 237 0
 4977              		.syntax unified
 4978              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4979 0098 4FF05003 			mov r3, #80												
 4980 009c 83F31188 		msr basepri, r3											
 4981 00a0 BFF36F8F 		isb														
 4982 00a4 BFF34F8F 		dsb														
 4983              	
 4984              	@ 0 "" 2
 4985              	.LVL424:
 4986              		.thumb
 4987              		.syntax unified
 4988              	.L431:
 4989 00a8 FEE7     		b	.L431
 4990              	.L430:
 4991              	.LBE196:
 4992              	.LBE195:
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4993              		.loc 1 4529 0
 4994 00aa 184B     		ldr	r3, .L438
 4995 00ac 1B68     		ldr	r3, [r3]
 4996 00ae ABB9     		cbnz	r3, .L432
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4997              		.loc 1 4531 0
 4998 00b0 04F10408 		add	r8, r4, #4
 4999              	.LVL425:
 5000 00b4 4046     		mov	r0, r8
 5001 00b6 FFF7FEFF 		bl	uxListRemove
 5002              	.LVL426:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5003              		.loc 1 4532 0
 5004 00ba E36A     		ldr	r3, [r4, #44]
 5005 00bc 0122     		movs	r2, #1
 5006 00be 02FA03F1 		lsl	r1, r2, r3
 5007 00c2 1348     		ldr	r0, .L438+4
 5008 00c4 0268     		ldr	r2, [r0]
 5009 00c6 0A43     		orrs	r2, r2, r1
 5010 00c8 0260     		str	r2, [r0]
 5011 00ca 03EB8303 		add	r3, r3, r3, lsl #2
 5012 00ce 9A00     		lsls	r2, r3, #2
 5013 00d0 4146     		mov	r1, r8
 5014 00d2 1048     		ldr	r0, .L438+8
 5015 00d4 1044     		add	r0, r0, r2
 5016 00d6 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/cciitH1F.s 			page 186


 5017              	.LVL427:
 5018 00da 04E0     		b	.L433
 5019              	.LVL428:
 5020              	.L432:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5021              		.loc 1 4538 0
 5022 00dc 04F11801 		add	r1, r4, #24
 5023 00e0 0D48     		ldr	r0, .L438+12
 5024 00e2 FFF7FEFF 		bl	vListInsertEnd
 5025              	.LVL429:
 5026              	.L433:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5027              		.loc 1 4541 0
 5028 00e6 E26A     		ldr	r2, [r4, #44]
 5029 00e8 0C4B     		ldr	r3, .L438+16
 5030 00ea 1B68     		ldr	r3, [r3]
 5031 00ec DB6A     		ldr	r3, [r3, #44]
 5032 00ee 9A42     		cmp	r2, r3
 5033 00f0 06D9     		bls	.L429
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5034              		.loc 1 4545 0
 5035 00f2 16B1     		cbz	r6, .L434
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5036              		.loc 1 4547 0
 5037 00f4 0123     		movs	r3, #1
 5038 00f6 3360     		str	r3, [r6]
 5039 00f8 02E0     		b	.L429
 5040              	.L434:
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5041              		.loc 1 4554 0
 5042 00fa 0122     		movs	r2, #1
 5043 00fc 084B     		ldr	r3, .L438+20
 5044 00fe 1A60     		str	r2, [r3]
 5045              	.L429:
 5046              	.LVL430:
 5047              	.LBB197:
 5048              	.LBB198:
 5049              		.loc 2 271 0
 5050              		.syntax unified
 5051              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5052 0100 87F31188 			msr basepri, r7	
 5053              	@ 0 "" 2
 5054              	.LVL431:
 5055              		.thumb
 5056              		.syntax unified
 5057              	.LBE198:
 5058              	.LBE197:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5059              		.loc 1 4566 0
 5060 0104 2846     		mov	r0, r5
 5061 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5062              	.LVL432:
 5063              	.L439:
 5064 010a 00BF     		.align	2
 5065              	.L438:
 5066 010c 00000000 		.word	.LANCHOR16
 5067 0110 00000000 		.word	.LANCHOR13
ARM GAS  /tmp/cciitH1F.s 			page 187


 5068 0114 00000000 		.word	.LANCHOR4
 5069 0118 00000000 		.word	.LANCHOR1
 5070 011c 00000000 		.word	.LANCHOR10
 5071 0120 00000000 		.word	.LANCHOR19
 5072              		.cfi_endproc
 5073              	.LFE54:
 5075              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5076              		.align	2
 5077              		.global	vTaskNotifyGiveFromISR
 5078              		.thumb
 5079              		.thumb_func
 5081              	vTaskNotifyGiveFromISR:
 5082              	.LFB55:
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5083              		.loc 1 4574 0
 5084              		.cfi_startproc
 5085              		@ args = 0, pretend = 0, frame = 0
 5086              		@ frame_needed = 0, uses_anonymous_args = 0
 5087              	.LVL433:
 5088 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5089              	.LCFI47:
 5090              		.cfi_def_cfa_offset 24
 5091              		.cfi_offset 3, -24
 5092              		.cfi_offset 4, -20
 5093              		.cfi_offset 5, -16
 5094              		.cfi_offset 6, -12
 5095              		.cfi_offset 7, -8
 5096              		.cfi_offset 14, -4
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5097              		.loc 1 4579 0
 5098 0002 40B9     		cbnz	r0, .L441
 5099              	.LBB199:
 5100              	.LBB200:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5101              		.loc 2 237 0
 5102              		.syntax unified
 5103              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5104 0004 4FF05003 			mov r3, #80												
 5105 0008 83F31188 		msr basepri, r3											
 5106 000c BFF36F8F 		isb														
 5107 0010 BFF34F8F 		dsb														
 5108              	
 5109              	@ 0 "" 2
 5110              	.LVL434:
 5111              		.thumb
 5112              		.syntax unified
 5113              	.L442:
 5114 0014 FEE7     		b	.L442
 5115              	.L441:
 5116 0016 0446     		mov	r4, r0
 5117 0018 0D46     		mov	r5, r1
 5118              	.LBE200:
 5119              	.LBE199:
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5120              		.loc 1 4597 0
 5121 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5122              	.LVL435:
ARM GAS  /tmp/cciitH1F.s 			page 188


 5123              	.LBB201:
 5124              	.LBB202:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5125              		.loc 2 253 0
 5126              		.syntax unified
 5127              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5128 001e EFF31187 			mrs r7, basepri											
 5129 0022 4FF05003 		mov r3, #80												
 5130 0026 83F31188 		msr basepri, r3											
 5131 002a BFF36F8F 		isb														
 5132 002e BFF34F8F 		dsb														
 5133              	
 5134              	@ 0 "" 2
 5135              		.thumb
 5136              		.syntax unified
 5137              	.LBE202:
 5138              	.LBE201:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5139              		.loc 1 4603 0
 5140 0032 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5141 0036 DBB2     		uxtb	r3, r3
 5142              	.LVL436:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5143              		.loc 1 4604 0
 5144 0038 0222     		movs	r2, #2
 5145 003a 84F85020 		strb	r2, [r4, #80]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5146              		.loc 1 4608 0
 5147 003e E26C     		ldr	r2, [r4, #76]
 5148 0040 0132     		adds	r2, r2, #1
 5149 0042 E264     		str	r2, [r4, #76]
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5150              		.loc 1 4614 0
 5151 0044 012B     		cmp	r3, #1
 5152 0046 34D1     		bne	.L443
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5153              		.loc 1 4617 0
 5154 0048 A36A     		ldr	r3, [r4, #40]
 5155              	.LVL437:
 5156 004a 43B1     		cbz	r3, .L444
 5157              	.LBB203:
 5158              	.LBB204:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5159              		.loc 2 237 0
 5160              		.syntax unified
 5161              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5162 004c 4FF05003 			mov r3, #80												
 5163 0050 83F31188 		msr basepri, r3											
 5164 0054 BFF36F8F 		isb														
 5165 0058 BFF34F8F 		dsb														
 5166              	
 5167              	@ 0 "" 2
 5168              	.LVL438:
 5169              		.thumb
 5170              		.syntax unified
 5171              	.L445:
 5172 005c FEE7     		b	.L445
ARM GAS  /tmp/cciitH1F.s 			page 189


 5173              	.L444:
 5174              	.LBE204:
 5175              	.LBE203:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5176              		.loc 1 4619 0
 5177 005e 164B     		ldr	r3, .L450
 5178 0060 1B68     		ldr	r3, [r3]
 5179 0062 A3B9     		cbnz	r3, .L446
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5180              		.loc 1 4621 0
 5181 0064 261D     		adds	r6, r4, #4
 5182 0066 3046     		mov	r0, r6
 5183 0068 FFF7FEFF 		bl	uxListRemove
 5184              	.LVL439:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5185              		.loc 1 4622 0
 5186 006c E36A     		ldr	r3, [r4, #44]
 5187 006e 0122     		movs	r2, #1
 5188 0070 02FA03F1 		lsl	r1, r2, r3
 5189 0074 1148     		ldr	r0, .L450+4
 5190 0076 0268     		ldr	r2, [r0]
 5191 0078 0A43     		orrs	r2, r2, r1
 5192 007a 0260     		str	r2, [r0]
 5193 007c 03EB8303 		add	r3, r3, r3, lsl #2
 5194 0080 9A00     		lsls	r2, r3, #2
 5195 0082 3146     		mov	r1, r6
 5196 0084 0E48     		ldr	r0, .L450+8
 5197 0086 1044     		add	r0, r0, r2
 5198 0088 FFF7FEFF 		bl	vListInsertEnd
 5199              	.LVL440:
 5200 008c 04E0     		b	.L447
 5201              	.L446:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5202              		.loc 1 4628 0
 5203 008e 04F11801 		add	r1, r4, #24
 5204 0092 0C48     		ldr	r0, .L450+12
 5205 0094 FFF7FEFF 		bl	vListInsertEnd
 5206              	.LVL441:
 5207              	.L447:
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5208              		.loc 1 4631 0
 5209 0098 E26A     		ldr	r2, [r4, #44]
 5210 009a 0B4B     		ldr	r3, .L450+16
 5211 009c 1B68     		ldr	r3, [r3]
 5212 009e DB6A     		ldr	r3, [r3, #44]
 5213 00a0 9A42     		cmp	r2, r3
 5214 00a2 06D9     		bls	.L443
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5215              		.loc 1 4635 0
 5216 00a4 15B1     		cbz	r5, .L448
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5217              		.loc 1 4637 0
 5218 00a6 0123     		movs	r3, #1
 5219 00a8 2B60     		str	r3, [r5]
 5220 00aa 02E0     		b	.L443
 5221              	.L448:
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cciitH1F.s 			page 190


 5222              		.loc 1 4644 0
 5223 00ac 0122     		movs	r2, #1
 5224 00ae 074B     		ldr	r3, .L450+20
 5225 00b0 1A60     		str	r2, [r3]
 5226              	.L443:
 5227              	.LVL442:
 5228              	.LBB205:
 5229              	.LBB206:
 5230              		.loc 2 271 0
 5231              		.syntax unified
 5232              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5233 00b2 87F31188 			msr basepri, r7	
 5234              	@ 0 "" 2
 5235              	.LVL443:
 5236              		.thumb
 5237              		.syntax unified
 5238 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5239              	.LVL444:
 5240              	.L451:
 5241              		.align	2
 5242              	.L450:
 5243 00b8 00000000 		.word	.LANCHOR16
 5244 00bc 00000000 		.word	.LANCHOR13
 5245 00c0 00000000 		.word	.LANCHOR4
 5246 00c4 00000000 		.word	.LANCHOR1
 5247 00c8 00000000 		.word	.LANCHOR10
 5248 00cc 00000000 		.word	.LANCHOR19
 5249              	.LBE206:
 5250              	.LBE205:
 5251              		.cfi_endproc
 5252              	.LFE55:
 5254              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5255              		.align	2
 5256              		.global	xTaskNotifyStateClear
 5257              		.thumb
 5258              		.thumb_func
 5260              	xTaskNotifyStateClear:
 5261              	.LFB56:
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5262              		.loc 1 4663 0
 5263              		.cfi_startproc
 5264              		@ args = 0, pretend = 0, frame = 0
 5265              		@ frame_needed = 0, uses_anonymous_args = 0
 5266              	.LVL445:
 5267 0000 10B5     		push	{r4, lr}
 5268              	.LCFI48:
 5269              		.cfi_def_cfa_offset 8
 5270              		.cfi_offset 4, -8
 5271              		.cfi_offset 14, -4
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5272              		.loc 1 4669 0
 5273 0002 0446     		mov	r4, r0
 5274 0004 08B9     		cbnz	r0, .L453
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5275              		.loc 1 4669 0 is_stmt 0 discriminator 1
 5276 0006 094B     		ldr	r3, .L457
 5277 0008 1C68     		ldr	r4, [r3]
ARM GAS  /tmp/cciitH1F.s 			page 191


 5278              	.LVL446:
 5279              	.L453:
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5280              		.loc 1 4671 0 is_stmt 1 discriminator 4
 5281 000a FFF7FEFF 		bl	vPortEnterCritical
 5282              	.LVL447:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5283              		.loc 1 4673 0 discriminator 4
 5284 000e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5285 0012 DBB2     		uxtb	r3, r3
 5286 0014 022B     		cmp	r3, #2
 5287 0016 04D1     		bne	.L455
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5288              		.loc 1 4675 0
 5289 0018 0023     		movs	r3, #0
 5290 001a 84F85030 		strb	r3, [r4, #80]
 5291              	.LVL448:
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5292              		.loc 1 4676 0
 5293 001e 0124     		movs	r4, #1
 5294              	.LVL449:
 5295 0020 00E0     		b	.L454
 5296              	.LVL450:
 5297              	.L455:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5298              		.loc 1 4680 0
 5299 0022 0024     		movs	r4, #0
 5300              	.LVL451:
 5301              	.L454:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5302              		.loc 1 4683 0
 5303 0024 FFF7FEFF 		bl	vPortExitCritical
 5304              	.LVL452:
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5305              		.loc 1 4686 0
 5306 0028 2046     		mov	r0, r4
 5307 002a 10BD     		pop	{r4, pc}
 5308              	.LVL453:
 5309              	.L458:
 5310              		.align	2
 5311              	.L457:
 5312 002c 00000000 		.word	.LANCHOR10
 5313              		.cfi_endproc
 5314              	.LFE56:
 5316              		.global	pxCurrentTCB
 5317              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5318              		.align	2
 5319              		.set	.LANCHOR2,. + 0
 5322              	pxDelayedTaskList:
 5323 0000 00000000 		.space	4
 5324              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5325              		.align	2
 5326              		.set	.LANCHOR11,. + 0
 5329              	xSchedulerRunning:
 5330 0000 00000000 		.space	4
 5331              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5332              		.align	2
ARM GAS  /tmp/cciitH1F.s 			page 192


 5333              		.set	.LANCHOR7,. + 0
 5336              	xTasksWaitingTermination:
 5337 0000 00000000 		.space	20
 5337      00000000 
 5337      00000000 
 5337      00000000 
 5337      00000000 
 5338              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5339              		.align	2
 5340              		.set	.LANCHOR8,. + 0
 5343              	pxOverflowDelayedTaskList:
 5344 0000 00000000 		.space	4
 5345              		.section	.bss.uxPendedTicks,"aw",%nobits
 5346              		.align	2
 5347              		.set	.LANCHOR18,. + 0
 5350              	uxPendedTicks:
 5351 0000 00000000 		.space	4
 5352              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5353              		.align	2
 5354              		.set	.LANCHOR4,. + 0
 5357              	pxReadyTasksLists:
 5358 0000 00000000 		.space	140
 5358      00000000 
 5358      00000000 
 5358      00000000 
 5358      00000000 
 5359              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5360              		.align	2
 5361              		.set	.LANCHOR16,. + 0
 5364              	uxSchedulerSuspended:
 5365 0000 00000000 		.space	4
 5366              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5367              		.align	2
 5368              		.set	.LANCHOR15,. + 0
 5371              	uxDeletedTasksWaitingCleanUp:
 5372 0000 00000000 		.space	4
 5373              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5374              		.align	2
 5375              		.set	.LANCHOR9,. + 0
 5378              	uxCurrentNumberOfTasks:
 5379 0000 00000000 		.space	4
 5380              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5381              		.align	2
 5382              		.set	.LANCHOR10,. + 0
 5385              	pxCurrentTCB:
 5386 0000 00000000 		.space	4
 5387              		.section	.bss.xPendingReadyList,"aw",%nobits
 5388              		.align	2
 5389              		.set	.LANCHOR1,. + 0
 5392              	xPendingReadyList:
 5393 0000 00000000 		.space	20
 5393      00000000 
 5393      00000000 
 5393      00000000 
 5393      00000000 
 5394              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5395              		.align	2
ARM GAS  /tmp/cciitH1F.s 			page 193


 5396              		.set	.LANCHOR17,. + 0
 5399              	xNumOfOverflows:
 5400 0000 00000000 		.space	4
 5401              		.section	.bss.xTickCount,"aw",%nobits
 5402              		.align	2
 5403              		.set	.LANCHOR14,. + 0
 5406              	xTickCount:
 5407 0000 00000000 		.space	4
 5408              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5409              		.align	2
 5410              		.set	.LANCHOR3,. + 0
 5413              	xNextTaskUnblockTime:
 5414 0000 00000000 		.space	4
 5415              		.section	.rodata.str1.4,"aMS",%progbits,1
 5416              		.align	2
 5417              	.LC0:
 5418 0000 49444C45 		.ascii	"IDLE\000"
 5418      00
 5419              		.section	.bss.uxTaskNumber,"aw",%nobits
 5420              		.align	2
 5421              		.set	.LANCHOR12,. + 0
 5424              	uxTaskNumber:
 5425 0000 00000000 		.space	4
 5426              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5427              		.align	2
 5428              		.set	.LANCHOR5,. + 0
 5431              	xDelayedTaskList1:
 5432 0000 00000000 		.space	20
 5432      00000000 
 5432      00000000 
 5432      00000000 
 5432      00000000 
 5433              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5434              		.align	2
 5435              		.set	.LANCHOR6,. + 0
 5438              	xDelayedTaskList2:
 5439 0000 00000000 		.space	20
 5439      00000000 
 5439      00000000 
 5439      00000000 
 5439      00000000 
 5440              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5441              		.align	2
 5442              		.set	.LANCHOR0,. + 0
 5445              	xSuspendedTaskList:
 5446 0000 00000000 		.space	20
 5446      00000000 
 5446      00000000 
 5446      00000000 
 5446      00000000 
 5447              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5448              		.align	2
 5449              		.set	.LANCHOR13,. + 0
 5452              	uxTopReadyPriority:
 5453 0000 00000000 		.space	4
 5454              		.section	.bss.xYieldPending,"aw",%nobits
 5455              		.align	2
ARM GAS  /tmp/cciitH1F.s 			page 194


 5456              		.set	.LANCHOR19,. + 0
 5459              	xYieldPending:
 5460 0000 00000000 		.space	4
 5461              		.text
 5462              	.Letext0:
 5463              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/lib/gcc/arm-none-eabi/5.4.1/include/stdd
 5464              		.file 4 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 5465              		.file 5 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 5466              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5467              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 5468              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5469              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5470              		.file 10 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/string.h"
 5471              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 5472              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
ARM GAS  /tmp/cciitH1F.s 			page 195


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/cciitH1F.s:20     .text.prvTaskIsTaskSuspended:00000000 $t
     /tmp/cciitH1F.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
     /tmp/cciitH1F.s:103    .text.prvTaskIsTaskSuspended:00000044 $d
     /tmp/cciitH1F.s:109    .text.prvSearchForNameWithinSingleList:00000000 $t
     /tmp/cciitH1F.s:113    .text.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
     /tmp/cciitH1F.s:219    .text.prvTaskCheckFreeStackSpace:00000000 $t
     /tmp/cciitH1F.s:223    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
     /tmp/cciitH1F.s:257    .text.prvResetNextTaskUnblockTime:00000000 $t
     /tmp/cciitH1F.s:261    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
     /tmp/cciitH1F.s:301    .text.prvResetNextTaskUnblockTime:0000002c $d
     /tmp/cciitH1F.s:307    .text.prvInitialiseNewTask:00000000 $t
     /tmp/cciitH1F.s:311    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
     /tmp/cciitH1F.s:431    .text.prvInitialiseTaskLists:00000000 $t
     /tmp/cciitH1F.s:435    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
     /tmp/cciitH1F.s:501    .text.prvInitialiseTaskLists:00000048 $d
     /tmp/cciitH1F.s:513    .text.prvAddNewTaskToReadyList:00000000 $t
     /tmp/cciitH1F.s:517    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
     /tmp/cciitH1F.s:622    .text.prvAddNewTaskToReadyList:0000008c $d
     /tmp/cciitH1F.s:633    .text.prvDeleteTCB:00000000 $t
     /tmp/cciitH1F.s:637    .text.prvDeleteTCB:00000000 prvDeleteTCB
     /tmp/cciitH1F.s:701    .text.prvAddCurrentTaskToDelayedList:00000000 $t
     /tmp/cciitH1F.s:705    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
     /tmp/cciitH1F.s:802    .text.prvAddCurrentTaskToDelayedList:0000007c $d
     /tmp/cciitH1F.s:813    .text.xTaskCreateStatic:00000000 $t
     /tmp/cciitH1F.s:818    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
     /tmp/cciitH1F.s:924    .text.xTaskCreate:00000000 $t
     /tmp/cciitH1F.s:929    .text.xTaskCreate:00000000 xTaskCreate
     /tmp/cciitH1F.s:1028   .text.vTaskDelete:00000000 $t
     /tmp/cciitH1F.s:1033   .text.vTaskDelete:00000000 vTaskDelete
     /tmp/cciitH1F.s:1176   .text.vTaskDelete:000000b4 $d
     /tmp/cciitH1F.s:1190   .text.uxTaskPriorityGet:00000000 $t
     /tmp/cciitH1F.s:1195   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
     /tmp/cciitH1F.s:1231   .text.uxTaskPriorityGet:00000018 $d
     /tmp/cciitH1F.s:1236   .text.uxTaskPriorityGetFromISR:00000000 $t
     /tmp/cciitH1F.s:1241   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
     /tmp/cciitH1F.s:1301   .text.uxTaskPriorityGetFromISR:0000002c $d
     /tmp/cciitH1F.s:1306   .text.vTaskPrioritySet:00000000 $t
     /tmp/cciitH1F.s:1311   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
     /tmp/cciitH1F.s:1504   .text.vTaskPrioritySet:000000e0 $d
     /tmp/cciitH1F.s:1512   .text.vTaskResume:00000000 $t
     /tmp/cciitH1F.s:1517   .text.vTaskResume:00000000 vTaskResume
     /tmp/cciitH1F.s:1619   .text.vTaskResume:00000078 $d
     /tmp/cciitH1F.s:1627   .text.xTaskResumeFromISR:00000000 $t
     /tmp/cciitH1F.s:1632   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
     /tmp/cciitH1F.s:1768   .text.xTaskResumeFromISR:00000094 $d
     /tmp/cciitH1F.s:1777   .text.vTaskStartScheduler:00000000 $t
     /tmp/cciitH1F.s:1782   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
     /tmp/cciitH1F.s:1906   .text.vTaskStartScheduler:00000084 $d
     /tmp/cciitH1F.s:2735   .text.prvIdleTask:00000000 prvIdleTask
     /tmp/cciitH1F.s:1915   .text.vTaskEndScheduler:00000000 $t
     /tmp/cciitH1F.s:1920   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
     /tmp/cciitH1F.s:1957   .text.vTaskEndScheduler:00000020 $d
     /tmp/cciitH1F.s:1962   .text.vTaskSuspendAll:00000000 $t
     /tmp/cciitH1F.s:1967   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
     /tmp/cciitH1F.s:1983   .text.vTaskSuspendAll:0000000c $d
ARM GAS  /tmp/cciitH1F.s 			page 196


     /tmp/cciitH1F.s:1988   .text.xTaskGetTickCount:00000000 $t
     /tmp/cciitH1F.s:1993   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
     /tmp/cciitH1F.s:2009   .text.xTaskGetTickCount:00000008 $d
     /tmp/cciitH1F.s:2014   .text.xTaskGetTickCountFromISR:00000000 $t
     /tmp/cciitH1F.s:2019   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
     /tmp/cciitH1F.s:2042   .text.xTaskGetTickCountFromISR:0000000c $d
     /tmp/cciitH1F.s:2047   .text.uxTaskGetNumberOfTasks:00000000 $t
     /tmp/cciitH1F.s:2052   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
     /tmp/cciitH1F.s:2067   .text.uxTaskGetNumberOfTasks:00000008 $d
     /tmp/cciitH1F.s:2072   .text.pcTaskGetName:00000000 $t
     /tmp/cciitH1F.s:2077   .text.pcTaskGetName:00000000 pcTaskGetName
     /tmp/cciitH1F.s:2121   .text.pcTaskGetName:00000024 $d
     /tmp/cciitH1F.s:2126   .text.xTaskIncrementTick:00000000 $t
     /tmp/cciitH1F.s:2131   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
     /tmp/cciitH1F.s:2344   .text.xTaskIncrementTick:000000f8 $d
     /tmp/cciitH1F.s:2359   .text.xTaskResumeAll:00000000 $t
     /tmp/cciitH1F.s:2364   .text.xTaskResumeAll:00000000 xTaskResumeAll
     /tmp/cciitH1F.s:2549   .text.xTaskResumeAll:000000d4 $d
     /tmp/cciitH1F.s:2562   .text.vTaskDelay:00000000 $t
     /tmp/cciitH1F.s:2567   .text.vTaskDelay:00000000 vTaskDelay
     /tmp/cciitH1F.s:2644   .text.vTaskDelay:00000048 $d
     /tmp/cciitH1F.s:2650   .text.prvCheckTasksWaitingTermination:00000000 $t
     /tmp/cciitH1F.s:2654   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
     /tmp/cciitH1F.s:2724   .text.prvCheckTasksWaitingTermination:00000048 $d
     /tmp/cciitH1F.s:2731   .text.prvIdleTask:00000000 $t
     /tmp/cciitH1F.s:2775   .text.prvIdleTask:00000020 $d
     /tmp/cciitH1F.s:2781   .text.xTaskGetHandle:00000000 $t
     /tmp/cciitH1F.s:2786   .text.xTaskGetHandle:00000000 xTaskGetHandle
     /tmp/cciitH1F.s:2907   .text.xTaskGetHandle:0000007c $d
     /tmp/cciitH1F.s:2916   .text.vTaskSwitchContext:00000000 $t
     /tmp/cciitH1F.s:2921   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
     /tmp/cciitH1F.s:3063   .text.vTaskSwitchContext:000000b0 $d
     /tmp/cciitH1F.s:3074   .text.vTaskSuspend:00000000 $t
     /tmp/cciitH1F.s:3079   .text.vTaskSuspend:00000000 vTaskSuspend
     /tmp/cciitH1F.s:3226   .text.vTaskSuspend:000000b4 $d
     /tmp/cciitH1F.s:3238   .text.vTaskPlaceOnEventList:00000000 $t
     /tmp/cciitH1F.s:3243   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
     /tmp/cciitH1F.s:3295   .text.vTaskPlaceOnEventList:0000002c $d
     /tmp/cciitH1F.s:3300   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
     /tmp/cciitH1F.s:3305   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
     /tmp/cciitH1F.s:3392   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
     /tmp/cciitH1F.s:3398   .text.vTaskPlaceOnEventListRestricted:00000000 $t
     /tmp/cciitH1F.s:3403   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
     /tmp/cciitH1F.s:3464   .text.vTaskPlaceOnEventListRestricted:00000034 $d
     /tmp/cciitH1F.s:3469   .text.xTaskRemoveFromEventList:00000000 $t
     /tmp/cciitH1F.s:3474   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
     /tmp/cciitH1F.s:3575   .text.xTaskRemoveFromEventList:00000074 $d
     /tmp/cciitH1F.s:3585   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
     /tmp/cciitH1F.s:3590   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
     /tmp/cciitH1F.s:3701   .text.xTaskRemoveFromUnorderedEventList:0000007c $d
     /tmp/cciitH1F.s:3710   .text.vTaskSetTimeOutState:00000000 $t
     /tmp/cciitH1F.s:3715   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
     /tmp/cciitH1F.s:3756   .text.vTaskSetTimeOutState:00000024 $d
     /tmp/cciitH1F.s:3762   .text.xTaskCheckForTimeOut:00000000 $t
     /tmp/cciitH1F.s:3767   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
     /tmp/cciitH1F.s:3894   .text.xTaskCheckForTimeOut:00000078 $d
     /tmp/cciitH1F.s:3900   .text.vTaskMissedYield:00000000 $t
ARM GAS  /tmp/cciitH1F.s 			page 197


     /tmp/cciitH1F.s:3905   .text.vTaskMissedYield:00000000 vTaskMissedYield
     /tmp/cciitH1F.s:3920   .text.vTaskMissedYield:00000008 $d
     /tmp/cciitH1F.s:3925   .text.uxTaskGetStackHighWaterMark:00000000 $t
     /tmp/cciitH1F.s:3930   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
     /tmp/cciitH1F.s:3959   .text.uxTaskGetStackHighWaterMark:00000014 $d
     /tmp/cciitH1F.s:3964   .text.xTaskGetCurrentTaskHandle:00000000 $t
     /tmp/cciitH1F.s:3969   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
     /tmp/cciitH1F.s:3985   .text.xTaskGetCurrentTaskHandle:00000008 $d
     /tmp/cciitH1F.s:3990   .text.xTaskGetSchedulerState:00000000 $t
     /tmp/cciitH1F.s:3995   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
     /tmp/cciitH1F.s:4026   .text.xTaskGetSchedulerState:00000018 $d
     /tmp/cciitH1F.s:4032   .text.vTaskPriorityInherit:00000000 $t
     /tmp/cciitH1F.s:4037   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
     /tmp/cciitH1F.s:4153   .text.vTaskPriorityInherit:0000009c $d
     /tmp/cciitH1F.s:4160   .text.xTaskPriorityDisinherit:00000000 $t
     /tmp/cciitH1F.s:4165   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
     /tmp/cciitH1F.s:4321   .text.xTaskPriorityDisinherit:000000a8 $d
     /tmp/cciitH1F.s:4328   .text.uxTaskResetEventItemValue:00000000 $t
     /tmp/cciitH1F.s:4333   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
     /tmp/cciitH1F.s:4356   .text.uxTaskResetEventItemValue:00000014 $d
     /tmp/cciitH1F.s:4361   .text.pvTaskIncrementMutexHeldCount:00000000 $t
     /tmp/cciitH1F.s:4366   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
     /tmp/cciitH1F.s:4392   .text.pvTaskIncrementMutexHeldCount:00000018 $d
     /tmp/cciitH1F.s:4397   .text.ulTaskNotifyTake:00000000 $t
     /tmp/cciitH1F.s:4402   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
     /tmp/cciitH1F.s:4495   .text.ulTaskNotifyTake:0000006c $d
     /tmp/cciitH1F.s:4501   .text.xTaskNotifyWait:00000000 $t
     /tmp/cciitH1F.s:4506   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
     /tmp/cciitH1F.s:4620   .text.xTaskNotifyWait:00000090 $d
     /tmp/cciitH1F.s:4626   .text.xTaskGenericNotify:00000000 $t
     /tmp/cciitH1F.s:4631   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
     /tmp/cciitH1F.s:4697   .text.xTaskGenericNotify:0000003e $d
     /tmp/cciitH1F.s:4701   .text.xTaskGenericNotify:00000042 $t
     /tmp/cciitH1F.s:4822   .text.xTaskGenericNotify:000000d4 $d
     /tmp/cciitH1F.s:4830   .text.xTaskGenericNotifyFromISR:00000000 $t
     /tmp/cciitH1F.s:4835   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
     /tmp/cciitH1F.s:4920   .text.xTaskGenericNotifyFromISR:0000005c $d
     /tmp/cciitH1F.s:4924   .text.xTaskGenericNotifyFromISR:00000060 $t
     /tmp/cciitH1F.s:5066   .text.xTaskGenericNotifyFromISR:0000010c $d
     /tmp/cciitH1F.s:5076   .text.vTaskNotifyGiveFromISR:00000000 $t
     /tmp/cciitH1F.s:5081   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
     /tmp/cciitH1F.s:5243   .text.vTaskNotifyGiveFromISR:000000b8 $d
     /tmp/cciitH1F.s:5255   .text.xTaskNotifyStateClear:00000000 $t
     /tmp/cciitH1F.s:5260   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
     /tmp/cciitH1F.s:5312   .text.xTaskNotifyStateClear:0000002c $d
     /tmp/cciitH1F.s:5385   .bss.pxCurrentTCB:00000000 pxCurrentTCB
     /tmp/cciitH1F.s:5318   .bss.pxDelayedTaskList:00000000 $d
     /tmp/cciitH1F.s:5322   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
     /tmp/cciitH1F.s:5325   .bss.xSchedulerRunning:00000000 $d
     /tmp/cciitH1F.s:5329   .bss.xSchedulerRunning:00000000 xSchedulerRunning
     /tmp/cciitH1F.s:5332   .bss.xTasksWaitingTermination:00000000 $d
     /tmp/cciitH1F.s:5336   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
     /tmp/cciitH1F.s:5339   .bss.pxOverflowDelayedTaskList:00000000 $d
     /tmp/cciitH1F.s:5343   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
     /tmp/cciitH1F.s:5346   .bss.uxPendedTicks:00000000 $d
     /tmp/cciitH1F.s:5350   .bss.uxPendedTicks:00000000 uxPendedTicks
     /tmp/cciitH1F.s:5353   .bss.pxReadyTasksLists:00000000 $d
ARM GAS  /tmp/cciitH1F.s 			page 198


     /tmp/cciitH1F.s:5357   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
     /tmp/cciitH1F.s:5360   .bss.uxSchedulerSuspended:00000000 $d
     /tmp/cciitH1F.s:5364   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
     /tmp/cciitH1F.s:5367   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
     /tmp/cciitH1F.s:5371   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
     /tmp/cciitH1F.s:5374   .bss.uxCurrentNumberOfTasks:00000000 $d
     /tmp/cciitH1F.s:5378   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
     /tmp/cciitH1F.s:5381   .bss.pxCurrentTCB:00000000 $d
     /tmp/cciitH1F.s:5388   .bss.xPendingReadyList:00000000 $d
     /tmp/cciitH1F.s:5392   .bss.xPendingReadyList:00000000 xPendingReadyList
     /tmp/cciitH1F.s:5395   .bss.xNumOfOverflows:00000000 $d
     /tmp/cciitH1F.s:5399   .bss.xNumOfOverflows:00000000 xNumOfOverflows
     /tmp/cciitH1F.s:5402   .bss.xTickCount:00000000 $d
     /tmp/cciitH1F.s:5406   .bss.xTickCount:00000000 xTickCount
     /tmp/cciitH1F.s:5409   .bss.xNextTaskUnblockTime:00000000 $d
     /tmp/cciitH1F.s:5413   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
     /tmp/cciitH1F.s:5416   .rodata.str1.4:00000000 $d
     /tmp/cciitH1F.s:5420   .bss.uxTaskNumber:00000000 $d
     /tmp/cciitH1F.s:5424   .bss.uxTaskNumber:00000000 uxTaskNumber
     /tmp/cciitH1F.s:5427   .bss.xDelayedTaskList1:00000000 $d
     /tmp/cciitH1F.s:5431   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
     /tmp/cciitH1F.s:5434   .bss.xDelayedTaskList2:00000000 $d
     /tmp/cciitH1F.s:5438   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
     /tmp/cciitH1F.s:5441   .bss.xSuspendedTaskList:00000000 $d
     /tmp/cciitH1F.s:5445   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
     /tmp/cciitH1F.s:5448   .bss.uxTopReadyPriority:00000000 $d
     /tmp/cciitH1F.s:5452   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
     /tmp/cciitH1F.s:5455   .bss.xYieldPending:00000000 $d
     /tmp/cciitH1F.s:5459   .bss.xYieldPending:00000000 xYieldPending
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vApplicationStackOverflowHook
