ARM GAS  /tmp/ccZ4zIPa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"timers.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvGetNextExpireTime,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvGetNextExpireTime:
  25              	.LFB17:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/timers.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /tmp/ccZ4zIPa.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include "FreeRTOS.h"
  79:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include "task.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include "queue.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #include "timers.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  84:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  85:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #endif
  86:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  87:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  88:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  89:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** header files above, but not in this file, in order to generate the correct
ARM GAS  /tmp/ccZ4zIPa.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** privileged Vs unprivileged linkage and placement. */
  91:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  92:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
  94:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* This entire source file will be skipped if the application is not configured
  95:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  96:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** of this file.  If you want to include software timer functionality then ensure
  97:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  98:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if ( configUSE_TIMERS == 1 )
  99:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* Misc definitions. */
 101:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
 102:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 103:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The definition of the timers themselves. */
 104:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef struct tmrTimerControl
 105:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 106:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
 107:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
 108:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
 109:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted on
 110:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
 111:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
 112:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 113:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
 114:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#endif
 115:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 116:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 117:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		uint8_t 			ucStaticallyAllocated; /*<< Set to pdTRUE if the timer was created statically so no at
 118:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#endif
 119:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } xTIMER;
 120:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
 122:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** name below to enable the use of older kernel aware debuggers. */
 123:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef xTIMER Timer_t;
 124:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 125:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
 126:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
 127:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** and messages that request the execution of a non-timer related callback.  The
 128:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** two message types are defined in two separate structures, xTimerParametersType
 129:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** and xCallbackParametersType respectively. */
 130:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef struct tmrTimerParameters
 131:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 132:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
 133:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
 134:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } TimerParameter_t;
 135:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 136:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef struct tmrCallbackParameters
 138:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 139:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 140:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 141:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 142:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } CallbackParameters_t;
 143:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 144:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The structure that contains the two message types, along with an identifier
 145:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** that is used to determine which message type is valid. */
 146:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** typedef struct tmrTimerQueueMessage
ARM GAS  /tmp/ccZ4zIPa.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 148:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 149:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	union
 150:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 151:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		TimerParameter_t xTimerParameters;
 152:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 154:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 155:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 156:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			CallbackParameters_t xCallbackParameters;
 157:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 158:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	} u;
 159:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } DaemonTaskMessage_t;
 160:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 161:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 162:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static variables must be declared volatile. */
 163:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 165:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 166:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** timer service task is allowed to access these lists. */
 167:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 168:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 169:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 170:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 171:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /* A queue that is used to send commands to the timer service task. */
 173:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 174:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 175:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*lint +e956 */
 177:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 178:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 179:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 181:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 182:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* If static allocation is supported then the application must provide the
 183:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	following callback function - which enables the application to optionally
 184:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 185:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	and TCB. */
 186:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 187:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #endif
 189:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 190:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 191:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 192:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * been initialised already.
 193:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 194:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 195:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 197:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 198:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 199:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * xTimerQueue queue.
 200:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 201:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 202:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 203:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
ARM GAS  /tmp/ccZ4zIPa.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Called by the timer service task to interpret and process a command it
 205:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * received on the timer queue.
 206:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 207:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 208:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 210:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 211:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 212:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 213:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 214:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 215:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 216:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 217:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * auto reload timer, then call its callback.
 218:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 219:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 220:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 222:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 223:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * current timer list does not still reference some timers.
 224:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 225:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 226:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 228:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 229:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 230:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 232:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 234:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * If the timer list contains any active timers then return the expire time of
 235:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 236:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 237:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * to pdTRUE.
 238:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 239:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 240:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 241:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 242:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 243:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * until either a timer does expire or a command is received.
 244:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 245:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 246:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 249:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  * dynamically to fill in the structure's members.
 250:Middlewares/Third_Party/FreeRTOS/Source/timers.c ****  */
 251:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 252:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 253:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									const UBaseType_t uxAutoReload,
 254:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									void * const pvTimerID,
 255:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 256:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed
 257:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 258:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 259:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 260:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
ARM GAS  /tmp/ccZ4zIPa.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 262:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* This function is called when the scheduler is started if
 264:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 265:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	timer service task has been created/initialised.  If timers have already
 266:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	been created then the initialisation will already have been performed. */
 267:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	prvCheckForValidListAndQueue();
 268:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 270:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 271:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 272:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 273:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 274:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 275:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			uint32_t ulTimerTaskStackSize;
 276:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 278:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 279:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													"Tmr Svc",
 280:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													ulTimerTaskStackSize,
 281:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													NULL,
 282:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 283:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													pxTimerTaskStackBuffer,
 284:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													pxTimerTaskTCBBuffer );
 285:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 286:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xTimerTaskHandle != NULL )
 287:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 288:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xReturn = pdPASS;
 289:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 290:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 291:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#else
 292:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 293:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 294:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									"Tmr Svc",
 295:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 296:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									NULL,
 297:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 298:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									&xTimerTaskHandle );
 299:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 300:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 301:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 302:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 303:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 304:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 305:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 306:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xReturn );
 308:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xReturn;
 309:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 310:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 311:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 313:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 314:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
 315:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 316:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 								const UBaseType_t uxAutoReload,
 317:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 								void * const pvTimerID,
ARM GAS  /tmp/ccZ4zIPa.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowe
 319:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 320:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 321:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 323:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 325:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 326:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 327:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 329:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 330:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* Timers can be created statically or dynamically, so note this
 331:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				timer was created dynamically in case the timer is later
 332:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				deleted. */
 333:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 334:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 335:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 336:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 337:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 338:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		return pxNewTimer;
 339:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 340:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 342:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 343:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 344:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 345:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 346:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,
 347:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 348:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										const UBaseType_t uxAutoReload,
 349:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										void * const pvTimerID,
 350:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 351:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 										StaticTimer_t *pxTimerBuffer ) /*lint !e971 Unqualified char types are allowed for string
 352:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 353:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 354:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 356:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 357:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 358:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 359:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			structures. */
 360:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 361:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 362:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 363:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#endif /* configASSERT_DEFINED */
 364:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 366:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		configASSERT( pxTimerBuffer );
 367:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 368:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 370:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 371:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 372:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 373:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
ARM GAS  /tmp/ccZ4zIPa.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* Timers can be created statically or dynamically so note this
 376:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				timer was created statically in case it is later deleted. */
 377:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 378:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 379:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 380:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 381:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		return pxNewTimer;
 383:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 384:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 385:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 386:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 387:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 389:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 390:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									const UBaseType_t uxAutoReload,
 391:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									void * const pvTimerID,
 392:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 393:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and sing
 394:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 395:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 396:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 397:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( pxNewTimer != NULL )
 399:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 400:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 401:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		created/initialised. */
 402:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvCheckForValidListAndQueue();
 403:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Initialise the timer structure members using the function
 405:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		parameters. */
 406:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 407:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 408:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 409:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 410:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 411:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 412:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 413:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 414:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 415:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 416:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 418:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 419:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 420:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 421:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 423:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 425:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	on a particular timer definition. */
 426:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 427:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 428:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 429:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = xCommandID;
 430:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 431:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
ARM GAS  /tmp/ccZ4zIPa.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 434:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 435:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 436:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 437:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 438:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 439:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 440:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 441:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 442:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 443:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 444:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 445:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 446:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 447:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 448:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 450:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 451:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 452:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 453:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 454:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 455:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 456:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xReturn;
 457:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 458:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 459:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 461:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 462:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 463:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 464:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 465:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 466:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 467:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 468:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 470:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 471:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 472:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 473:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 474:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 475:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 476:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 477:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 479:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 480:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 481:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xReturn;
 482:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 483:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 484:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 485:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xReturn;
 486:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 487:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 488:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/ccZ4zIPa.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 490:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 491:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 492:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 494:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 495:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 496:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 497:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 499:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 500:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 501:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 502:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 504:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	been performed to ensure the list is not empty. */
 505:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 506:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 507:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 509:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 510:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 511:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 512:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 513:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		other than the current time.  It will therefore be inserted into the
 514:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		correct list relative to the time this task thinks it is now. */
 515:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 516:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 517:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* The timer expired before it was added to the active timer
 518:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			list.  Reload it now.  */
 519:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 520:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 521:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 522:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 523:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 524:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 525:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 526:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 527:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 528:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 529:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 530:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 531:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 532:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Call the timer callback. */
 534:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 535:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 536:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 537:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 538:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvTimerTask( void *pvParameters )
 539:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 540:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 541:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xListWasEmpty;
 542:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Just to avoid compiler warnings. */
 544:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	( void ) pvParameters;
 545:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/ccZ4zIPa.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 547:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 548:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 549:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 550:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Allow the application writer to execute some code in the context of
 551:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 552:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		application includes initialisation code that would benefit from
 553:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		executing after the scheduler has been started. */
 554:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		vApplicationDaemonTaskStartupHook();
 555:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 556:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 557:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 558:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	for( ;; )
 559:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 560:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 561:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		obtain the time at which the next timer will expire. */
 562:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 563:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 564:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 565:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		until either a timer does expire, or a command is received. */
 566:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 567:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 568:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Empty the command queue. */
 569:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvProcessReceivedCommands();
 570:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 571:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 572:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 573:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 575:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 576:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 577:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched;
 578:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	vTaskSuspendAll();
 580:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 581:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 582:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 583:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		then don't process this timer as any timers that remained in the list
 584:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		when the lists were switched will have been processed within the
 585:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvSampleTimeNow() function. */
 586:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 587:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 588:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 589:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 590:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 591:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 592:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				( void ) xTaskResumeAll();
 593:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 594:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 595:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 596:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 597:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* The tick count has not overflowed, and the next expire
 598:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				time has not been reached yet.  This task should therefore
 599:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				block to wait for the next expire time or a command to be
 600:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				received - whichever comes first.  The following line cannot
 601:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 602:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case when the current timer list is empty. */
ARM GAS  /tmp/ccZ4zIPa.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				if( xListWasEmpty != pdFALSE )
 604:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 605:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* The current timer list is empty - is the overflow list
 606:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					also empty? */
 607:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 608:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 609:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 610:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 611:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 612:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 613:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 614:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 615:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					block time to expire.  If a command arrived between the
 616:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					critical section being exited and this yield then the yield
 617:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					will not cause the task to block. */
 618:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					portYIELD_WITHIN_API();
 619:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 620:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				else
 621:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 622:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 623:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 624:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 625:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 627:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 628:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			( void ) xTaskResumeAll();
 629:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 630:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 631:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 632:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 633:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 634:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 635:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
  27              		.loc 1 635 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 636:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 637:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 639:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 640:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 641:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 642:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 643:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	timer lists will be switched and the next expiry time can be
 644:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	re-assessed.  */
 645:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  33              		.loc 1 645 0
  34 0000 064B     		ldr	r3, .L4
  35 0002 1A68     		ldr	r2, [r3]
  36 0004 1368     		ldr	r3, [r2]
  37 0006 B3FA83F3 		clz	r3, r3
  38 000a 5B09     		lsrs	r3, r3, #5
  39 000c 0360     		str	r3, [r0]
 646:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
ARM GAS  /tmp/ccZ4zIPa.s 			page 13


  40              		.loc 1 646 0
  41 000e 13B9     		cbnz	r3, .L3
 647:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 648:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  42              		.loc 1 648 0
  43 0010 D368     		ldr	r3, [r2, #12]
  44 0012 1868     		ldr	r0, [r3]
  45              	.LVL1:
  46 0014 7047     		bx	lr
  47              	.LVL2:
  48              	.L3:
 649:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 650:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 651:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 652:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 653:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
  49              		.loc 1 653 0
  50 0016 0020     		movs	r0, #0
  51              	.LVL3:
 654:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 655:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xNextExpireTime;
 657:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
  52              		.loc 1 657 0
  53 0018 7047     		bx	lr
  54              	.L5:
  55 001a 00BF     		.align	2
  56              	.L4:
  57 001c 00000000 		.word	.LANCHOR0
  58              		.cfi_endproc
  59              	.LFE17:
  61              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
  62              		.align	2
  63              		.thumb
  64              		.thumb_func
  66              	prvInsertTimerInActiveList:
  67              	.LFB19:
 658:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 659:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 660:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 661:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 662:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 663:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 664:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 666:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 667:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( xTimeNow < xLastTime )
 668:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 669:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		prvSwitchTimerLists();
 670:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 671:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 672:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 673:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 674:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 675:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 676:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	xLastTime = xTimeNow;
ARM GAS  /tmp/ccZ4zIPa.s 			page 14


 678:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xTimeNow;
 680:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 681:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 682:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 683:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 684:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
  68              		.loc 1 684 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              	.LVL4:
  73 0000 08B5     		push	{r3, lr}
  74              	.LCFI0:
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 3, -8
  77              		.cfi_offset 14, -4
  78              	.LVL5:
 685:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 686:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 687:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  79              		.loc 1 687 0
  80 0002 4160     		str	r1, [r0, #4]
 688:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  81              		.loc 1 688 0
  82 0004 0061     		str	r0, [r0, #16]
 689:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 690:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
  83              		.loc 1 690 0
  84 0006 9142     		cmp	r1, r2
  85 0008 0AD8     		bhi	.L7
 691:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 692:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 693:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		timer was issued, and the time the command was processed? */
 694:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
  86              		.loc 1 694 0
  87 000a D21A     		subs	r2, r2, r3
  88              	.LVL6:
  89 000c 8369     		ldr	r3, [r0, #24]
  90              	.LVL7:
  91 000e 9A42     		cmp	r2, r3
  92 0010 11D2     		bcs	.L10
 695:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 696:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* The time between a command being issued and the command being
 697:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			processed actually exceeds the timers period.  */
 698:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 699:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 700:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 701:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 702:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  93              		.loc 1 702 0
  94 0012 011D     		adds	r1, r0, #4
  95              	.LVL8:
  96 0014 0A4B     		ldr	r3, .L13
  97 0016 1868     		ldr	r0, [r3]
  98              	.LVL9:
  99 0018 FFF7FEFF 		bl	vListInsert
ARM GAS  /tmp/ccZ4zIPa.s 			page 15


 100              	.LVL10:
 685:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 101              		.loc 1 685 0
 102 001c 0020     		movs	r0, #0
 103 001e 08BD     		pop	{r3, pc}
 104              	.LVL11:
 105              	.L7:
 703:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 704:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 705:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	else
 706:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 707:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 106              		.loc 1 707 0
 107 0020 9A42     		cmp	r2, r3
 108 0022 01D2     		bcs	.L9
 109              		.loc 1 707 0 is_stmt 0 discriminator 1
 110 0024 9942     		cmp	r1, r3
 111 0026 08D2     		bcs	.L11
 112              	.L9:
 708:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 709:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 710:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			but the expiry time has not, then the timer must have already passed
 711:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			its expiry time and should be processed immediately. */
 712:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 713:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 714:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 715:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 716:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 113              		.loc 1 716 0 is_stmt 1
 114 0028 011D     		adds	r1, r0, #4
 115              	.LVL12:
 116 002a 064B     		ldr	r3, .L13+4
 117              	.LVL13:
 118 002c 1868     		ldr	r0, [r3]
 119              	.LVL14:
 120 002e FFF7FEFF 		bl	vListInsert
 121              	.LVL15:
 685:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 122              		.loc 1 685 0
 123 0032 0020     		movs	r0, #0
 124 0034 08BD     		pop	{r3, pc}
 125              	.LVL16:
 126              	.L10:
 698:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 127              		.loc 1 698 0
 128 0036 0120     		movs	r0, #1
 129              	.LVL17:
 130 0038 08BD     		pop	{r3, pc}
 131              	.LVL18:
 132              	.L11:
 712:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 133              		.loc 1 712 0
 134 003a 0120     		movs	r0, #1
 135              	.LVL19:
 717:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 718:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 719:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/ccZ4zIPa.s 			page 16


 720:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xProcessTimerNow;
 721:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 136              		.loc 1 721 0
 137 003c 08BD     		pop	{r3, pc}
 138              	.LVL20:
 139              	.L14:
 140 003e 00BF     		.align	2
 141              	.L13:
 142 0040 00000000 		.word	.LANCHOR1
 143 0044 00000000 		.word	.LANCHOR0
 144              		.cfi_endproc
 145              	.LFE19:
 147              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 148              		.align	2
 149              		.thumb
 150              		.thumb_func
 152              	prvCheckForValidListAndQueue:
 153              	.LFB22:
 722:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void	prvProcessReceivedCommands( void )
 725:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 726:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 727:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 728:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 729:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 730:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 732:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 734:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 735:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* Negative commands are pended function calls rather than timer
 736:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			commands. */
 737:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 738:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 739:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 740:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 741:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 742:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 743:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				configASSERT( pxCallback );
 744:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 745:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* Call the function. */
 746:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 747:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 748:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 749:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 750:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 751:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 752:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 753:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 754:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 755:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 756:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		function calls. */
 757:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 758:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 759:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 760:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			software timer. */
ARM GAS  /tmp/ccZ4zIPa.s 			page 17


 761:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 762:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 763:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 764:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 765:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* The timer is in a list, remove it. */
 766:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 767:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 768:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 769:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 771:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 772:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 774:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 776:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 777:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			called after the message is received from xTimerQueue so there is no
 778:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			possibility of a higher priority task adding a message to the message
 779:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 780:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 781:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 782:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 783:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			switch( xMessage.xMessageID )
 784:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 785:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_START :
 786:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			    case tmrCOMMAND_START_FROM_ISR :
 787:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			    case tmrCOMMAND_RESET :
 788:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			    case tmrCOMMAND_RESET_FROM_ISR :
 789:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 790:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* Start or restart a timer. */
 791:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 792:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 793:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						/* The timer expired before it was added to the active
 794:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						timer list.  Process it now. */
 795:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 796:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 797:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 798:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 799:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 800:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 801:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							configASSERT( xResult );
 802:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 803:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						}
 804:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						else
 805:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 806:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 807:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						}
 808:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					}
 809:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					else
 810:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 811:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 812:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					}
 813:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 814:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_STOP :
 816:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 817:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* The timer has already been removed from the active list.
ARM GAS  /tmp/ccZ4zIPa.s 			page 18


 818:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					There is nothing to do here. */
 819:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 820:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 822:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 823:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 824:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 825:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* The new period does not really have a reference, and can
 827:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					be longer or shorter than the old one.  The command time is
 828:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					therefore set to the current time, and as the period cannot
 829:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					be zero the next expiry time can only be in the future,
 830:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 831:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					no fail case that needs to be handled here. */
 832:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 833:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 834:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 835:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_DELETE :
 836:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* The timer has already been removed from the active list,
 837:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					just free up the memory if the memory was dynamically
 838:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					allocated. */
 839:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 840:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 841:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						/* The timer can only have been allocated dynamically -
 842:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						free it again. */
 843:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						vPortFree( pxTimer );
 844:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					}
 845:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 846:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 847:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						/* The timer could have been allocated statically or
 848:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						dynamically, so check before attempting to free the
 849:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						memory. */
 850:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 851:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 852:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							vPortFree( pxTimer );
 853:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						}
 854:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						else
 855:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 856:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						}
 858:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					}
 859:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 860:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 861:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 862:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				default	:
 863:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					/* Don't expect to get here. */
 864:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 865:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 866:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 867:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 868:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 869:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 870:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 871:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( void )
 872:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 873:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 874:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** List_t *pxTemp;
ARM GAS  /tmp/ccZ4zIPa.s 			page 19


 875:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 876:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 877:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 879:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	If there are any timers still referenced from the current timer list
 880:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	then they must have expired and should be processed before the lists
 881:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	are switched. */
 882:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 883:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 884:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 885:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 886:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Remove the timer from the list. */
 887:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 888:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 889:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 890:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 892:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 893:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		have not yet been switched. */
 894:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 895:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 897:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 899:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			the timer going into the same timer list then it has already expired
 900:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			and the timer should be re-inserted into the current list so it is
 901:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 902:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 903:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			the lists have been swapped. */
 904:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 905:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 906:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 908:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 909:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 910:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 911:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			else
 912:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 913:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 914:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 915:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 916:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 917:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 918:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 919:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 920:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 921:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 922:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 924:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxTemp = pxCurrentTimerList;
 925:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 926:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 927:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 928:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 929:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void )
 931:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
ARM GAS  /tmp/ccZ4zIPa.s 			page 20


 154              		.loc 1 931 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158 0000 30B5     		push	{r4, r5, lr}
 159              	.LCFI1:
 160              		.cfi_def_cfa_offset 12
 161              		.cfi_offset 4, -12
 162              		.cfi_offset 5, -8
 163              		.cfi_offset 14, -4
 164 0002 83B0     		sub	sp, sp, #12
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 24
 932:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 933:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	queue used to communicate with the timer service, have been
 934:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	initialised. */
 935:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 167              		.loc 1 935 0
 168 0004 FFF7FEFF 		bl	vPortEnterCritical
 169              	.LVL21:
 936:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 937:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xTimerQueue == NULL )
 170              		.loc 1 937 0
 171 0008 104B     		ldr	r3, .L18
 172 000a 1B68     		ldr	r3, [r3]
 173 000c CBB9     		cbnz	r3, .L16
 938:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 939:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 174              		.loc 1 939 0
 175 000e 104D     		ldr	r5, .L18+4
 176 0010 2846     		mov	r0, r5
 177 0012 FFF7FEFF 		bl	vListInitialise
 178              	.LVL22:
 940:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 179              		.loc 1 940 0
 180 0016 0F4C     		ldr	r4, .L18+8
 181 0018 2046     		mov	r0, r4
 182 001a FFF7FEFF 		bl	vListInitialise
 183              	.LVL23:
 941:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 184              		.loc 1 941 0
 185 001e 0E4B     		ldr	r3, .L18+12
 186 0020 1D60     		str	r5, [r3]
 942:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 187              		.loc 1 942 0
 188 0022 0E4B     		ldr	r3, .L18+16
 189 0024 1C60     		str	r4, [r3]
 190              	.LBB36:
 943:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 945:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 946:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				/* The timer queue is allocated statically in case
 947:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 948:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				static StaticQueue_t xStaticTimerQueue;
 949:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_
 950:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 951:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskM
ARM GAS  /tmp/ccZ4zIPa.s 			page 21


 191              		.loc 1 951 0
 192 0026 0023     		movs	r3, #0
 193 0028 0093     		str	r3, [sp]
 194 002a 0D4B     		ldr	r3, .L18+20
 195 002c 0D4A     		ldr	r2, .L18+24
 196 002e 0C21     		movs	r1, #12
 197 0030 0A20     		movs	r0, #10
 198 0032 FFF7FEFF 		bl	xQueueGenericCreateStatic
 199              	.LVL24:
 200 0036 054B     		ldr	r3, .L18
 201 0038 1860     		str	r0, [r3]
 202              	.LBE36:
 952:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 953:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#else
 954:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 955:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 956:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 957:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#endif
 958:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 959:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 960:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 961:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				if( xTimerQueue != NULL )
 203              		.loc 1 961 0
 204 003a 10B1     		cbz	r0, .L16
 962:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 963:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 205              		.loc 1 963 0
 206 003c 0A49     		ldr	r1, .L18+28
 207 003e FFF7FEFF 		bl	vQueueAddToRegistry
 208              	.LVL25:
 209              	.L16:
 964:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 965:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				else
 966:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 967:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 968:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 969:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 970:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 971:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 972:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		else
 973:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 974:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 975:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 976:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 977:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 210              		.loc 1 977 0
 211 0042 FFF7FEFF 		bl	vPortExitCritical
 212              	.LVL26:
 978:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 213              		.loc 1 978 0
 214 0046 03B0     		add	sp, sp, #12
 215              	.LCFI3:
 216              		.cfi_def_cfa_offset 12
 217              		@ sp needed
 218 0048 30BD     		pop	{r4, r5, pc}
 219              	.L19:
 220 004a 00BF     		.align	2
ARM GAS  /tmp/ccZ4zIPa.s 			page 22


 221              	.L18:
 222 004c 00000000 		.word	.LANCHOR2
 223 0050 00000000 		.word	.LANCHOR3
 224 0054 00000000 		.word	.LANCHOR4
 225 0058 00000000 		.word	.LANCHOR0
 226 005c 00000000 		.word	.LANCHOR1
 227 0060 00000000 		.word	.LANCHOR5
 228 0064 00000000 		.word	.LANCHOR6
 229 0068 00000000 		.word	.LC0
 230              		.cfi_endproc
 231              	.LFE22:
 233              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 234              		.align	2
 235              		.thumb
 236              		.thumb_func
 238              	prvInitialiseNewTimer:
 239              	.LFB8:
 394:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 240              		.loc 1 394 0
 241              		.cfi_startproc
 242              		@ args = 8, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              	.LVL27:
 245 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 246              	.LCFI4:
 247              		.cfi_def_cfa_offset 24
 248              		.cfi_offset 4, -24
 249              		.cfi_offset 5, -20
 250              		.cfi_offset 6, -16
 251              		.cfi_offset 7, -12
 252              		.cfi_offset 8, -8
 253              		.cfi_offset 14, -4
 254 0004 079C     		ldr	r4, [sp, #28]
 396:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 255              		.loc 1 396 0
 256 0006 41B9     		cbnz	r1, .L21
 257              	.LBB37:
 258              	.LBB38:
 259              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
ARM GAS  /tmp/ccZ4zIPa.s 			page 23


  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
ARM GAS  /tmp/ccZ4zIPa.s 			page 24


  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
ARM GAS  /tmp/ccZ4zIPa.s 			page 25


 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
ARM GAS  /tmp/ccZ4zIPa.s 			page 26


 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 260              		.loc 2 237 0
 261              		.syntax unified
 262              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 263 0008 4FF05003 			mov r3, #80												
 264 000c 83F31188 		msr basepri, r3											
 265 0010 BFF36F8F 		isb														
 266 0014 BFF34F8F 		dsb														
 267              	
 268              	@ 0 "" 2
ARM GAS  /tmp/ccZ4zIPa.s 			page 27


 269              	.LVL28:
 270              		.thumb
 271              		.syntax unified
 272              	.L22:
 273 0018 FEE7     		b	.L22
 274              	.LVL29:
 275              	.L21:
 276 001a 0F46     		mov	r7, r1
 277              	.LBE38:
 278              	.LBE37:
 398:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 279              		.loc 1 398 0
 280 001c 74B1     		cbz	r4, .L20
 281 001e 1D46     		mov	r5, r3
 282 0020 1646     		mov	r6, r2
 283 0022 8046     		mov	r8, r0
 402:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 284              		.loc 1 402 0
 285 0024 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 286              	.LVL30:
 406:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 287              		.loc 1 406 0
 288 0028 C4F80080 		str	r8, [r4]
 407:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 289              		.loc 1 407 0
 290 002c A761     		str	r7, [r4, #24]
 408:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 291              		.loc 1 408 0
 292 002e E661     		str	r6, [r4, #28]
 409:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 293              		.loc 1 409 0
 294 0030 2562     		str	r5, [r4, #32]
 410:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 295              		.loc 1 410 0
 296 0032 069B     		ldr	r3, [sp, #24]
 297 0034 6362     		str	r3, [r4, #36]
 411:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 298              		.loc 1 411 0
 299 0036 201D     		adds	r0, r4, #4
 300 0038 FFF7FEFF 		bl	vListInitialiseItem
 301              	.LVL31:
 302              	.L20:
 303 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 304              		.cfi_endproc
 305              	.LFE8:
 307              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 308              		.align	2
 309              		.global	xTimerCreateTimerTask
 310              		.thumb
 311              		.thumb_func
 313              	xTimerCreateTimerTask:
 314              	.LFB5:
 260:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 315              		.loc 1 260 0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 16
 318              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccZ4zIPa.s 			page 28


 319 0000 10B5     		push	{r4, lr}
 320              	.LCFI5:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 4, -8
 323              		.cfi_offset 14, -4
 324 0002 88B0     		sub	sp, sp, #32
 325              	.LCFI6:
 326              		.cfi_def_cfa_offset 40
 327              	.LVL32:
 267:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 328              		.loc 1 267 0
 329 0004 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 330              	.LVL33:
 269:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 331              		.loc 1 269 0
 332 0008 154B     		ldr	r3, .L33
 333 000a 1B68     		ldr	r3, [r3]
 334 000c D3B1     		cbz	r3, .L30
 335              	.LBB39:
 273:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 336              		.loc 1 273 0
 337 000e 0024     		movs	r4, #0
 338 0010 0594     		str	r4, [sp, #20]
 274:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			uint32_t ulTimerTaskStackSize;
 339              		.loc 1 274 0
 340 0012 0694     		str	r4, [sp, #24]
 277:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 341              		.loc 1 277 0
 342 0014 07AA     		add	r2, sp, #28
 343 0016 06A9     		add	r1, sp, #24
 344 0018 05A8     		add	r0, sp, #20
 345 001a FFF7FEFF 		bl	vApplicationGetTimerTaskMemory
 346              	.LVL34:
 278:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 													"Tmr Svc",
 347              		.loc 1 278 0
 348 001e 059B     		ldr	r3, [sp, #20]
 349 0020 0293     		str	r3, [sp, #8]
 350 0022 069B     		ldr	r3, [sp, #24]
 351 0024 0193     		str	r3, [sp, #4]
 352 0026 0223     		movs	r3, #2
 353 0028 0093     		str	r3, [sp]
 354 002a 2346     		mov	r3, r4
 355 002c 079A     		ldr	r2, [sp, #28]
 356 002e 0D49     		ldr	r1, .L33+4
 357 0030 0D48     		ldr	r0, .L33+8
 358 0032 FFF7FEFF 		bl	xTaskCreateStatic
 359              	.LVL35:
 360 0036 0D4B     		ldr	r3, .L33+12
 361 0038 1860     		str	r0, [r3]
 286:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 362              		.loc 1 286 0
 363 003a 08B9     		cbnz	r0, .L31
 364              	.LBE39:
 261:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 365              		.loc 1 261 0
 366 003c 2046     		mov	r0, r4
 367 003e 02E0     		b	.L26
ARM GAS  /tmp/ccZ4zIPa.s 			page 29


 368              	.L31:
 369              	.LBB40:
 288:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 370              		.loc 1 288 0
 371 0040 0120     		movs	r0, #1
 372              	.LVL36:
 373 0042 00E0     		b	.L26
 374              	.LVL37:
 375              	.L30:
 376              	.LBE40:
 261:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 377              		.loc 1 261 0
 378 0044 0020     		movs	r0, #0
 379              	.LVL38:
 380              	.L26:
 307:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xReturn;
 381              		.loc 1 307 0
 382 0046 40B9     		cbnz	r0, .L28
 383              	.LBB41:
 384              	.LBB42:
 385              		.loc 2 237 0
 386              		.syntax unified
 387              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 388 0048 4FF05003 			mov r3, #80												
 389 004c 83F31188 		msr basepri, r3											
 390 0050 BFF36F8F 		isb														
 391 0054 BFF34F8F 		dsb														
 392              	
 393              	@ 0 "" 2
 394              	.LVL39:
 395              		.thumb
 396              		.syntax unified
 397              	.L29:
 398 0058 FEE7     		b	.L29
 399              	.L28:
 400              	.LBE42:
 401              	.LBE41:
 309:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 402              		.loc 1 309 0
 403 005a 08B0     		add	sp, sp, #32
 404              	.LCFI7:
 405              		.cfi_def_cfa_offset 8
 406              		@ sp needed
 407 005c 10BD     		pop	{r4, pc}
 408              	.L34:
 409 005e 00BF     		.align	2
 410              	.L33:
 411 0060 00000000 		.word	.LANCHOR2
 412 0064 08000000 		.word	.LC1
 413 0068 00000000 		.word	prvTimerTask
 414 006c 00000000 		.word	.LANCHOR7
 415              		.cfi_endproc
 416              	.LFE5:
 418              		.section	.text.xTimerCreate,"ax",%progbits
 419              		.align	2
 420              		.global	xTimerCreate
 421              		.thumb
ARM GAS  /tmp/ccZ4zIPa.s 			page 30


 422              		.thumb_func
 424              	xTimerCreate:
 425              	.LFB6:
 319:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 426              		.loc 1 319 0
 427              		.cfi_startproc
 428              		@ args = 4, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              	.LVL40:
 431 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 432              	.LCFI8:
 433              		.cfi_def_cfa_offset 24
 434              		.cfi_offset 4, -24
 435              		.cfi_offset 5, -20
 436              		.cfi_offset 6, -16
 437              		.cfi_offset 7, -12
 438              		.cfi_offset 8, -8
 439              		.cfi_offset 14, -4
 440 0004 82B0     		sub	sp, sp, #8
 441              	.LCFI9:
 442              		.cfi_def_cfa_offset 32
 443 0006 0546     		mov	r5, r0
 444 0008 0E46     		mov	r6, r1
 445 000a 1746     		mov	r7, r2
 446 000c 9846     		mov	r8, r3
 322:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 447              		.loc 1 322 0
 448 000e 2C20     		movs	r0, #44
 449              	.LVL41:
 450 0010 FFF7FEFF 		bl	pvPortMalloc
 451              	.LVL42:
 324:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 452              		.loc 1 324 0
 453 0014 0446     		mov	r4, r0
 454 0016 58B1     		cbz	r0, .L36
 326:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 455              		.loc 1 326 0
 456 0018 0190     		str	r0, [sp, #4]
 457 001a 089B     		ldr	r3, [sp, #32]
 458 001c 0093     		str	r3, [sp]
 459 001e 4346     		mov	r3, r8
 460 0020 3A46     		mov	r2, r7
 461 0022 3146     		mov	r1, r6
 462 0024 2846     		mov	r0, r5
 463              	.LVL43:
 464 0026 FFF7FEFF 		bl	prvInitialiseNewTimer
 465              	.LVL44:
 333:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 466              		.loc 1 333 0
 467 002a 0023     		movs	r3, #0
 468 002c 84F82830 		strb	r3, [r4, #40]
 469              	.L36:
 339:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 470              		.loc 1 339 0
 471 0030 2046     		mov	r0, r4
 472 0032 02B0     		add	sp, sp, #8
 473              	.LCFI10:
ARM GAS  /tmp/ccZ4zIPa.s 			page 31


 474              		.cfi_def_cfa_offset 24
 475              		@ sp needed
 476 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 477              		.cfi_endproc
 478              	.LFE6:
 480              		.section	.text.xTimerCreateStatic,"ax",%progbits
 481              		.align	2
 482              		.global	xTimerCreateStatic
 483              		.thumb
 484              		.thumb_func
 486              	xTimerCreateStatic:
 487              	.LFB7:
 352:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 488              		.loc 1 352 0
 489              		.cfi_startproc
 490              		@ args = 8, pretend = 0, frame = 8
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              	.LVL45:
 493 0000 30B5     		push	{r4, r5, lr}
 494              	.LCFI11:
 495              		.cfi_def_cfa_offset 12
 496              		.cfi_offset 4, -12
 497              		.cfi_offset 5, -8
 498              		.cfi_offset 14, -4
 499 0002 85B0     		sub	sp, sp, #20
 500              	.LCFI12:
 501              		.cfi_def_cfa_offset 32
 502 0004 099C     		ldr	r4, [sp, #36]
 503              	.LBB43:
 360:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 504              		.loc 1 360 0
 505 0006 2C25     		movs	r5, #44
 506 0008 0395     		str	r5, [sp, #12]
 361:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 507              		.loc 1 361 0
 508 000a 039D     		ldr	r5, [sp, #12]
 509 000c 2C2D     		cmp	r5, #44
 510 000e 08D0     		beq	.L39
 511              	.LBB44:
 512              	.LBB45:
 513              		.loc 2 237 0
 514              		.syntax unified
 515              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 516 0010 4FF05003 			mov r3, #80												
 517 0014 83F31188 		msr basepri, r3											
 518 0018 BFF36F8F 		isb														
 519 001c BFF34F8F 		dsb														
 520              	
 521              	@ 0 "" 2
 522              	.LVL46:
 523              		.thumb
 524              		.syntax unified
 525              	.L40:
 526 0020 FEE7     		b	.L40
 527              	.LVL47:
 528              	.L39:
 529              	.LBE45:
ARM GAS  /tmp/ccZ4zIPa.s 			page 32


 530              	.LBE44:
 531              	.LBE43:
 366:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 532              		.loc 1 366 0
 533 0022 44B9     		cbnz	r4, .L41
 534              	.LBB46:
 535              	.LBB47:
 536              		.loc 2 237 0
 537              		.syntax unified
 538              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 539 0024 4FF05003 			mov r3, #80												
 540 0028 83F31188 		msr basepri, r3											
 541 002c BFF36F8F 		isb														
 542 0030 BFF34F8F 		dsb														
 543              	
 544              	@ 0 "" 2
 545              	.LVL48:
 546              		.thumb
 547              		.syntax unified
 548              	.L42:
 549 0034 FEE7     		b	.L42
 550              	.LVL49:
 551              	.L41:
 552              	.LBE47:
 553              	.LBE46:
 369:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 554              		.loc 1 369 0
 555 0036 3CB1     		cbz	r4, .L43
 371:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 556              		.loc 1 371 0
 557 0038 0194     		str	r4, [sp, #4]
 558 003a 089D     		ldr	r5, [sp, #32]
 559 003c 0095     		str	r5, [sp]
 560 003e FFF7FEFF 		bl	prvInitialiseNewTimer
 561              	.LVL50:
 377:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 562              		.loc 1 377 0
 563 0042 0123     		movs	r3, #1
 564 0044 84F82830 		strb	r3, [r4, #40]
 565              	.L43:
 383:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 566              		.loc 1 383 0
 567 0048 2046     		mov	r0, r4
 568 004a 05B0     		add	sp, sp, #20
 569              	.LCFI13:
 570              		.cfi_def_cfa_offset 12
 571              		@ sp needed
 572 004c 30BD     		pop	{r4, r5, pc}
 573              		.cfi_endproc
 574              	.LFE7:
 576 004e 00BF     		.section	.text.xTimerGenericCommand,"ax",%progbits
 577              		.align	2
 578              		.global	xTimerGenericCommand
 579              		.thumb
 580              		.thumb_func
 582              	xTimerGenericCommand:
 583              	.LFB9:
ARM GAS  /tmp/ccZ4zIPa.s 			page 33


 418:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 584              		.loc 1 418 0
 585              		.cfi_startproc
 586              		@ args = 4, pretend = 0, frame = 16
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL51:
 422:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 589              		.loc 1 422 0
 590 0000 40B9     		cbnz	r0, .L46
 591              	.LBB48:
 592              	.LBB49:
 593              		.loc 2 237 0
 594              		.syntax unified
 595              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 596 0002 4FF05003 			mov r3, #80												
 597 0006 83F31188 		msr basepri, r3											
 598 000a BFF36F8F 		isb														
 599 000e BFF34F8F 		dsb														
 600              	
 601              	@ 0 "" 2
 602              	.LVL52:
 603              		.thumb
 604              		.syntax unified
 605              	.L47:
 606 0012 FEE7     		b	.L47
 607              	.LVL53:
 608              	.L46:
 609              	.LBE49:
 610              	.LBE48:
 418:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 611              		.loc 1 418 0
 612 0014 30B5     		push	{r4, r5, lr}
 613              	.LCFI14:
 614              		.cfi_def_cfa_offset 12
 615              		.cfi_offset 4, -12
 616              		.cfi_offset 5, -8
 617              		.cfi_offset 14, -4
 618 0016 85B0     		sub	sp, sp, #20
 619              	.LCFI15:
 620              		.cfi_def_cfa_offset 32
 621 0018 1546     		mov	r5, r2
 622 001a 0446     		mov	r4, r0
 426:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 623              		.loc 1 426 0
 624 001c 124A     		ldr	r2, .L53
 625              	.LVL54:
 626 001e 1068     		ldr	r0, [r2]
 627              	.LVL55:
 628 0020 F0B1     		cbz	r0, .L51
 629 0022 1A46     		mov	r2, r3
 429:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 630              		.loc 1 429 0
 631 0024 0191     		str	r1, [sp, #4]
 430:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 632              		.loc 1 430 0
 633 0026 0295     		str	r5, [sp, #8]
 431:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/ccZ4zIPa.s 			page 34


 634              		.loc 1 431 0
 635 0028 0394     		str	r4, [sp, #12]
 433:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 636              		.loc 1 433 0
 637 002a 0529     		cmp	r1, #5
 638 002c 13DC     		bgt	.L49
 639              	.LVL56:
 435:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 640              		.loc 1 435 0
 641 002e FFF7FEFF 		bl	xTaskGetSchedulerState
 642              	.LVL57:
 643 0032 0228     		cmp	r0, #2
 644 0034 07D1     		bne	.L50
 437:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 645              		.loc 1 437 0
 646 0036 0023     		movs	r3, #0
 647 0038 089A     		ldr	r2, [sp, #32]
 648 003a 01A9     		add	r1, sp, #4
 649 003c 0A48     		ldr	r0, .L53
 650 003e 0068     		ldr	r0, [r0]
 651 0040 FFF7FEFF 		bl	xQueueGenericSend
 652              	.LVL58:
 653 0044 0DE0     		b	.L48
 654              	.LVL59:
 655              	.L50:
 441:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 656              		.loc 1 441 0
 657 0046 0023     		movs	r3, #0
 658 0048 1A46     		mov	r2, r3
 659 004a 01A9     		add	r1, sp, #4
 660 004c 0648     		ldr	r0, .L53
 661 004e 0068     		ldr	r0, [r0]
 662 0050 FFF7FEFF 		bl	xQueueGenericSend
 663              	.LVL60:
 664 0054 05E0     		b	.L48
 665              	.LVL61:
 666              	.L49:
 446:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 667              		.loc 1 446 0
 668 0056 0023     		movs	r3, #0
 669 0058 01A9     		add	r1, sp, #4
 670              	.LVL62:
 671 005a FFF7FEFF 		bl	xQueueGenericSendFromISR
 672              	.LVL63:
 673 005e 00E0     		b	.L48
 674              	.LVL64:
 675              	.L51:
 419:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 676              		.loc 1 419 0
 677 0060 0020     		movs	r0, #0
 678              	.LVL65:
 679              	.L48:
 457:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 680              		.loc 1 457 0
 681 0062 05B0     		add	sp, sp, #20
 682              	.LCFI16:
 683              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccZ4zIPa.s 			page 35


 684              		@ sp needed
 685 0064 30BD     		pop	{r4, r5, pc}
 686              	.LVL66:
 687              	.L54:
 688 0066 00BF     		.align	2
 689              	.L53:
 690 0068 00000000 		.word	.LANCHOR2
 691              		.cfi_endproc
 692              	.LFE9:
 694              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 695              		.align	2
 696              		.thumb
 697              		.thumb_func
 699              	prvSwitchTimerLists:
 700              	.LFB21:
 872:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 701              		.loc 1 872 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 705 0000 70B5     		push	{r4, r5, r6, lr}
 706              	.LCFI17:
 707              		.cfi_def_cfa_offset 16
 708              		.cfi_offset 4, -16
 709              		.cfi_offset 5, -12
 710              		.cfi_offset 6, -8
 711              		.cfi_offset 14, -4
 712 0002 82B0     		sub	sp, sp, #8
 713              	.LCFI18:
 714              		.cfi_def_cfa_offset 24
 882:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 715              		.loc 1 882 0
 716 0004 29E0     		b	.L57
 717              	.L61:
 884:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 718              		.loc 1 884 0
 719 0006 DB68     		ldr	r3, [r3, #12]
 720 0008 1E68     		ldr	r6, [r3]
 721              	.LVL67:
 887:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 722              		.loc 1 887 0
 723 000a DC68     		ldr	r4, [r3, #12]
 724              	.LVL68:
 888:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 725              		.loc 1 888 0
 726 000c 251D     		adds	r5, r4, #4
 727 000e 2846     		mov	r0, r5
 728 0010 FFF7FEFF 		bl	uxListRemove
 729              	.LVL69:
 894:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 730              		.loc 1 894 0
 731 0014 636A     		ldr	r3, [r4, #36]
 732 0016 2046     		mov	r0, r4
 733 0018 9847     		blx	r3
 734              	.LVL70:
 896:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 735              		.loc 1 896 0
ARM GAS  /tmp/ccZ4zIPa.s 			page 36


 736 001a E369     		ldr	r3, [r4, #28]
 737 001c 012B     		cmp	r3, #1
 738 001e 1CD1     		bne	.L57
 904:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 739              		.loc 1 904 0
 740 0020 A369     		ldr	r3, [r4, #24]
 741 0022 3344     		add	r3, r3, r6
 742              	.LVL71:
 905:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 743              		.loc 1 905 0
 744 0024 9E42     		cmp	r6, r3
 745 0026 07D2     		bcs	.L58
 907:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 746              		.loc 1 907 0
 747 0028 6360     		str	r3, [r4, #4]
 908:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 748              		.loc 1 908 0
 749 002a 2461     		str	r4, [r4, #16]
 909:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 750              		.loc 1 909 0
 751 002c 2946     		mov	r1, r5
 752 002e 114B     		ldr	r3, .L63
 753              	.LVL72:
 754 0030 1868     		ldr	r0, [r3]
 755 0032 FFF7FEFF 		bl	vListInsert
 756              	.LVL73:
 757 0036 10E0     		b	.L57
 758              	.LVL74:
 759              	.L58:
 913:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 760              		.loc 1 913 0
 761 0038 0021     		movs	r1, #0
 762 003a 0091     		str	r1, [sp]
 763 003c 0B46     		mov	r3, r1
 764              	.LVL75:
 765 003e 3246     		mov	r2, r6
 766 0040 2046     		mov	r0, r4
 767 0042 FFF7FEFF 		bl	xTimerGenericCommand
 768              	.LVL76:
 914:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 769              		.loc 1 914 0
 770 0046 40B9     		cbnz	r0, .L57
 771              	.LBB50:
 772              	.LBB51:
 773              		.loc 2 237 0
 774              		.syntax unified
 775              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 776 0048 4FF05003 			mov r3, #80												
 777 004c 83F31188 		msr basepri, r3											
 778 0050 BFF36F8F 		isb														
 779 0054 BFF34F8F 		dsb														
 780              	
 781              	@ 0 "" 2
 782              	.LVL77:
 783              		.thumb
 784              		.syntax unified
 785              	.L60:
ARM GAS  /tmp/ccZ4zIPa.s 			page 37


 786 0058 FEE7     		b	.L60
 787              	.LVL78:
 788              	.L57:
 789              	.LBE51:
 790              	.LBE50:
 882:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 791              		.loc 1 882 0
 792 005a 064B     		ldr	r3, .L63
 793 005c 1B68     		ldr	r3, [r3]
 794 005e 1A68     		ldr	r2, [r3]
 795 0060 002A     		cmp	r2, #0
 796 0062 D0D1     		bne	.L61
 797              	.LVL79:
 925:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 798              		.loc 1 925 0
 799 0064 044A     		ldr	r2, .L63+4
 800 0066 1068     		ldr	r0, [r2]
 801 0068 0249     		ldr	r1, .L63
 802 006a 0860     		str	r0, [r1]
 926:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 803              		.loc 1 926 0
 804 006c 1360     		str	r3, [r2]
 927:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 805              		.loc 1 927 0
 806 006e 02B0     		add	sp, sp, #8
 807              	.LCFI19:
 808              		.cfi_def_cfa_offset 16
 809              		@ sp needed
 810 0070 70BD     		pop	{r4, r5, r6, pc}
 811              	.L64:
 812 0072 00BF     		.align	2
 813              	.L63:
 814 0074 00000000 		.word	.LANCHOR0
 815 0078 00000000 		.word	.LANCHOR1
 816              		.cfi_endproc
 817              	.LFE21:
 819              		.section	.text.prvSampleTimeNow,"ax",%progbits
 820              		.align	2
 821              		.thumb
 822              		.thumb_func
 824              	prvSampleTimeNow:
 825              	.LFB18:
 661:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 826              		.loc 1 661 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830              	.LVL80:
 831 0000 38B5     		push	{r3, r4, r5, lr}
 832              	.LCFI20:
 833              		.cfi_def_cfa_offset 16
 834              		.cfi_offset 3, -16
 835              		.cfi_offset 4, -12
 836              		.cfi_offset 5, -8
 837              		.cfi_offset 14, -4
 838 0002 0546     		mov	r5, r0
 665:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/ccZ4zIPa.s 			page 38


 839              		.loc 1 665 0
 840 0004 FFF7FEFF 		bl	xTaskGetTickCount
 841              	.LVL81:
 842 0008 0446     		mov	r4, r0
 843              	.LVL82:
 667:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 844              		.loc 1 667 0
 845 000a 074B     		ldr	r3, .L69
 846 000c 1B68     		ldr	r3, [r3]
 847 000e 9842     		cmp	r0, r3
 848 0010 04D2     		bcs	.L66
 669:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 849              		.loc 1 669 0
 850 0012 FFF7FEFF 		bl	prvSwitchTimerLists
 851              	.LVL83:
 670:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 852              		.loc 1 670 0
 853 0016 0123     		movs	r3, #1
 854 0018 2B60     		str	r3, [r5]
 855 001a 01E0     		b	.L67
 856              	.LVL84:
 857              	.L66:
 674:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 858              		.loc 1 674 0
 859 001c 0023     		movs	r3, #0
 860 001e 2B60     		str	r3, [r5]
 861              	.LVL85:
 862              	.L67:
 677:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 863              		.loc 1 677 0
 864 0020 014B     		ldr	r3, .L69
 865 0022 1C60     		str	r4, [r3]
 680:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 866              		.loc 1 680 0
 867 0024 2046     		mov	r0, r4
 868 0026 38BD     		pop	{r3, r4, r5, pc}
 869              	.LVL86:
 870              	.L70:
 871              		.align	2
 872              	.L69:
 873 0028 00000000 		.word	.LANCHOR8
 874              		.cfi_endproc
 875              	.LFE18:
 877              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 878              		.align	2
 879              		.thumb
 880              		.thumb_func
 882              	prvProcessExpiredTimer:
 883              	.LFB14:
 499:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 884              		.loc 1 499 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888              	.LVL87:
 889 0000 70B5     		push	{r4, r5, r6, lr}
 890              	.LCFI21:
ARM GAS  /tmp/ccZ4zIPa.s 			page 39


 891              		.cfi_def_cfa_offset 16
 892              		.cfi_offset 4, -16
 893              		.cfi_offset 5, -12
 894              		.cfi_offset 6, -8
 895              		.cfi_offset 14, -4
 896 0002 82B0     		sub	sp, sp, #8
 897              	.LCFI22:
 898              		.cfi_def_cfa_offset 24
 899 0004 0546     		mov	r5, r0
 900 0006 0E46     		mov	r6, r1
 501:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 901              		.loc 1 501 0
 902 0008 134B     		ldr	r3, .L75
 903 000a 1B68     		ldr	r3, [r3]
 904 000c DB68     		ldr	r3, [r3, #12]
 905 000e DC68     		ldr	r4, [r3, #12]
 906              	.LVL88:
 505:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 907              		.loc 1 505 0
 908 0010 201D     		adds	r0, r4, #4
 909              	.LVL89:
 910 0012 FFF7FEFF 		bl	uxListRemove
 911              	.LVL90:
 510:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 912              		.loc 1 510 0
 913 0016 E369     		ldr	r3, [r4, #28]
 914 0018 012B     		cmp	r3, #1
 915 001a 18D1     		bne	.L72
 515:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 916              		.loc 1 515 0
 917 001c A169     		ldr	r1, [r4, #24]
 918 001e 2B46     		mov	r3, r5
 919 0020 3246     		mov	r2, r6
 920 0022 2944     		add	r1, r1, r5
 921 0024 2046     		mov	r0, r4
 922 0026 FFF7FEFF 		bl	prvInsertTimerInActiveList
 923              	.LVL91:
 924 002a 80B1     		cbz	r0, .L72
 519:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 925              		.loc 1 519 0
 926 002c 0021     		movs	r1, #0
 927 002e 0091     		str	r1, [sp]
 928 0030 0B46     		mov	r3, r1
 929 0032 2A46     		mov	r2, r5
 930 0034 2046     		mov	r0, r4
 931 0036 FFF7FEFF 		bl	xTimerGenericCommand
 932              	.LVL92:
 520:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 933              		.loc 1 520 0
 934 003a 40B9     		cbnz	r0, .L72
 935              	.LBB52:
 936              	.LBB53:
 937              		.loc 2 237 0
 938              		.syntax unified
 939              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 940 003c 4FF05003 			mov r3, #80												
 941 0040 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccZ4zIPa.s 			page 40


 942 0044 BFF36F8F 		isb														
 943 0048 BFF34F8F 		dsb														
 944              	
 945              	@ 0 "" 2
 946              	.LVL93:
 947              		.thumb
 948              		.syntax unified
 949              	.L73:
 950 004c FEE7     		b	.L73
 951              	.LVL94:
 952              	.L72:
 953              	.LBE53:
 954              	.LBE52:
 534:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 955              		.loc 1 534 0
 956 004e 636A     		ldr	r3, [r4, #36]
 957 0050 2046     		mov	r0, r4
 958 0052 9847     		blx	r3
 959              	.LVL95:
 535:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 960              		.loc 1 535 0
 961 0054 02B0     		add	sp, sp, #8
 962              	.LCFI23:
 963              		.cfi_def_cfa_offset 16
 964              		@ sp needed
 965 0056 70BD     		pop	{r4, r5, r6, pc}
 966              	.LVL96:
 967              	.L76:
 968              		.align	2
 969              	.L75:
 970 0058 00000000 		.word	.LANCHOR0
 971              		.cfi_endproc
 972              	.LFE14:
 974              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 975              		.align	2
 976              		.thumb
 977              		.thumb_func
 979              	prvProcessTimerOrBlockTask:
 980              	.LFB16:
 575:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 981              		.loc 1 575 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 8
 984              		@ frame_needed = 0, uses_anonymous_args = 0
 985              	.LVL97:
 986 0000 70B5     		push	{r4, r5, r6, lr}
 987              	.LCFI24:
 988              		.cfi_def_cfa_offset 16
 989              		.cfi_offset 4, -16
 990              		.cfi_offset 5, -12
 991              		.cfi_offset 6, -8
 992              		.cfi_offset 14, -4
 993 0002 82B0     		sub	sp, sp, #8
 994              	.LCFI25:
 995              		.cfi_def_cfa_offset 24
 996 0004 0646     		mov	r6, r0
 997 0006 0C46     		mov	r4, r1
ARM GAS  /tmp/ccZ4zIPa.s 			page 41


 579:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 998              		.loc 1 579 0
 999 0008 FFF7FEFF 		bl	vTaskSuspendAll
 1000              	.LVL98:
 586:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 1001              		.loc 1 586 0
 1002 000c 01A8     		add	r0, sp, #4
 1003 000e FFF7FEFF 		bl	prvSampleTimeNow
 1004              	.LVL99:
 587:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 1005              		.loc 1 587 0
 1006 0012 019B     		ldr	r3, [sp, #4]
 1007 0014 1BBB     		cbnz	r3, .L78
 1008 0016 0546     		mov	r5, r0
 590:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 1009              		.loc 1 590 0
 1010 0018 44B9     		cbnz	r4, .L79
 590:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 1011              		.loc 1 590 0 is_stmt 0 discriminator 1
 1012 001a B042     		cmp	r0, r6
 1013 001c 06D3     		bcc	.L79
 592:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1014              		.loc 1 592 0 is_stmt 1
 1015 001e FFF7FEFF 		bl	xTaskResumeAll
 1016              	.LVL100:
 593:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 1017              		.loc 1 593 0
 1018 0022 2946     		mov	r1, r5
 1019 0024 3046     		mov	r0, r6
 1020 0026 FFF7FEFF 		bl	prvProcessExpiredTimer
 1021              	.LVL101:
 1022 002a 1AE0     		b	.L77
 1023              	.LVL102:
 1024              	.L79:
 603:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
 1025              		.loc 1 603 0
 1026 002c 2CB1     		cbz	r4, .L81
 607:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 1027              		.loc 1 607 0
 1028 002e 0E4B     		ldr	r3, .L83
 1029 0030 1B68     		ldr	r3, [r3]
 1030 0032 1C68     		ldr	r4, [r3]
 1031              	.LVL103:
 1032 0034 B4FA84F4 		clz	r4, r4
 1033 0038 6409     		lsrs	r4, r4, #5
 1034              	.LVL104:
 1035              	.L81:
 610:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1036              		.loc 1 610 0
 1037 003a 2246     		mov	r2, r4
 1038 003c 711B     		subs	r1, r6, r5
 1039 003e 0B4B     		ldr	r3, .L83+4
 1040 0040 1868     		ldr	r0, [r3]
 1041              	.LVL105:
 1042 0042 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 1043              	.LVL106:
 612:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				{
ARM GAS  /tmp/ccZ4zIPa.s 			page 42


 1044              		.loc 1 612 0
 1045 0046 FFF7FEFF 		bl	xTaskResumeAll
 1046              	.LVL107:
 1047 004a 50B9     		cbnz	r0, .L77
 618:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 				}
 1048              		.loc 1 618 0
 1049 004c 4FF08052 		mov	r2, #268435456
 1050 0050 074B     		ldr	r3, .L83+8
 1051 0052 1A60     		str	r2, [r3]
 1052              		.syntax unified
 1053              	@ 618 "Middlewares/Third_Party/FreeRTOS/Source/timers.c" 1
 1054 0054 BFF34F8F 		dsb
 1055              	@ 0 "" 2
 1056              	@ 618 "Middlewares/Third_Party/FreeRTOS/Source/timers.c" 1
 1057 0058 BFF36F8F 		isb
 1058              	@ 0 "" 2
 1059              		.thumb
 1060              		.syntax unified
 1061 005c 01E0     		b	.L77
 1062              	.LVL108:
 1063              	.L78:
 628:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		}
 1064              		.loc 1 628 0
 1065 005e FFF7FEFF 		bl	xTaskResumeAll
 1066              	.LVL109:
 1067              	.L77:
 631:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1068              		.loc 1 631 0
 1069 0062 02B0     		add	sp, sp, #8
 1070              	.LCFI26:
 1071              		.cfi_def_cfa_offset 16
 1072              		@ sp needed
 1073 0064 70BD     		pop	{r4, r5, r6, pc}
 1074              	.LVL110:
 1075              	.L84:
 1076 0066 00BF     		.align	2
 1077              	.L83:
 1078 0068 00000000 		.word	.LANCHOR1
 1079 006c 00000000 		.word	.LANCHOR2
 1080 0070 04ED00E0 		.word	-536810236
 1081              		.cfi_endproc
 1082              	.LFE16:
 1084              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 1085              		.align	2
 1086              		.thumb
 1087              		.thumb_func
 1089              	prvProcessReceivedCommands:
 1090              	.LFB20:
 725:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 1091              		.loc 1 725 0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 16
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 1095 0000 30B5     		push	{r4, r5, lr}
 1096              	.LCFI27:
 1097              		.cfi_def_cfa_offset 12
 1098              		.cfi_offset 4, -12
ARM GAS  /tmp/ccZ4zIPa.s 			page 43


 1099              		.cfi_offset 5, -8
 1100              		.cfi_offset 14, -4
 1101 0002 87B0     		sub	sp, sp, #28
 1102              	.LCFI28:
 1103              		.cfi_def_cfa_offset 40
 731:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 1104              		.loc 1 731 0
 1105 0004 50E0     		b	.L87
 1106              	.L97:
 757:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		{
 1107              		.loc 1 757 0
 1108 0006 039B     		ldr	r3, [sp, #12]
 1109 0008 002B     		cmp	r3, #0
 1110 000a 4DDB     		blt	.L87
 761:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1111              		.loc 1 761 0
 1112 000c 059C     		ldr	r4, [sp, #20]
 1113              	.LVL111:
 763:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 1114              		.loc 1 763 0
 1115 000e 6369     		ldr	r3, [r4, #20]
 1116 0010 13B1     		cbz	r3, .L88
 766:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			}
 1117              		.loc 1 766 0
 1118 0012 201D     		adds	r0, r4, #4
 1119 0014 FFF7FEFF 		bl	uxListRemove
 1120              	.LVL112:
 1121              	.L88:
 781:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1122              		.loc 1 781 0
 1123 0018 02A8     		add	r0, sp, #8
 1124 001a FFF7FEFF 		bl	prvSampleTimeNow
 1125              	.LVL113:
 783:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 			{
 1126              		.loc 1 783 0
 1127 001e 039B     		ldr	r3, [sp, #12]
 1128 0020 092B     		cmp	r3, #9
 1129 0022 41D8     		bhi	.L87
 1130 0024 DFE803F0 		tbb	[pc, r3]
 1131              	.L91:
 1132 0028 05       		.byte	(.L90-.L91)/2
 1133 0029 05       		.byte	(.L90-.L91)/2
 1134 002a 05       		.byte	(.L90-.L91)/2
 1135 002b 40       		.byte	(.L87-.L91)/2
 1136 002c 27       		.byte	(.L92-.L91)/2
 1137 002d 3A       		.byte	(.L93-.L91)/2
 1138 002e 05       		.byte	(.L90-.L91)/2
 1139 002f 05       		.byte	(.L90-.L91)/2
 1140 0030 40       		.byte	(.L87-.L91)/2
 1141 0031 27       		.byte	(.L92-.L91)/2
 1142              		.p2align 1
 1143              	.L90:
 791:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					{
 1144              		.loc 1 791 0
 1145 0032 0499     		ldr	r1, [sp, #16]
 1146 0034 A569     		ldr	r5, [r4, #24]
 1147 0036 0B46     		mov	r3, r1
ARM GAS  /tmp/ccZ4zIPa.s 			page 44


 1148 0038 0246     		mov	r2, r0
 1149 003a 2944     		add	r1, r1, r5
 1150 003c 2046     		mov	r0, r4
 1151              	.LVL114:
 1152 003e FFF7FEFF 		bl	prvInsertTimerInActiveList
 1153              	.LVL115:
 1154 0042 88B3     		cbz	r0, .L87
 795:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1155              		.loc 1 795 0
 1156 0044 636A     		ldr	r3, [r4, #36]
 1157 0046 2046     		mov	r0, r4
 1158 0048 9847     		blx	r3
 1159              	.LVL116:
 798:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 1160              		.loc 1 798 0
 1161 004a E369     		ldr	r3, [r4, #28]
 1162 004c 012B     		cmp	r3, #1
 1163 004e 2BD1     		bne	.L87
 800:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							configASSERT( xResult );
 1164              		.loc 1 800 0
 1165 0050 A269     		ldr	r2, [r4, #24]
 1166 0052 0021     		movs	r1, #0
 1167 0054 0091     		str	r1, [sp]
 1168 0056 0B46     		mov	r3, r1
 1169 0058 0498     		ldr	r0, [sp, #16]
 1170 005a 0244     		add	r2, r2, r0
 1171 005c 2046     		mov	r0, r4
 1172 005e FFF7FEFF 		bl	xTimerGenericCommand
 1173              	.LVL117:
 801:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 1174              		.loc 1 801 0
 1175 0062 08BB     		cbnz	r0, .L87
 1176              	.LBB54:
 1177              	.LBB55:
 1178              		.loc 2 237 0
 1179              		.syntax unified
 1180              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1181 0064 4FF05003 			mov r3, #80												
 1182 0068 83F31188 		msr basepri, r3											
 1183 006c BFF36F8F 		isb														
 1184 0070 BFF34F8F 		dsb														
 1185              	
 1186              	@ 0 "" 2
 1187              	.LVL118:
 1188              		.thumb
 1189              		.syntax unified
 1190              	.L94:
 1191 0074 FEE7     		b	.L94
 1192              	.LVL119:
 1193              	.L92:
 1194              	.LBE55:
 1195              	.LBE54:
 823:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1196              		.loc 1 823 0
 1197 0076 0499     		ldr	r1, [sp, #16]
 1198 0078 A161     		str	r1, [r4, #24]
 824:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/ccZ4zIPa.s 			page 45


 1199              		.loc 1 824 0
 1200 007a 41B9     		cbnz	r1, .L95
 1201              	.LBB56:
 1202              	.LBB57:
 1203              		.loc 2 237 0
 1204              		.syntax unified
 1205              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1206 007c 4FF05003 			mov r3, #80												
 1207 0080 83F31188 		msr basepri, r3											
 1208 0084 BFF36F8F 		isb														
 1209 0088 BFF34F8F 		dsb														
 1210              	
 1211              	@ 0 "" 2
 1212              	.LVL120:
 1213              		.thumb
 1214              		.syntax unified
 1215              	.L96:
 1216 008c FEE7     		b	.L96
 1217              	.L95:
 1218              	.LBE57:
 1219              	.LBE56:
 832:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 					break;
 1220              		.loc 1 832 0
 1221 008e 0346     		mov	r3, r0
 1222 0090 0246     		mov	r2, r0
 1223 0092 0144     		add	r1, r1, r0
 1224 0094 2046     		mov	r0, r4
 1225              	.LVL121:
 1226 0096 FFF7FEFF 		bl	prvInsertTimerInActiveList
 1227              	.LVL122:
 833:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1228              		.loc 1 833 0
 1229 009a 05E0     		b	.L87
 1230              	.LVL123:
 1231              	.L93:
 850:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						{
 1232              		.loc 1 850 0
 1233 009c 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1234 00a0 13B9     		cbnz	r3, .L87
 852:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 						}
 1235              		.loc 1 852 0
 1236 00a2 2046     		mov	r0, r4
 1237              	.LVL124:
 1238 00a4 FFF7FEFF 		bl	vPortFree
 1239              	.LVL125:
 1240              	.L87:
 731:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 1241              		.loc 1 731 0
 1242 00a8 0023     		movs	r3, #0
 1243 00aa 1A46     		mov	r2, r3
 1244 00ac 03A9     		add	r1, sp, #12
 1245 00ae 0448     		ldr	r0, .L99
 1246 00b0 0068     		ldr	r0, [r0]
 1247 00b2 FFF7FEFF 		bl	xQueueGenericReceive
 1248              	.LVL126:
 1249 00b6 0028     		cmp	r0, #0
 1250 00b8 A5D1     		bne	.L97
ARM GAS  /tmp/ccZ4zIPa.s 			page 46


 868:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1251              		.loc 1 868 0
 1252 00ba 07B0     		add	sp, sp, #28
 1253              	.LCFI29:
 1254              		.cfi_def_cfa_offset 12
 1255              		@ sp needed
 1256 00bc 30BD     		pop	{r4, r5, pc}
 1257              	.L100:
 1258 00be 00BF     		.align	2
 1259              	.L99:
 1260 00c0 00000000 		.word	.LANCHOR2
 1261              		.cfi_endproc
 1262              	.LFE20:
 1264              		.section	.text.prvTimerTask,"ax",%progbits
 1265              		.align	2
 1266              		.thumb
 1267              		.thumb_func
 1269              	prvTimerTask:
 1270              	.LFB15:
 539:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 1271              		.loc 1 539 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 8
 1274              		@ frame_needed = 0, uses_anonymous_args = 0
 1275              	.LVL127:
 1276 0000 00B5     		push	{lr}
 1277              	.LCFI30:
 1278              		.cfi_def_cfa_offset 4
 1279              		.cfi_offset 14, -4
 1280 0002 83B0     		sub	sp, sp, #12
 1281              	.LCFI31:
 1282              		.cfi_def_cfa_offset 16
 1283              	.LVL128:
 1284              	.L102:
 562:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1285              		.loc 1 562 0 discriminator 1
 1286 0004 01A8     		add	r0, sp, #4
 1287 0006 FFF7FEFF 		bl	prvGetNextExpireTime
 1288              	.LVL129:
 566:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 1289              		.loc 1 566 0 discriminator 1
 1290 000a 0199     		ldr	r1, [sp, #4]
 1291 000c FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 1292              	.LVL130:
 569:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 1293              		.loc 1 569 0 discriminator 1
 1294 0010 FFF7FEFF 		bl	prvProcessReceivedCommands
 1295              	.LVL131:
 1296 0014 F6E7     		b	.L102
 1297              		.cfi_endproc
 1298              	.LFE15:
 1300 0016 00BF     		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1301              		.align	2
 1302              		.global	xTimerGetTimerDaemonTaskHandle
 1303              		.thumb
 1304              		.thumb_func
 1306              	xTimerGetTimerDaemonTaskHandle:
ARM GAS  /tmp/ccZ4zIPa.s 			page 47


 1307              	.LFB10:
 461:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1308              		.loc 1 461 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 1312              		@ link register save eliminated.
 464:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 1313              		.loc 1 464 0
 1314 0000 064B     		ldr	r3, .L107
 1315 0002 1868     		ldr	r0, [r3]
 1316 0004 40B9     		cbnz	r0, .L105
 1317              	.LBB58:
 1318              	.LBB59:
 1319              		.loc 2 237 0
 1320              		.syntax unified
 1321              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1322 0006 4FF05003 			mov r3, #80												
 1323 000a 83F31188 		msr basepri, r3											
 1324 000e BFF36F8F 		isb														
 1325 0012 BFF34F8F 		dsb														
 1326              	
 1327              	@ 0 "" 2
 1328              	.LVL132:
 1329              		.thumb
 1330              		.syntax unified
 1331              	.L106:
 1332 0016 FEE7     		b	.L106
 1333              	.L105:
 1334              	.LBE59:
 1335              	.LBE58:
 466:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1336              		.loc 1 466 0
 1337 0018 7047     		bx	lr
 1338              	.L108:
 1339 001a 00BF     		.align	2
 1340              	.L107:
 1341 001c 00000000 		.word	.LANCHOR7
 1342              		.cfi_endproc
 1343              	.LFE10:
 1345              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1346              		.align	2
 1347              		.global	xTimerGetPeriod
 1348              		.thumb
 1349              		.thumb_func
 1351              	xTimerGetPeriod:
 1352              	.LFB11:
 470:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1353              		.loc 1 470 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358              	.LVL133:
 473:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1359              		.loc 1 473 0
 1360 0000 40B9     		cbnz	r0, .L110
ARM GAS  /tmp/ccZ4zIPa.s 			page 48


 1361              	.LBB60:
 1362              	.LBB61:
 1363              		.loc 2 237 0
 1364              		.syntax unified
 1365              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1366 0002 4FF05003 			mov r3, #80												
 1367 0006 83F31188 		msr basepri, r3											
 1368 000a BFF36F8F 		isb														
 1369 000e BFF34F8F 		dsb														
 1370              	
 1371              	@ 0 "" 2
 1372              	.LVL134:
 1373              		.thumb
 1374              		.syntax unified
 1375              	.L111:
 1376 0012 FEE7     		b	.L111
 1377              	.L110:
 1378              	.LBE61:
 1379              	.LBE60:
 475:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1380              		.loc 1 475 0
 1381 0014 8069     		ldr	r0, [r0, #24]
 1382              	.LVL135:
 1383 0016 7047     		bx	lr
 1384              		.cfi_endproc
 1385              	.LFE11:
 1387              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1388              		.align	2
 1389              		.global	xTimerGetExpiryTime
 1390              		.thumb
 1391              		.thumb_func
 1393              	xTimerGetExpiryTime:
 1394              	.LFB12:
 479:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 1395              		.loc 1 479 0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 1399              		@ link register save eliminated.
 1400              	.LVL136:
 483:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1401              		.loc 1 483 0
 1402 0000 40B9     		cbnz	r0, .L113
 1403              	.LBB62:
 1404              	.LBB63:
 1405              		.loc 2 237 0
 1406              		.syntax unified
 1407              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1408 0002 4FF05003 			mov r3, #80												
 1409 0006 83F31188 		msr basepri, r3											
 1410 000a BFF36F8F 		isb														
 1411 000e BFF34F8F 		dsb														
 1412              	
 1413              	@ 0 "" 2
 1414              	.LVL137:
 1415              		.thumb
 1416              		.syntax unified
ARM GAS  /tmp/ccZ4zIPa.s 			page 49


 1417              	.L114:
 1418 0012 FEE7     		b	.L114
 1419              	.L113:
 1420              	.LVL138:
 1421              	.LBE63:
 1422              	.LBE62:
 486:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1423              		.loc 1 486 0
 1424 0014 4068     		ldr	r0, [r0, #4]
 1425              	.LVL139:
 1426 0016 7047     		bx	lr
 1427              		.cfi_endproc
 1428              	.LFE12:
 1430              		.section	.text.pcTimerGetName,"ax",%progbits
 1431              		.align	2
 1432              		.global	pcTimerGetName
 1433              		.thumb
 1434              		.thumb_func
 1436              	pcTimerGetName:
 1437              	.LFB13:
 490:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1438              		.loc 1 490 0
 1439              		.cfi_startproc
 1440              		@ args = 0, pretend = 0, frame = 0
 1441              		@ frame_needed = 0, uses_anonymous_args = 0
 1442              		@ link register save eliminated.
 1443              	.LVL140:
 493:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 1444              		.loc 1 493 0
 1445 0000 40B9     		cbnz	r0, .L116
 1446              	.LBB64:
 1447              	.LBB65:
 1448              		.loc 2 237 0
 1449              		.syntax unified
 1450              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1451 0002 4FF05003 			mov r3, #80												
 1452 0006 83F31188 		msr basepri, r3											
 1453 000a BFF36F8F 		isb														
 1454 000e BFF34F8F 		dsb														
 1455              	
 1456              	@ 0 "" 2
 1457              	.LVL141:
 1458              		.thumb
 1459              		.syntax unified
 1460              	.L117:
 1461 0012 FEE7     		b	.L117
 1462              	.L116:
 1463              	.LBE65:
 1464              	.LBE64:
 495:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1465              		.loc 1 495 0
 1466 0014 0068     		ldr	r0, [r0]
 1467              	.LVL142:
 1468 0016 7047     		bx	lr
 1469              		.cfi_endproc
 1470              	.LFE13:
 1472              		.section	.text.xTimerIsTimerActive,"ax",%progbits
ARM GAS  /tmp/ccZ4zIPa.s 			page 50


 1473              		.align	2
 1474              		.global	xTimerIsTimerActive
 1475              		.thumb
 1476              		.thumb_func
 1478              	xTimerIsTimerActive:
 1479              	.LFB23:
 979:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 980:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 982:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 1480              		.loc 1 982 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              	.LVL143:
 983:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsInActiveList;
 984:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 985:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 986:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 1485              		.loc 1 986 0
 1486 0000 40B9     		cbnz	r0, .L119
 1487              	.LBB66:
 1488              	.LBB67:
 1489              		.loc 2 237 0
 1490              		.syntax unified
 1491              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1492 0002 4FF05003 			mov r3, #80												
 1493 0006 83F31188 		msr basepri, r3											
 1494 000a BFF36F8F 		isb														
 1495 000e BFF34F8F 		dsb														
 1496              	
 1497              	@ 0 "" 2
 1498              	.LVL144:
 1499              		.thumb
 1500              		.syntax unified
 1501              	.L120:
 1502 0012 FEE7     		b	.L120
 1503              	.L119:
 1504              	.LBE67:
 1505              	.LBE66:
 982:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsInActiveList;
 1506              		.loc 1 982 0
 1507 0014 10B5     		push	{r4, lr}
 1508              	.LCFI32:
 1509              		.cfi_def_cfa_offset 8
 1510              		.cfi_offset 4, -8
 1511              		.cfi_offset 14, -4
 1512 0016 0446     		mov	r4, r0
 987:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	/* Is the timer in the list of active timers? */
 989:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 1513              		.loc 1 989 0
 1514 0018 FFF7FEFF 		bl	vPortEnterCritical
 1515              	.LVL145:
 990:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
 991:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 992:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		it is referenced from either the current or the overflow timer lists in
ARM GAS  /tmp/ccZ4zIPa.s 			page 51


 993:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 994:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListIte
 1516              		.loc 1 994 0
 1517 001c 6469     		ldr	r4, [r4, #20]
 1518              	.LVL146:
 1519 001e 0034     		adds	r4, r4, #0
 1520 0020 18BF     		it	ne
 1521 0022 0124     		movne	r4, #1
 1522              	.LVL147:
 995:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
 996:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 1523              		.loc 1 996 0
 1524 0024 FFF7FEFF 		bl	vPortExitCritical
 1525              	.LVL148:
 997:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
 998:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return xTimerIsInActiveList;
 999:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1526              		.loc 1 999 0
 1527 0028 2046     		mov	r0, r4
 1528 002a 10BD     		pop	{r4, pc}
 1529              		.cfi_endproc
 1530              	.LFE23:
 1532              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1533              		.align	2
 1534              		.global	pvTimerGetTimerID
 1535              		.thumb
 1536              		.thumb_func
 1538              	pvTimerGetTimerID:
 1539              	.LFB24:
1000:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1001:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1002:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
1003:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 1540              		.loc 1 1003 0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544              	.LVL149:
1004:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
1005:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** void *pvReturn;
1006:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 1545              		.loc 1 1007 0
 1546 0000 40B9     		cbnz	r0, .L123
 1547              	.LBB68:
 1548              	.LBB69:
 1549              		.loc 2 237 0
 1550              		.syntax unified
 1551              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1552 0002 4FF05003 			mov r3, #80												
 1553 0006 83F31188 		msr basepri, r3											
 1554 000a BFF36F8F 		isb														
 1555 000e BFF34F8F 		dsb														
 1556              	
 1557              	@ 0 "" 2
 1558              	.LVL150:
 1559              		.thumb
ARM GAS  /tmp/ccZ4zIPa.s 			page 52


 1560              		.syntax unified
 1561              	.L124:
 1562 0012 FEE7     		b	.L124
 1563              	.L123:
 1564              	.LBE69:
 1565              	.LBE68:
1003:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1566              		.loc 1 1003 0
 1567 0014 10B5     		push	{r4, lr}
 1568              	.LCFI33:
 1569              		.cfi_def_cfa_offset 8
 1570              		.cfi_offset 4, -8
 1571              		.cfi_offset 14, -4
 1572 0016 0446     		mov	r4, r0
1008:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1009:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 1573              		.loc 1 1009 0
 1574 0018 FFF7FEFF 		bl	vPortEnterCritical
 1575              	.LVL151:
1010:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
1011:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1576              		.loc 1 1011 0
 1577 001c 246A     		ldr	r4, [r4, #32]
 1578              	.LVL152:
1012:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
1013:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 1579              		.loc 1 1013 0
 1580 001e FFF7FEFF 		bl	vPortExitCritical
 1581              	.LVL153:
1014:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1015:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	return pvReturn;
1016:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** }
 1582              		.loc 1 1016 0
 1583 0022 2046     		mov	r0, r4
 1584 0024 10BD     		pop	{r4, pc}
 1585              		.cfi_endproc
 1586              	.LFE24:
 1588 0026 00BF     		.section	.text.vTimerSetTimerID,"ax",%progbits
 1589              		.align	2
 1590              		.global	vTimerSetTimerID
 1591              		.thumb
 1592              		.thumb_func
 1594              	vTimerSetTimerID:
 1595              	.LFB25:
1017:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1018:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1019:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
1020:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** {
 1596              		.loc 1 1020 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 0
 1599              		@ frame_needed = 0, uses_anonymous_args = 0
 1600              	.LVL154:
 1601 0000 38B5     		push	{r3, r4, r5, lr}
 1602              	.LCFI34:
 1603              		.cfi_def_cfa_offset 16
 1604              		.cfi_offset 3, -16
ARM GAS  /tmp/ccZ4zIPa.s 			page 53


 1605              		.cfi_offset 4, -12
 1606              		.cfi_offset 5, -8
 1607              		.cfi_offset 14, -4
 1608              	.LVL155:
1021:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
1022:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1023:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 1609              		.loc 1 1023 0
 1610 0002 40B9     		cbnz	r0, .L127
 1611              	.LBB70:
 1612              	.LBB71:
 1613              		.loc 2 237 0
 1614              		.syntax unified
 1615              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1616 0004 4FF05003 			mov r3, #80												
 1617 0008 83F31188 		msr basepri, r3											
 1618 000c BFF36F8F 		isb														
 1619 0010 BFF34F8F 		dsb														
 1620              	
 1621              	@ 0 "" 2
 1622              	.LVL156:
 1623              		.thumb
 1624              		.syntax unified
 1625              	.L128:
 1626 0014 FEE7     		b	.L128
 1627              	.L127:
 1628 0016 0446     		mov	r4, r0
 1629 0018 0D46     		mov	r5, r1
 1630              	.LBE71:
 1631              	.LBE70:
1024:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 
1025:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 1632              		.loc 1 1025 0
 1633 001a FFF7FEFF 		bl	vPortEnterCritical
 1634              	.LVL157:
1026:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 1635              		.loc 1 1027 0
 1636 001e 2562     		str	r5, [r4, #32]
1028:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	}
1029:Middlewares/Third_Party/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 1637              		.loc 1 1029 0
 1638 0020 FFF7FEFF 		bl	vPortExitCritical
 1639              	.LVL158:
 1640 0024 38BD     		pop	{r3, r4, r5, pc}
 1641              		.cfi_endproc
 1642              	.LFE25:
 1644 0026 00BF     		.section	.bss.pxCurrentTimerList,"aw",%nobits
 1645              		.align	2
 1646              		.set	.LANCHOR0,. + 0
 1649              	pxCurrentTimerList:
 1650 0000 00000000 		.space	4
 1651              		.section	.bss.xActiveTimerList1,"aw",%nobits
 1652              		.align	2
 1653              		.set	.LANCHOR3,. + 0
 1656              	xActiveTimerList1:
 1657 0000 00000000 		.space	20
ARM GAS  /tmp/ccZ4zIPa.s 			page 54


 1657      00000000 
 1657      00000000 
 1657      00000000 
 1657      00000000 
 1658              		.section	.bss.xActiveTimerList2,"aw",%nobits
 1659              		.align	2
 1660              		.set	.LANCHOR4,. + 0
 1663              	xActiveTimerList2:
 1664 0000 00000000 		.space	20
 1664      00000000 
 1664      00000000 
 1664      00000000 
 1664      00000000 
 1665              		.section	.bss.xStaticTimerQueue.5524,"aw",%nobits
 1666              		.align	2
 1667              		.set	.LANCHOR5,. + 0
 1670              	xStaticTimerQueue.5524:
 1671 0000 00000000 		.space	72
 1671      00000000 
 1671      00000000 
 1671      00000000 
 1671      00000000 
 1672              		.section	.rodata.str1.4,"aMS",%progbits,1
 1673              		.align	2
 1674              	.LC0:
 1675 0000 546D7251 		.ascii	"TmrQ\000"
 1675      00
 1676 0005 000000   		.space	3
 1677              	.LC1:
 1678 0008 546D7220 		.ascii	"Tmr Svc\000"
 1678      53766300 
 1679              		.section	.bss.xLastTime.5476,"aw",%nobits
 1680              		.align	2
 1681              		.set	.LANCHOR8,. + 0
 1684              	xLastTime.5476:
 1685 0000 00000000 		.space	4
 1686              		.section	.bss.xTimerQueue,"aw",%nobits
 1687              		.align	2
 1688              		.set	.LANCHOR2,. + 0
 1691              	xTimerQueue:
 1692 0000 00000000 		.space	4
 1693              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 1694              		.align	2
 1695              		.set	.LANCHOR1,. + 0
 1698              	pxOverflowTimerList:
 1699 0000 00000000 		.space	4
 1700              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 1701              		.align	2
 1702              		.set	.LANCHOR7,. + 0
 1705              	xTimerTaskHandle:
 1706 0000 00000000 		.space	4
 1707              		.section	.bss.ucStaticTimerQueueStorage.5525,"aw",%nobits
 1708              		.align	2
 1709              		.set	.LANCHOR6,. + 0
 1712              	ucStaticTimerQueueStorage.5525:
 1713 0000 00000000 		.space	120
 1713      00000000 
ARM GAS  /tmp/ccZ4zIPa.s 			page 55


 1713      00000000 
 1713      00000000 
 1713      00000000 
 1714              		.text
 1715              	.Letext0:
 1716              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/lib/gcc/arm-none-eabi/5.4.1/include/stdd
 1717              		.file 4 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 1718              		.file 5 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1719              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1720              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1721              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1722              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1723              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 1724              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccZ4zIPa.s 			page 56


DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
     /tmp/ccZ4zIPa.s:20     .text.prvGetNextExpireTime:00000000 $t
     /tmp/ccZ4zIPa.s:24     .text.prvGetNextExpireTime:00000000 prvGetNextExpireTime
     /tmp/ccZ4zIPa.s:57     .text.prvGetNextExpireTime:0000001c $d
     /tmp/ccZ4zIPa.s:62     .text.prvInsertTimerInActiveList:00000000 $t
     /tmp/ccZ4zIPa.s:66     .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
     /tmp/ccZ4zIPa.s:142    .text.prvInsertTimerInActiveList:00000040 $d
     /tmp/ccZ4zIPa.s:148    .text.prvCheckForValidListAndQueue:00000000 $t
     /tmp/ccZ4zIPa.s:152    .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
     /tmp/ccZ4zIPa.s:222    .text.prvCheckForValidListAndQueue:0000004c $d
     /tmp/ccZ4zIPa.s:234    .text.prvInitialiseNewTimer:00000000 $t
     /tmp/ccZ4zIPa.s:238    .text.prvInitialiseNewTimer:00000000 prvInitialiseNewTimer
     /tmp/ccZ4zIPa.s:308    .text.xTimerCreateTimerTask:00000000 $t
     /tmp/ccZ4zIPa.s:313    .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
     /tmp/ccZ4zIPa.s:411    .text.xTimerCreateTimerTask:00000060 $d
     /tmp/ccZ4zIPa.s:1269   .text.prvTimerTask:00000000 prvTimerTask
     /tmp/ccZ4zIPa.s:419    .text.xTimerCreate:00000000 $t
     /tmp/ccZ4zIPa.s:424    .text.xTimerCreate:00000000 xTimerCreate
     /tmp/ccZ4zIPa.s:481    .text.xTimerCreateStatic:00000000 $t
     /tmp/ccZ4zIPa.s:486    .text.xTimerCreateStatic:00000000 xTimerCreateStatic
     /tmp/ccZ4zIPa.s:577    .text.xTimerGenericCommand:00000000 $t
     /tmp/ccZ4zIPa.s:582    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
     /tmp/ccZ4zIPa.s:690    .text.xTimerGenericCommand:00000068 $d
     /tmp/ccZ4zIPa.s:695    .text.prvSwitchTimerLists:00000000 $t
     /tmp/ccZ4zIPa.s:699    .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
     /tmp/ccZ4zIPa.s:814    .text.prvSwitchTimerLists:00000074 $d
     /tmp/ccZ4zIPa.s:820    .text.prvSampleTimeNow:00000000 $t
     /tmp/ccZ4zIPa.s:824    .text.prvSampleTimeNow:00000000 prvSampleTimeNow
     /tmp/ccZ4zIPa.s:873    .text.prvSampleTimeNow:00000028 $d
     /tmp/ccZ4zIPa.s:878    .text.prvProcessExpiredTimer:00000000 $t
     /tmp/ccZ4zIPa.s:882    .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
     /tmp/ccZ4zIPa.s:970    .text.prvProcessExpiredTimer:00000058 $d
     /tmp/ccZ4zIPa.s:975    .text.prvProcessTimerOrBlockTask:00000000 $t
     /tmp/ccZ4zIPa.s:979    .text.prvProcessTimerOrBlockTask:00000000 prvProcessTimerOrBlockTask
     /tmp/ccZ4zIPa.s:1078   .text.prvProcessTimerOrBlockTask:00000068 $d
     /tmp/ccZ4zIPa.s:1085   .text.prvProcessReceivedCommands:00000000 $t
     /tmp/ccZ4zIPa.s:1089   .text.prvProcessReceivedCommands:00000000 prvProcessReceivedCommands
     /tmp/ccZ4zIPa.s:1132   .text.prvProcessReceivedCommands:00000028 $d
     /tmp/ccZ4zIPa.s:1142   .text.prvProcessReceivedCommands:00000032 $t
     /tmp/ccZ4zIPa.s:1260   .text.prvProcessReceivedCommands:000000c0 $d
     /tmp/ccZ4zIPa.s:1265   .text.prvTimerTask:00000000 $t
     /tmp/ccZ4zIPa.s:1301   .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
     /tmp/ccZ4zIPa.s:1306   .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
     /tmp/ccZ4zIPa.s:1341   .text.xTimerGetTimerDaemonTaskHandle:0000001c $d
     /tmp/ccZ4zIPa.s:1346   .text.xTimerGetPeriod:00000000 $t
     /tmp/ccZ4zIPa.s:1351   .text.xTimerGetPeriod:00000000 xTimerGetPeriod
     /tmp/ccZ4zIPa.s:1388   .text.xTimerGetExpiryTime:00000000 $t
     /tmp/ccZ4zIPa.s:1393   .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
     /tmp/ccZ4zIPa.s:1431   .text.pcTimerGetName:00000000 $t
     /tmp/ccZ4zIPa.s:1436   .text.pcTimerGetName:00000000 pcTimerGetName
     /tmp/ccZ4zIPa.s:1473   .text.xTimerIsTimerActive:00000000 $t
     /tmp/ccZ4zIPa.s:1478   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
     /tmp/ccZ4zIPa.s:1533   .text.pvTimerGetTimerID:00000000 $t
     /tmp/ccZ4zIPa.s:1538   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
     /tmp/ccZ4zIPa.s:1589   .text.vTimerSetTimerID:00000000 $t
     /tmp/ccZ4zIPa.s:1594   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
ARM GAS  /tmp/ccZ4zIPa.s 			page 57


     /tmp/ccZ4zIPa.s:1645   .bss.pxCurrentTimerList:00000000 $d
     /tmp/ccZ4zIPa.s:1649   .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
     /tmp/ccZ4zIPa.s:1652   .bss.xActiveTimerList1:00000000 $d
     /tmp/ccZ4zIPa.s:1656   .bss.xActiveTimerList1:00000000 xActiveTimerList1
     /tmp/ccZ4zIPa.s:1659   .bss.xActiveTimerList2:00000000 $d
     /tmp/ccZ4zIPa.s:1663   .bss.xActiveTimerList2:00000000 xActiveTimerList2
     /tmp/ccZ4zIPa.s:1666   .bss.xStaticTimerQueue.5524:00000000 $d
     /tmp/ccZ4zIPa.s:1670   .bss.xStaticTimerQueue.5524:00000000 xStaticTimerQueue.5524
     /tmp/ccZ4zIPa.s:1673   .rodata.str1.4:00000000 $d
     /tmp/ccZ4zIPa.s:1680   .bss.xLastTime.5476:00000000 $d
     /tmp/ccZ4zIPa.s:1684   .bss.xLastTime.5476:00000000 xLastTime.5476
     /tmp/ccZ4zIPa.s:1687   .bss.xTimerQueue:00000000 $d
     /tmp/ccZ4zIPa.s:1691   .bss.xTimerQueue:00000000 xTimerQueue
     /tmp/ccZ4zIPa.s:1694   .bss.pxOverflowTimerList:00000000 $d
     /tmp/ccZ4zIPa.s:1698   .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
     /tmp/ccZ4zIPa.s:1701   .bss.xTimerTaskHandle:00000000 $d
     /tmp/ccZ4zIPa.s:1705   .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
     /tmp/ccZ4zIPa.s:1708   .bss.ucStaticTimerQueueStorage.5525:00000000 $d
     /tmp/ccZ4zIPa.s:1712   .bss.ucStaticTimerQueueStorage.5525:00000000 ucStaticTimerQueueStorage.5525
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vListInsert
vPortEnterCritical
vListInitialise
xQueueGenericCreateStatic
vQueueAddToRegistry
vPortExitCritical
vListInitialiseItem
vApplicationGetTimerTaskMemory
xTaskCreateStatic
pvPortMalloc
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
xTaskResumeAll
vQueueWaitForMessageRestricted
vPortFree
xQueueGenericReceive
