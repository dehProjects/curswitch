ARM GAS  /tmp/ccmvlBMJ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"freertos.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  20              		.align	2
  21              		.weak	vApplicationStackOverflowHook
  22              		.thumb
  23              		.thumb_func
  25              	vApplicationStackOverflowHook:
  26              	.LFB69:
  27              		.file 1 "Src/freertos.c"
   1:Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Src/freertos.c **** /**
   3:Src/freertos.c ****   ******************************************************************************
   4:Src/freertos.c ****   * File Name          : freertos.c
   5:Src/freertos.c ****   * Description        : Code for freertos applications
   6:Src/freertos.c ****   ******************************************************************************
   7:Src/freertos.c ****   * This notice applies to any and all portions of this file
   8:Src/freertos.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/freertos.c ****   * USER CODE END. Other portions of this file, whether 
  10:Src/freertos.c ****   * inserted by the user or by software development tools
  11:Src/freertos.c ****   * are owned by their respective copyright owners.
  12:Src/freertos.c ****   *
  13:Src/freertos.c ****   * Copyright (c) 2019 STMicroelectronics International N.V. 
  14:Src/freertos.c ****   * All rights reserved.
  15:Src/freertos.c ****   *
  16:Src/freertos.c ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/freertos.c ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/freertos.c ****   *
  19:Src/freertos.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/freertos.c ****   *    this list of conditions and the following disclaimer.
  21:Src/freertos.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/freertos.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/freertos.c ****   *    and/or other materials provided with the distribution.
  24:Src/freertos.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/freertos.c ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/freertos.c ****   *    derived from this software without specific written permission.
  27:Src/freertos.c ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/freertos.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/freertos.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/freertos.c ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/freertos.c ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/ccmvlBMJ.s 			page 2


  32:Src/freertos.c ****   *    this license. 
  33:Src/freertos.c ****   *
  34:Src/freertos.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/freertos.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/freertos.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/freertos.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/freertos.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/freertos.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/freertos.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/freertos.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/freertos.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/freertos.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/freertos.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/freertos.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/freertos.c ****   *
  47:Src/freertos.c ****   ******************************************************************************
  48:Src/freertos.c ****   */
  49:Src/freertos.c **** /* USER CODE END Header */
  50:Src/freertos.c **** 
  51:Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  52:Src/freertos.c **** #include "FreeRTOS.h"
  53:Src/freertos.c **** #include "task.h"
  54:Src/freertos.c **** #include "main.h"
  55:Src/freertos.c **** 
  56:Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  57:Src/freertos.c **** /* USER CODE BEGIN Includes */     
  58:Src/freertos.c **** 
  59:Src/freertos.c **** /* USER CODE END Includes */
  60:Src/freertos.c **** 
  61:Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  62:Src/freertos.c **** /* USER CODE BEGIN PTD */
  63:Src/freertos.c **** 
  64:Src/freertos.c **** /* USER CODE END PTD */
  65:Src/freertos.c **** 
  66:Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  67:Src/freertos.c **** /* USER CODE BEGIN PD */
  68:Src/freertos.c **** 
  69:Src/freertos.c **** /* USER CODE END PD */
  70:Src/freertos.c **** 
  71:Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  72:Src/freertos.c **** /* USER CODE BEGIN PM */
  73:Src/freertos.c **** 
  74:Src/freertos.c **** /* USER CODE END PM */
  75:Src/freertos.c **** 
  76:Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  77:Src/freertos.c **** /* USER CODE BEGIN Variables */
  78:Src/freertos.c **** 
  79:Src/freertos.c **** /* USER CODE END Variables */
  80:Src/freertos.c **** 
  81:Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  82:Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  83:Src/freertos.c ****    
  84:Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  85:Src/freertos.c **** 
  86:Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  87:Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  88:Src/freertos.c **** 
ARM GAS  /tmp/ccmvlBMJ.s 			page 3


  89:Src/freertos.c **** /* GetTimerTaskMemory prototype (linked to static allocation support) */
  90:Src/freertos.c **** void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
  91:Src/freertos.c **** 
  92:Src/freertos.c **** /* Hook prototypes */
  93:Src/freertos.c **** void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
  94:Src/freertos.c **** 
  95:Src/freertos.c **** /* USER CODE BEGIN 4 */
  96:Src/freertos.c **** __weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
  97:Src/freertos.c **** {
  28              		.loc 1 97 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE69:
  38 0002 00BF     		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  39              		.align	2
  40              		.global	vApplicationGetIdleTaskMemory
  41              		.thumb
  42              		.thumb_func
  44              	vApplicationGetIdleTaskMemory:
  45              	.LFB70:
  98:Src/freertos.c ****    /* Run time stack overflow checking is performed if
  99:Src/freertos.c ****    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
 100:Src/freertos.c ****    called if a stack overflow is detected. */
 101:Src/freertos.c **** }
 102:Src/freertos.c **** /* USER CODE END 4 */
 103:Src/freertos.c **** 
 104:Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
 105:Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
 106:Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
 107:Src/freertos.c ****   
 108:Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
 109:Src/freertos.c **** {
  46              		.loc 1 109 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.LVL1:
 110:Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  52              		.loc 1 110 0
  53 0000 034B     		ldr	r3, .L3
  54 0002 0360     		str	r3, [r0]
 111:Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  55              		.loc 1 111 0
  56 0004 034B     		ldr	r3, .L3+4
  57 0006 0B60     		str	r3, [r1]
 112:Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  58              		.loc 1 112 0
  59 0008 8023     		movs	r3, #128
  60 000a 1360     		str	r3, [r2]
  61 000c 7047     		bx	lr
  62              	.L4:
ARM GAS  /tmp/ccmvlBMJ.s 			page 4


  63 000e 00BF     		.align	2
  64              	.L3:
  65 0010 00000000 		.word	.LANCHOR0
  66 0014 00000000 		.word	.LANCHOR1
  67              		.cfi_endproc
  68              	.LFE70:
  70              		.section	.text.vApplicationGetTimerTaskMemory,"ax",%progbits
  71              		.align	2
  72              		.global	vApplicationGetTimerTaskMemory
  73              		.thumb
  74              		.thumb_func
  76              	vApplicationGetTimerTaskMemory:
  77              	.LFB71:
 113:Src/freertos.c ****   /* place for user code */
 114:Src/freertos.c **** }                   
 115:Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
 116:Src/freertos.c **** 
 117:Src/freertos.c **** /* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
 118:Src/freertos.c **** static StaticTask_t xTimerTaskTCBBuffer;
 119:Src/freertos.c **** static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
 120:Src/freertos.c ****   
 121:Src/freertos.c **** void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
 122:Src/freertos.c **** {
  78              		.loc 1 122 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL2:
 123:Src/freertos.c ****   *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  84              		.loc 1 123 0
  85 0000 034B     		ldr	r3, .L6
  86 0002 0360     		str	r3, [r0]
 124:Src/freertos.c ****   *ppxTimerTaskStackBuffer = &xTimerStack[0];
  87              		.loc 1 124 0
  88 0004 034B     		ldr	r3, .L6+4
  89 0006 0B60     		str	r3, [r1]
 125:Src/freertos.c ****   *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
  90              		.loc 1 125 0
  91 0008 4FF48073 		mov	r3, #256
  92 000c 1360     		str	r3, [r2]
  93 000e 7047     		bx	lr
  94              	.L7:
  95              		.align	2
  96              	.L6:
  97 0010 00000000 		.word	.LANCHOR2
  98 0014 00000000 		.word	.LANCHOR3
  99              		.cfi_endproc
 100              	.LFE71:
 102              		.section	.bss.xIdleStack,"aw",%nobits
 103              		.align	2
 104              		.set	.LANCHOR1,. + 0
 107              	xIdleStack:
 108 0000 00000000 		.space	512
 108      00000000 
 108      00000000 
 108      00000000 
ARM GAS  /tmp/ccmvlBMJ.s 			page 5


 108      00000000 
 109              		.section	.bss.xTimerStack,"aw",%nobits
 110              		.align	2
 111              		.set	.LANCHOR3,. + 0
 114              	xTimerStack:
 115 0000 00000000 		.space	1024
 115      00000000 
 115      00000000 
 115      00000000 
 115      00000000 
 116              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 117              		.align	2
 118              		.set	.LANCHOR0,. + 0
 121              	xIdleTaskTCBBuffer:
 122 0000 00000000 		.space	84
 122      00000000 
 122      00000000 
 122      00000000 
 122      00000000 
 123              		.section	.bss.xTimerTaskTCBBuffer,"aw",%nobits
 124              		.align	2
 125              		.set	.LANCHOR2,. + 0
 128              	xTimerTaskTCBBuffer:
 129 0000 00000000 		.space	84
 129      00000000 
 129      00000000 
 129      00000000 
 129      00000000 
 130              		.text
 131              	.Letext0:
 132              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 133              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 134              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 135              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 136              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 137              		.file 7 "Drivers/CMSIS/Include/core_cm3.h"
ARM GAS  /tmp/ccmvlBMJ.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
     /tmp/ccmvlBMJ.s:20     .text.vApplicationStackOverflowHook:00000000 $t
     /tmp/ccmvlBMJ.s:25     .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
     /tmp/ccmvlBMJ.s:39     .text.vApplicationGetIdleTaskMemory:00000000 $t
     /tmp/ccmvlBMJ.s:44     .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
     /tmp/ccmvlBMJ.s:65     .text.vApplicationGetIdleTaskMemory:00000010 $d
     /tmp/ccmvlBMJ.s:71     .text.vApplicationGetTimerTaskMemory:00000000 $t
     /tmp/ccmvlBMJ.s:76     .text.vApplicationGetTimerTaskMemory:00000000 vApplicationGetTimerTaskMemory
     /tmp/ccmvlBMJ.s:97     .text.vApplicationGetTimerTaskMemory:00000010 $d
     /tmp/ccmvlBMJ.s:103    .bss.xIdleStack:00000000 $d
     /tmp/ccmvlBMJ.s:107    .bss.xIdleStack:00000000 xIdleStack
     /tmp/ccmvlBMJ.s:110    .bss.xTimerStack:00000000 $d
     /tmp/ccmvlBMJ.s:114    .bss.xTimerStack:00000000 xTimerStack
     /tmp/ccmvlBMJ.s:117    .bss.xIdleTaskTCBBuffer:00000000 $d
     /tmp/ccmvlBMJ.s:121    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer
     /tmp/ccmvlBMJ.s:124    .bss.xTimerTaskTCBBuffer:00000000 $d
     /tmp/ccmvlBMJ.s:128    .bss.xTimerTaskTCBBuffer:00000000 xTimerTaskTCBBuffer
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
