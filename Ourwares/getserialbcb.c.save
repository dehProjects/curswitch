/******************************************************************************
* File Name          : getserialbcb.c
* Date First Issued  : 01/11/2019
* Description        : Get a buffer control block for SerialTaskSend use
*******************************************************************************/

#include <malloc.h>
#include "getserialbcb.h"

/* Reproduced for convenience from 'SerialTaskSend.h'
struct SERIALSENDTASKBCB
{
	UART_HandleTypeDef* phuart; // Pointer to 'MX uart handle
	osThreadId tskhandle;       // Task handle of originating task
	uint8_t	*pbuf;             // Pointer to byte buffer to be sent
	uint32_t notebit;           // Buffer notification bit
	uint16_t size;              // Number of bytes to be sent
};
*/
struct NOTEBITLIST
{
	struct NOTEBITLIST* pnext;
	UART_HandleTypeDef* phuart; // pointer to uart handle
	uint32_t* pnoteval;  // Pointer to task notification word
	uint32_t notebit;    // Notification bit for this BCB
};

static struct NOTEBITLIST* pnbl = NULL; // Pointer to first item in "notebitlist"

/* *************************************************************************
 * static struct SERIALSENDTASKBCB* setupbcb(UART_HandleTypeDef* phuart, uint32_t size, uint32_t notebit, uint32_t* pnoteval);
 * @brief	: Create a buffer control block (BCB) for serial sending
 * @param	: phuart = usart handle (pointer)
 * @param	: size = number of uint8_t bytes for this buffer
 * @param	: notebit = bit position for notification assigned to this buffer for this uart
 * @param	: pnoteval = Pointer to Task word that receives notification
 * @return	: pointer to BCB; NULL = failed
 * *************************************************************************/
static struct SERIALSENDTASKBCB* setupbcb(UART_HandleTypeDef* phuart, uint32_t size, uint32_t notebit, uint32_t* pnoteval)
{
	struct SERIALSENDTASKBCB* pbcb;
	uint8_t* pbuf;

	pbcb = (struct SERIALSENDTASKBCB*)calloc(size, sizeof(struct SERIALSENDTASKBCB));	
	if (pbcb == NULL) return NULL;
	pbuf = (uint8_t*)calloc(size, sizeof(uint8_t));	
	if (pbuf == NULL) return NULL;
	pbcb->phuart    = phuart;
	pbcb->tskhandle = xTaskGetCurrentTaskHandle();
	pbcb->pbuf      = pbuf;
	pbcb->notebit   = notebit;
	pbcb->size      = size;

	/* Set initial value for noteval in Task to show buffer available. */
	*pnoteval  |= notebit;

	return pbcb;
}

/* *************************************************************************
 * struct SERIALSENDTASKBCB* getserialbcb(UART_HandleTypeDef* phuart, uint32_t size, uint32_t* pnoteval);
 * @brief	: Create a buffer control block (BCB) for serial sending
 * @param	: phuart = usart handle (pointer)
 * @param	: size = number of uint8_t bytes for this buffer
 * @param	: pnoteval = Pointer to Task word that receives notification
 * @return	: pointer to BCB; NULL = failed
 * *************************************************************************/
/*
Construct a list of "struct NOTEBITLIST" items, for each different usart.

The items maintain the bit used by SerialTaskSend to notify the originating
task that the buffer has been sent and is available for reuse.
*/
struct SERIALSENDTASKBCB* getserialbcb(UART_HandleTypeDef* phuart, uint32_t size, uint32_t* pnoteval)
{
/* This MUST be called when a FreeRTOS task starts (but most likely before the endless
   loop begins).  

	To avoid problems of a time tick switching tasks in the middle of this routine the
   FreeRTOS interrupts are locked via "taskENTER_CRITICAL();".

   I suppose suspending the scheduler could be an alternative that would not lock
   interrupts--
	"void vTaskSuspendAll( void );"
	"BaseType_t xTaskResumeAll( void );"
*/

	taskENTER_CRITICAL();

	struct NOTEBITLIST* pnew = pnbl;
	struct NOTEBITLIST* pprev;

	struct SERIALSENDTASKBCB* pbcb;

	/* Check if a new uart on the list */
	if (pnew == NULL)
	{ // Here, this is the first instance in the list

		/* OTO setup  */
		pnew = (struct NOTEBITLIST*)calloc(1, sizeof(struct NOTEBITLIST));
		if (pnew == NULL) {taskEXIT_CRITICAL(); return NULL;} // Error
		pnew->pnext = pnew;    // Last in list points to self
		pnbl = pnew;           // Save pointer to first item on list

		/* Set up a bcb */		
		pbcb = setupbcb(phuart, size, pnew->notebit, pnoteval);	
		taskEXIT_CRITICAL(); 
		return pbcb;	// Pass bcb pointer back to caller
	}
	 // Here one or more uarts have had bcbs generated
	
	/* Check if this new bcb request is for an existing uart */
	pprev = pnbl;	// Point to first item on list
	do
	{
		if (pprev->phuart == phuart)
		{ // Here, this uart is already on the list. Assign another bcb  
			/* Set up a bcb */
			pbcb = setupbcb(phuart, size, pnew->notebit, pnoteval);	
			taskEXIT_CRITICAL(); 
			return pbcb;
		}
	} while (pprev != pprev->pnext);

	/* Here we ran to the end of the list without finding uart. */
	/* Here, not the oto first, but first time for this uart */
	pnew = (struct NOTEBITLIST*)calloc(1, sizeof(struct NOTEBITLIST));
	if (pnew == NULL) {taskEXIT_CRITICAL(); return NULL;}
	pnew->pnext = pnew;    // Last in list points to self
	pnew->notebit = 0x1;   // Bit assignment for first BCB notification.

	pprev->pnext = pnew; // Previous points to new
	pnew->pnext  = pnew;	// Last points to self

	/* Set up a bcb */	
	pbcb = setupbcb(phuart, size, pnew->notebit, pnoteval);

	taskEXIT_CRITICAL(); 
	return pbcb;
}

